; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\GamePackages\Client\Tools\Patcher2017\EterLib\GrpObjectInstance.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR4@@QAE@XZ				; D3DXVECTOR4::D3DXVECTOR4
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	?GetStartPoint@CRay@@QBEXPAUD3DXVECTOR3@@@Z	; CRay::GetStartPoint
PUBLIC	?GetDirection@CRay@@QBEXPAUD3DXVECTOR3@@PAM@Z	; CRay::GetDirection
PUBLIC	??0Vector3d@@QAE@XZ				; Vector3d::Vector3d
PUBLIC	??4Vector3d@@QAEAAV0@ABV0@@Z			; Vector3d::operator=
PUBLIC	?DistanceSq@Vector3d@@QBEMABV1@@Z		; Vector3d::DistanceSq
PUBLIC	?GetRadius@Sphere@@QBEMXZ			; Sphere::GetRadius
PUBLIC	?SetRadius@Sphere@@QAEXM@Z			; Sphere::SetRadius
PUBLIC	?HasSpherePackFlag@SpherePack@@QBE_NW4SpherePackFlag@@@Z ; SpherePack::HasSpherePackFlag
PUBLIC	?NewPos@SpherePack@@QAEXABVVector3d@@@Z		; SpherePack::NewPos
PUBLIC	?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z	; SpherePack::NewPosRadius
PUBLIC	?Unlink@SpherePack@@QAEXXZ			; SpherePack::Unlink
PUBLIC	?DistanceSquared@SpherePack@@QBEMPBV1@@Z	; SpherePack::DistanceSquared
PUBLIC	?ComputeBindingDistance@SpherePack@@QAEXPAV1@@Z	; SpherePack::ComputeBindingDistance
PUBLIC	?Instance@?$CSingleton@VCCullingManager@@@@SAAAVCCullingManager@@XZ ; CSingleton<CCullingManager>::Instance
PUBLIC	?MovementCollisionDynamicSphere@CBaseCollisionInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CBaseCollisionInstance::MovementCollisionDynamicSphere
PUBLIC	?CollisionDynamicSphere@CBaseCollisionInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CBaseCollisionInstance::CollisionDynamicSphere
PUBLIC	?GetCollisionMovementAdjust@CBaseCollisionInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CBaseCollisionInstance::GetCollisionMovementAdjust
PUBLIC	??0CGraphicObjectInstance@@QAE@XZ		; CGraphicObjectInstance::CGraphicObjectInstance
PUBLIC	??1CGraphicObjectInstance@@UAE@XZ		; CGraphicObjectInstance::~CGraphicObjectInstance
PUBLIC	?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
PUBLIC	?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetScale
PUBLIC	?GetRotation@CGraphicObjectInstance@@QAEMXZ	; CGraphicObjectInstance::GetRotation
PUBLIC	?GetYaw@CGraphicObjectInstance@@QAEMXZ		; CGraphicObjectInstance::GetYaw
PUBLIC	?GetPitch@CGraphicObjectInstance@@QAEMXZ	; CGraphicObjectInstance::GetPitch
PUBLIC	?GetRoll@CGraphicObjectInstance@@QAEMXZ		; CGraphicObjectInstance::GetRoll
PUBLIC	?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z	; CGraphicObjectInstance::SetPosition
PUBLIC	?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z ; CGraphicObjectInstance::SetPosition
PUBLIC	?SetScale@CGraphicObjectInstance@@QAEXMMM@Z	; CGraphicObjectInstance::SetScale
PUBLIC	?SetRotation@CGraphicObjectInstance@@QAEXM@Z	; CGraphicObjectInstance::SetRotation
PUBLIC	?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z	; CGraphicObjectInstance::SetRotation
PUBLIC	?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z ; CGraphicObjectInstance::SetRotationQuaternion
PUBLIC	?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z ; CGraphicObjectInstance::SetRotationMatrix
PUBLIC	?Clear@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Clear
PUBLIC	?Update@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Update
PUBLIC	?Render@CGraphicObjectInstance@@QAE_NXZ		; CGraphicObjectInstance::Render
PUBLIC	?BlendRender@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::BlendRender
PUBLIC	?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::RenderToShadowMap
PUBLIC	?RenderShadow@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::RenderShadow
PUBLIC	?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::RenderPCBlocker
PUBLIC	?Deform@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Deform
PUBLIC	?Transform@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::Transform
PUBLIC	?Show@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Show
PUBLIC	?Hide@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Hide
PUBLIC	?isShow@CGraphicObjectInstance@@QAE_NXZ		; CGraphicObjectInstance::isShow
PUBLIC	?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z ; CGraphicObjectInstance::isIntersect
PUBLIC	?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z ; CGraphicObjectInstance::GetWTBBoxVertex
PUBLIC	?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ; CGraphicObjectInstance::GetTransform
PUBLIC	?SetPortal@CGraphicObjectInstance@@QAEXKH@Z	; CGraphicObjectInstance::SetPortal
PUBLIC	?GetPortal@CGraphicObjectInstance@@QAEHK@Z	; CGraphicObjectInstance::GetPortal
PUBLIC	?Initialize@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::Initialize
PUBLIC	?OnInitialize@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnInitialize
PUBLIC	?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::UpdateBoundingSphere
PUBLIC	?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::RegisterBoundingSphere
PUBLIC	?OnClear@CGraphicObjectInstance@@UAEXXZ		; CGraphicObjectInstance::OnClear
PUBLIC	?OnUpdate@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnUpdate
PUBLIC	?OnDeform@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnDeform
PUBLIC	?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CGraphicObjectInstance::AddCollision
PUBLIC	?ClearCollision@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::ClearCollision
PUBLIC	?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::CollisionDynamicSphere
PUBLIC	?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::MovementCollisionDynamicSphere
PUBLIC	?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::GetCollisionMovementAdjust
PUBLIC	?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ; CGraphicObjectInstance::UpdateCollisionData
PUBLIC	??0?$allocator@PAVCBaseCollisionInstance@@@std@@QAE@XZ ; std::allocator<CBaseCollisionInstance *>::allocator<CBaseCollisionInstance *>
PUBLIC	?deallocate@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEXPAPAVCBaseCollisionInstance@@I@Z ; std::allocator<CBaseCollisionInstance *>::deallocate
PUBLIC	?allocate@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEPAPAVCBaseCollisionInstance@@I@Z ; std::allocator<CBaseCollisionInstance *>::allocate
PUBLIC	?max_size@?$allocator@PAVCBaseCollisionInstance@@@std@@QBEIXZ ; std::allocator<CBaseCollisionInstance *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@SAIABV?$allocator@PAVCBaseCollisionInstance@@@2@@Z ; std::allocator_traits<std::allocator<CBaseCollisionInstance *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEPAPAVCBaseCollisionInstance@@I@Z ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXPAPAVCBaseCollisionInstance@@I@Z ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> >::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCBaseCollisionInstance@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> > >::_Vector_alloc<0,std::_Vec_base_types<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> > >::_Getal
PUBLIC	??0?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
PUBLIC	?push_back@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEX$$QAPAVCBaseCollisionInstance@@@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::push_back
PUBLIC	??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
PUBLIC	?capacity@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Unused_capacity
PUBLIC	?begin@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::begin
PUBLIC	?begin@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::begin
PUBLIC	?end@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::end
PUBLIC	?end@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::end
PUBLIC	?size@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::size
PUBLIC	?max_size@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::max_size
PUBLIC	??A?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEAAPAVCBaseCollisionInstance@@I@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::operator[]
PUBLIC	?clear@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXXZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::clear
PUBLIC	?_Destroy@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXPAPAVCBaseCollisionInstance@@0@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEII@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBE_NPBQAVCBaseCollisionInstance@@@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXXZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Tidy
PUBLIC	?_Xlen@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEXXZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEXPAPAVCBaseCollisionInstance@@0@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Orphan_range
PUBLIC	?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ; CGraphicObjectInstance::GetCollisionInstanceCount
PUBLIC	?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z ; CGraphicObjectInstance::GetCollisionInstanceData
PUBLIC	?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ; CGraphicObjectInstance::SetHeightInstance
PUBLIC	?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearHeightInstance
PUBLIC	?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ; CGraphicObjectInstance::UpdateHeightInstance
PUBLIC	?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ	; CGraphicObjectInstance::IsObjectHeight
PUBLIC	?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z ; CGraphicObjectInstance::GetObjectHeight
PUBLIC	??_GCGraphicObjectInstance@@UAEPAXI@Z		; CGraphicObjectInstance::`scalar deleting destructor'
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@PAPAVCBaseCollisionInstance@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEABQAVCBaseCollisionInstance@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Compat
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@PAPAVCBaseCollisionInstance@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEAAPAVCBaseCollisionInstance@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator*
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator++
PUBLIC	??$addressof@PAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@AAPAV1@@Z ; std::addressof<CBaseCollisionInstance *>
PUBLIC	??$forward@PAVCBaseCollisionInstance@@@std@@YA$$QAPAVCBaseCollisionInstance@@AAPAV1@@Z ; std::forward<CBaseCollisionInstance *>
PUBLIC	??$construct@PAVCBaseCollisionInstance@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXPAPAVCBaseCollisionInstance@@$$QAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::construct<CBaseCollisionInstance *,CBaseCollisionInstance *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAXPAPAVCBaseCollisionInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >
PUBLIC	??$_Umove@PAPAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEPAPAVCBaseCollisionInstance@@PAPAV2@00@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Umove<CBaseCollisionInstance * *>
PUBLIC	??$_Allocate@PAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@IPAPAV1@@Z ; std::_Allocate<CBaseCollisionInstance *>
PUBLIC	??$construct@PAVCBaseCollisionInstance@@PAV1@@?$allocator_traits@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@SAXAAV?$allocator@PAVCBaseCollisionInstance@@@1@PAPAVCBaseCollisionInstance@@$$QAPAV3@@Z ; std::allocator_traits<std::allocator<CBaseCollisionInstance *> >::construct<CBaseCollisionInstance *,CBaseCollisionInstance *>
PUBLIC	??$_Ptr_cat@PAVCBaseCollisionInstance@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCBaseCollisionInstance@@0@Z ; std::_Ptr_cat<CBaseCollisionInstance *,CBaseCollisionInstance *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAXPAPAVCBaseCollisionInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >
PUBLIC	??$_Uninitialized_move@PAPAVCBaseCollisionInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z ; std::_Uninitialized_move<CBaseCollisionInstance * *,CBaseCollisionInstance * *,std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >
PUBLIC	??$construct@PAVCBaseCollisionInstance@@PAV1@@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEXPAPAVCBaseCollisionInstance@@$$QAPAV2@@Z ; std::allocator<CBaseCollisionInstance *>::construct<CBaseCollisionInstance *,CBaseCollisionInstance *>
PUBLIC	??$_Unchecked@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@@Z ; std::_Unchecked<CBaseCollisionInstance * *>
PUBLIC	??$_Uninit_move@PAPAVCBaseCollisionInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z ; std::_Uninit_move<CBaseCollisionInstance * *,CBaseCollisionInstance * *,std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >
PUBLIC	??$_Rechecked@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAAAPAPAVCBaseCollisionInstance@@AAPAPAV1@PAPAV1@@Z ; std::_Rechecked<CBaseCollisionInstance * *,CBaseCollisionInstance * *>
PUBLIC	??$_Val_type@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@@Z ; std::_Val_type<CBaseCollisionInstance * *>
PUBLIC	??$_Uninit_move@PAVCBaseCollisionInstance@@PAV1@PAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CBaseCollisionInstance *,CBaseCollisionInstance *,CBaseCollisionInstance *>
PUBLIC	?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
PUBLIC	??_7CGraphicObjectInstance@@6B@			; CGraphicObjectInstance::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CGraphicObjectInstance@@6B@		; CGraphicObjectInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicObjectInstance@@@8		; CGraphicObjectInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicObjectInstance@@8		; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3c8efa35
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memmove:PROC
EXTRN	_D3DXMatrixRotationZ@8:PROC
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	_D3DXMatrixRotationYawPitchRoll@16:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??0CGraphicCollisionObject@@QAE@XZ:PROC		; CGraphicCollisionObject::CGraphicCollisionObject
EXTRN	??1CGraphicCollisionObject@@UAE@XZ:PROC		; CGraphicCollisionObject::~CGraphicCollisionObject
EXTRN	?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z:PROC ; CGraphicCollisionObject::IntersectTriangle
EXTRN	?LostChild@SpherePack@@QAEXPAV1@@Z:PROC		; SpherePack::LostChild
EXTRN	?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z:PROC ; SpherePackFactory::AddIntegrate
EXTRN	?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z:PROC ; SpherePackFactory::AddRecompute
EXTRN	?Register@CCullingManager@@QAEPAVSpherePack@@PAVCGraphicObjectInstance@@@Z:PROC ; CCullingManager::Register
EXTRN	?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z:PROC ; CCullingManager::Unregister
EXTRN	?Destroy@CBaseCollisionInstance@@QAEXXZ:PROC	; CBaseCollisionInstance::Destroy
EXTRN	?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z:PROC ; CBaseCollisionInstance::BuildCollisionInstance
EXTRN	??_ECGraphicObjectInstance@@UAEPAXI@Z:PROC	; CGraphicObjectInstance::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A DD 01H DUP (?) ; CSingleton<CCullingManager>::ms_singleton
_BSS	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$r	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicObjectInstance@@8 DD FLAT:??_R0?AVCGraphicObjectInstance@@@8 ; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R2CGraphicObjectInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicObjectInstance@@8 ; CGraphicObjectInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R3CGraphicObjectInstance@@8 DD 00H			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicObjectInstance@@@8
data$r	SEGMENT
??_R0?AVCGraphicObjectInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicObjectInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicObjectInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R4CGraphicObjectInstance@@6B@
rdata$r	SEGMENT
??_R4CGraphicObjectInstance@@6B@ DD 00H			; CGraphicObjectInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicObjectInstance@@@8
	DD	FLAT:??_R3CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicObjectInstance@@6B@
CONST	SEGMENT
??_7CGraphicObjectInstance@@6B@ DD FLAT:??_R4CGraphicObjectInstance@@6B@ ; CGraphicObjectInstance::`vftable'
	DD	FLAT:??_ECGraphicObjectInstance@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?OnInitialize@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?OnClear@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnUpdate@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnDeform@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CGraphicObjectInstance@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CGraphicObjectInstance@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CGraphicObjectInstance@@UAE@XZ$1
__ehfuncinfo$??1CGraphicObjectInstance@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CGraphicObjectInstance@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphicObjectInstance@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$1
__ehfuncinfo$??0CGraphicObjectInstance@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CGraphicObjectInstance@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCBaseCollisionInstance@@PAV1@PAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCBaseCollisionInstance@@PAV1@PAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CBaseCollisionInstance *,CBaseCollisionInstance *,CBaseCollisionInstance *>, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	_DEBUG_RANGE(_First, _Last);
; 471  : 	_DEBUG_POINTER(_Dest);
; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 475  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAVCBaseCollisionInstance@@PAV1@PAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CBaseCollisionInstance *,CBaseCollisionInstance *,CBaseCollisionInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@@Z PROC ; std::_Val_type<CBaseCollisionInstance * *>, COMDAT

; 646  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 647  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@@Z ENDP ; std::_Val_type<CBaseCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAAAPAPAVCBaseCollisionInstance@@AAPAPAV1@PAPAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAAAPAPAVCBaseCollisionInstance@@AAPAPAV1@PAPAV1@@Z PROC ; std::_Rechecked<CBaseCollisionInstance * *,CBaseCollisionInstance * *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 	return (_Dest);
; 291  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAAAPAPAVCBaseCollisionInstance@@AAPAPAV1@PAPAV1@@Z ENDP ; std::_Rechecked<CBaseCollisionInstance * *,CBaseCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAPAVCBaseCollisionInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAPAVCBaseCollisionInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z PROC ; std::_Uninit_move<CBaseCollisionInstance * *,CBaseCollisionInstance * *,std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >, COMDAT

; 482  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 483  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 485  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAPAVCBaseCollisionInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z ENDP ; std::_Uninit_move<CBaseCollisionInstance * *,CBaseCollisionInstance * *,std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@@Z PROC ; std::_Unchecked<CBaseCollisionInstance * *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 282  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@@Z ENDP ; std::_Unchecked<CBaseCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCBaseCollisionInstance@@PAV1@@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEXPAPAVCBaseCollisionInstance@@$$QAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCBaseCollisionInstance@@PAV1@@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEXPAPAVCBaseCollisionInstance@@$$QAPAV2@@Z PROC ; std::allocator<CBaseCollisionInstance *>::construct<CBaseCollisionInstance *,CBaseCollisionInstance *>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 601  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCBaseCollisionInstance@@PAV1@@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEXPAPAVCBaseCollisionInstance@@$$QAPAV2@@Z ENDP ; std::allocator<CBaseCollisionInstance *>::construct<CBaseCollisionInstance *,CBaseCollisionInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCBaseCollisionInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCBaseCollisionInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CBaseCollisionInstance * *,CBaseCollisionInstance * *,std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >, COMDAT

; 492  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 493  : 	return (_Rechecked(_Dest,
; 494  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 495  : 			_Unchecked(_Dest), _Al)));
; 496  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_move@PAPAVCBaseCollisionInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CBaseCollisionInstance * *,CBaseCollisionInstance * *,std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAXPAPAVCBaseCollisionInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAXPAPAVCBaseCollisionInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >, COMDAT

; 90   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAXPAPAVCBaseCollisionInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCBaseCollisionInstance@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCBaseCollisionInstance@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCBaseCollisionInstance@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCBaseCollisionInstance@@0@Z PROC ; std::_Ptr_cat<CBaseCollisionInstance *,CBaseCollisionInstance *>, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAVCBaseCollisionInstance@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCBaseCollisionInstance@@0@Z ENDP ; std::_Ptr_cat<CBaseCollisionInstance *,CBaseCollisionInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCBaseCollisionInstance@@PAV1@@?$allocator_traits@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@SAXAAV?$allocator@PAVCBaseCollisionInstance@@@1@PAPAVCBaseCollisionInstance@@$$QAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVCBaseCollisionInstance@@PAV1@@?$allocator_traits@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@SAXAAV?$allocator@PAVCBaseCollisionInstance@@@1@PAPAVCBaseCollisionInstance@@$$QAPAV3@@Z PROC ; std::allocator_traits<std::allocator<CBaseCollisionInstance *> >::construct<CBaseCollisionInstance *,CBaseCollisionInstance *>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAVCBaseCollisionInstance@@PAV1@@?$allocator_traits@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@SAXAAV?$allocator@PAVCBaseCollisionInstance@@@1@PAPAVCBaseCollisionInstance@@$$QAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<CBaseCollisionInstance *> >::construct<CBaseCollisionInstance *,CBaseCollisionInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@IPAPAV1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@IPAPAV1@@Z PROC ; std::_Allocate<CBaseCollisionInstance *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@PAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@IPAPAV1@@Z ENDP ; std::_Allocate<CBaseCollisionInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEPAPAVCBaseCollisionInstance@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEPAPAVCBaseCollisionInstance@@PAPAV2@00@Z PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Umove<CBaseCollisionInstance * *>, COMDAT
; _this$ = ecx

; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1649 : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEPAPAVCBaseCollisionInstance@@PAPAV2@00@Z ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Umove<CBaseCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAXPAPAVCBaseCollisionInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAXPAPAVCBaseCollisionInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@YAXPAPAVCBaseCollisionInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCBaseCollisionInstance@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXPAPAVCBaseCollisionInstance@@$$QAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCBaseCollisionInstance@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXPAPAVCBaseCollisionInstance@@$$QAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::construct<CBaseCollisionInstance *,CBaseCollisionInstance *>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCBaseCollisionInstance@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXPAPAVCBaseCollisionInstance@@$$QAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::construct<CBaseCollisionInstance *,CBaseCollisionInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@PAVCBaseCollisionInstance@@@std@@YA$$QAPAVCBaseCollisionInstance@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAVCBaseCollisionInstance@@@std@@YA$$QAPAVCBaseCollisionInstance@@AAPAV1@@Z PROC ; std::forward<CBaseCollisionInstance *>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAVCBaseCollisionInstance@@@std@@YA$$QAPAVCBaseCollisionInstance@@AAPAV1@@Z ENDP ; std::forward<CBaseCollisionInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
;	COMDAT ??$addressof@PAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@AAPAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@AAPAV1@@Z PROC ; std::addressof<CBaseCollisionInstance *>, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@AAPAV1@@Z ENDP ; std::addressof<CBaseCollisionInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 04	 add	 DWORD PTR [ecx], 4

; 334  : 		++*(_Mybase *)this;
; 335  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 336  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEAAPAVCBaseCollisionInstance@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEAAPAVCBaseCollisionInstance@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator*, COMDAT
; _this$ = ecx

; 324  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 325  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEAAPAVCBaseCollisionInstance@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@PAPAVCBaseCollisionInstance@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@PAPAVCBaseCollisionInstance@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >, COMDAT
; _this$ = ecx

; 306  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 307  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@PAPAVCBaseCollisionInstance@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >, COMDAT
; _this$ = ecx

; 42   : 		{	// construct with null pointer

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 301  : 		{	// construct with null vector pointer
; 302  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Compat, COMDAT
; _this$ = ecx

; 255  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator!=, COMDAT
; _this$ = ecx

; 209  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 210  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 210  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 211  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 206  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 04	 add	 DWORD PTR [ecx], 4

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEABQAVCBaseCollisionInstance@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEABQAVCBaseCollisionInstance@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBEABQAVCBaseCollisionInstance@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@PAPAVCBaseCollisionInstance@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@PAPAVCBaseCollisionInstance@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@PAPAVCBaseCollisionInstance@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >, COMDAT
; _this$ = ecx

; 42   : 		{	// construct with null pointer

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 43   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicObjectInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicObjectInstance@@UAEPAXI@Z PROC		; CGraphicObjectInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCGraphicObjectInstance@@UAEPAXI@Z ENDP		; CGraphicObjectInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z
_TEXT	SEGMENT
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_pfHeight$ = 16						; size = 4
?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z PROC ; CGraphicObjectInstance::GetObjectHeight, COMDAT
; _this$ = ecx

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  : 	if (!m_pHeightAttributeInstance)

  00003	83 b9 78 01 00
	00 00		 cmp	 DWORD PTR [ecx+376], 0
  0000a	75 06		 jne	 SHORT $LN1@GetObjectH

; 416  : 		return false;

  0000c	32 c0		 xor	 al, al

; 419  : }

  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
$LN1@GetObjectH:

; 417  : 
; 418  : 	return OnGetObjectHeight(fX, fY, pfHeight);

  00012	ff 75 10	 push	 DWORD PTR _pfHeight$[ebp]
  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  0001c	83 ec 08	 sub	 esp, 8
  0001f	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00022	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fX$[ebp]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	ff d0		 call	 eax

; 419  : }

  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z ENDP ; CGraphicObjectInstance::GetObjectHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ
_TEXT	SEGMENT
?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ PROC	; CGraphicObjectInstance::IsObjectHeight, COMDAT
; _this$ = ecx

; 407  : 	if (m_pHeightAttributeInstance)

  00000	83 b9 78 01 00
	00 00		 cmp	 DWORD PTR [ecx+376], 0
  00007	0f 95 c0	 setne	 al

; 408  : 		return true;
; 409  : 
; 410  : 	return false;
; 411  : }

  0000a	c3		 ret	 0
?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ ENDP	; CGraphicObjectInstance::IsObjectHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pAttributeInstance$ = 8				; size = 4
?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z PROC ; CGraphicObjectInstance::UpdateHeightInstance, COMDAT
; _this$ = ecx

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 401  : 	ClearHeightInstance();

  00006	e8 00 00 00 00	 call	 ?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearHeightInstance

; 402  : 	OnUpdateHeighInstance(pAttributeInstance);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 75 08	 push	 DWORD PTR _pAttributeInstance$[ebp]
  00012	ff 50 34	 call	 DWORD PTR [eax+52]
  00015	5e		 pop	 esi

; 403  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ENDP ; CGraphicObjectInstance::UpdateHeightInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ PROC ; CGraphicObjectInstance::ClearHeightInstance, COMDAT
; _this$ = ecx

; 396  : 	m_pHeightAttributeInstance = NULL;

  00000	c7 81 78 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+376], 0

; 397  : }

  0000a	c3		 ret	 0
?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ENDP ; CGraphicObjectInstance::ClearHeightInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pAttributeInstance$ = 8				; size = 4
?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z PROC ; CGraphicObjectInstance::SetHeightInstance, COMDAT
; _this$ = ecx

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 391  : 	m_pHeightAttributeInstance = pAttributeInstance;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pAttributeInstance$[ebp]
  00006	89 81 78 01 00
	00		 mov	 DWORD PTR [ecx+376], eax

; 392  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ENDP ; CGraphicObjectInstance::SetHeightInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z PROC ; CGraphicObjectInstance::GetCollisionInstanceData, COMDAT
; _this$ = ecx

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00003	8b 81 70 01 00
	00		 mov	 eax, DWORD PTR [ecx+368]
  00009	2b 81 6c 01 00
	00		 sub	 eax, DWORD PTR [ecx+364]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 379  : 	if (dwIndex>m_StaticCollisionInstanceVector.size())

  0000f	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00012	c1 f8 02	 sar	 eax, 2
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 379  : 	if (dwIndex>m_StaticCollisionInstanceVector.size())

  00015	3b d0		 cmp	 edx, eax
  00017	76 06		 jbe	 SHORT $LN1@GetCollisi

; 380  : 	{
; 381  : 		return 0;

  00019	33 c0		 xor	 eax, eax

; 384  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN1@GetCollisi:

; 382  : 	}
; 383  : 	return m_StaticCollisionInstanceVector[dwIndex];

  0001f	8b 81 6c 01 00
	00		 mov	 eax, DWORD PTR [ecx+364]
  00025	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 384  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z ENDP ; CGraphicObjectInstance::GetCollisionInstanceData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ
_TEXT	SEGMENT
?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ PROC ; CGraphicObjectInstance::GetCollisionInstanceCount, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 81 70 01 00
	00		 mov	 eax, DWORD PTR [ecx+368]
  00006	2b 81 6c 01 00
	00		 sub	 eax, DWORD PTR [ecx+364]
  0000c	c1 f8 02	 sar	 eax, 2
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 375  : }

  0000f	c3		 ret	 0
?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ENDP ; CGraphicObjectInstance::GetCollisionInstanceCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEXPAPAVCBaseCollisionInstance@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEXPAPAVCBaseCollisionInstance@@0@Z PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1781 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEXPAPAVCBaseCollisionInstance@@0@Z ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEXXZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Xlen, COMDAT
; _this$ = ecx

; 1754 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEXXZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXXZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Tidy, COMDAT
; _this$ = ecx

; 1622 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN1@Tidy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Tidy:
  00026	5e		 pop	 esi

; 1632 : 			}
; 1633 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXXZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Reserve, COMDAT
; _this$ = ecx

; 1612 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000c	2b c6		 sub	 eax, esi
  0000e	57		 push	 edi

; 1613 : 		if (_Unused_capacity() < _Count)

  0000f	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00012	c1 f8 02	 sar	 eax, 2

; 1613 : 		if (_Unused_capacity() < _Count)

  00015	3b c7		 cmp	 eax, edi
  00017	73 49		 jae	 SHORT $LN2@Reserve

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00019	2b 31		 sub	 esi, DWORD PTR [ecx]
  0001b	53		 push	 ebx

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  0001c	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00021	c1 fe 02	 sar	 esi, 2

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00024	8b c3		 mov	 eax, ebx
  00026	2b c6		 sub	 eax, esi
  00028	3b c7		 cmp	 eax, edi
  0002a	72 3c		 jb	 SHORT $LN43@Reserve

; 1010 : 		return (this->_Myend - this->_Myfirst);

  0002c	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0002e	03 f7		 add	 esi, edi

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00030	c1 fa 02	 sar	 edx, 2

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00033	8b c2		 mov	 eax, edx
  00035	d1 e8		 shr	 eax, 1
  00037	2b d8		 sub	 ebx, eax
  00039	3b da		 cmp	 ebx, edx
  0003b	5b		 pop	 ebx
  0003c	73 12		 jae	 SHORT $LN27@Reserve
  0003e	33 d2		 xor	 edx, edx

; 1576 : 		if (_Capacity < _Count)

  00040	3b d6		 cmp	 edx, esi
  00042	5f		 pop	 edi
  00043	0f 42 d6	 cmovb	 edx, esi
  00046	5e		 pop	 esi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00047	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1618 : 			}
; 1619 : 		}

  0004a	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0004b	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Reallocate
$LN27@Reserve:

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00050	03 d0		 add	 edx, eax

; 1576 : 		if (_Capacity < _Count)

  00052	3b d6		 cmp	 edx, esi
  00054	5f		 pop	 edi
  00055	0f 42 d6	 cmovb	 edx, esi
  00058	5e		 pop	 esi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00059	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1618 : 			}
; 1619 : 		}

  0005c	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0005d	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Reallocate
$LN2@Reserve:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 1618 : 			}
; 1619 : 		}

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
$LN43@Reserve:

; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())
; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);
; 1629 : 			this->_Myfirst = pointer();
; 1630 : 			this->_Mylast = pointer();
; 1631 : 			this->_Myend = pointer();
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 	template<class _Iter>
; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());
; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));
; 1641 : 		}
; 1642 : 
; 1643 : 	template<class _Iter>
; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1645 : 		{	// move initializing [_First, _Last), using allocator
; 1646 : 		_Alty _Alval(this->_Getal());
; 1647 : 		return (_Uninitialized_move(_First, _Last,
; 1648 : 			_Ptr, _Alval));
; 1649 : 		}
; 1650 : 
; 1651 : 	iterator _Insert_n(const_iterator _Where,
; 1652 : 		size_type _Count, const value_type& _Val)
; 1653 : 		{	// insert _Count * _Val at _Where
; 1654 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1655 : 		if (_VICONT(_Where) != this
; 1656 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1657 : 			|| this->_Mylast < _VIPTR(_Where))
; 1658 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1659 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1660 : 
; 1661 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1662 : 		if (_Count == 0)
; 1663 : 			;
; 1664 : 		else if (_Unused_capacity() < _Count)
; 1665 : 			{	// not enough room, reallocate
; 1666 : 			if (max_size() - size() < _Count)
; 1667 : 				_Xlen();	// result too long
; 1668 : 
; 1669 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1670 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1671 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1672 : 			int _Ncopied = 0;
; 1673 : 
; 1674 : 			_TRY_BEGIN
; 1675 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1676 : 				_STD addressof(_Val));	// add new stuff
; 1677 : 			++_Ncopied;
; 1678 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1679 : 				_Newvec);	// copy prefix
; 1680 : 			++_Ncopied;
; 1681 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1682 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1683 : 			_CATCH_ALL
; 1684 : 			if (1 < _Ncopied)
; 1685 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1686 : 			if (0 < _Ncopied)
; 1687 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1688 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1689 : 			_RERAISE;
; 1690 : 			_CATCH_END
; 1691 : 
; 1692 : 			_Count += size();
; 1693 : 			if (this->_Myfirst != pointer())
; 1694 : 				{	// destroy and deallocate old array
; 1695 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1696 : 				this->_Getal().deallocate(this->_Myfirst,
; 1697 : 					this->_Myend - this->_Myfirst);
; 1698 : 				}
; 1699 : 
; 1700 : 			this->_Orphan_all();
; 1701 : 			this->_Myend = _Newvec + _Capacity;
; 1702 : 			this->_Mylast = _Newvec + _Count;
; 1703 : 			this->_Myfirst = _Newvec;
; 1704 : 			}
; 1705 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1706 : 			< _Count)
; 1707 : 			{	// new stuff spills off end
; 1708 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1709 : 
; 1710 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1711 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1712 : 
; 1713 : 			_TRY_BEGIN
; 1714 : 			_Ufill(this->_Mylast,
; 1715 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1716 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1717 : 			_CATCH_ALL
; 1718 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1719 : 				this->_Mylast + _Count);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			this->_Mylast += _Count;
; 1724 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1725 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1726 : 				_Tmp);	// insert up to old end
; 1727 : 			}
; 1728 : 		else
; 1729 : 			{	// new stuff can all be assigned
; 1730 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1731 : 
; 1732 : 			pointer _Oldend = this->_Mylast;
; 1733 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1734 : 				this->_Mylast);	// copy suffix
; 1735 : 
; 1736 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1737 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1738 : 				_Oldend);	// copy hole
; 1739 : 			_STD fill(_VIPTR(_Where),
; 1740 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1741 : 			}
; 1742 : 		return (begin() + _Off);
; 1743 : 		}
; 1744 : 
; 1745 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1746 : 		{	// copy initializing _Count * _Val, using allocator
; 1747 : 		_Alty _Alval(this->_Getal());
; 1748 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1749 : 		return (_Ptr + _Count);
; 1750 : 		}
; 1751 : 
; 1752 : 	__declspec(noreturn) void _Xlen() const
; 1753 : 		{	// report a length_error
; 1754 : 		_Xlength_error("vector<T> too long");

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0006d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN45@Reserve:
$LN42@Reserve:
  00072	cc		 int	 3
?_Reserve@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$1$ = 8						; size = 4
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1587 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi

; 23   : 	void *_Ptr = 0;

  00008	33 f6		 xor	 esi, esi
  0000a	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1587 : 		{	// move to array of exactly _Count elements

  0000b	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  0000d	85 db		 test	 ebx, ebx
  0000f	74 1e		 je	 SHORT $LN16@Reallocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00011	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00017	77 5d		 ja	 SHORT $LN61@Reallocate
  00019	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	8b f0		 mov	 esi, eax
  00028	83 c4 04	 add	 esp, 4
  0002b	85 f6		 test	 esi, esi
  0002d	74 47		 je	 SHORT $LN61@Reallocate
$LN16@Reallocate:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0002f	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00031	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00034	2b c1		 sub	 eax, ecx

; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00036	83 e0 fc	 and	 eax, -4			; fffffffcH
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00041	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00046	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00049	2b c1		 sub	 eax, ecx
  0004b	c1 f8 02	 sar	 eax, 2
  0004e	89 45 08	 mov	 DWORD PTR __Size$1$[ebp], eax

; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())

  00051	85 c9		 test	 ecx, ecx
  00053	74 09		 je	 SHORT $LN56@Reallocate
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005b	83 c4 04	 add	 esp, 4
$LN56@Reallocate:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1606 : 		this->_Myend = _Ptr + _Count;

  0005e	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;

  00061	89 37		 mov	 DWORD PTR [edi], esi
  00063	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00066	8b 45 08	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00069	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  0006c	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 1609 : 		}

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
$LN61@Reallocate:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00076	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN63@Reallocate:
$LN60@Reallocate:
  0007b	cc		 int	 3
?_Reallocate@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBE_NPBQAVCBaseCollisionInstance@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBE_NPBQAVCBaseCollisionInstance@@@Z PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Inside, COMDAT
; _this$ = ecx

; 1582 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1584 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1584 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBE_NPBQAVCBaseCollisionInstance@@@Z ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEII@Z PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1571 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00006	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1010 : 		return (this->_Myend - this->_Myfirst);

  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000d	c1 fa 02	 sar	 edx, 2

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00010	8b ca		 mov	 ecx, edx
  00012	d1 e9		 shr	 ecx, 1
  00014	2b c1		 sub	 eax, ecx
  00016	3b c2		 cmp	 eax, edx
  00018	73 0f		 jae	 SHORT $LN4@Grow_to
  0001a	33 d2		 xor	 edx, edx

; 1576 : 		if (_Capacity < _Count)

  0001c	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  0001f	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00023	8b c2		 mov	 eax, edx

; 1579 : 		}

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN4@Grow_to:

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00029	03 d1		 add	 edx, ecx

; 1576 : 		if (_Capacity < _Count)

  0002b	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  0002e	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00032	8b c2		 mov	 eax, edx

; 1579 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IBEII@Z ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXPAPAVCBaseCollisionInstance@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXPAPAVCBaseCollisionInstance@@0@Z PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Destroy, COMDAT
; _this$ = ecx

; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXPAPAVCBaseCollisionInstance@@0@Z ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?clear@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXXZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::clear, COMDAT
; _this$ = ecx

; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1511 : 		}

  00005	c3		 ret	 0
?clear@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXXZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??A?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEAAPAVCBaseCollisionInstance@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEAAPAVCBaseCollisionInstance@@I@Z PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::operator[], COMDAT
; _this$ = ecx

; 1197 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00008	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1210 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEAAPAVCBaseCollisionInstance@@I@Z ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::max_size, COMDAT
; _this$ = ecx

; 1153 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1154 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::size, COMDAT
; _this$ = ecx

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1149 : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?end@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::end, COMDAT
; _this$ = ecx

; 1039 : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?end@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::end, COMDAT
; _this$ = ecx

; 1034 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::begin, COMDAT
; _this$ = ecx

; 1029 : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::begin, COMDAT
; _this$ = ecx

; 1024 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@@2@XZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1015 : 		return (this->_Myend - this->_Mylast);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 1016 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::capacity, COMDAT
; _this$ = ecx

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1011 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >, COMDAT
; _this$ = ecx

; 944  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);
; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN3@vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@vector:
  00026	5e		 pop	 esi

; 945  : 		_Tidy();
; 946  : 		}

  00027	c3		 ret	 0
??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEX$$QAPAVCBaseCollisionInstance@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEX$$QAPAVCBaseCollisionInstance@@@Z PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::push_back, COMDAT
; _this$ = ecx

; 865  : 		{	// insert by moving into element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 886  : 
; 887  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 888  : 		{	// insert by moving _Val at _Where
; 889  : 		return (emplace(_Where, _STD move(_Val)));
; 890  : 		}
; 891  : 
; 892  : 	template<class... _Valty>
; 893  : 		void emplace_back(_Valty&&... _Val)
; 894  : 		{	// insert by moving into element at end
; 895  : 		if (this->_Mylast == this->_Myend)
; 896  : 			_Reserve(1);
; 897  : 		_Orphan_range(this->_Mylast, this->_Mylast);
; 898  : 		this->_Getal().construct(this->_Mylast,
; 899  : 			_STD forward<_Valty>(_Val)...);
; 900  : 		++this->_Mylast;
; 901  : 		}
; 902  : 
; 903  : 	template<class... _Valty>
; 904  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 905  : 		{	// insert by moving _Val at _Where
; 906  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 907  : 
; 908  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 909  : 		if (size() < _Off)
; 910  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 911  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 912  : 
; 913  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 914  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 915  : 		return (begin() + _Off);
; 916  : 		}
; 917  : 
; 918  : 
; 919  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 920  : 		const _Alloc& _Al = allocator_type())
; 921  : 		: _Mybase(_Al)
; 922  : 		{	// construct from initializer_list
; 923  : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 924  : 		}
; 925  : 
; 926  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 927  : 		{	// assign initializer_list
; 928  : 		assign(_Ilist.begin(), _Ilist.end());
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 933  : 		{	// assign initializer_list
; 934  : 		assign(_Ilist.begin(), _Ilist.end());
; 935  : 		}
; 936  : 
; 937  : 	iterator insert(const_iterator _Where,
; 938  : 		_XSTD initializer_list<value_type> _Ilist)
; 939  : 		{	// insert initializer_list
; 940  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 941  : 		}
; 942  : 
; 943  : 	~vector() _NOEXCEPT
; 944  : 		{	// destroy the object
; 945  : 		_Tidy();
; 946  : 		}
; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);
; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 31		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 2b		 ja	 SHORT $LN4@push_back

; 866  : 		if (_Inside(_STD addressof(_Val)))
; 867  : 			{	// push back an element
; 868  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 869  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 870  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Reserve
$LN3@push_back:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 2a		 je	 SHORT $LN53@push_back
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00036	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 883  : 			++this->_Mylast;

  00038	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 884  : 			}
; 885  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN4@push_back:

; 871  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 872  : 			this->_Getal().construct(this->_Mylast,
; 873  : 				_STD forward<value_type>(this->_Myfirst[_Idx]));
; 874  : 			++this->_Mylast;
; 875  : 			}
; 876  : 		else
; 877  : 			{	// push back a non-element
; 878  : 			if (this->_Mylast == this->_Myend)

  00042	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00045	75 09		 jne	 SHORT $LN1@push_back

; 879  : 				_Reserve(1);

  00047	6a 01		 push	 1
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@IAEXI@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Reserve
$LN1@push_back:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	85 c9		 test	 ecx, ecx
  00055	74 04		 je	 SHORT $LN53@push_back
  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	89 01		 mov	 DWORD PTR [ecx], eax
$LN53@push_back:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 883  : 			++this->_Mylast;

  0005b	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 884  : 			}
; 885  : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?push_back@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEX$$QAPAVCBaseCollisionInstance@@@Z ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 681  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 681  : 		}

  00016	c3		 ret	 0
??0?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> > >::_Getal, COMDAT
; _this$ = ecx

; 641  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 643  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCBaseCollisionInstance@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCBaseCollisionInstance@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> > >::_Vector_alloc<0,std::_Vec_base_types<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> > >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCBaseCollisionInstance@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> > >::_Vector_alloc<0,std::_Vec_base_types<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> >::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> >, COMDAT
; _this$ = ecx

; 481  : 		{	// initialize values
; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 483  : 		_Mylast = pointer();
; 484  : 		_Myend = pointer();
; 485  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> >::_Vector_val<std::_Simple_types<CBaseCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXPAPAVCBaseCollisionInstance@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXPAPAVCBaseCollisionInstance@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEXPAPAVCBaseCollisionInstance@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEPAPAVCBaseCollisionInstance@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEPAPAVCBaseCollisionInstance@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEPAPAVCBaseCollisionInstance@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >::_Wrap_alloc<std::allocator<CBaseCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@SAIABV?$allocator@PAVCBaseCollisionInstance@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@SAIABV?$allocator@PAVCBaseCollisionInstance@@@2@@Z PROC ; std::allocator_traits<std::allocator<CBaseCollisionInstance *> >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@SAIABV?$allocator@PAVCBaseCollisionInstance@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CBaseCollisionInstance *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVCBaseCollisionInstance@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVCBaseCollisionInstance@@@std@@QBEIXZ PROC ; std::allocator<CBaseCollisionInstance *>::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVCBaseCollisionInstance@@@std@@QBEIXZ ENDP ; std::allocator<CBaseCollisionInstance *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEPAPAVCBaseCollisionInstance@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEPAPAVCBaseCollisionInstance@@I@Z PROC ; std::allocator<CBaseCollisionInstance *>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEPAPAVCBaseCollisionInstance@@I@Z ENDP ; std::allocator<CBaseCollisionInstance *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEXPAPAVCBaseCollisionInstance@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEXPAPAVCBaseCollisionInstance@@I@Z PROC ; std::allocator<CBaseCollisionInstance *>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCBaseCollisionInstance@@@std@@QAEXPAPAVCBaseCollisionInstance@@I@Z ENDP ; std::allocator<CBaseCollisionInstance *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCBaseCollisionInstance@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVCBaseCollisionInstance@@@std@@QAE@XZ PROC ; std::allocator<CBaseCollisionInstance *>::allocator<CBaseCollisionInstance *>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAVCBaseCollisionInstance@@@std@@QAE@XZ ENDP ; std::allocator<CBaseCollisionInstance *>::allocator<CBaseCollisionInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z
_TEXT	SEGMENT
_pscdVector$ = 8					; size = 4
?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z PROC ; CGraphicObjectInstance::UpdateCollisionData, COMDAT
; _this$ = ecx

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 368  : 	ClearCollision();

  00006	e8 00 00 00 00	 call	 ?ClearCollision@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearCollision

; 369  : 	OnUpdateCollisionData(pscdVector);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 75 08	 push	 DWORD PTR _pscdVector$[ebp]
  00012	ff 50 30	 call	 DWORD PTR [eax+48]
  00015	5e		 pop	 esi

; 370  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ENDP ; CGraphicObjectInstance::UpdateCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\collisiondata.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\collisiondata.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CGraphicObjectInstance::GetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 357  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00008	8b b7 6c 01 00
	00		 mov	 esi, DWORD PTR [edi+364]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 205  : 		return (this->_Ptr == _Right._Ptr);

  0000e	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 357  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00014	74 23		 je	 SHORT $LN2@GetCollisi
  00016	8b 5d 0c	 mov	 ebx, DWORD PTR _s$[ebp]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL15@GetCollisi:

; 359  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\gamepackages\client\tools\patcher2017\eterlib\collisiondata.h

; 83   : 			return OnMovementCollisionDynamicSphere(s);

  00022	53		 push	 ebx
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00028	ff d0		 call	 eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 359  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  0002a	84 c0		 test	 al, al
  0002c	75 29		 jne	 SHORT $LN40@GetCollisi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 112  : 		++this->_Ptr;

  0002e	83 c6 04	 add	 esi, 4

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00031	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 357  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00037	75 e7		 jne	 SHORT $LL15@GetCollisi
$LN2@GetCollisi:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 181  :     y = fy;

  00045	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 182  :     z = fz;

  0004c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 364  : }

  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN40@GetCollisi:

; 360  : 			return (*it)->GetCollisionMovementAdjust(s);

  00057	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\gamepackages\client\tools\patcher2017\eterlib\collisiondata.h

; 93   : 			return OnGetCollisionMovementAdjust(s);

  00059	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00060	ff 52 04	 call	 DWORD PTR [edx+4]
  00063	5f		 pop	 edi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 360  : 			return (*it)->GetCollisionMovementAdjust(s);

  00064	8b c6		 mov	 eax, esi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx

; 364  : }

  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CGraphicObjectInstance::GetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\collisiondata.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z PROC ; CGraphicObjectInstance::MovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 346  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00008	8b b7 6c 01 00
	00		 mov	 esi, DWORD PTR [edi+364]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 205  : 		return (this->_Ptr == _Right._Ptr);

  0000e	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 346  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00014	74 23		 je	 SHORT $LN2@MovementCo
  00016	8b 5d 08	 mov	 ebx, DWORD PTR _s$[ebp]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL15@MovementCo:

; 348  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\gamepackages\client\tools\patcher2017\eterlib\collisiondata.h

; 83   : 			return OnMovementCollisionDynamicSphere(s);

  00022	53		 push	 ebx
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00028	ff d0		 call	 eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 348  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  0002a	84 c0		 test	 al, al
  0002c	75 14		 jne	 SHORT $LN34@MovementCo
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 112  : 		++this->_Ptr;

  0002e	83 c6 04	 add	 esi, 4

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00031	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 346  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00037	75 e7		 jne	 SHORT $LL15@MovementCo
$LN2@MovementCo:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi

; 350  : 	}
; 351  : 	return false;

  0003b	32 c0		 xor	 al, al
  0003d	5b		 pop	 ebx

; 352  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN34@MovementCo:
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 349  : 			return true;

  00044	b0 01		 mov	 al, 1
  00046	5b		 pop	 ebx

; 352  : }

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ENDP ; CGraphicObjectInstance::MovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\collisiondata.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z PROC ; CGraphicObjectInstance::CollisionDynamicSphere, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 335  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00008	8b b7 6c 01 00
	00		 mov	 esi, DWORD PTR [edi+364]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 205  : 		return (this->_Ptr == _Right._Ptr);

  0000e	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 335  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00014	74 23		 je	 SHORT $LN2@CollisionD
  00016	8b 5d 08	 mov	 ebx, DWORD PTR _s$[ebp]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL15@CollisionD:

; 337  : 		if ((*it)->CollisionDynamicSphere(s))

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\gamepackages\client\tools\patcher2017\eterlib\collisiondata.h

; 87   : 			return OnCollisionDynamicSphere(s);

  00022	53		 push	 ebx
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00028	ff d0		 call	 eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 337  : 		if ((*it)->CollisionDynamicSphere(s))

  0002a	84 c0		 test	 al, al
  0002c	75 14		 jne	 SHORT $LN34@CollisionD
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 112  : 		++this->_Ptr;

  0002e	83 c6 04	 add	 esi, 4

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00031	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 335  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00037	75 e7		 jne	 SHORT $LL15@CollisionD
$LN2@CollisionD:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi

; 339  : 	}
; 340  : 	return false;

  0003b	32 c0		 xor	 al, al
  0003d	5b		 pop	 ebx

; 341  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN34@CollisionD:
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 338  : 			return true;

  00044	b0 01		 mov	 al, 1
  00046	5b		 pop	 ebx

; 341  : }

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ENDP ; CGraphicObjectInstance::CollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?ClearCollision@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?ClearCollision@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::ClearCollision, COMDAT
; _this$ = ecx

; 323  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 325  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00004	8b b7 6c 01 00
	00		 mov	 esi, DWORD PTR [edi+364]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 205  : 		return (this->_Ptr == _Right._Ptr);

  0000a	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 325  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00010	74 12		 je	 SHORT $LN1@ClearColli
$LL20@ClearColli:

; 326  : 	{
; 327  : 		(*it)->Destroy();

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ?Destroy@CBaseCollisionInstance@@QAEXXZ ; CBaseCollisionInstance::Destroy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00019	83 c6 04	 add	 esi, 4

; 205  : 		return (this->_Ptr == _Right._Ptr);

  0001c	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 325  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00022	75 ee		 jne	 SHORT $LL20@ClearColli
$LN1@ClearColli:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  00024	8b 87 6c 01 00
	00		 mov	 eax, DWORD PTR [edi+364]
  0002a	89 87 70 01 00
	00		 mov	 DWORD PTR [edi+368], eax
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 330  : }

  00032	c3		 ret	 0
?ClearCollision@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::ClearCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_pscd$ = 8						; size = 4
$T1 = 12						; size = 4
_pMat$ = 12						; size = 4
?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z PROC ; CGraphicObjectInstance::AddCollision, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 319  : 	m_StaticCollisionInstanceVector.push_back(CBaseCollisionInstance::BuildCollisionInstance(pscd, pMat));

  00004	ff 75 0c	 push	 DWORD PTR _pMat$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _pscd$[ebp]
  0000c	e8 00 00 00 00	 call	 ?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CBaseCollisionInstance::BuildCollisionInstance
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
  00017	8d 45 0c	 lea	 eax, DWORD PTR $T1[ebp]
  0001a	8d 8e 6c 01 00
	00		 lea	 ecx, DWORD PTR [esi+364]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEX$$QAPAVCBaseCollisionInstance@@@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::push_back
  00026	5e		 pop	 esi

; 320  : }

  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ENDP ; CGraphicObjectInstance::AddCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.h
;	COMDAT ?OnDeform@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnDeform@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnDeform, COMDAT
; _this$ = ecx

; 99   : 		virtual void			OnDeform(){}

  00000	c3		 ret	 0
?OnDeform@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnDeform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.h
;	COMDAT ?OnUpdate@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnUpdate@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnUpdate, COMDAT
; _this$ = ecx

; 98   : 		virtual void			OnUpdate(){}

  00000	c3		 ret	 0
?OnUpdate@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.h
;	COMDAT ?OnClear@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnClear@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnClear, COMDAT
; _this$ = ecx

; 97   : 		virtual void			OnClear(){}

  00000	c3		 ret	 0
?OnClear@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ PROC ; CGraphicObjectInstance::RegisterBoundingSphere, COMDAT
; _this$ = ecx

; 310  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 311  : 	if (m_CullingHandle)

  00003	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]
  00009	85 c0		 test	 eax, eax
  0000b	74 0c		 je	 SHORT $LN1@RegisterBo

; 312  : 		CCullingManager::Instance().Unregister(m_CullingHandle);

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z ; CCullingManager::Unregister
$LN1@RegisterBo:

; 313  : 
; 314  : 	m_CullingHandle = CCullingManager::Instance().Register(this);

  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?Register@CCullingManager@@QAEPAVSpherePack@@PAVCGraphicObjectInstance@@@Z ; CCullingManager::Register
  00025	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax
  0002b	5e		 pop	 esi

; 315  : }

  0002c	c3		 ret	 0
?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ ENDP ; CGraphicObjectInstance::RegisterBoundingSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\spherelib\sphere.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
_radius$1 = -20						; size = 4
_center$2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ PROC ; CGraphicObjectInstance::UpdateBoundingSphere, COMDAT
; _this$ = ecx

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 297  : 	if (m_CullingHandle)

  00013	83 be 68 01 00
	00 00		 cmp	 DWORD PTR [esi+360], 0
  0001a	0f 84 c0 00 00
	00		 je	 $LN8@UpdateBoun

; 298  : 	{
; 299  : 		Vector3d center;
; 300  : 		float radius;
; 301  : 		GetBoundingSphere(center,radius);

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	8d 4d ec	 lea	 ecx, DWORD PTR _radius$1[ebp]
  00025	51		 push	 ecx
  00026	8d 4d f0	 lea	 ecx, DWORD PTR _center$2[ebp]
  00029	51		 push	 ecx
  0002a	8b ce		 mov	 ecx, esi
  0002c	ff 50 0c	 call	 DWORD PTR [eax+12]
; File c:\gamepackages\client\tools\patcher2017\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  0002f	8b b6 68 01 00
	00		 mov	 esi, DWORD PTR [esi+360]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 302  : 		if (radius != m_CullingHandle->GetRadius())

  00035	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _radius$1[ebp]
  0003a	0f 2e 46 10	 ucomiss xmm0, DWORD PTR [esi+16]
  0003e	9f		 lahf
  0003f	f6 c4 44	 test	 ah, 68			; 00000044H
  00042	7b 20		 jnp	 SHORT $LN2@UpdateBoun

; 303  : 			m_CullingHandle->NewPosRadius(center,radius);

  00044	51		 push	 ecx
  00045	8d 45 f0	 lea	 eax, DWORD PTR _center$2[ebp]
  00048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004d	50		 push	 eax
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z ; SpherePack::NewPosRadius
  00055	5e		 pop	 esi

; 307  : }

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	33 cd		 xor	 ecx, ebp
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
$LN2@UpdateBoun:
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00064	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _center$2[ebp]
  00069	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  0006e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _center$2[ebp+4]
  00073	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
  00078	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _center$2[ebp+8]
  0007d	f3 0f 11 46 0c	 movss	 DWORD PTR [esi+12], xmm0
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h

; 452  : 	if (mParent && !HasSpherePackFlag(SPF_INTEGRATE))

  00082	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00085	85 c0		 test	 eax, eax
  00087	74 57		 je	 SHORT $LN8@UpdateBoun

; 133  : 		if ( mFlags & flag ) return true;

  00089	f6 46 38 20	 test	 BYTE PTR [esi+56], 32	; 00000020H
  0008d	75 51		 jne	 SHORT $LN8@UpdateBoun
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h

; 170  : 		float dx = a.x - x;

  0008f	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 171  : 		float dy = a.y - y;

  00094	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00099	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  0009e	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 172  : 		float dz = a.z - z;

  000a3	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000a8	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  000ad	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000b1	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000b5	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000b9	f3 0f 58 d1	 addss	 xmm2, xmm1
  000bd	f3 0f 58 d0	 addss	 xmm2, xmm0
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h

; 456  : 		if (dist >= mBindingDistance) // if that exceeds our binding distance...

  000c1	0f 2f 56 40	 comiss	 xmm2, DWORD PTR [esi+64]
  000c5	72 19		 jb	 SHORT $LN8@UpdateBoun

; 457  : 		{
; 458  : 			// If our parent, is not already marked to be recomputed (rebalance the sphere), then add him to the recomputation fifo.
; 459  : 			mFactory->AddRecompute(mParent);

  000c7	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute

; 460  : 
; 461  : 			// Unlink ourselves from the parent sphere and place ourselves into the root node.
; 462  : 			Unlink();

  000d0	8b ce		 mov	 ecx, esi
  000d2	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink

; 463  : 			mFactory->AddIntegrate(this); // add ourselves to the re-integration fifo.

  000d7	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000da	56		 push	 esi
  000db	e8 00 00 00 00	 call	 ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
$LN8@UpdateBoun:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 307  : }

  000e0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e3	33 cd		 xor	 ecx, ebp
  000e5	5e		 pop	 esi
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ENDP ; CGraphicObjectInstance::UpdateBoundingSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?OnInitialize@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnInitialize@CGraphicObjectInstance@@UAEXXZ PROC	; CGraphicObjectInstance::OnInitialize, COMDAT
; _this$ = ecx

; 6    : {	

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 7    : 	ZeroMemory(m_abyPortalID, sizeof(m_abyPortalID));

  00003	66 0f d6 81 60
	01 00 00	 movq	 QWORD PTR [ecx+352], xmm0

; 8    : }

  0000b	c3		 ret	 0
?OnInitialize@CGraphicObjectInstance@@UAEXXZ ENDP	; CGraphicObjectInstance::OnInitialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?Initialize@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Initialize, COMDAT
; _this$ = ecx

; 269  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 270  : 	if (m_CullingHandle)

  00003	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]
  00009	85 c0		 test	 eax, eax
  0000b	74 0c		 je	 SHORT $LN1@Initialize

; 271  : 		CCullingManager::Instance().Unregister(m_CullingHandle);

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z ; CCullingManager::Unregister
$LN1@Initialize:

; 272  : 	m_CullingHandle = 0;

  00019	c7 86 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+360], 0

; 287  : 	OnInitialize();

  00023	8b ce		 mov	 ecx, esi
  00025	c7 86 78 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+376], 0
  0002f	c6 46 68 01	 mov	 BYTE PTR [esi+104], 1
  00033	c6 86 ac 00 00
	00 00		 mov	 BYTE PTR [esi+172], 0
  0003a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00041	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00048	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0004f	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00056	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0005d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00064	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  0006b	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00072	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00079	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  00083	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
  0008d	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  00097	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  000a1	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  000ab	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  000b5	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  000bf	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  000c9	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  000d0	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  000d7	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  000de	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000e5	c7 86 a8 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+168], 1065353216 ; 3f800000H
  000ef	c7 86 94 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+148], 1065353216 ; 3f800000H
  000f9	c7 86 80 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+128], 1065353216 ; 3f800000H
  00103	c7 46 6c 00 00
	80 3f		 mov	 DWORD PTR [esi+108], 1065353216 ; 3f800000H

; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  0010a	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00111	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  00118	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0011f	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  00126	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  0012d	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  00134	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  0013b	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00142	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00149	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00150	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  00157	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0015e	c7 46 64 00 00
	80 3f		 mov	 DWORD PTR [esi+100], 1065353216 ; 3f800000H
  00165	c7 46 50 00 00
	80 3f		 mov	 DWORD PTR [esi+80], 1065353216 ; 3f800000H
  0016c	c7 46 3c 00 00
	80 3f		 mov	 DWORD PTR [esi+60], 1065353216 ; 3f800000H
  00173	c7 46 28 00 00
	80 3f		 mov	 DWORD PTR [esi+40], 1065353216 ; 3f800000H
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 287  : 	OnInitialize();

  0017a	8b 06		 mov	 eax, DWORD PTR [esi]
  0017c	5e		 pop	 esi
  0017d	ff 60 08	 jmp	 DWORD PTR [eax+8]
?Initialize@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetPortal@CGraphicObjectInstance@@QAEHK@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?GetPortal@CGraphicObjectInstance@@QAEHK@Z PROC		; CGraphicObjectInstance::GetPortal, COMDAT
; _this$ = ecx

; 433  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 434  : 	if (dwIndex >= PORTAL_ID_MAX_NUM)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00006	83 f8 08	 cmp	 eax, 8
  00009	72 06		 jb	 SHORT $LN1@GetPortal

; 435  : 	{
; 436  : 		assert(dwIndex < PORTAL_ID_MAX_NUM);
; 437  : 		return 0;

  0000b	33 c0		 xor	 eax, eax

; 441  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
$LN1@GetPortal:

; 438  : 	}
; 439  : 
; 440  : 	return m_abyPortalID[dwIndex];

  00011	0f b6 84 08 60
	01 00 00	 movzx	 eax, BYTE PTR [eax+ecx+352]

; 441  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetPortal@CGraphicObjectInstance@@QAEHK@Z ENDP		; CGraphicObjectInstance::GetPortal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?SetPortal@CGraphicObjectInstance@@QAEXKH@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_iID$ = 12						; size = 4
?SetPortal@CGraphicObjectInstance@@QAEXKH@Z PROC	; CGraphicObjectInstance::SetPortal, COMDAT
; _this$ = ecx

; 422  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 423  : 	if (dwIndex >= PORTAL_ID_MAX_NUM)

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  00006	83 fa 08	 cmp	 edx, 8
  00009	73 0a		 jae	 SHORT $LN2@SetPortal

; 424  : 	{
; 425  : 		assert(dwIndex < PORTAL_ID_MAX_NUM);
; 426  : 		return;
; 427  : 	}
; 428  : 
; 429  : 	m_abyPortalID[dwIndex] = iID;

  0000b	8a 45 0c	 mov	 al, BYTE PTR _iID$[ebp]
  0000e	88 84 0a 60 01
	00 00		 mov	 BYTE PTR [edx+ecx+352], al
$LN2@SetPortal:

; 430  : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?SetPortal@CGraphicObjectInstance@@QAEXKH@Z ENDP	; CGraphicObjectInstance::SetPortal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ
_TEXT	SEGMENT
?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ PROC ; CGraphicObjectInstance::GetTransform, COMDAT
; _this$ = ecx

; 143  : 	return m_worldMatrix;

  00000	8d 41 6c	 lea	 eax, DWORD PTR [ecx+108]

; 144  : }

  00003	c3		 ret	 0
?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ENDP ; CGraphicObjectInstance::GetTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z
_TEXT	SEGMENT
_c_rucNumTBBoxVertex$ = 8				; size = 4
?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z PROC ; CGraphicObjectInstance::GetWTBBoxVertex, COMDAT
; _this$ = ecx

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  : 	return m_v4TBBox[c_rucNumTBBoxVertex];

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rucNumTBBoxVertex$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00009	83 c0 0b	 add	 eax, 11			; 0000000bH
  0000c	c1 e0 04	 shl	 eax, 4
  0000f	03 c1		 add	 eax, ecx

; 215  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z ENDP ; CGraphicObjectInstance::GetWTBBoxVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z
_TEXT	SEGMENT
_pu$GSCopy$1$ = -220					; size = 4
_pt$GSCopy$1$ = -216					; size = 4
_pv$GSCopy$1$ = -212					; size = 4
$T1 = -208						; size = 12
$T2 = -208						; size = 12
$T3 = -208						; size = 12
$T4 = -208						; size = 12
$T5 = -208						; size = 12
$T6 = -208						; size = 12
$T7 = -208						; size = 12
$T8 = -208						; size = 12
_v3Start$ = -196					; size = 12
_v3Dir$ = -184						; size = 12
_posVertices$ = -172					; size = 96
_Indices$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_c_rRay$ = 8						; size = 4
_pu$ = 12						; size = 4
_pv$ = 16						; size = 4
_pt$ = 20						; size = 4
?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z PROC ; CGraphicObjectInstance::isIntersect, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 55 08	 mov	 edx, DWORD PTR _c_rRay$[ebp]
  00016	8b 45 10	 mov	 eax, DWORD PTR _pv$[ebp]
  00019	53		 push	 ebx
  0001a	8b d9		 mov	 ebx, ecx
  0001c	89 85 2c ff ff
	ff		 mov	 DWORD PTR _pv$GSCopy$1$[ebp], eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h

; 36   : 			*pv3Start = m_v3Start;

  00022	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00026	8b 45 14	 mov	 eax, DWORD PTR _pt$[ebp]
  00029	66 0f d6 85 3c
	ff ff ff	 movq	 QWORD PTR _v3Start$[ebp], xmm0
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00031	f3 0f 10 ab 30
	01 00 00	 movss	 xmm5, DWORD PTR [ebx+304]
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h

; 41   : 			*pv3Dir = m_v3Direction;

  00039	f3 0f 7e 42 18	 movq	 xmm0, QWORD PTR [edx+24]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0003e	f3 0f 10 9b 34
	01 00 00	 movss	 xmm3, DWORD PTR [ebx+308]

; 180  :     x = fx;

  00046	f3 0f 10 a3 3c
	01 00 00	 movss	 xmm4, DWORD PTR [ebx+316]

; 182  :     z = fz;

  0004e	f3 0f 10 8b 38
	01 00 00	 movss	 xmm1, DWORD PTR [ebx+312]

; 181  :     y = fy;

  00056	f3 0f 10 93 40
	01 00 00	 movss	 xmm2, DWORD PTR [ebx+320]
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h

; 41   : 			*pv3Dir = m_v3Direction;

  0005e	66 0f d6 85 48
	ff ff ff	 movq	 QWORD PTR _v3Dir$[ebp], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 226  : 	posVertices[0] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  00066	f3 0f 10 c5	 movss	 xmm0, xmm5
  0006a	0f 14 c3	 unpcklps xmm0, xmm3
  0006d	66 0f d6 85 54
	ff ff ff	 movq	 QWORD PTR _posVertices$[ebp], xmm0

; 227  : 	posVertices[1] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  00075	f3 0f 10 c4	 movss	 xmm0, xmm4
  00079	8b 4d 0c	 mov	 ecx, DWORD PTR _pu$[ebp]
  0007c	89 85 28 ff ff
	ff		 mov	 DWORD PTR _pt$GSCopy$1$[ebp], eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h

; 36   : 			*pv3Start = m_v3Start;

  00082	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 227  : 	posVertices[1] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  00085	0f 14 c3	 unpcklps xmm0, xmm3
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h

; 36   : 			*pv3Start = m_v3Start;

  00088	89 85 44 ff ff
	ff		 mov	 DWORD PTR _v3Start$[ebp+8], eax

; 41   : 			*pv3Dir = m_v3Direction;

  0008e	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 227  : 	posVertices[1] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  00091	66 0f d6 85 60
	ff ff ff	 movq	 QWORD PTR _posVertices$[ebp+12], xmm0

; 228  : 	posVertices[2] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  00099	f3 0f 10 c5	 movss	 xmm0, xmm5
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h

; 41   : 			*pv3Dir = m_v3Direction;

  0009d	89 85 50 ff ff
	ff		 mov	 DWORD PTR _v3Dir$[ebp+8], eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 228  : 	posVertices[2] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000a3	0f 14 c2	 unpcklps xmm0, xmm2
  000a6	66 0f d6 85 6c
	ff ff ff	 movq	 QWORD PTR _posVertices$[ebp+24], xmm0

; 229  : 	posVertices[3] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000ae	f3 0f 10 c4	 movss	 xmm0, xmm4
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000b2	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T8[ebp+8], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 226  : 	posVertices[0] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  000ba	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T8[ebp+8]
  000c0	89 85 5c ff ff
	ff		 mov	 DWORD PTR _posVertices$[ebp+8], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000c6	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T7[ebp+8], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 227  : 	posVertices[1] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  000ce	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp+8]
  000d4	89 85 68 ff ff
	ff		 mov	 DWORD PTR _posVertices$[ebp+20], eax

; 229  : 	posVertices[3] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000da	0f 14 c2	 unpcklps xmm0, xmm2
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000dd	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T6[ebp+8], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 228  : 	posVertices[2] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000e5	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp+8]
  000eb	89 85 74 ff ff
	ff		 mov	 DWORD PTR _posVertices$[ebp+32], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000f1	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T5[ebp+8], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 229  : 	posVertices[3] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000f9	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp+8]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000ff	f3 0f 10 8b 44
	01 00 00	 movss	 xmm1, DWORD PTR [ebx+324]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 229  : 	posVertices[3] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  00107	66 0f d6 85 78
	ff ff ff	 movq	 QWORD PTR _posVertices$[ebp+36], xmm0

; 230  : 	posVertices[4] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMin.y, m_v3TBBoxMax.z);

  0010f	f3 0f 10 c5	 movss	 xmm0, xmm5
  00113	89 45 80	 mov	 DWORD PTR _posVertices$[ebp+44], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00116	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T4[ebp+8], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 230  : 	posVertices[4] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMin.y, m_v3TBBoxMax.z);

  0011e	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp+8]
  00124	0f 14 c3	 unpcklps xmm0, xmm3
  00127	89 45 8c	 mov	 DWORD PTR _posVertices$[ebp+56], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0012a	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T3[ebp+8], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 231  : 	posVertices[5] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMax.z);

  00132	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+8]
  00138	66 0f d6 45 84	 movq	 QWORD PTR _posVertices$[ebp+48], xmm0
  0013d	f3 0f 10 c4	 movss	 xmm0, xmm4
  00141	89 45 98	 mov	 DWORD PTR _posVertices$[ebp+68], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00144	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T2[ebp+8], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 232  : 	posVertices[6] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMax.y, m_v3TBBoxMax.z);

  0014c	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+8]
  00152	56		 push	 esi
  00153	0f 14 c3	 unpcklps xmm0, xmm3
  00156	0f 14 ea	 unpcklps xmm5, xmm2
  00159	89 45 a4	 mov	 DWORD PTR _posVertices$[ebp+80], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0015c	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T1[ebp+8], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 233  : 	posVertices[7] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMax.z);

  00164	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp+8]
  0016a	0f 14 e2	 unpcklps xmm4, xmm2
  0016d	57		 push	 edi
  0016e	89 8d 24 ff ff
	ff		 mov	 DWORD PTR _pu$GSCopy$1$[ebp], ecx
  00174	66 0f d6 45 90	 movq	 QWORD PTR _posVertices$[ebp+60], xmm0
  00179	66 0f d6 6d 9c	 movq	 QWORD PTR _posVertices$[ebp+72], xmm5
  0017e	66 0f d6 65 a8	 movq	 QWORD PTR _posVertices$[ebp+84], xmm4
  00183	89 45 b0	 mov	 DWORD PTR _posVertices$[ebp+92], eax

; 234  : 
; 235  : 	TIndex Indices[36] = {0, 1, 2, 1, 3, 2,
; 236  : 						  2, 0, 6, 0, 4, 6, 
; 237  : 						  0, 1, 4, 1, 5, 4,
; 238  : 						  1, 3, 5, 3, 7, 5,
; 239  : 						  3, 2, 7, 2, 6, 7,
; 240  : 						  4, 5, 6, 5, 7, 6};

  00186	c7 45 b4 00 00
	01 00		 mov	 DWORD PTR _Indices$[ebp], 65536 ; 00010000H
  0018d	c7 45 b8 02 00
	01 00		 mov	 DWORD PTR _Indices$[ebp+4], 65538 ; 00010002H
  00194	c7 45 bc 03 00
	02 00		 mov	 DWORD PTR _Indices$[ebp+8], 131075 ; 00020003H
  0019b	c7 45 c0 02 00
	00 00		 mov	 DWORD PTR _Indices$[ebp+12], 2
  001a2	c7 45 c4 06 00
	00 00		 mov	 DWORD PTR _Indices$[ebp+16], 6
  001a9	c7 45 c8 04 00
	06 00		 mov	 DWORD PTR _Indices$[ebp+20], 393220 ; 00060004H
  001b0	c7 45 cc 00 00
	01 00		 mov	 DWORD PTR _Indices$[ebp+24], 65536 ; 00010000H
  001b7	c7 45 d0 04 00
	01 00		 mov	 DWORD PTR _Indices$[ebp+28], 65540 ; 00010004H
  001be	c7 45 d4 05 00
	04 00		 mov	 DWORD PTR _Indices$[ebp+32], 262149 ; 00040005H
  001c5	c7 45 d8 01 00
	03 00		 mov	 DWORD PTR _Indices$[ebp+36], 196609 ; 00030001H
  001cc	c7 45 dc 05 00
	03 00		 mov	 DWORD PTR _Indices$[ebp+40], 196613 ; 00030005H
  001d3	8d 75 b6	 lea	 esi, DWORD PTR _Indices$[ebp+2]
  001d6	c7 45 e0 07 00
	05 00		 mov	 DWORD PTR _Indices$[ebp+44], 327687 ; 00050007H

; 241  : 
; 242  : 	int triCount = 12;

  001dd	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH
  001e2	c7 45 e4 03 00
	02 00		 mov	 DWORD PTR _Indices$[ebp+48], 131075 ; 00020003H
  001e9	c7 45 e8 07 00
	02 00		 mov	 DWORD PTR _Indices$[ebp+52], 131079 ; 00020007H
  001f0	c7 45 ec 06 00
	07 00		 mov	 DWORD PTR _Indices$[ebp+56], 458758 ; 00070006H
  001f7	c7 45 f0 04 00
	05 00		 mov	 DWORD PTR _Indices$[ebp+60], 327684 ; 00050004H
  001fe	c7 45 f4 06 00
	05 00		 mov	 DWORD PTR _Indices$[ebp+64], 327686 ; 00050006H
  00205	c7 45 f8 07 00
	06 00		 mov	 DWORD PTR _Indices$[ebp+68], 393223 ; 00060007H
  0020c	8d 64 24 00	 npad	 4
$LL3@isIntersec:

; 243  : 	WORD* pcurIdx = (WORD*)Indices;
; 244  : 
; 245  : 	while (triCount--)
; 246  : 	{
; 247  : 		if (IntersectTriangle(v3Start, v3Dir, 
; 248  : 			posVertices[pcurIdx[0]],
; 249  : 			posVertices[pcurIdx[1]],
; 250  : 			posVertices[pcurIdx[2]],
; 251  : 			pu, pv, pt))

  00210	ff b5 28 ff ff
	ff		 push	 DWORD PTR _pt$GSCopy$1$[ebp]
  00216	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  0021a	4f		 dec	 edi
  0021b	ff b5 2c ff ff
	ff		 push	 DWORD PTR _pv$GSCopy$1$[ebp]
  00221	51		 push	 ecx
  00222	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00225	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _posVertices$[ebp]
  0022b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0022e	50		 push	 eax
  0022f	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00232	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00235	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00238	50		 push	 eax
  00239	0f b7 46 fe	 movzx	 eax, WORD PTR [esi-2]
  0023d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00240	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00243	8b cb		 mov	 ecx, ebx
  00245	50		 push	 eax
  00246	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _v3Dir$[ebp]
  0024c	50		 push	 eax
  0024d	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _v3Start$[ebp]
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 ?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z ; CGraphicCollisionObject::IntersectTriangle
  00259	84 c0		 test	 al, al
  0025b	75 20		 jne	 SHORT $LN38@isIntersec

; 252  : 		{
; 253  : 			return true;
; 254  : 		}
; 255  : 		
; 256  : 		pcurIdx += 3;

  0025d	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _pu$GSCopy$1$[ebp]
  00263	83 c6 06	 add	 esi, 6
  00266	85 ff		 test	 edi, edi
  00268	75 a6		 jne	 SHORT $LL3@isIntersec
  0026a	5f		 pop	 edi
  0026b	5e		 pop	 esi
  0026c	5b		 pop	 ebx

; 257  : 	}
; 258  : 	
; 259  : 	return false;
; 260  : }

  0026d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00270	33 cd		 xor	 ecx, ebp
  00272	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00277	8b e5		 mov	 esp, ebp
  00279	5d		 pop	 ebp
  0027a	c2 10 00	 ret	 16			; 00000010H
$LN38@isIntersec:
  0027d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00280	b0 01		 mov	 al, 1
  00282	5f		 pop	 edi
  00283	5e		 pop	 esi
  00284	33 cd		 xor	 ecx, ebp
  00286	5b		 pop	 ebx
  00287	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0028c	8b e5		 mov	 esp, ebp
  0028e	5d		 pop	 ebp
  0028f	c2 10 00	 ret	 16			; 00000010H
?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z ENDP ; CGraphicObjectInstance::isIntersect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?isShow@CGraphicObjectInstance@@QAE_NXZ
_TEXT	SEGMENT
?isShow@CGraphicObjectInstance@@QAE_NXZ PROC		; CGraphicObjectInstance::isShow, COMDAT
; _this$ = ecx

; 205  : 	return m_isVisible;

  00000	8a 41 68	 mov	 al, BYTE PTR [ecx+104]

; 206  : }

  00003	c3		 ret	 0
?isShow@CGraphicObjectInstance@@QAE_NXZ ENDP		; CGraphicObjectInstance::isShow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?Hide@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Hide@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Hide, COMDAT
; _this$ = ecx

; 201  : 	m_isVisible = false;

  00000	c6 41 68 00	 mov	 BYTE PTR [ecx+104], 0

; 202  : }

  00004	c3		 ret	 0
?Hide@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Hide
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?Show@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Show@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Show, COMDAT
; _this$ = ecx

; 196  : 	m_isVisible = true;

  00000	c6 41 68 01	 mov	 BYTE PTR [ecx+104], 1

; 197  : }

  00004	c3		 ret	 0
?Show@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?Transform@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Transform@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Transform, COMDAT
; _this$ = ecx

; 104  : 	m_worldMatrix = m_mRotation;

  00000	f3 0f 6f 41 28	 movdqu	 xmm0, XMMWORD PTR [ecx+40]
  00005	f3 0f 7f 41 6c	 movdqu	 XMMWORD PTR [ecx+108], xmm0
  0000a	f3 0f 6f 41 38	 movdqu	 xmm0, XMMWORD PTR [ecx+56]
  0000f	f3 0f 7f 41 7c	 movdqu	 XMMWORD PTR [ecx+124], xmm0
  00014	f3 0f 6f 41 48	 movdqu	 xmm0, XMMWORD PTR [ecx+72]
  00019	f3 0f 7f 81 8c
	00 00 00	 movdqu	 XMMWORD PTR [ecx+140], xmm0
  00021	f3 0f 6f 41 58	 movdqu	 xmm0, XMMWORD PTR [ecx+88]
  00026	f3 0f 7f 81 9c
	00 00 00	 movdqu	 XMMWORD PTR [ecx+156], xmm0

; 105  : 
; 106  : 	m_worldMatrix._41	+= m_v3Position.x;

  0002e	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00033	f3 0f 58 81 9c
	00 00 00	 addss	 xmm0, DWORD PTR [ecx+156]
  0003b	f3 0f 11 81 9c
	00 00 00	 movss	 DWORD PTR [ecx+156], xmm0

; 107  : 	m_worldMatrix._42	+= m_v3Position.y;

  00043	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00048	f3 0f 58 81 a0
	00 00 00	 addss	 xmm0, DWORD PTR [ecx+160]
  00050	f3 0f 11 81 a0
	00 00 00	 movss	 DWORD PTR [ecx+160], xmm0

; 108  : 	m_worldMatrix._43	+= m_v3Position.z;	

  00058	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  0005d	f3 0f 58 81 a4
	00 00 00	 addss	 xmm0, DWORD PTR [ecx+164]
  00065	f3 0f 11 81 a4
	00 00 00	 movss	 DWORD PTR [ecx+164], xmm0

; 109  : }

  0006d	c3		 ret	 0
?Transform@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Transform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?Deform@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Deform@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Deform, COMDAT
; _this$ = ecx

; 94   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 95   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN2@Deform

; 96   : 		return;
; 97   : 
; 98   : 	OnDeform();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 2c	 jmp	 DWORD PTR [eax+44]
$LN2@Deform:
  00014	5e		 pop	 esi

; 99   : }

  00015	c3		 ret	 0
?Deform@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Deform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::RenderPCBlocker, COMDAT
; _this$ = ecx

; 79   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 80   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN2@RenderPCBl

; 81   : 		return;
; 82   : 
; 83   : 	OnRenderPCBlocker();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 20	 jmp	 DWORD PTR [eax+32]
$LN2@RenderPCBl:
  00014	5e		 pop	 esi

; 84   : }

  00015	c3		 ret	 0
?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::RenderPCBlocker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?RenderShadow@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderShadow@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::RenderShadow, COMDAT
; _this$ = ecx

; 71   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 72   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN2@RenderShad

; 73   : 		return;
; 74   : 
; 75   : 	OnRenderShadow();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 1c	 jmp	 DWORD PTR [eax+28]
$LN2@RenderShad:
  00014	5e		 pop	 esi

; 76   : }

  00015	c3		 ret	 0
?RenderShadow@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::RenderShadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::RenderToShadowMap, COMDAT
; _this$ = ecx

; 63   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 64   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN2@RenderToSh

; 65   : 		return;
; 66   : 
; 67   : 	OnRenderToShadowMap();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 18	 jmp	 DWORD PTR [eax+24]
$LN2@RenderToSh:
  00014	5e		 pop	 esi

; 68   : }

  00015	c3		 ret	 0
?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::RenderToShadowMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?BlendRender@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?BlendRender@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::BlendRender, COMDAT
; _this$ = ecx

; 55   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 56   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN2@BlendRende

; 57   : 		return;
; 58   : 
; 59   : 	OnBlendRender();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 14	 jmp	 DWORD PTR [eax+20]
$LN2@BlendRende:
  00014	5e		 pop	 esi

; 60   : }

  00015	c3		 ret	 0
?BlendRender@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::BlendRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?Render@CGraphicObjectInstance@@QAE_NXZ
_TEXT	SEGMENT
?Render@CGraphicObjectInstance@@QAE_NXZ PROC		; CGraphicObjectInstance::Render, COMDAT
; _this$ = ecx

; 34   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 35   : 	/*
; 36   : 	if (m_CullingHandle)
; 37   : 	{
; 38   : 		SpherePack * ps = m_CullingHandle->GetParent();
; 39   : 		CScreen s;
; 40   : 		s.SetColorOperation();
; 41   : 		//s.SetDiffuseColor(1,isShow()?1:0,0);
; 42   : 		//s.RenderCircle2d(m_CullingHandle->GetCenter().x,m_CullingHandle->GetCenter().y,m_CullingHandle->GetCenter().z,m_CullingHandle->GetRadius());
; 43   : 		s.SetDiffuseColor(1,isShow()?1:0,ps->HasSpherePackFlag(SPF_PARTIAL)?1:0);
; 44   : 		s.RenderCircle2d(ps->GetCenter().x,ps->GetCenter().y,ps->GetCenter().z,ps->GetRadius());
; 45   : 	}
; 46   : 	//*/
; 47   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	75 02		 jne	 SHORT $LN1@Render
  0000c	5e		 pop	 esi

; 52   : }

  0000d	c3		 ret	 0
$LN1@Render:

; 48   : 		return false;
; 49   : 
; 50   : 	OnRender();

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	8b ce		 mov	 ecx, esi
  00012	ff 50 10	 call	 DWORD PTR [eax+16]

; 51   : 	return true;

  00015	b0 01		 mov	 al, 1
  00017	5e		 pop	 esi

; 52   : }

  00018	c3		 ret	 0
?Render@CGraphicObjectInstance@@QAE_NXZ ENDP		; CGraphicObjectInstance::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?Update@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Update@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Update, COMDAT
; _this$ = ecx

; 87   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 88   : 	OnUpdate();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 28	 call	 DWORD PTR [eax+40]

; 89   : 
; 90   : 	UpdateBoundingSphere();

  00008	8b ce		 mov	 ecx, esi
  0000a	5e		 pop	 esi
  0000b	e9 00 00 00 00	 jmp	 ?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::UpdateBoundingSphere
?Update@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?Clear@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Clear@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Clear, COMDAT
; _this$ = ecx

; 11   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 12   : 	if (m_CullingHandle)

  00003	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]
  00009	85 c0		 test	 eax, eax
  0000b	74 16		 je	 SHORT $LN1@Clear

; 13   : 	{
; 14   : 		CCullingManager::Instance().Unregister(m_CullingHandle);

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z ; CCullingManager::Unregister

; 15   : 		m_CullingHandle = NULL;

  00019	c7 86 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+360], 0
$LN1@Clear:

; 16   : 	}
; 17   : 
; 18   : 	ClearHeightInstance();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearHeightInstance

; 19   : 
; 20   : 	m_isVisible = TRUE;

  0002a	c6 46 68 01	 mov	 BYTE PTR [esi+104], 1
  0002e	0f 57 c0	 xorps	 xmm0, xmm0

; 21   : 
; 22   : 	m_v3Position.x = m_v3Position.y = m_v3Position.z = 0.0f;

  00031	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 29   : 
; 30   : 	OnClear();

  00038	8b ce		 mov	 ecx, esi
  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00048	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00056	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0005d	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  00064	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0006b	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00072	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  0007c	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
  00086	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  00090	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  0009a	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  000a4	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  000ae	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  000b8	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  000c2	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  000c9	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  000d0	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  000d7	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000de	c7 86 a8 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+168], 1065353216 ; 3f800000H
  000e8	c7 86 94 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+148], 1065353216 ; 3f800000H
  000f2	c7 86 80 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+128], 1065353216 ; 3f800000H
  000fc	c7 46 6c 00 00
	80 3f		 mov	 DWORD PTR [esi+108], 1065353216 ; 3f800000H
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 28   : 	ZeroMemory(m_abyPortalID, sizeof(m_abyPortalID));

  00103	66 0f d6 86 60
	01 00 00	 movq	 QWORD PTR [esi+352], xmm0

; 29   : 
; 30   : 	OnClear();

  0010b	8b 06		 mov	 eax, DWORD PTR [esi]
  0010d	5e		 pop	 esi
  0010e	ff 60 24	 jmp	 DWORD PTR [eax+36]
?Clear@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z PROC ; CGraphicObjectInstance::SetRotationMatrix, COMDAT
; _this$ = ecx

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 153  : 	m_mRotation = m;

  00003	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00006	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  0000a	f3 0f 7f 41 28	 movdqu	 XMMWORD PTR [ecx+40], xmm0
  0000f	f3 0f 6f 40 10	 movdqu	 xmm0, XMMWORD PTR [eax+16]
  00014	f3 0f 7f 41 38	 movdqu	 XMMWORD PTR [ecx+56], xmm0
  00019	f3 0f 6f 40 20	 movdqu	 xmm0, XMMWORD PTR [eax+32]
  0001e	f3 0f 7f 41 48	 movdqu	 XMMWORD PTR [ecx+72], xmm0
  00023	f3 0f 6f 40 30	 movdqu	 xmm0, XMMWORD PTR [eax+48]
  00028	f3 0f 7f 41 58	 movdqu	 XMMWORD PTR [ecx+88], xmm0

; 154  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z ENDP ; CGraphicObjectInstance::SetRotationMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_q$ = 8							; size = 4
?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z PROC ; CGraphicObjectInstance::SetRotationQuaternion, COMDAT
; _this$ = ecx

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 148  : 	D3DXMatrixRotationQuaternion(&m_mRotation, &q);

  00003	ff 75 08	 push	 DWORD PTR _q$[ebp]
  00006	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 149  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z ENDP ; CGraphicObjectInstance::SetRotationQuaternion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_fYaw$ = 8						; size = 4
_fPitch$ = 12						; size = 4
_fRoll$ = 16						; size = 4
?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z PROC	; CGraphicObjectInstance::SetRotation, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 167  : 	//m_fRotation = fRotation;
; 168  : 	m_fYaw = fYaw;
; 169  : 	m_fPitch = fPitch;
; 170  : 	m_fRoll = fRoll;

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fRoll$[ebp]

; 171  : 
; 172  : 	D3DXMatrixRotationYawPitchRoll(&m_mRotation, D3DXToRadian(fYaw), D3DXToRadian(fPitch), D3DXToRadian(fRoll));

  00008	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  0000b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3c8efa35
  00013	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00016	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fPitch$[ebp]
  0001b	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fYaw$[ebp]
  00020	f3 0f 11 41 24	 movss	 DWORD PTR [ecx+36], xmm0
  00025	f3 0f 11 51 20	 movss	 DWORD PTR [ecx+32], xmm2
  0002a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0002e	f3 0f 11 59 1c	 movss	 DWORD PTR [ecx+28], xmm3
  00033	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00037	f3 0f 59 d9	 mulss	 xmm3, xmm1
  0003b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00041	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  00047	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _D3DXMatrixRotationYawPitchRoll@16

; 173  : }

  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z ENDP	; CGraphicObjectInstance::SetRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?SetRotation@CGraphicObjectInstance@@QAEXM@Z
_TEXT	SEGMENT
_fRotation$ = 8						; size = 4
?SetRotation@CGraphicObjectInstance@@QAEXM@Z PROC	; CGraphicObjectInstance::SetRotation, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 158  : 	m_fYaw = 0;
; 159  : 	m_fPitch = 0;
; 160  : 	m_fRoll = fRotation;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRotation$[ebp]

; 161  : 
; 162  : 	D3DXMatrixRotationZ(&m_mRotation, D3DXToRadian(fRotation));

  00008	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  0000b	f3 0f 11 41 24	 movss	 DWORD PTR [ecx+36], xmm0
  00010	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00018	51		 push	 ecx
  00019	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00020	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00027	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _D3DXMatrixRotationZ@8

; 163  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?SetRotation@CGraphicObjectInstance@@QAEXM@Z ENDP	; CGraphicObjectInstance::SetRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?SetScale@CGraphicObjectInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetScale@CGraphicObjectInstance@@QAEXMMM@Z PROC	; CGraphicObjectInstance::SetScale, COMDAT
; _this$ = ecx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  : 	m_v3Scale.x = x;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00008	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 190  : 	m_v3Scale.y = y;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00012	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 191  : 	m_v3Scale.z = z;

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  0001c	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 192  : }

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?SetScale@CGraphicObjectInstance@@QAEXMMM@Z ENDP	; CGraphicObjectInstance::SetScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_newposition$ = 8					; size = 4
?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z PROC ; CGraphicObjectInstance::SetPosition, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 184  : 	m_v3Position = newposition;

  00003	8b 45 08	 mov	 eax, DWORD PTR _newposition$[ebp]
  00006	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0000a	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00012	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 185  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CGraphicObjectInstance::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z PROC	; CGraphicObjectInstance::SetPosition, COMDAT
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 177  : 	m_v3Position.x = x;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00008	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 178  : 	m_v3Position.y = y;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00012	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 179  : 	m_v3Position.z = z;	

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  0001c	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 180  : }

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ENDP	; CGraphicObjectInstance::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetRoll@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetRoll@CGraphicObjectInstance@@QAEMXZ PROC		; CGraphicObjectInstance::GetRoll, COMDAT
; _this$ = ecx

; 138  : 	return m_fRoll;

  00000	d9 41 24	 fld	 DWORD PTR [ecx+36]

; 139  : }

  00003	c3		 ret	 0
?GetRoll@CGraphicObjectInstance@@QAEMXZ ENDP		; CGraphicObjectInstance::GetRoll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetPitch@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetPitch@CGraphicObjectInstance@@QAEMXZ PROC		; CGraphicObjectInstance::GetPitch, COMDAT
; _this$ = ecx

; 133  : 	return m_fPitch;

  00000	d9 41 20	 fld	 DWORD PTR [ecx+32]

; 134  : }

  00003	c3		 ret	 0
?GetPitch@CGraphicObjectInstance@@QAEMXZ ENDP		; CGraphicObjectInstance::GetPitch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetYaw@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetYaw@CGraphicObjectInstance@@QAEMXZ PROC		; CGraphicObjectInstance::GetYaw, COMDAT
; _this$ = ecx

; 128  : 	return m_fYaw;

  00000	d9 41 1c	 fld	 DWORD PTR [ecx+28]

; 129  : }

  00003	c3		 ret	 0
?GetYaw@CGraphicObjectInstance@@QAEMXZ ENDP		; CGraphicObjectInstance::GetYaw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetRotation@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetRotation@CGraphicObjectInstance@@QAEMXZ PROC	; CGraphicObjectInstance::GetRotation, COMDAT
; _this$ = ecx

; 123  : 	return GetRoll();

  00000	e9 00 00 00 00	 jmp	 ?GetRoll@CGraphicObjectInstance@@QAEMXZ ; CGraphicObjectInstance::GetRoll
?GetRotation@CGraphicObjectInstance@@QAEMXZ ENDP	; CGraphicObjectInstance::GetRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ PROC ; CGraphicObjectInstance::GetScale, COMDAT
; _this$ = ecx

; 118  : 	return m_v3Scale;

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 119  : }

  00003	c3		 ret	 0
?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ENDP ; CGraphicObjectInstance::GetScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ PROC ; CGraphicObjectInstance::GetPosition, COMDAT
; _this$ = ecx

; 113  : 	return m_v3Position;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 114  : }

  00003	c3		 ret	 0
?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ENDP ; CGraphicObjectInstance::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ??1CGraphicObjectInstance@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CGraphicObjectInstance@@UAE@XZ PROC			; CGraphicObjectInstance::~CGraphicObjectInstance, COMDAT
; _this$ = ecx

; 291  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicObjectInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicObjectInstance@@6B@
  0002f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 292  : 	Initialize();

  00036	e8 00 00 00 00	 call	 ?Initialize@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Initialize
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  0003b	8b 86 6c 01 00
	00		 mov	 eax, DWORD PTR [esi+364]
  00041	85 c0		 test	 eax, eax
  00043	74 27		 je	 SHORT $LN7@CGraphicOb
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  0004e	c7 86 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+364], 0

; 1630 : 			this->_Mylast = pointer();

  00058	c7 86 70 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+368], 0

; 1631 : 			this->_Myend = pointer();

  00062	c7 86 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+372], 0
$LN7@CGraphicOb:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 293  : }

  0006c	8b ce		 mov	 ecx, esi
  0006e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00075	e8 00 00 00 00	 call	 ??1CGraphicCollisionObject@@UAE@XZ ; CGraphicCollisionObject::~CGraphicCollisionObject
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5e		 pop	 esi
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CGraphicObjectInstance@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicCollisionObject@@UAE@XZ ; CGraphicCollisionObject::~CGraphicCollisionObject
__unwindfunclet$??1CGraphicObjectInstance@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 01 00
	00		 add	 ecx, 364		; 0000016cH
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
__ehhandler$??1CGraphicObjectInstance@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicObjectInstance@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicObjectInstance@@UAE@XZ ENDP			; CGraphicObjectInstance::~CGraphicObjectInstance
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp
;	COMDAT ??0CGraphicObjectInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphicObjectInstance@@QAE@XZ PROC			; CGraphicObjectInstance::CGraphicObjectInstance, COMDAT
; _this$ = ecx

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicObjectInstance@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CGraphicCollisionObject@@QAE@XZ ; CGraphicCollisionObject::CGraphicCollisionObject
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicObjectInstance@@6B@
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 482  : 		_Myfirst = pointer();

  0003b	c7 86 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+364], 0

; 483  : 		_Mylast = pointer();

  00045	c7 86 70 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+368], 0

; 484  : 		_Myend = pointer();

  0004f	c7 86 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+372], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\grpobjectinstance.cpp

; 265  : 	Initialize();

  00059	8b ce		 mov	 ecx, esi
  0005b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005f	c7 86 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+360], 0
  00069	e8 00 00 00 00	 call	 ?Initialize@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Initialize

; 266  : }

  0006e	8b c6		 mov	 eax, esi
  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5e		 pop	 esi
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicCollisionObject@@UAE@XZ ; CGraphicCollisionObject::~CGraphicCollisionObject
__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 01 00
	00		 add	 ecx, 364		; 0000016cH
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
__ehhandler$??0CGraphicObjectInstance@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicObjectInstance@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicObjectInstance@@QAE@XZ ENDP			; CGraphicObjectInstance::CGraphicObjectInstance
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\collisiondata.h
;	COMDAT ?GetCollisionMovementAdjust@CBaseCollisionInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?GetCollisionMovementAdjust@CBaseCollisionInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CBaseCollisionInstance::GetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 92   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 			return OnGetCollisionMovementAdjust(s);

  00003	ff 75 0c	 push	 DWORD PTR _s$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000b	ff 50 04	 call	 DWORD PTR [eax+4]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 94   : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?GetCollisionMovementAdjust@CBaseCollisionInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CBaseCollisionInstance::GetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\collisiondata.h
;	COMDAT ?CollisionDynamicSphere@CBaseCollisionInstance@@QBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?CollisionDynamicSphere@CBaseCollisionInstance@@QBE_NABUCDynamicSphereInstance@@@Z PROC ; CBaseCollisionInstance::CollisionDynamicSphere, COMDAT
; _this$ = ecx

; 86   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 			return OnCollisionDynamicSphere(s);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 88   : 		}

  00008	5d		 pop	 ebp

; 87   : 			return OnCollisionDynamicSphere(s);

  00009	ff e0		 jmp	 eax
?CollisionDynamicSphere@CBaseCollisionInstance@@QBE_NABUCDynamicSphereInstance@@@Z ENDP ; CBaseCollisionInstance::CollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\collisiondata.h
;	COMDAT ?MovementCollisionDynamicSphere@CBaseCollisionInstance@@QBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?MovementCollisionDynamicSphere@CBaseCollisionInstance@@QBE_NABUCDynamicSphereInstance@@@Z PROC ; CBaseCollisionInstance::MovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 82   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 83   : 			return OnMovementCollisionDynamicSphere(s);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 84   : 		}

  00008	5d		 pop	 ebp

; 83   : 			return OnMovementCollisionDynamicSphere(s);

  00009	ff e0		 jmp	 eax
?MovementCollisionDynamicSphere@CBaseCollisionInstance@@QBE_NABUCDynamicSphereInstance@@@Z ENDP ; CBaseCollisionInstance::MovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCCullingManager@@@@SAAAVCCullingManager@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCCullingManager@@@@SAAAVCCullingManager@@XZ PROC ; CSingleton<CCullingManager>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCCullingManager@@@@SAAAVCCullingManager@@XZ ENDP ; CSingleton<CCullingManager>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
;	COMDAT ?ComputeBindingDistance@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?ComputeBindingDistance@SpherePack@@QAEXPAV1@@Z PROC	; SpherePack::ComputeBindingDistance, COMDAT
; _this$ = ecx

; 240  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00003	8b 45 08	 mov	 eax, DWORD PTR _parent$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	f3 0f 10 48 10	 movss	 xmm1, DWORD PTR [eax+16]
  0000e	f3 0f 5c 49 10	 subss	 xmm1, DWORD PTR [ecx+16]

; 242  : 		if ( mBindingDistance <= 0 )

  00013	0f 2f c1	 comiss	 xmm0, xmm1
  00016	f3 0f 11 49 40	 movss	 DWORD PTR [ecx+64], xmm1
  0001b	72 0b		 jb	 SHORT $LN2@ComputeBin

; 243  : 			mBindingDistance = 0;

  0001d	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 246  : 	}

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN2@ComputeBin:

; 244  : 		else
; 245  : 			mBindingDistance*=mBindingDistance;

  00028	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002c	f3 0f 11 49 40	 movss	 DWORD PTR [ecx+64], xmm1

; 246  : 	}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?ComputeBindingDistance@SpherePack@@QAEXPAV1@@Z ENDP	; SpherePack::ComputeBindingDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
;	COMDAT ?DistanceSquared@SpherePack@@QBEMPBV1@@Z
_TEXT	SEGMENT
tv188 = 8						; size = 4
_pack$ = 8						; size = 4
?DistanceSquared@SpherePack@@QBEMPBV1@@Z PROC		; SpherePack::DistanceSquared, COMDAT
; _this$ = ecx

; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _pack$[ebp]
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h

; 170  : 		float dx = a.x - x;

  00006	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 171  : 		float dy = a.y - y;

  0000b	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00010	f3 0f 5c 51 08	 subss	 xmm2, DWORD PTR [ecx+8]
  00015	f3 0f 5c 49 04	 subss	 xmm1, DWORD PTR [ecx+4]

; 172  : 		float dz = a.z - z;

  0001a	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0001f	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  00024	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00028	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002c	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00030	f3 0f 58 d1	 addss	 xmm2, xmm1
  00034	f3 0f 58 d0	 addss	 xmm2, xmm0
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h

; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };

  00038	f3 0f 11 55 08	 movss	 DWORD PTR tv188[ebp], xmm2
  0003d	d9 45 08	 fld	 DWORD PTR tv188[ebp]
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?DistanceSquared@SpherePack@@QBEMPBV1@@Z ENDP		; SpherePack::DistanceSquared
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
;	COMDAT ?Unlink@SpherePack@@QAEXXZ
_TEXT	SEGMENT
?Unlink@SpherePack@@QAEXXZ PROC				; SpherePack::Unlink, COMDAT
; _this$ = ecx

; 147  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out

  00003	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Unlink

; 149  : 		{
; 150  : 			*mFifo1 = 0;

  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 151  : 			mFifo1 = 0;

  00010	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN3@Unlink:

; 152  : 		}
; 153  : 		
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out

  00017	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0001a	85 c0		 test	 eax, eax
  0001c	74 0d		 je	 SHORT $LN2@Unlink

; 155  : 		{
; 156  : 			*mFifo2 = 0;

  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 157  : 			mFifo2 = 0;

  00024	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
$LN2@Unlink:

; 158  : 		}
; 159  : 		
; 160  : 		if ( mParent ) mParent->LostChild(this);

  0002b	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0002e	85 c9		 test	 ecx, ecx
  00030	74 06		 je	 SHORT $LN6@Unlink
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?LostChild@SpherePack@@QAEXPAV1@@Z ; SpherePack::LostChild
$LN6@Unlink:

; 161  : 		
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 		
; 164  : 		mParent = 0; // got no father anymore

  00038	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0003f	5e		 pop	 esi

; 165  : 	}

  00040	c3		 ret	 0
?Unlink@SpherePack@@QAEXXZ ENDP				; SpherePack::Unlink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\sphere.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
;	COMDAT ?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
_radius$ = 12						; size = 4
?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z PROC	; SpherePack::NewPosRadius, COMDAT
; _this$ = ecx

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00003	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00006	56		 push	 esi
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h

; 470  : {

  00007	8b f1		 mov	 esi, ecx
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00017	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h

; 474  : 	if (mParent && !HasSpherePackFlag(SPF_INTEGRATE))

  0001a	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0001d	85 c9		 test	 ecx, ecx
  0001f	0f 84 a6 00 00
	00		 je	 $LN1@NewPosRadi

; 133  : 		if ( mFlags & flag ) return true;

  00025	f6 46 38 20	 test	 BYTE PTR [esi+56], 32	; 00000020H
  00029	0f 85 9c 00 00
	00		 jne	 $LN1@NewPosRadi

; 475  : 	{
; 476  : 		if (radius != GetRadius())

  0002f	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _radius$[ebp]
  00034	0f 2e 56 10	 ucomiss xmm2, DWORD PTR [esi+16]
  00038	9f		 lahf
  00039	f6 c4 44	 test	 ah, 68			; 00000044H
  0003c	7b 39		 jnp	 SHORT $LN15@NewPosRadi
; File c:\gamepackages\client\tools\patcher2017\spherelib\sphere.h

; 68   : 		mRadius2 = radius*radius;

  0003e	0f 28 c2	 movaps	 xmm0, xmm2
  00041	f3 0f 11 56 10	 movss	 DWORD PTR [esi+16], xmm2
  00046	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0004a	f3 0f 11 46 14	 movss	 DWORD PTR [esi+20], xmm0
  0004f	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00052	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  00057	f3 0f 5c ca	 subss	 xmm1, xmm2

; 242  : 		if ( mBindingDistance <= 0 )

  0005b	0f 2f c1	 comiss	 xmm0, xmm1
  0005e	f3 0f 11 4e 40	 movss	 DWORD PTR [esi+64], xmm1
  00063	72 09		 jb	 SHORT $LN16@NewPosRadi

; 243  : 			mBindingDistance = 0;

  00065	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 244  : 		else

  0006c	eb 09		 jmp	 SHORT $LN15@NewPosRadi
$LN16@NewPosRadi:

; 245  : 			mBindingDistance*=mBindingDistance;

  0006e	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00072	f3 0f 11 4e 40	 movss	 DWORD PTR [esi+64], xmm1
$LN15@NewPosRadi:

; 477  : 		{
; 478  : 			SetRadius(radius);
; 479  : 			ComputeBindingDistance(mParent);
; 480  : 		}
; 481  : 		
; 482  : 		mFactory->AddRecompute(mParent);

  00077	51		 push	 ecx
  00078	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0007b	e8 00 00 00 00	 call	 ?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute

; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };
; 139  : 	SpherePack * GetParent(void) const { return mParent; };
; 140  : 	
; 141  : 	// Sphere has a new position.
; 142  : 	inline void NewPos(const Vector3d &pos);
; 143  : 	// Sphere has a new position and radius
; 144  : 	inline void NewPosRadius(const Vector3d &pos,float radius);
; 145  : 	
; 146  : 	void Unlink(void)
; 147  : 	{
; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out
; 149  : 		{
; 150  : 			*mFifo1 = 0;
; 151  : 			mFifo1 = 0;
; 152  : 		}
; 153  : 		
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out
; 155  : 		{
; 156  : 			*mFifo2 = 0;
; 157  : 			mFifo2 = 0;
; 158  : 		}
; 159  : 		
; 160  : 		if ( mParent ) mParent->LostChild(this);
; 161  : 		
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 		
; 164  : 		mParent = 0; // got no father anymore
; 165  : 	}
; 166  : 	
; 167  : 	
; 168  : 	void AddChild(SpherePack *pack)
; 169  : 	{
; 170  : 		
; 171  : 		SpherePack *my_child = mChildren;
; 172  : 		mChildren = pack; // new head of list
; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..
; 179  : 		
; 180  : 		mChildCount++;
; 181  : 
; 182  : #if defined(_DEBUG)
; 183  : 		float dist = DistanceSquared(pack);
; 184  : 		float radius = sqrtf(dist) + pack->GetRadius();
; 185  : 		
; 186  : 		assert( radius <= GetRadius()+0.0001f );
; 187  : #endif
; 188  : 	}
; 189  : 	
; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }
; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }
; 192  : 	
; 193  : 	SpherePack * _GetNextSibling(void) const 
; 194  : 	{ 
; 195  : 		return mNextSibling; 
; 196  : 	}
; 197  : 	SpherePack * _GetPrevSibling(void) const 
; 198  : 	{ 
; 199  : 		return mPrevSibling; 
; 200  : 	}
; 201  : 	SpherePack * GetChildren(void)    const { return mChildren; }
; 202  : 	
; 203  : 	SpherePack * GetNext(void)     const { return mNext; };
; 204  : 	SpherePack * GetPrevious(void) const { return mPrevious; };
; 205  : 	
; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };
; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };
; 208  : 	
; 209  : 	void * GetUserData(void) const { return mUserData; };
; 210  : 	void   SetUserData(void *data, bool isSphere) { mUserData = data; IS_SPHERE=isSphere;};
; 211  : 	
; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };

  00080	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h

; 170  : 		float dx = a.x - x;

  00083	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 171  : 		float dy = a.y - y;

  00088	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  0008d	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  00092	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 172  : 		float dz = a.z - z;

  00097	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0009c	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  000a1	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000a5	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000a9	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000ad	f3 0f 58 d1	 addss	 xmm2, xmm1
  000b1	f3 0f 58 d0	 addss	 xmm2, xmm0
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h

; 486  : 		if (dist >= mBindingDistance)

  000b5	0f 2f 56 40	 comiss	 xmm2, DWORD PTR [esi+64]
  000b9	72 10		 jb	 SHORT $LN1@NewPosRadi

; 487  : 		{
; 488  : 			Unlink();

  000bb	8b ce		 mov	 ecx, esi
  000bd	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink

; 489  : 			mFactory->AddIntegrate(this);

  000c2	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000c5	56		 push	 esi
  000c6	e8 00 00 00 00	 call	 ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
$LN1@NewPosRadi:
  000cb	5e		 pop	 esi

; 490  : 		}
; 491  : 	}
; 492  : }

  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z ENDP	; SpherePack::NewPosRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
;	COMDAT ?NewPos@SpherePack@@QAEXABVVector3d@@@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
?NewPos@SpherePack@@QAEXABVVector3d@@@Z PROC		; SpherePack::NewPos, COMDAT
; _this$ = ecx

; 448  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00003	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00006	56		 push	 esi
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h

; 448  : {

  00007	8b f1		 mov	 esi, ecx
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00017	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h

; 452  : 	if (mParent && !HasSpherePackFlag(SPF_INTEGRATE))

  0001a	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0001d	85 c0		 test	 eax, eax
  0001f	74 57		 je	 SHORT $LN1@NewPos

; 133  : 		if ( mFlags & flag ) return true;

  00021	f6 46 38 20	 test	 BYTE PTR [esi+56], 32	; 00000020H
  00025	75 51		 jne	 SHORT $LN1@NewPos
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h

; 170  : 		float dx = a.x - x;

  00027	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 171  : 		float dy = a.y - y;

  0002c	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00031	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  00036	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 172  : 		float dz = a.z - z;

  0003b	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00040	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  00045	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00049	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0004d	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00051	f3 0f 58 d1	 addss	 xmm2, xmm1
  00055	f3 0f 58 d0	 addss	 xmm2, xmm0
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h

; 456  : 		if (dist >= mBindingDistance) // if that exceeds our binding distance...

  00059	0f 2f 56 40	 comiss	 xmm2, DWORD PTR [esi+64]
  0005d	72 19		 jb	 SHORT $LN1@NewPos

; 457  : 		{
; 458  : 			// If our parent, is not already marked to be recomputed (rebalance the sphere), then add him to the recomputation fifo.
; 459  : 			mFactory->AddRecompute(mParent);

  0005f	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute

; 460  : 
; 461  : 			// Unlink ourselves from the parent sphere and place ourselves into the root node.
; 462  : 			Unlink();

  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink

; 463  : 			mFactory->AddIntegrate(this); // add ourselves to the re-integration fifo.

  0006f	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
$LN1@NewPos:
  00078	5e		 pop	 esi

; 464  : 		}
; 465  : 	}
; 466  : 	
; 467  : }

  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
?NewPos@SpherePack@@QAEXABVVector3d@@@Z ENDP		; SpherePack::NewPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\spherelib\spherepack.h
;	COMDAT ?HasSpherePackFlag@SpherePack@@QBE_NW4SpherePackFlag@@@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
?HasSpherePackFlag@SpherePack@@QBE_NW4SpherePackFlag@@@Z PROC ; SpherePack::HasSpherePackFlag, COMDAT
; _this$ = ecx

; 132  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 133  : 		if ( mFlags & flag ) return true;

  00003	8b 45 08	 mov	 eax, DWORD PTR _flag$[ebp]
  00006	85 41 38	 test	 DWORD PTR [ecx+56], eax
  00009	0f 95 c0	 setne	 al

; 134  : 		return false;
; 135  : 	};

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?HasSpherePackFlag@SpherePack@@QBE_NW4SpherePackFlag@@@Z ENDP ; SpherePack::HasSpherePackFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\spherelib\sphere.h
;	COMDAT ?SetRadius@Sphere@@QAEXM@Z
_TEXT	SEGMENT
_radius$ = 8						; size = 4
?SetRadius@Sphere@@QAEXM@Z PROC				; Sphere::SetRadius, COMDAT
; _this$ = ecx

; 66   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 		mRadius = radius;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00008	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 68   : 		mRadius2 = radius*radius;

  0000d	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00011	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 69   : 	}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?SetRadius@Sphere@@QAEXM@Z ENDP				; Sphere::SetRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\spherelib\sphere.h
;	COMDAT ?GetRadius@Sphere@@QBEMXZ
_TEXT	SEGMENT
?GetRadius@Sphere@@QBEMXZ PROC				; Sphere::GetRadius, COMDAT
; _this$ = ecx

; 45   : 	float GetRadius(void) const { return mRadius; };

  00000	d9 41 10	 fld	 DWORD PTR [ecx+16]
  00003	c3		 ret	 0
?GetRadius@Sphere@@QBEMXZ ENDP				; Sphere::GetRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
;	COMDAT ?DistanceSq@Vector3d@@QBEMABV1@@Z
_TEXT	SEGMENT
tv184 = 8						; size = 4
_a$ = 8							; size = 4
?DistanceSq@Vector3d@@QBEMABV1@@Z PROC			; Vector3d::DistanceSq, COMDAT
; _this$ = ecx

; 169  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		float dx = a.x - x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00006	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]

; 171  : 		float dy = a.y - y;

  0000a	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0000f	f3 0f 5c 51 04	 subss	 xmm2, DWORD PTR [ecx+4]
  00014	f3 0f 5c 09	 subss	 xmm1, DWORD PTR [ecx]

; 172  : 		float dz = a.z - z;

  00018	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0001d	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  00022	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00026	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002a	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0002e	f3 0f 58 d1	 addss	 xmm2, xmm1
  00032	f3 0f 58 d0	 addss	 xmm2, xmm0
  00036	f3 0f 11 55 08	 movss	 DWORD PTR tv184[ebp], xmm2
  0003b	d9 45 08	 fld	 DWORD PTR tv184[ebp]

; 174  : 	};

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?DistanceSq@Vector3d@@QBEMABV1@@Z ENDP			; Vector3d::DistanceSq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
;	COMDAT ??4Vector3d@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_A$ = 8							; size = 4
??4Vector3d@@QAEAAV0@ABV0@@Z PROC			; Vector3d::operator=, COMDAT
; _this$ = ecx

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR _A$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 58   : 	return(*this);  };

  00016	8b c1		 mov	 eax, ecx
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??4Vector3d@@QAEAAV0@ABV0@@Z ENDP			; Vector3d::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\spherelib\vector.h
;	COMDAT ??0Vector3d@@QAE@XZ
_TEXT	SEGMENT
??0Vector3d@@QAE@XZ PROC				; Vector3d::Vector3d, COMDAT
; _this$ = ecx

; 26   : 	Vector3d(void) { };  // null constructor, does not inialize point.

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0Vector3d@@QAE@XZ ENDP				; Vector3d::Vector3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h
;	COMDAT ?GetDirection@CRay@@QBEXPAUD3DXVECTOR3@@PAM@Z
_TEXT	SEGMENT
_pv3Dir$ = 8						; size = 4
_pfRayRange$ = 12					; size = 4
?GetDirection@CRay@@QBEXPAUD3DXVECTOR3@@PAM@Z PROC	; CRay::GetDirection, COMDAT
; _this$ = ecx

; 40   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : 			*pv3Dir = m_v3Direction;

  00003	8b 55 08	 mov	 edx, DWORD PTR _pv3Dir$[ebp]
  00006	f3 0f 7e 41 18	 movq	 xmm0, QWORD PTR [ecx+24]
  0000b	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  0000f	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00012	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 42   : 			*pfRayRange = m_fRayRange;

  00015	8b 45 0c	 mov	 eax, DWORD PTR _pfRayRange$[ebp]
  00018	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0001b	89 08		 mov	 DWORD PTR [eax], ecx

; 43   : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?GetDirection@CRay@@QBEXPAUD3DXVECTOR3@@PAM@Z ENDP	; CRay::GetDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\ray.h
;	COMDAT ?GetStartPoint@CRay@@QBEXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_pv3Start$ = 8						; size = 4
?GetStartPoint@CRay@@QBEXPAUD3DXVECTOR3@@@Z PROC	; CRay::GetStartPoint, COMDAT
; _this$ = ecx

; 35   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 36   : 			*pv3Start = m_v3Start;

  00003	8b 55 08	 mov	 edx, DWORD PTR _pv3Start$[ebp]
  00006	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  0000a	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  0000e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00011	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 37   : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?GetStartPoint@CRay@@QBEXPAUD3DXVECTOR3@@@Z ENDP	; CRay::GetStartPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 65   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 61   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1510 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1511 : #ifdef D3DX_DEBUG
; 1512 :     if(!pOut)
; 1513 :         return NULL;
; 1514 : #endif
; 1515 : 
; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00006	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0
  0000d	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0
  00014	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
  0001b	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  00022	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
  00029	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  00030	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00037	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  0003e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00045	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0004c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00053	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0005a	c7 40 3c 00 00
	80 3f		 mov	 DWORD PTR [eax+60], 1065353216 ; 3f800000H
  00061	c7 40 28 00 00
	80 3f		 mov	 DWORD PTR [eax+40], 1065353216 ; 3f800000H
  00068	c7 40 14 00 00
	80 3f		 mov	 DWORD PTR [eax+20], 1065353216 ; 3f800000H
  0006f	c7 00 00 00 80
	3f		 mov	 DWORD PTR [eax], 1065353216 ; 3f800000H

; 1522 :     return pOut;
; 1523 : }

  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR4@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR4@@QAE@XZ PROC				; D3DXVECTOR4::D3DXVECTOR4, COMDAT
; _this$ = ecx

; 133  :     D3DXVECTOR4() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR4@@QAE@XZ ENDP				; D3DXVECTOR4::D3DXVECTOR4
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 181  :     y = fy;
; 182  :     z = fz;
; 183  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	4e		 dec	 esi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b cf		 mov	 ecx, edi
  00014	ff d3		 call	 ebx
  00016	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  00019	4e		 dec	 esi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5f		 pop	 edi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
