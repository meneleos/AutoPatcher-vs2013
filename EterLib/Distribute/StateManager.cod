; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\GamePackages\Client\Tools\Patcher2017\EterLib\StateManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_kLightData@@3USLightData@@A			; m_kLightData
_BSS	SEGMENT
?m_kLightData@@3USLightData@@A DB 0340H DUP (?)		; m_kLightData
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR4@@QAE@XZ				; D3DXVECTOR4::D3DXVECTOR4
PUBLIC	??0D3DXVECTOR4@@QAE@MMMM@Z			; D3DXVECTOR4::D3DXVECTOR4
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0D3DXMATRIX@@QAE@ABU_D3DMATRIX@@@Z		; D3DXMATRIX::D3DXMATRIX
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	??0CStreamData@@QAE@PAUIDirect3DVertexBuffer8@@I@Z ; CStreamData::CStreamData
PUBLIC	??8CStreamData@@QBE_NABV0@@Z			; CStreamData::operator==
PUBLIC	??_FCStreamData@@QAEXXZ				; CStreamData::`default constructor closure'
PUBLIC	??0CIndexData@@QAE@PAUIDirect3DIndexBuffer8@@I@Z ; CIndexData::CIndexData
PUBLIC	??8CIndexData@@QBE_NABV0@@Z			; CIndexData::operator==
PUBLIC	??0CStateManagerState@@QAE@XZ			; CStateManagerState::CStateManagerState
PUBLIC	?ResetState@CStateManagerState@@QAEXXZ		; CStateManagerState::ResetState
PUBLIC	??0?$CSingleton@VCStateManager@@@@QAE@XZ	; CSingleton<CStateManager>::CSingleton<CStateManager>
PUBLIC	??1?$CSingleton@VCStateManager@@@@UAE@XZ	; CSingleton<CStateManager>::~CSingleton<CStateManager>
PUBLIC	??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z	; CSingleton<CStateManager>::`scalar deleting destructor'
PUBLIC	??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z	; CStateManager::CStateManager
PUBLIC	??1CStateManager@@UAE@XZ			; CStateManager::~CStateManager
PUBLIC	?SetDefaultState@CStateManager@@QAEXXZ		; CStateManager::SetDefaultState
PUBLIC	?Restore@CStateManager@@QAEXXZ			; CStateManager::Restore
PUBLIC	?BeginScene@CStateManager@@QAE_NXZ		; CStateManager::BeginScene
PUBLIC	?EndScene@CStateManager@@QAEXXZ			; CStateManager::EndScene
PUBLIC	?SaveMaterial@CStateManager@@QAEXXZ		; CStateManager::SaveMaterial
PUBLIC	?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SaveMaterial
PUBLIC	?RestoreMaterial@CStateManager@@QAEXXZ		; CStateManager::RestoreMaterial
PUBLIC	?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial
PUBLIC	?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z ; CStateManager::GetMaterial
PUBLIC	?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z	; CStateManager::SetLight
PUBLIC	?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z	; CStateManager::GetLight
PUBLIC	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState
PUBLIC	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
PUBLIC	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
PUBLIC	?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z ; CStateManager::GetRenderState
PUBLIC	?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SaveTexture
PUBLIC	?RestoreTexture@CStateManager@@QAEXK@Z		; CStateManager::RestoreTexture
PUBLIC	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
PUBLIC	?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z ; CStateManager::GetTexture
PUBLIC	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState
PUBLIC	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState
PUBLIC	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
PUBLIC	?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z ; CStateManager::GetTextureStageState
PUBLIC	?SetBestFiltering@CStateManager@@QAEXK@Z	; CStateManager::SetBestFiltering
PUBLIC	?SaveVertexShader@CStateManager@@QAEXK@Z	; CStateManager::SaveVertexShader
PUBLIC	?RestoreVertexShader@CStateManager@@QAEXXZ	; CStateManager::RestoreVertexShader
PUBLIC	?SetVertexShader@CStateManager@@QAEXK@Z		; CStateManager::SetVertexShader
PUBLIC	?GetVertexShader@CStateManager@@QAEXPAK@Z	; CStateManager::GetVertexShader
PUBLIC	?SavePixelShader@CStateManager@@QAEXK@Z		; CStateManager::SavePixelShader
PUBLIC	?RestorePixelShader@CStateManager@@QAEXXZ	; CStateManager::RestorePixelShader
PUBLIC	?SetPixelShader@CStateManager@@QAEXK@Z		; CStateManager::SetPixelShader
PUBLIC	?GetPixelShader@CStateManager@@QAEXPAK@Z	; CStateManager::GetPixelShader
PUBLIC	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform
PUBLIC	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform
PUBLIC	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
PUBLIC	?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform
PUBLIC	?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SaveVertexShaderConstant
PUBLIC	?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z ; CStateManager::RestoreVertexShaderConstant
PUBLIC	?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant
PUBLIC	?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SavePixelShaderConstant
PUBLIC	?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z ; CStateManager::RestorePixelShaderConstant
PUBLIC	?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant
PUBLIC	?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SaveStreamSource
PUBLIC	?RestoreStreamSource@CStateManager@@QAEXI@Z	; CStateManager::RestoreStreamSource
PUBLIC	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource
PUBLIC	?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SaveIndices
PUBLIC	?RestoreIndices@CStateManager@@QAEXXZ		; CStateManager::RestoreIndices
PUBLIC	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
PUBLIC	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
PUBLIC	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
PUBLIC	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
PUBLIC	?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z ; CStateManager::DrawIndexedPrimitiveUP
PUBLIC	?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState
PUBLIC	?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z ; CStateManager::SetDevice
PUBLIC	??0?$allocator@VCStateID@@@std@@QAE@XZ		; std::allocator<CStateID>::allocator<CStateID>
PUBLIC	?deallocate@?$allocator@VCStateID@@@std@@QAEXPAVCStateID@@I@Z ; std::allocator<CStateID>::deallocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CStateID> >::_Wrap_alloc<std::allocator<CStateID> >
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAEXPAVCStateID@@I@Z ; std::_Wrap_alloc<std::allocator<CStateID> >::deallocate
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VCStateID@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CStateID> >::_Vector_val<std::_Simple_types<CStateID> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@@std@@QAE@ABV?$allocator@VCStateID@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CStateID,std::allocator<CStateID> > >::_Vector_alloc<0,std::_Vec_base_types<CStateID,std::allocator<CStateID> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CStateID,std::allocator<CStateID> > >::_Getal
PUBLIC	??0?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::vector<CStateID,std::allocator<CStateID> >
PUBLIC	??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
PUBLIC	?_Destroy@?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@IAEXPAVCStateID@@0@Z ; std::vector<CStateID,std::allocator<CStateID> >::_Destroy
PUBLIC	?_Tidy@?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@IAEXXZ ; std::vector<CStateID,std::allocator<CStateID> >::_Tidy
PUBLIC	??_GCStateManager@@UAEPAXI@Z			; CStateManager::`scalar deleting destructor'
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@@std@@YAXPAVCStateID@@0AAU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CStateID> > >
PUBLIC	??$_Ptr_cat@VCStateID@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCStateID@@0@Z ; std::_Ptr_cat<CStateID,CStateID>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@@std@@YAXPAVCStateID@@0AAU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CStateID> > >
PUBLIC	??$destroy@VCStateID@@@?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAEXPAVCStateID@@@Z ; std::_Wrap_alloc<std::allocator<CStateID> >::destroy<CStateID>
PUBLIC	??$destroy@VCStateID@@@?$allocator_traits@V?$allocator@VCStateID@@@std@@@std@@SAXAAV?$allocator@VCStateID@@@1@PAVCStateID@@@Z ; std::allocator_traits<std::allocator<CStateID> >::destroy<CStateID>
PUBLIC	??$destroy@VCStateID@@@?$allocator@VCStateID@@@std@@QAEXPAVCStateID@@@Z ; std::allocator<CStateID>::destroy<CStateID>
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCStateManager@@@@6B@		; CSingleton<CStateManager>::`vftable'
PUBLIC	??_7CStateManager@@6B@				; CStateManager::`vftable'
PUBLIC	??_R4CStateManager@@6B@				; CStateManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCStateManager@@@8			; CStateManager `RTTI Type Descriptor'
PUBLIC	??_R3CStateManager@@8				; CStateManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CStateManager@@8				; CStateManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CStateManager@@8			; CStateManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8	; CSingleton<CStateManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCStateManager@@@@@8	; CSingleton<CStateManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCStateManager@@@@8		; CSingleton<CStateManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCStateManager@@@@8		; CSingleton<CStateManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCStateManager@@@@6B@		; CSingleton<CStateManager>::`RTTI Complete Object Locator'
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_E?$CSingleton@VCStateManager@@@@UAEPAXI@Z:PROC ; CSingleton<CStateManager>::`vector deleting destructor'
EXTRN	??_ECStateManager@@UAEPAXI@Z:PROC		; CStateManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCStateManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCStateManager@@@@6B@ DD 00H		; CSingleton<CStateManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCStateManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCStateManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8 ; CSingleton<CStateManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCStateManager@@@@8 DD 00H		; CSingleton<CStateManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCStateManager@@@@@8
data$r	SEGMENT
??_R0?AV?$CSingleton@VCStateManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CStateManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCStateManager@@@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCStateManager@@@@@8 ; CSingleton<CStateManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CStateManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CStateManager@@8 DD FLAT:??_R0?AVCStateManager@@@8 ; CStateManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CStateManager@@8
rdata$r	SEGMENT
??_R2CStateManager@@8 DD FLAT:??_R1A@?0A@EA@CStateManager@@8 ; CStateManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CStateManager@@8
rdata$r	SEGMENT
??_R3CStateManager@@8 DD 00H				; CStateManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCStateManager@@@8
data$r	SEGMENT
??_R0?AVCStateManager@@@8 DD FLAT:??_7type_info@@6B@	; CStateManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStateManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CStateManager@@6B@
rdata$r	SEGMENT
??_R4CStateManager@@6B@ DD 00H				; CStateManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStateManager@@@8
	DD	FLAT:??_R3CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_7CStateManager@@6B@
CONST	SEGMENT
??_7CStateManager@@6B@ DD FLAT:??_R4CStateManager@@6B@	; CStateManager::`vftable'
	DD	FLAT:??_ECStateManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCStateManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCStateManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCStateManager@@@@6B@ ; CSingleton<CStateManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCStateManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CStateManager@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CStateManager@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CStateManager@@UAE@XZ$1
__ehfuncinfo$??1CStateManager@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CStateManager@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$1
__ehfuncinfo$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@VCStateID@@@?$allocator@VCStateID@@@std@@QAEXPAVCStateID@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@VCStateID@@@?$allocator@VCStateID@@@std@@QAEXPAVCStateID@@@Z PROC ; std::allocator<CStateID>::destroy<CStateID>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@VCStateID@@@?$allocator@VCStateID@@@std@@QAEXPAVCStateID@@@Z ENDP ; std::allocator<CStateID>::destroy<CStateID>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@VCStateID@@@?$allocator_traits@V?$allocator@VCStateID@@@std@@@std@@SAXAAV?$allocator@VCStateID@@@1@PAVCStateID@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@VCStateID@@@?$allocator_traits@V?$allocator@VCStateID@@@std@@@std@@SAXAAV?$allocator@VCStateID@@@1@PAVCStateID@@@Z PROC ; std::allocator_traits<std::allocator<CStateID> >::destroy<CStateID>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@VCStateID@@@?$allocator_traits@V?$allocator@VCStateID@@@std@@@std@@SAXAAV?$allocator@VCStateID@@@1@PAVCStateID@@@Z ENDP ; std::allocator_traits<std::allocator<CStateID> >::destroy<CStateID>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@VCStateID@@@?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAEXPAVCStateID@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@VCStateID@@@?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAEXPAVCStateID@@@Z PROC ; std::_Wrap_alloc<std::allocator<CStateID> >::destroy<CStateID>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@VCStateID@@@?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAEXPAVCStateID@@@Z ENDP ; std::_Wrap_alloc<std::allocator<CStateID> >::destroy<CStateID>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@@std@@YAXPAVCStateID@@0AAU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@@std@@YAXPAVCStateID@@0AAU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CStateID> > >, COMDAT

; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@@std@@YAXPAVCStateID@@0AAU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CStateID> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VCStateID@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCStateID@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VCStateID@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCStateID@@0@Z PROC ; std::_Ptr_cat<CStateID,CStateID>, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@VCStateID@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCStateID@@0@Z ENDP ; std::_Ptr_cat<CStateID,CStateID>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@@std@@YAXPAVCStateID@@0AAU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@@std@@YAXPAVCStateID@@0AAU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CStateID> > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@@std@@YAXPAVCStateID@@0AAU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CStateID> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCStateManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCStateManager@@UAEPAXI@Z PROC			; CStateManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CStateManager@@UAE@XZ ; CStateManager::~CStateManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCStateManager@@UAEPAXI@Z ENDP			; CStateManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@IAEXXZ PROC ; std::vector<CStateID,std::allocator<CStateID> >::_Tidy, COMDAT
; _this$ = ecx

; 1622 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN1@Tidy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Tidy:
  00026	5e		 pop	 esi

; 1632 : 			}
; 1633 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@IAEXXZ ENDP ; std::vector<CStateID,std::allocator<CStateID> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@IAEXPAVCStateID@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@IAEXPAVCStateID@@0@Z PROC ; std::vector<CStateID,std::allocator<CStateID> >::_Destroy, COMDAT
; _this$ = ecx

; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@IAEXPAVCStateID@@0@Z ENDP ; std::vector<CStateID,std::allocator<CStateID> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ PROC ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >, COMDAT
; _this$ = ecx

; 944  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);
; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN3@vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@vector:
  00026	5e		 pop	 esi

; 945  : 		_Tidy();
; 946  : 		}

  00027	c3		 ret	 0
??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ENDP ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ PROC ; std::vector<CStateID,std::allocator<CStateID> >::vector<CStateID,std::allocator<CStateID> >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 681  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 681  : 		}

  00016	c3		 ret	 0
??0?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ENDP ; std::vector<CStateID,std::allocator<CStateID> >::vector<CStateID,std::allocator<CStateID> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CStateID,std::allocator<CStateID> > >::_Getal, COMDAT
; _this$ = ecx

; 641  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 643  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CStateID,std::allocator<CStateID> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@@std@@QAE@ABV?$allocator@VCStateID@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@@std@@QAE@ABV?$allocator@VCStateID@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CStateID,std::allocator<CStateID> > >::_Vector_alloc<0,std::_Vec_base_types<CStateID,std::allocator<CStateID> > >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@@std@@QAE@ABV?$allocator@VCStateID@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CStateID,std::allocator<CStateID> > >::_Vector_alloc<0,std::_Vec_base_types<CStateID,std::allocator<CStateID> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VCStateID@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@VCStateID@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CStateID> >::_Vector_val<std::_Simple_types<CStateID> >, COMDAT
; _this$ = ecx

; 481  : 		{	// initialize values
; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 483  : 		_Mylast = pointer();
; 484  : 		_Myend = pointer();
; 485  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@VCStateID@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CStateID> >::_Vector_val<std::_Simple_types<CStateID> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAEXPAVCStateID@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAEXPAVCStateID@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CStateID> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAEXPAVCStateID@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CStateID> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CStateID> >::_Wrap_alloc<std::allocator<CStateID> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CStateID> >::_Wrap_alloc<std::allocator<CStateID> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@VCStateID@@@std@@QAEXPAVCStateID@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VCStateID@@@std@@QAEXPAVCStateID@@I@Z PROC ; std::allocator<CStateID>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@VCStateID@@@std@@QAEXPAVCStateID@@I@Z ENDP ; std::allocator<CStateID>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VCStateID@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VCStateID@@@std@@QAE@XZ PROC		; std::allocator<CStateID>::allocator<CStateID>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@VCStateID@@@std@@QAE@XZ ENDP		; std::allocator<CStateID>::allocator<CStateID>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_d3dCaps$ = -216					; size = 212
__$ArrayPad$ = -4					; size = 4
_lpDevice$ = 8						; size = 4
?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z PROC ; CStateManager::SetDevice, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _lpDevice$[ebp]
  00018	57		 push	 edi

; 76   : 	StateManager_Assert(lpDevice);
; 77   : 	lpDevice->AddRef();

  00019	56		 push	 esi
  0001a	8b f9		 mov	 edi, ecx
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	ff 50 04	 call	 DWORD PTR [eax+4]

; 78   : 
; 79   : 	if (m_lpD3DDev)

  00021	8b 8f 78 33 01
	00		 mov	 ecx, DWORD PTR [edi+78712]
  00027	85 c9		 test	 ecx, ecx
  00029	74 10		 je	 SHORT $LN8@SetDevice

; 80   : 	{
; 81   : 		m_lpD3DDev->Release();

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	51		 push	 ecx
  0002e	ff 50 08	 call	 DWORD PTR [eax+8]

; 82   : 		m_lpD3DDev = NULL;

  00031	c7 87 78 33 01
	00 00 00 00 00	 mov	 DWORD PTR [edi+78712], 0
$LN8@SetDevice:

; 83   : 	}
; 84   : 
; 85   : 	m_lpD3DDev = lpDevice;

  0003b	89 b7 78 33 01
	00		 mov	 DWORD PTR [edi+78712], esi

; 86   : 
; 87   : 	D3DCAPS8 d3dCaps;
; 88   : 	m_lpD3DDev->GetDeviceCaps(&d3dCaps);

  00041	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _d3dCaps$[ebp]
  00047	8b 06		 mov	 eax, DWORD PTR [esi]
  00049	51		 push	 ecx
  0004a	56		 push	 esi
  0004b	ff 50 1c	 call	 DWORD PTR [eax+28]

; 89   : 
; 90   : 	if (d3dCaps.TextureFilterCaps & D3DPTFILTERCAPS_MAGFANISOTROPIC)

  0004e	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _d3dCaps$[ebp+64]

; 91   : 		m_dwBestMagFilter = D3DTEXF_ANISOTROPIC;
; 92   : 	else
; 93   : 		m_dwBestMagFilter = D3DTEXF_LINEAR;
; 94   : 	
; 95   : 	if (d3dCaps.TextureFilterCaps & D3DPTFILTERCAPS_MINFANISOTROPIC)
; 96   : 		m_dwBestMinFilter = D3DTEXF_ANISOTROPIC;
; 97   : 	else
; 98   : 		m_dwBestMinFilter = D3DTEXF_LINEAR;
; 99   : 
; 100  : 	DWORD dwMax = d3dCaps.MaxAnisotropy;
; 101  : 	dwMax = dwMax < 4 ? dwMax : 4;

  00054	bb 04 00 00 00	 mov	 ebx, 4
  00059	8b c1		 mov	 eax, ecx
  0005b	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00061	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00066	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  0006c	0d 00 00 00 08	 or	 eax, 134217728		; 08000000H
  00071	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00074	c1 e8 1a	 shr	 eax, 26			; 0000001aH
  00077	39 5d 94	 cmp	 DWORD PTR _d3dCaps$[ebp+108], ebx
  0007a	89 87 74 33 01
	00		 mov	 DWORD PTR [edi+78708], eax
  00080	0f 42 5d 94	 cmovb	 ebx, DWORD PTR _d3dCaps$[ebp+108]

; 102  : 
; 103  : 	for (int i = 0; i < 8; ++i)

  00084	33 f6		 xor	 esi, esi
  00086	89 8f 70 33 01
	00		 mov	 DWORD PTR [edi+78704], ecx
  0008c	8d 64 24 00	 npad	 4
$LL3@SetDevice:

; 104  : 		m_lpD3DDev->SetTextureStageState(i, D3DTSS_MAXANISOTROPY, dwMax);

  00090	8b 87 78 33 01
	00		 mov	 eax, DWORD PTR [edi+78712]
  00096	53		 push	 ebx
  00097	6a 15		 push	 21			; 00000015H
  00099	56		 push	 esi
  0009a	8b 10		 mov	 edx, DWORD PTR [eax]
  0009c	50		 push	 eax
  0009d	ff 92 fc 00 00
	00		 call	 DWORD PTR [edx+252]
  000a3	46		 inc	 esi
  000a4	83 fe 08	 cmp	 esi, 8
  000a7	7c e7		 jl	 SHORT $LL3@SetDevice

; 105  : 
; 106  : 	SetDefaultState();

  000a9	8b cf		 mov	 ecx, edi
  000ab	e8 00 00 00 00	 call	 ?SetDefaultState@CStateManager@@QAEXXZ ; CStateManager::SetDefaultState

; 107  : }

  000b0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	33 cd		 xor	 ecx, ebp
  000b7	5b		 pop	 ebx
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z ENDP ; CStateManager::SetDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z PROC ; CStateManager::GetRenderState, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 420  : 	return m_CurrentState.m_RenderStates[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	8b 84 81 78 66
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+26232]

; 421  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ENDP ; CStateManager::GetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_MinVertexIndex$ = 12					; size = 4
_NumVertexIndices$ = 16					; size = 4
_PrimitiveCount$ = 20					; size = 4
_pIndexData$ = 24					; size = 4
_IndexDataFormat$ = 28					; size = 4
_pVertexStreamZeroData$ = 32				; size = 4
_VertexStreamZeroStride$ = 36				; size = 4
?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z PROC ; CStateManager::DrawIndexedPrimitiveUP, COMDAT
; _this$ = ecx

; 765  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 766  : 	m_CurrentState.m_IndexData = NULL;
; 767  : 	m_CurrentState.m_StreamData[0] = NULL;
; 768  : 	return (m_lpD3DDev->DrawIndexedPrimitiveUP(PrimitiveType, MinVertexIndex, NumVertexIndices, PrimitiveCount, pIndexData, IndexDataFormat, pVertexStreamZeroData, VertexStreamZeroStride));

  00003	ff 75 24	 push	 DWORD PTR _VertexStreamZeroStride$[ebp]
  00006	c7 81 e4 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52452], 0
  00010	ff 75 20	 push	 DWORD PTR _pVertexStreamZeroData$[ebp]
  00013	c7 81 e8 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52456], 0
  0001d	ff 75 1c	 push	 DWORD PTR _IndexDataFormat$[ebp]
  00020	c7 81 64 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52324], 0
  0002a	ff 75 18	 push	 DWORD PTR _pIndexData$[ebp]
  0002d	c7 81 68 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52328], 0
  00037	ff 75 14	 push	 DWORD PTR _PrimitiveCount$[ebp]
  0003a	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  00040	ff 75 10	 push	 DWORD PTR _NumVertexIndices$[ebp]
  00043	ff 75 0c	 push	 DWORD PTR _MinVertexIndex$[ebp]
  00046	8b 08		 mov	 ecx, DWORD PTR [eax]
  00048	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  0004b	50		 push	 eax
  0004c	ff 91 24 01 00
	00		 call	 DWORD PTR [ecx+292]

; 769  : }

  00052	5d		 pop	 ebp
  00053	c2 20 00	 ret	 32			; 00000020H
?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z ENDP ; CStateManager::DrawIndexedPrimitiveUP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_minIndex$ = 12						; size = 4
_NumVertices$ = 16					; size = 4
_startIndex$ = 20					; size = 4
_primCount$ = 24					; size = 4
?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z PROC ; CStateManager::DrawIndexedPrimitive, COMDAT
; _this$ = ecx

; 760  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 761  : 	return (m_lpD3DDev->DrawIndexedPrimitive(PrimitiveType, minIndex, NumVertices, startIndex, primCount));

  00003	ff 75 18	 push	 DWORD PTR _primCount$[ebp]
  00006	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0000c	ff 75 14	 push	 DWORD PTR _startIndex$[ebp]
  0000f	ff 75 10	 push	 DWORD PTR _NumVertices$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	ff 75 0c	 push	 DWORD PTR _minIndex$[ebp]
  00017	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  0001a	50		 push	 eax
  0001b	ff 91 1c 01 00
	00		 call	 DWORD PTR [ecx+284]

; 762  : }

  00021	5d		 pop	 ebp
  00022	c2 14 00	 ret	 20			; 00000014H
?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ENDP ; CStateManager::DrawIndexedPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_PrimitiveCount$ = 12					; size = 4
_pVertexStreamZeroData$ = 16				; size = 4
_VertexStreamZeroStride$ = 20				; size = 4
?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z PROC ; CStateManager::DrawPrimitiveUP, COMDAT
; _this$ = ecx

; 754  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 755  : 	m_CurrentState.m_StreamData[0] = NULL;
; 756  : 	return (m_lpD3DDev->DrawPrimitiveUP(PrimitiveType, PrimitiveCount, pVertexStreamZeroData, VertexStreamZeroStride));

  00003	ff 75 14	 push	 DWORD PTR _VertexStreamZeroStride$[ebp]
  00006	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0000c	ff 75 10	 push	 DWORD PTR _pVertexStreamZeroData$[ebp]
  0000f	c7 81 64 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52324], 0
  00019	ff 75 0c	 push	 DWORD PTR _PrimitiveCount$[ebp]
  0001c	c7 81 68 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52328], 0
  00026	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	50		 push	 eax
  0002c	ff 91 20 01 00
	00		 call	 DWORD PTR [ecx+288]

; 757  : }

  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ENDP ; CStateManager::DrawPrimitiveUP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_StartVertex$ = 12					; size = 4
_PrimitiveCount$ = 16					; size = 4
?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z PROC ; CStateManager::DrawPrimitive, COMDAT
; _this$ = ecx

; 749  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 750  : 	return (m_lpD3DDev->DrawPrimitive(PrimitiveType, StartVertex, PrimitiveCount));

  00003	ff 75 10	 push	 DWORD PTR _PrimitiveCount$[ebp]
  00006	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0000c	ff 75 0c	 push	 DWORD PTR _StartVertex$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	50		 push	 eax
  00015	ff 91 18 01 00
	00		 call	 DWORD PTR [ecx+280]

; 751  : }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ENDP ; CStateManager::DrawPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z
_TEXT	SEGMENT
_pIndexData$ = 8					; size = 4
_BaseVertexIndex$ = 12					; size = 4
?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z PROC ; CStateManager::SetIndices, COMDAT
; _this$ = ecx

; 738  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h

; 89   : 		{

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pIndexData$[ebp]
  00007	56		 push	 esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp

; 738  : {

  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h

; 89   : 		{

  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _BaseVertexIndex$[ebp]

; 90   : 		}
; 91   : 
; 92   : 		bool operator == (const CIndexData& rhs) const
; 93   : 		{
; 94   : 			return ((m_lpIndexData == rhs.m_lpIndexData) && (m_BaseVertexIndex == rhs.m_BaseVertexIndex));

  0000e	39 9e e4 cc 00
	00		 cmp	 DWORD PTR [esi+52452], ebx
  00014	75 08		 jne	 SHORT $LN8@SetIndices
  00016	39 be e8 cc 00
	00		 cmp	 DWORD PTR [esi+52456], edi
  0001c	74 1d		 je	 SHORT $LN2@SetIndices
$LN8@SetIndices:
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp

; 744  : 	m_lpD3DDev->SetIndices(pIndexData, BaseVertexIndex);

  0001e	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00024	57		 push	 edi
  00025	53		 push	 ebx
  00026	50		 push	 eax
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	ff 91 54 01 00
	00		 call	 DWORD PTR [ecx+340]

; 745  : 	m_CurrentState.m_IndexData = kIndexData;

  0002f	89 9e e4 cc 00
	00		 mov	 DWORD PTR [esi+52452], ebx
  00035	89 be e8 cc 00
	00		 mov	 DWORD PTR [esi+52456], edi
$LN2@SetIndices:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx

; 746  : }

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ENDP ; CStateManager::SetIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?RestoreIndices@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreIndices@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreIndices, COMDAT
; _this$ = ecx

; 734  : 	SetIndices(m_CopyState.m_IndexData.m_lpIndexData, m_CopyState.m_IndexData.m_BaseVertexIndex);

  00000	ff b1 5c 33 01
	00		 push	 DWORD PTR [ecx+78684]
  00006	ff b1 58 33 01
	00		 push	 DWORD PTR [ecx+78680]
  0000c	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices

; 735  : }

  00011	c3		 ret	 0
?RestoreIndices@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z
_TEXT	SEGMENT
_pIndexData$ = 8					; size = 4
_BaseVertexIndex$ = 12					; size = 4
?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z PROC ; CStateManager::SaveIndices, COMDAT
; _this$ = ecx

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 728  : 	m_CopyState.m_IndexData = m_CurrentState.m_IndexData;

  00003	8b 81 e4 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52452]
  00009	89 81 58 33 01
	00		 mov	 DWORD PTR [ecx+78680], eax
  0000f	8b 81 e8 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52456]
  00015	89 81 5c 33 01
	00		 mov	 DWORD PTR [ecx+78684], eax

; 730  : }

  0001b	5d		 pop	 ebp

; 729  : 	SetIndices(pIndexData, BaseVertexIndex);

  0001c	e9 00 00 00 00	 jmp	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ENDP ; CStateManager::SaveIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
_pStreamData$ = 12					; size = 4
_Stride$ = 16						; size = 4
?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z PROC ; CStateManager::SetStreamSource, COMDAT
; _this$ = ecx

; 717  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h

; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));

  00003	8b 55 08	 mov	 edx, DWORD PTR _StreamNumber$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 71   : 		{

  00008	8b 75 10	 mov	 esi, DWORD PTR _Stride$[ebp]
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp

; 717  : {

  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h

; 71   : 		{

  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _pStreamData$[ebp]

; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));

  00011	39 bc d3 64 cc
	00 00		 cmp	 DWORD PTR [ebx+edx*8+52324], edi
  00018	75 09		 jne	 SHORT $LN8@SetStreamS
  0001a	39 b4 d3 68 cc
	00 00		 cmp	 DWORD PTR [ebx+edx*8+52328], esi
  00021	74 23		 je	 SHORT $LN2@SetStreamS
$LN8@SetStreamS:
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp

; 722  : 	m_lpD3DDev->SetStreamSource(StreamNumber, pStreamData, Stride);

  00023	8b 83 78 33 01
	00		 mov	 eax, DWORD PTR [ebx+78712]
  00029	56		 push	 esi
  0002a	57		 push	 edi
  0002b	52		 push	 edx
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	50		 push	 eax
  0002f	ff 91 4c 01 00
	00		 call	 DWORD PTR [ecx+332]

; 723  : 	m_CurrentState.m_StreamData[StreamNumber] = kStreamData;

  00035	8b 45 08	 mov	 eax, DWORD PTR _StreamNumber$[ebp]
  00038	89 bc c3 64 cc
	00 00		 mov	 DWORD PTR [ebx+eax*8+52324], edi
  0003f	89 b4 c3 68 cc
	00 00		 mov	 DWORD PTR [ebx+eax*8+52328], esi
$LN2@SetStreamS:
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx

; 724  : }

  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ENDP ; CStateManager::SetStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?RestoreStreamSource@CStateManager@@QAEXI@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
?RestoreStreamSource@CStateManager@@QAEXI@Z PROC	; CStateManager::RestoreStreamSource, COMDAT
; _this$ = ecx

; 710  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 711  : 	SetStreamSource(StreamNumber, 
; 712  : 					m_CopyState.m_StreamData[StreamNumber].m_lpStreamData, 
; 713  : 					m_CopyState.m_StreamData[StreamNumber].m_Stride);

  00003	8b 45 08	 mov	 eax, DWORD PTR _StreamNumber$[ebp]
  00006	ff b4 c1 dc 32
	01 00		 push	 DWORD PTR [ecx+eax*8+78556]
  0000d	ff b4 c1 d8 32
	01 00		 push	 DWORD PTR [ecx+eax*8+78552]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 714  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?RestoreStreamSource@CStateManager@@QAEXI@Z ENDP	; CStateManager::RestoreStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
_pStreamData$ = 12					; size = 4
_Stride$ = 16						; size = 4
?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z PROC ; CStateManager::SaveStreamSource, COMDAT
; _this$ = ecx

; 703  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 704  : 	// Check that we have set this up before, if not, the default is this.
; 705  : 	m_CopyState.m_StreamData[StreamNumber] = m_CurrentState.m_StreamData[StreamNumber];

  00003	8b 55 08	 mov	 edx, DWORD PTR _StreamNumber$[ebp]
  00006	8b 84 d1 64 cc
	00 00		 mov	 eax, DWORD PTR [ecx+edx*8+52324]
  0000d	89 84 d1 d8 32
	01 00		 mov	 DWORD PTR [ecx+edx*8+78552], eax
  00014	8b 84 d1 68 cc
	00 00		 mov	 eax, DWORD PTR [ecx+edx*8+52328]
  0001b	89 84 d1 dc 32
	01 00		 mov	 DWORD PTR [ecx+edx*8+78556], eax

; 706  : 	SetStreamSource(StreamNumber, pStreamData, Stride);

  00022	89 55 08	 mov	 DWORD PTR _StreamNumber$[ebp], edx

; 707  : }

  00025	5d		 pop	 ebp

; 706  : 	SetStreamSource(StreamNumber, pStreamData, Stride);

  00026	e9 00 00 00 00	 jmp	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource
?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ENDP ; CStateManager::SaveStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z PROC	; CStateManager::SetPixelShaderConstant, COMDAT
; _this$ = ecx

; 691  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 692  : 	m_lpD3DDev->SetPixelShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _dwRegister$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _pConstantData$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 10	 mov	 edi, DWORD PTR _dwConstantCount$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00015	8b 80 78 33 01
	00		 mov	 eax, DWORD PTR [eax+78712]
  0001b	57		 push	 edi
  0001c	56		 push	 esi
  0001d	53		 push	 ebx
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	50		 push	 eax
  00021	ff 92 6c 01 00
	00		 call	 DWORD PTR [edx+364]

; 693  : 
; 694  : 	// Set the renderstate and remember it.
; 695  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00027	85 ff		 test	 edi, edi
  00029	74 28		 je	 SHORT $LN1@SetPixelSh

; 692  : 	m_lpD3DDev->SetPixelShaderConstant(dwRegister, pConstantData, dwConstantCount);

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0002e	c1 e3 04	 shl	 ebx, 4
  00031	05 78 80 00 00	 add	 eax, 32888		; 00008078H
  00036	03 c3		 add	 eax, ebx
  00038	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@SetPixelSh:

; 693  : 
; 694  : 	// Set the renderstate and remember it.
; 695  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00040	8d 76 10	 lea	 esi, DWORD PTR [esi+16]
  00043	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 696  : 	{
; 697  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 698  : 		m_CurrentState.m_PixelShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00046	f3 0f 6f 46 f0	 movdqu	 xmm0, XMMWORD PTR [esi-16]
  0004b	f3 0f 7f 40 f0	 movdqu	 XMMWORD PTR [eax-16], xmm0
  00050	4f		 dec	 edi
  00051	75 ed		 jne	 SHORT $LL3@SetPixelSh
$LN1@SetPixelSh:
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx

; 699  : 	}
; 700  : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP	; CStateManager::SetPixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_dwConstantCount$ = 12					; size = 4
?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z PROC ; CStateManager::RestorePixelShaderConstant, COMDAT
; _this$ = ecx

; 686  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 687  : 	SetPixelShaderConstant(dwRegister, &m_CopyState.m_PixelShaderConstants[dwRegister], dwConstantCount);

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	ff 75 0c	 push	 DWORD PTR _dwConstantCount$[ebp]
  0000b	c1 e0 04	 shl	 eax, 4
  0000e	05 ec e6 00 00	 add	 eax, 59116		; 0000e6ecH
  00013	03 c1		 add	 eax, ecx
  00015	50		 push	 eax
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant

; 688  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z ENDP ; CStateManager::RestorePixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SavePixelShaderConstant, COMDAT
; _this$ = ecx

; 673  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 674  : 	DWORD i;
; 675  : 
; 676  : 	for (i = 0; i < dwConstantCount; i++)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  00006	56		 push	 esi
  00007	8b 75 10	 mov	 esi, DWORD PTR _dwConstantCount$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	85 f6		 test	 esi, esi
  0000f	74 25		 je	 SHORT $LN1@SavePixelS
  00011	8b 55 0c	 mov	 edx, DWORD PTR _pConstantData$[ebp]
  00014	8b ce		 mov	 ecx, esi
  00016	c1 e0 04	 shl	 eax, 4
  00019	05 ec e6 00 00	 add	 eax, 59116		; 0000e6ecH
  0001e	03 c7		 add	 eax, edi
$LL3@SavePixelS:
  00020	8d 52 10	 lea	 edx, DWORD PTR [edx+16]
  00023	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 677  : 	{
; 678  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 679  : 		m_CopyState.m_PixelShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00026	f3 0f 6f 42 f0	 movdqu	 xmm0, XMMWORD PTR [edx-16]
  0002b	f3 0f 7f 40 f0	 movdqu	 XMMWORD PTR [eax-16], xmm0
  00030	49		 dec	 ecx
  00031	75 ed		 jne	 SHORT $LL3@SavePixelS
  00033	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
$LN1@SavePixelS:

; 680  : 	}
; 681  : 
; 682  : 	SetPixelShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00036	56		 push	 esi
  00037	ff 75 0c	 push	 DWORD PTR _pConstantData$[ebp]
  0003a	8b cf		 mov	 ecx, edi
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 683  : }

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SavePixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SetVertexShaderConstant, COMDAT
; _this$ = ecx

; 660  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 661  : 	m_lpD3DDev->SetVertexShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _dwRegister$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _pConstantData$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 10	 mov	 edi, DWORD PTR _dwConstantCount$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00015	8b 80 78 33 01
	00		 mov	 eax, DWORD PTR [eax+78712]
  0001b	57		 push	 edi
  0001c	56		 push	 esi
  0001d	53		 push	 ebx
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	50		 push	 eax
  00021	ff 92 3c 01 00
	00		 call	 DWORD PTR [edx+316]

; 662  : 
; 663  : 	// Set the renderstate and remember it.
; 664  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00027	85 ff		 test	 edi, edi
  00029	74 28		 je	 SHORT $LN1@SetVertexS

; 661  : 	m_lpD3DDev->SetVertexShaderConstant(dwRegister, pConstantData, dwConstantCount);

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0002e	c1 e3 04	 shl	 ebx, 4
  00031	05 78 7a 00 00	 add	 eax, 31352		; 00007a78H
  00036	03 c3		 add	 eax, ebx
  00038	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@SetVertexS:

; 662  : 
; 663  : 	// Set the renderstate and remember it.
; 664  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00040	8d 76 10	 lea	 esi, DWORD PTR [esi+16]
  00043	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 665  : 	{
; 666  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 667  : 		m_CurrentState.m_VertexShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00046	f3 0f 6f 46 f0	 movdqu	 xmm0, XMMWORD PTR [esi-16]
  0004b	f3 0f 7f 40 f0	 movdqu	 XMMWORD PTR [eax-16], xmm0
  00050	4f		 dec	 edi
  00051	75 ed		 jne	 SHORT $LL3@SetVertexS
$LN1@SetVertexS:
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx

; 668  : 	}
; 669  : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SetVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_dwConstantCount$ = 12					; size = 4
?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z PROC ; CStateManager::RestoreVertexShaderConstant, COMDAT
; _this$ = ecx

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 656  : 	SetVertexShaderConstant(dwRegister, &m_CopyState.m_VertexShaderConstants[dwRegister], dwConstantCount);

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	ff 75 0c	 push	 DWORD PTR _dwConstantCount$[ebp]
  0000b	c1 e0 04	 shl	 eax, 4
  0000e	05 ec e0 00 00	 add	 eax, 57580		; 0000e0ecH
  00013	03 c1		 add	 eax, ecx
  00015	50		 push	 eax
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 657  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z ENDP ; CStateManager::RestoreVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SaveVertexShaderConstant, COMDAT
; _this$ = ecx

; 642  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  : 	DWORD i;
; 644  : 
; 645  : 	for (i = 0; i < dwConstantCount; i++)

  00003	8b 55 10	 mov	 edx, DWORD PTR _dwConstantCount$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	85 d2		 test	 edx, edx
  0000e	74 27		 je	 SHORT $LN3@SaveVertex
  00010	56		 push	 esi
  00011	c1 e0 04	 shl	 eax, 4
  00014	8b ca		 mov	 ecx, edx
  00016	57		 push	 edi
  00017	8d bb ec e0 00
	00		 lea	 edi, DWORD PTR [ebx+57580]
  0001d	81 e1 ff ff ff
	0f		 and	 ecx, 268435455		; 0fffffffH
  00023	03 f8		 add	 edi, eax
  00025	8d b0 78 7a 00
	00		 lea	 esi, DWORD PTR [eax+31352]
  0002b	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  0002e	03 f3		 add	 esi, ebx
  00030	c1 e1 02	 shl	 ecx, 2
  00033	f3 a5		 rep movsd
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
$LN3@SaveVertex:

; 646  : 	{
; 647  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 648  : 		m_CopyState.m_VertexShaderConstants[dwRegister + i] = m_CurrentState.m_VertexShaderConstants[dwRegister + i];
; 649  : 	}
; 650  : 
; 651  : 	SetVertexShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00037	52		 push	 edx
  00038	ff 75 0c	 push	 DWORD PTR _pConstantData$[ebp]
  0003b	8b cb		 mov	 ecx, ebx
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant
  00043	5b		 pop	 ebx

; 652  : }

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SaveVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z PROC ; CStateManager::GetTransform, COMDAT
; _this$ = ecx

; 636  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 	*pMatrix = m_CurrentState.m_Matrices[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	c1 e0 06	 shl	 eax, 6
  00009	03 c8		 add	 ecx, eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  0000e	f3 0f 6f 81 20
	81 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+33056]
  00016	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
  0001a	f3 0f 6f 81 30
	81 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+33072]
  00022	f3 0f 7f 40 10	 movdqu	 XMMWORD PTR [eax+16], xmm0
  00027	f3 0f 6f 81 40
	81 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+33088]
  0002f	f3 0f 7f 40 20	 movdqu	 XMMWORD PTR [eax+32], xmm0
  00034	f3 0f 6f 81 50
	81 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+33104]
  0003c	f3 0f 7f 40 30	 movdqu	 XMMWORD PTR [eax+48], xmm0

; 638  : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ENDP ; CStateManager::GetTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z PROC ; CStateManager::SetTransform, COMDAT
; _this$ = ecx

; 622  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 623  : 	if (m_bScene)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _Type$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _pMatrix$[ebp]
  0000e	80 be 6d 33 01
	00 00		 cmp	 BYTE PTR [esi+78701], 0
  00015	74 11		 je	 SHORT $LN2@SetTransfo

; 624  : 	{
; 625  : 		m_lpD3DDev->SetTransform(Type, pMatrix);

  00017	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	50		 push	 eax
  00020	8b 10		 mov	 edx, DWORD PTR [eax]
  00022	ff 92 94 00 00
	00		 call	 DWORD PTR [edx+148]
$LN2@SetTransfo:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 463  :     memcpy(&_11, &mat, sizeof(D3DXMATRIX));

  00028	f3 0f 6f 07	 movdqu	 xmm0, XMMWORD PTR [edi]
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp

; 632  : 	m_CurrentState.m_Matrices[Type] = *pMatrix;

  0002c	c1 e3 06	 shl	 ebx, 6
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 463  :     memcpy(&_11, &mat, sizeof(D3DXMATRIX));

  0002f	f3 0f 6f 4f 10	 movdqu	 xmm1, XMMWORD PTR [edi+16]
  00034	f3 0f 6f 57 20	 movdqu	 xmm2, XMMWORD PTR [edi+32]
  00039	f3 0f 6f 5f 30	 movdqu	 xmm3, XMMWORD PTR [edi+48]
  0003e	5f		 pop	 edi
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp

; 632  : 	m_CurrentState.m_Matrices[Type] = *pMatrix;

  0003f	f3 0f 7f 84 33
	20 81 00 00	 movdqu	 XMMWORD PTR [ebx+esi+33056], xmm0
  00048	f3 0f 7f 8c 33
	30 81 00 00	 movdqu	 XMMWORD PTR [ebx+esi+33072], xmm1
  00051	f3 0f 7f 94 33
	40 81 00 00	 movdqu	 XMMWORD PTR [ebx+esi+33088], xmm2
  0005a	f3 0f 7f 9c 33
	50 81 00 00	 movdqu	 XMMWORD PTR [ebx+esi+33104], xmm3
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx

; 633  : }

  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ENDP ; CStateManager::SetTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z PROC ; CStateManager::RestoreTransform, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 608  : #ifdef _DEBUG
; 609  : 	if (!m_bTransformSavingFlag[Type])
; 610  : 	{
; 611  : 		Tracef(" CStateManager::RestoreTransform - This transform was not saved [%d]\n", Type);
; 612  : 		StateManager_Assert(!" This render state was not saved!");
; 613  : 	}
; 614  : 	m_bTransformSavingFlag[Type] = FALSE;
; 615  : #endif _DEBUG
; 616  : 
; 617  : 	SetTransform(Type, &m_CopyState.m_Matrices[Type]);

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 06	 shl	 eax, 6
  0000b	05 94 e7 00 00	 add	 eax, 59284		; 0000e794H
  00010	03 c1		 add	 eax, ecx
  00012	50		 push	 eax
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 618  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ENDP ; CStateManager::RestoreTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z PROC ; CStateManager::SaveTransform, COMDAT
; _this$ = ecx

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : #ifdef _DEBUG
; 594  : 	if (m_bTransformSavingFlag[Type])
; 595  : 	{
; 596  : 		Tracef(" CStateManager::SaveTransform - This transform is already saved [%d]\n", Type);
; 597  : 		StateManager_Assert(!" This trasform is already saved!");
; 598  : 	}
; 599  : 	m_bTransformSavingFlag[Type] = TRUE;
; 600  : #endif _DEBUG
; 601  : 
; 602  : 	m_CopyState.m_Matrices[Type] = m_CurrentState.m_Matrices[Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 06	 shl	 eax, 6
  0000b	f3 0f 6f 84 08
	20 81 00 00	 movdqu	 xmm0, XMMWORD PTR [eax+ecx+33056]
  00014	f3 0f 7f 84 08
	94 e7 00 00	 movdqu	 XMMWORD PTR [eax+ecx+59284], xmm0
  0001d	f3 0f 6f 84 08
	30 81 00 00	 movdqu	 xmm0, XMMWORD PTR [eax+ecx+33072]
  00026	f3 0f 7f 84 08
	a4 e7 00 00	 movdqu	 XMMWORD PTR [eax+ecx+59300], xmm0
  0002f	f3 0f 6f 84 08
	40 81 00 00	 movdqu	 xmm0, XMMWORD PTR [eax+ecx+33088]
  00038	f3 0f 7f 84 08
	b4 e7 00 00	 movdqu	 XMMWORD PTR [eax+ecx+59316], xmm0
  00041	f3 0f 6f 84 08
	50 81 00 00	 movdqu	 xmm0, XMMWORD PTR [eax+ecx+33104]
  0004a	f3 0f 7f 84 08
	c4 e7 00 00	 movdqu	 XMMWORD PTR [eax+ecx+59332], xmm0

; 603  : 	SetTransform(Type, (D3DXMATRIX *)pMatrix);

  00053	89 55 08	 mov	 DWORD PTR _Type$[ebp], edx

; 604  : }

  00056	5d		 pop	 ebp

; 603  : 	SetTransform(Type, (D3DXMATRIX *)pMatrix);

  00057	e9 00 00 00 00	 jmp	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ENDP ; CStateManager::SaveTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?GetPixelShader@CStateManager@@QAEXPAK@Z
_TEXT	SEGMENT
_pdwShader$ = 8						; size = 4
?GetPixelShader@CStateManager@@QAEXPAK@Z PROC		; CStateManager::GetPixelShader, COMDAT
; _this$ = ecx

; 585  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 	*pdwShader = m_CurrentState.m_dwPixelShader;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pdwShader$[ebp]
  00006	8b 89 18 81 00
	00		 mov	 ecx, DWORD PTR [ecx+33048]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 587  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetPixelShader@CStateManager@@QAEXPAK@Z ENDP		; CStateManager::GetPixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetPixelShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SetPixelShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SetPixelShader, COMDAT
; _this$ = ecx

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 577  : 	if (m_CurrentState.m_dwPixelShader == dwShader)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _dwShader$[ebp]
  0000a	39 be 18 81 00
	00		 cmp	 DWORD PTR [esi+33048], edi
  00010	74 16		 je	 SHORT $LN2@SetPixelSh

; 578  : 		return;
; 579  : 
; 580  : 	m_lpD3DDev->SetPixelShader(dwShader);

  00012	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00018	57		 push	 edi
  00019	50		 push	 eax
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	ff 92 60 01 00
	00		 call	 DWORD PTR [edx+352]

; 581  : 	m_CurrentState.m_dwPixelShader = dwShader;

  00022	89 be 18 81 00
	00		 mov	 DWORD PTR [esi+33048], edi
$LN2@SetPixelSh:
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 582  : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetPixelShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SetPixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?RestorePixelShader@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestorePixelShader@CStateManager@@QAEXXZ PROC		; CStateManager::RestorePixelShader, COMDAT
; _this$ = ecx

; 572  : 	SetPixelShader(m_CopyState.m_dwPixelShader);

  00000	ff b1 8c e7 00
	00		 push	 DWORD PTR [ecx+59276]
  00006	e8 00 00 00 00	 call	 ?SetPixelShader@CStateManager@@QAEXK@Z ; CStateManager::SetPixelShader

; 573  : }

  0000b	c3		 ret	 0
?RestorePixelShader@CStateManager@@QAEXXZ ENDP		; CStateManager::RestorePixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SavePixelShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SavePixelShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SavePixelShader, COMDAT
; _this$ = ecx

; 565  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 566  : 	m_CopyState.m_dwPixelShader = m_CurrentState.m_dwPixelShader;

  00003	8b 81 18 81 00
	00		 mov	 eax, DWORD PTR [ecx+33048]
  00009	89 81 8c e7 00
	00		 mov	 DWORD PTR [ecx+59276], eax

; 568  : }

  0000f	5d		 pop	 ebp

; 567  : 	SetPixelShader(dwShader);

  00010	e9 00 00 00 00	 jmp	 ?SetPixelShader@CStateManager@@QAEXK@Z ; CStateManager::SetPixelShader
?SavePixelShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SavePixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?GetVertexShader@CStateManager@@QAEXPAK@Z
_TEXT	SEGMENT
_pdwShader$ = 8						; size = 4
?GetVertexShader@CStateManager@@QAEXPAK@Z PROC		; CStateManager::GetVertexShader, COMDAT
; _this$ = ecx

; 559  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 560  : 	*pdwShader = m_CurrentState.m_dwVertexShader;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pdwShader$[ebp]
  00006	8b 89 1c 81 00
	00		 mov	 ecx, DWORD PTR [ecx+33052]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 561  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetVertexShader@CStateManager@@QAEXPAK@Z ENDP		; CStateManager::GetVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetVertexShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SetVertexShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SetVertexShader, COMDAT
; _this$ = ecx

; 550  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 551  : 	if (m_CurrentState.m_dwVertexShader == dwShader)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _dwShader$[ebp]
  0000a	39 be 1c 81 00
	00		 cmp	 DWORD PTR [esi+33052], edi
  00010	74 16		 je	 SHORT $LN2@SetVertexS

; 552  : 		return;
; 553  : 
; 554  : 	m_lpD3DDev->SetVertexShader(dwShader);

  00012	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00018	57		 push	 edi
  00019	50		 push	 eax
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	ff 92 30 01 00
	00		 call	 DWORD PTR [edx+304]

; 555  : 	m_CurrentState.m_dwVertexShader = dwShader;

  00022	89 be 1c 81 00
	00		 mov	 DWORD PTR [esi+33052], edi
$LN2@SetVertexS:
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 556  : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetVertexShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SetVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?RestoreVertexShader@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreVertexShader@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreVertexShader, COMDAT
; _this$ = ecx

; 546  : 	SetVertexShader(m_CopyState.m_dwVertexShader);

  00000	ff b1 90 e7 00
	00		 push	 DWORD PTR [ecx+59280]
  00006	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 547  : }

  0000b	c3		 ret	 0
?RestoreVertexShader@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SaveVertexShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SaveVertexShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SaveVertexShader, COMDAT
; _this$ = ecx

; 539  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 540  : 	m_CopyState.m_dwVertexShader = m_CurrentState.m_dwVertexShader;

  00003	8b 81 1c 81 00
	00		 mov	 eax, DWORD PTR [ecx+33052]
  00009	89 81 90 e7 00
	00		 mov	 DWORD PTR [ecx+59280], eax

; 542  : }

  0000f	5d		 pop	 ebp

; 541  : 	SetVertexShader(dwShader);

  00010	e9 00 00 00 00	 jmp	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader
?SaveVertexShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SaveVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetBestFiltering@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
?SetBestFiltering@CStateManager@@QAEXK@Z PROC		; CStateManager::SetBestFiltering, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 111  : 	SetTextureStageState(dwStage, D3DTSS_MINFILTER,	m_dwBestMinFilter);

  00004	8b 75 08	 mov	 esi, DWORD PTR _dwStage$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	ff b7 70 33 01
	00		 push	 DWORD PTR [edi+78704]
  00010	6a 11		 push	 17			; 00000011H
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 112  : 	SetTextureStageState(dwStage, D3DTSS_MAGFILTER,	m_dwBestMagFilter);

  00018	ff b7 74 33 01
	00		 push	 DWORD PTR [edi+78708]
  0001e	8b cf		 mov	 ecx, edi
  00020	6a 10		 push	 16			; 00000010H
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 113  : 	SetTextureStageState(dwStage, D3DTSS_MIPFILTER,	D3DTEXF_LINEAR);

  00028	6a 02		 push	 2
  0002a	6a 12		 push	 18			; 00000012H
  0002c	56		 push	 esi
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 114  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?SetBestFiltering@CStateManager@@QAEXK@Z ENDP		; CStateManager::SetBestFiltering
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_pdwValue$ = 16						; size = 4
?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z PROC ; CStateManager::GetTextureStageState, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 534  : 	*pdwValue = m_CurrentState.m_TextureStates[dwStage][Type];

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _dwStage$[ebp]
  00008	c1 e1 07	 shl	 ecx, 7
  0000b	03 4d 0c	 add	 ecx, DWORD PTR _Type$[ebp]
  0000e	8b 8c 88 78 6a
	00 00		 mov	 ecx, DWORD PTR [eax+ecx*4+27256]
  00015	8b 45 10	 mov	 eax, DWORD PTR _pdwValue$[ebp]
  00018	89 08		 mov	 DWORD PTR [eax], ecx

; 535  : }

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z ENDP ; CStateManager::GetTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_dwValue$ = 16						; size = 4
?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z PROC ; CStateManager::SetTextureStageState, COMDAT
; _this$ = ecx

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 525  : 	if (m_CurrentState.m_TextureStates[dwStage][Type] == dwValue)

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 07	 shl	 eax, 7
  0000b	03 45 0c	 add	 eax, DWORD PTR _Type$[ebp]
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 75 10	 mov	 esi, DWORD PTR _dwValue$[ebp]
  00013	39 b4 81 78 6a
	00 00		 cmp	 DWORD PTR [ecx+eax*4+27256], esi
  0001a	8d 1c 81	 lea	 ebx, DWORD PTR [ecx+eax*4]
  0001d	74 1a		 je	 SHORT $LN2@SetTexture

; 526  : 		return;
; 527  : 
; 528  : 	m_lpD3DDev->SetTextureStageState(dwStage, Type, dwValue);

  0001f	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  00025	56		 push	 esi
  00026	ff 75 0c	 push	 DWORD PTR _Type$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	ff 91 fc 00 00
	00		 call	 DWORD PTR [ecx+252]

; 529  : 	m_CurrentState.m_TextureStates[dwStage][Type] = dwValue;

  00033	89 b3 78 6a 00
	00		 mov	 DWORD PTR [ebx+27256], esi
$LN2@SetTexture:
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx

; 530  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ENDP ; CStateManager::SetTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z PROC ; CStateManager::RestoreTextureStageState, COMDAT
; _this$ = ecx

; 511  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 512  : #ifdef _DEBUG
; 513  : 	if (!m_bTextureStageStateSavingFlag[dwStage][Type])
; 514  : 	{
; 515  : 		Tracef(" CStateManager::RestoreTextureStageState - This texture stage state was not saved [%d, %d]\n", dwStage, Type);
; 516  : 		StateManager_Assert(!" This texture stage state was not saved!");
; 517  : 	}
; 518  : 	m_bTextureStageStateSavingFlag[dwStage][Type] = FALSE;
; 519  : #endif _DEBUG
; 520  : 	SetTextureStageState(dwStage, Type, m_CopyState.m_TextureStates[dwStage][Type]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _Type$[ebp]
  00009	c1 e0 07	 shl	 eax, 7
  0000c	03 c2		 add	 eax, edx
  0000e	ff b4 81 ec d0
	00 00		 push	 DWORD PTR [ecx+eax*4+53484]
  00015	52		 push	 edx
  00016	ff 75 08	 push	 DWORD PTR _dwStage$[ebp]
  00019	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 521  : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ENDP ; CStateManager::RestoreTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_dwValue$ = 16						; size = 4
?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z PROC ; CStateManager::SaveTextureStageState, COMDAT
; _this$ = ecx

; 496  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 497  : 	// Check that we have set this up before, if not, the default is this.
; 498  : #ifdef _DEBUG
; 499  : 	if (m_bTextureStageStateSavingFlag[dwStage][Type])
; 500  : 	{
; 501  : 		Tracef(" CStateManager::SaveTextureStageState - This texture stage state is already saved [%d, %d]\n", dwStage, Type);
; 502  : 		StateManager_Assert(!" This texture stage state is already saved!");
; 503  : 	}
; 504  : 	m_bTextureStageStateSavingFlag[dwStage][Type] = TRUE;
; 505  : #endif _DEBUG
; 506  : 	m_CopyState.m_TextureStates[dwStage][Type] = m_CurrentState.m_TextureStates[dwStage][Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	56		 push	 esi

; 507  : 	SetTextureStageState(dwStage, Type, dwValue);

  00007	ff 75 10	 push	 DWORD PTR _dwValue$[ebp]
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _Type$[ebp]
  0000d	c1 e2 07	 shl	 edx, 7
  00010	03 d6		 add	 edx, esi
  00012	56		 push	 esi
  00013	ff 75 08	 push	 DWORD PTR _dwStage$[ebp]
  00016	8b 84 91 78 6a
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+27256]
  0001d	89 84 91 ec d0
	00 00		 mov	 DWORD PTR [ecx+edx*4+53484], eax
  00024	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  00029	5e		 pop	 esi

; 508  : }

  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ENDP ; CStateManager::SaveTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_ppTexture$ = 12					; size = 4
?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z PROC ; CStateManager::GetTexture, COMDAT
; _this$ = ecx

; 490  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 	*ppTexture = m_CurrentState.m_Textures[dwStage];

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	8b 8c 81 f8 80
	00 00		 mov	 ecx, DWORD PTR [ecx+eax*4+33016]
  0000d	8b 45 0c	 mov	 eax, DWORD PTR _ppTexture$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 492  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z ENDP ; CStateManager::GetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_pTexture$ = 12						; size = 4
?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z PROC ; CStateManager::SetTexture, COMDAT
; _this$ = ecx

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 482  : 	if (pTexture == m_CurrentState.m_Textures[dwStage])

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _pTexture$[ebp]
  0000a	3b b4 91 f8 80
	00 00		 cmp	 esi, DWORD PTR [ecx+edx*4+33016]
  00011	57		 push	 edi
  00012	8d 3c 91	 lea	 edi, DWORD PTR [ecx+edx*4]
  00015	74 17		 je	 SHORT $LN2@SetTexture

; 483  : 		return;
; 484  : 
; 485  : 	m_lpD3DDev->SetTexture(dwStage, pTexture);

  00017	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0001d	56		 push	 esi
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	ff 91 f4 00 00
	00		 call	 DWORD PTR [ecx+244]

; 486  : 	m_CurrentState.m_Textures[dwStage] = pTexture;

  00028	89 b7 f8 80 00
	00		 mov	 DWORD PTR [edi+33016], esi
$LN2@SetTexture:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 487  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ENDP ; CStateManager::SetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?RestoreTexture@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
?RestoreTexture@CStateManager@@QAEXK@Z PROC		; CStateManager::RestoreTexture, COMDAT
; _this$ = ecx

; 476  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 477  : 	SetTexture(dwStage, m_CopyState.m_Textures[dwStage]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	ff b4 81 6c e7
	00 00		 push	 DWORD PTR [ecx+eax*4+59244]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 478  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?RestoreTexture@CStateManager@@QAEXK@Z ENDP		; CStateManager::RestoreTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_pTexture$ = 12						; size = 4
?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z PROC ; CStateManager::SaveTexture, COMDAT
; _this$ = ecx

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	// Check that we have set this up before, if not, the default is this.
; 471  : 	m_CopyState.m_Textures[dwStage] = m_CurrentState.m_Textures[dwStage];

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	8b 84 91 f8 80
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+33016]
  0000d	89 84 91 6c e7
	00 00		 mov	 DWORD PTR [ecx+edx*4+59244], eax

; 472  : 	SetTexture(dwStage, pTexture);

  00014	89 55 08	 mov	 DWORD PTR _dwStage$[ebp], edx

; 473  : }

  00017	5d		 pop	 ebp

; 472  : 	SetTexture(dwStage, pTexture);

  00018	e9 00 00 00 00	 jmp	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ENDP ; CStateManager::SaveTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pdwValue$ = 12						; size = 4
?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z PROC ; CStateManager::GetRenderState, COMDAT
; _this$ = ecx

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 464  : 	*pdwValue = m_CurrentState.m_RenderStates[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	8b 8c 81 78 66
	00 00		 mov	 ecx, DWORD PTR [ecx+eax*4+26232]
  0000d	8b 45 0c	 mov	 eax, DWORD PTR _pdwValue$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 465  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z ENDP ; CStateManager::GetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_Value$ = 12						; size = 4
?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z PROC ; CStateManager::SetRenderState, COMDAT
; _this$ = ecx

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 455  : 	if (m_CurrentState.m_RenderStates[Type] == Value)

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _Value$[ebp]
  0000a	39 b4 91 78 66
	00 00		 cmp	 DWORD PTR [ecx+edx*4+26232], esi
  00011	57		 push	 edi
  00012	8d 3c 91	 lea	 edi, DWORD PTR [ecx+edx*4]
  00015	74 17		 je	 SHORT $LN2@SetRenderS

; 456  : 		return;
; 457  : 
; 458  : 	m_lpD3DDev->SetRenderState(Type, Value);

  00017	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0001d	56		 push	 esi
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	ff 91 c8 00 00
	00		 call	 DWORD PTR [ecx+200]

; 459  : 	m_CurrentState.m_RenderStates[Type] = Value;

  00028	89 b7 78 66 00
	00		 mov	 DWORD PTR [edi+26232], esi
$LN2@SetRenderS:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 460  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ENDP ; CStateManager::SetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z PROC ; CStateManager::RestoreRenderState, COMDAT
; _this$ = ecx

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 441  : #ifdef _DEBUG
; 442  : 	if (!m_bRenderStateSavingFlag[Type])
; 443  : 	{
; 444  : 		Tracef(" CStateManager::SaveRenderState - This render state was not saved [%d, %d]\n", Type);
; 445  : 		StateManager_Assert(!" This render state was not saved!");
; 446  : 	}
; 447  : 	m_bRenderStateSavingFlag[Type] = FALSE;
; 448  : #endif _DEBUG
; 449  : 
; 450  : 	SetRenderState(Type, m_CopyState.m_RenderStates[Type]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	ff b4 81 ec cc
	00 00		 push	 DWORD PTR [ecx+eax*4+52460]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 451  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ENDP ; CStateManager::RestoreRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_dwValue$ = 12						; size = 4
?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z PROC ; CStateManager::SaveRenderState, COMDAT
; _this$ = ecx

; 424  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 425  : #ifdef _DEBUG
; 426  : 	if (m_bRenderStateSavingFlag[Type])
; 427  : 	{
; 428  : 		Tracef(" CStateManager::SaveRenderState - This render state is already saved [%d, %d]\n", Type, dwValue);
; 429  : 		StateManager_Assert(!" This render state is already saved!");
; 430  : 	}
; 431  : 	m_bRenderStateSavingFlag[Type] = TRUE;
; 432  : #endif _DEBUG
; 433  : 
; 434  : 	// Check that we have set this up before, if not, the default is this.
; 435  : 	m_CopyState.m_RenderStates[Type] = m_CurrentState.m_RenderStates[Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b 84 91 78 66
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+26232]
  0000d	89 84 91 ec cc
	00 00		 mov	 DWORD PTR [ecx+edx*4+52460], eax

; 436  : 	SetRenderState(Type, dwValue);

  00014	89 55 08	 mov	 DWORD PTR _Type$[ebp], edx

; 437  : }

  00017	5d		 pop	 ebp

; 436  : 	SetRenderState(Type, dwValue);

  00018	e9 00 00 00 00	 jmp	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ENDP ; CStateManager::SaveRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_pLight$ = 12						; size = 4
?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z PROC	; CStateManager::GetLight, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 28   : 	assert(index<8);
; 29   : 	*pLight=m_kLightData.m_akD3DLight[index];

  00004	6b 75 08 68	 imul	 esi, DWORD PTR _index$[ebp], 104
  00008	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  0000d	57		 push	 edi
  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _pLight$[ebp]
  00011	81 c6 00 00 00
	00		 add	 esi, OFFSET ?m_kLightData@@3USLightData@@A ; m_kLightData
  00017	f3 a5		 rep movsd
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi

; 30   : }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z ENDP	; CStateManager::GetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_pLight$ = 12						; size = 4
?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z PROC	; CStateManager::SetLight, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 	assert(index<SLightData::LIGHT_NUM);
; 21   : 	m_kLightData.m_akD3DLight[index]=*pLight;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _pLight$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	53		 push	 ebx
  00009	8b 5d 08	 mov	 ebx, DWORD PTR _index$[ebp]
  0000c	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	6b fb 68	 imul	 edi, ebx, 104
  00016	8b f2		 mov	 esi, edx

; 22   : 
; 23   : 	m_lpD3DDev->SetLight(index, pLight);

  00018	52		 push	 edx
  00019	53		 push	 ebx
  0001a	81 c7 00 00 00
	00		 add	 edi, OFFSET ?m_kLightData@@3USLightData@@A ; m_kLightData
  00020	f3 a5		 rep movsd
  00022	8b 80 78 33 01
	00		 mov	 eax, DWORD PTR [eax+78712]
  00028	50		 push	 eax
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	ff 91 b0 00 00
	00		 call	 DWORD PTR [ecx+176]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 24   : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z ENDP	; CStateManager::SetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z PROC ; CStateManager::GetMaterial, COMDAT
; _this$ = ecx

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 413  : 	// Set the renderstate and remember it.
; 414  : 	*pMaterial = m_CurrentState.m_D3DMaterial;

  00003	f3 0f 6f 81 20
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52256]
  0000b	8b 55 08	 mov	 edx, DWORD PTR _pMaterial$[ebp]
  0000e	f3 0f 7f 02	 movdqu	 XMMWORD PTR [edx], xmm0
  00012	f3 0f 6f 81 30
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52272]
  0001a	f3 0f 7f 42 10	 movdqu	 XMMWORD PTR [edx+16], xmm0
  0001f	f3 0f 6f 81 40
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52288]
  00027	f3 0f 7f 42 20	 movdqu	 XMMWORD PTR [edx+32], xmm0
  0002c	f3 0f 6f 81 50
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52304]
  00034	f3 0f 7f 42 30	 movdqu	 XMMWORD PTR [edx+48], xmm0
  00039	8b 81 60 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52320]
  0003f	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 415  : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z ENDP ; CStateManager::GetMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z PROC ; CStateManager::SetMaterial, COMDAT
; _this$ = ecx

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 407  : 	m_lpD3DDev->SetMaterial(pMaterial);

  00004	8b 75 08	 mov	 esi, DWORD PTR _pMaterial$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	56		 push	 esi
  0000b	8b 87 78 33 01
	00		 mov	 eax, DWORD PTR [edi+78712]
  00011	50		 push	 eax
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]

; 408  : 	m_CurrentState.m_D3DMaterial = *pMaterial;

  0001a	f3 0f 6f 06	 movdqu	 xmm0, XMMWORD PTR [esi]
  0001e	f3 0f 7f 87 20
	cc 00 00	 movdqu	 XMMWORD PTR [edi+52256], xmm0
  00026	f3 0f 6f 46 10	 movdqu	 xmm0, XMMWORD PTR [esi+16]
  0002b	f3 0f 7f 87 30
	cc 00 00	 movdqu	 XMMWORD PTR [edi+52272], xmm0
  00033	f3 0f 6f 46 20	 movdqu	 xmm0, XMMWORD PTR [esi+32]
  00038	f3 0f 7f 87 40
	cc 00 00	 movdqu	 XMMWORD PTR [edi+52288], xmm0
  00040	f3 0f 6f 46 30	 movdqu	 xmm0, XMMWORD PTR [esi+48]
  00045	f3 0f 7f 87 50
	cc 00 00	 movdqu	 XMMWORD PTR [edi+52304], xmm0
  0004d	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00050	89 87 60 cc 00
	00		 mov	 DWORD PTR [edi+52320], eax
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 409  : }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ENDP ; CStateManager::SetMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?RestoreMaterial@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreMaterial@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreMaterial, COMDAT
; _this$ = ecx

; 402  : 	SetMaterial(&m_CopyState.m_D3DMaterial);

  00000	8d 81 94 32 01
	00		 lea	 eax, DWORD PTR [ecx+78484]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial

; 403  : }

  0000c	c3		 ret	 0
?RestoreMaterial@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z PROC ; CStateManager::SaveMaterial, COMDAT
; _this$ = ecx

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 395  : 	// Check that we have set this up before, if not, the default is this.
; 396  : 	m_CopyState.m_D3DMaterial = m_CurrentState.m_D3DMaterial;

  00003	f3 0f 6f 81 20
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52256]
  0000b	8b 81 60 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52320]
  00011	f3 0f 7f 81 94
	32 01 00	 movdqu	 XMMWORD PTR [ecx+78484], xmm0
  00019	f3 0f 6f 81 30
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52272]
  00021	f3 0f 7f 81 a4
	32 01 00	 movdqu	 XMMWORD PTR [ecx+78500], xmm0
  00029	f3 0f 6f 81 40
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52288]
  00031	f3 0f 7f 81 b4
	32 01 00	 movdqu	 XMMWORD PTR [ecx+78516], xmm0
  00039	f3 0f 6f 81 50
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52304]
  00041	f3 0f 7f 81 c4
	32 01 00	 movdqu	 XMMWORD PTR [ecx+78532], xmm0
  00049	89 81 d4 32 01
	00		 mov	 DWORD PTR [ecx+78548], eax

; 398  : }

  0004f	5d		 pop	 ebp

; 397  : 	SetMaterial(pMaterial);

  00050	e9 00 00 00 00	 jmp	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial
?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ENDP ; CStateManager::SaveMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SaveMaterial@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?SaveMaterial@CStateManager@@QAEXXZ PROC		; CStateManager::SaveMaterial, COMDAT
; _this$ = ecx

; 390  : 	m_CopyState.m_D3DMaterial = m_CurrentState.m_D3DMaterial;

  00000	f3 0f 6f 81 20
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52256]
  00008	8b 81 60 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52320]
  0000e	f3 0f 7f 81 94
	32 01 00	 movdqu	 XMMWORD PTR [ecx+78484], xmm0
  00016	f3 0f 6f 81 30
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52272]
  0001e	f3 0f 7f 81 a4
	32 01 00	 movdqu	 XMMWORD PTR [ecx+78500], xmm0
  00026	f3 0f 6f 81 40
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52288]
  0002e	f3 0f 7f 81 b4
	32 01 00	 movdqu	 XMMWORD PTR [ecx+78516], xmm0
  00036	f3 0f 6f 81 50
	cc 00 00	 movdqu	 xmm0, XMMWORD PTR [ecx+52304]
  0003e	f3 0f 7f 81 c4
	32 01 00	 movdqu	 XMMWORD PTR [ecx+78532], xmm0
  00046	89 81 d4 32 01
	00		 mov	 DWORD PTR [ecx+78548], eax

; 391  : }

  0004c	c3		 ret	 0
?SaveMaterial@CStateManager@@QAEXXZ ENDP		; CStateManager::SaveMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?EndScene@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?EndScene@CStateManager@@QAEXXZ PROC			; CStateManager::EndScene, COMDAT
; _this$ = ecx

; 52   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 53   : 	m_lpD3DDev->EndScene();

  00003	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00009	50		 push	 eax
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
  0000c	ff 92 8c 00 00
	00		 call	 DWORD PTR [edx+140]

; 54   : 	m_bScene=false;

  00012	c6 86 6d 33 01
	00 00		 mov	 BYTE PTR [esi+78701], 0
  00019	5e		 pop	 esi

; 55   : }

  0001a	c3		 ret	 0
?EndScene@CStateManager@@QAEXXZ ENDP			; CStateManager::EndScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?BeginScene@CStateManager@@QAE_NXZ
_TEXT	SEGMENT
_m4View$ = -196						; size = 64
_m4World$ = -132					; size = 64
_m4Proj$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?BeginScene@CStateManager@@QAE_NXZ PROC			; CStateManager::BeginScene, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 34   : 	m_bScene=true;
; 35   : 
; 36   : 	D3DXMATRIX m4Proj;
; 37   : 	D3DXMATRIX m4View;
; 38   : 	D3DXMATRIX m4World;
; 39   : 	GetTransform(D3DTS_WORLD, &m4World);

  00016	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _m4World$[ebp]
  0001c	50		 push	 eax
  0001d	68 00 01 00 00	 push	 256			; 00000100H
  00022	c6 86 6d 33 01
	00 01		 mov	 BYTE PTR [esi+78701], 1
  00029	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 40   : 	GetTransform(D3DTS_PROJECTION, &m4Proj);

  0002e	8d 45 bc	 lea	 eax, DWORD PTR _m4Proj$[ebp]
  00031	8b ce		 mov	 ecx, esi
  00033	50		 push	 eax
  00034	6a 03		 push	 3
  00036	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 41   : 	GetTransform(D3DTS_VIEW, &m4View);

  0003b	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _m4View$[ebp]
  00041	8b ce		 mov	 ecx, esi
  00043	50		 push	 eax
  00044	6a 02		 push	 2
  00046	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 42   : 	SetTransform(D3DTS_WORLD, &m4World);

  0004b	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _m4World$[ebp]
  00051	8b ce		 mov	 ecx, esi
  00053	50		 push	 eax
  00054	68 00 01 00 00	 push	 256			; 00000100H
  00059	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 43   : 	SetTransform(D3DTS_PROJECTION, &m4Proj);

  0005e	8d 45 bc	 lea	 eax, DWORD PTR _m4Proj$[ebp]
  00061	8b ce		 mov	 ecx, esi
  00063	50		 push	 eax
  00064	6a 03		 push	 3
  00066	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 44   : 	SetTransform(D3DTS_VIEW, &m4View);

  0006b	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _m4View$[ebp]
  00071	8b ce		 mov	 ecx, esi
  00073	50		 push	 eax
  00074	6a 02		 push	 2
  00076	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 45   : 
; 46   : 	if (FAILED(m_lpD3DDev->BeginScene()))

  0007b	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00081	50		 push	 eax
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	ff 91 88 00 00
	00		 call	 DWORD PTR [ecx+136]

; 47   : 		return false;
; 48   : 	return true;
; 49   : }

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008d	85 c0		 test	 eax, eax
  0008f	5e		 pop	 esi
  00090	0f 99 c0	 setns	 al
  00093	33 cd		 xor	 ecx, ebp
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
?BeginScene@CStateManager@@QAE_NXZ ENDP			; CStateManager::BeginScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?Restore@CStateManager@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Restore@CStateManager@@QAEXXZ PROC			; CStateManager::Restore, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi

; 118  : 	int i, j;
; 119  : 
; 120  : 	m_bForce = true;
; 121  : 
; 122  : 	for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; ++i)

  0000c	33 ff		 xor	 edi, edi
  0000e	c6 86 6c 33 01
	00 01		 mov	 BYTE PTR [esi+78700], 1
  00015	8d 9e 78 66 00
	00		 lea	 ebx, DWORD PTR [esi+26232]
  0001b	eb 03 8d 49 00	 npad	 5
$LL12@Restore:

; 123  : 		SetRenderState(D3DRENDERSTATETYPE(i), m_CurrentState.m_RenderStates[i]);

  00020	ff 33		 push	 DWORD PTR [ebx]
  00022	8b ce		 mov	 ecx, esi
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
  0002a	47		 inc	 edi
  0002b	8d 5b 04	 lea	 ebx, DWORD PTR [ebx+4]
  0002e	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  00034	72 ea		 jb	 SHORT $LL12@Restore

; 124  : 
; 125  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  00036	8b c6		 mov	 eax, esi
  00038	33 db		 xor	 ebx, ebx
  0003a	8d b8 78 6a 00
	00		 lea	 edi, DWORD PTR [eax+27256]
$LL9@Restore:

; 126  : 		for (j = 0; j < STATEMANAGER_MAX_TEXTURESTATES; ++j)

  00040	33 f6		 xor	 esi, esi
$LL6@Restore:

; 127  : 			SetTextureStageState(i, D3DTEXTURESTAGESTATETYPE(j), m_CurrentState.m_TextureStates[i][j]);

  00042	ff 37		 push	 DWORD PTR [edi]
  00044	8b c8		 mov	 ecx, eax
  00046	56		 push	 esi
  00047	53		 push	 ebx
  00048	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00050	46		 inc	 esi
  00051	83 c7 04	 add	 edi, 4
  00054	81 fe 80 00 00
	00		 cmp	 esi, 128		; 00000080H
  0005a	72 e6		 jb	 SHORT $LL6@Restore

; 124  : 
; 125  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  0005c	43		 inc	 ebx
  0005d	83 fb 08	 cmp	 ebx, 8
  00060	72 de		 jb	 SHORT $LL9@Restore

; 128  : 
; 129  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  00062	8b f0		 mov	 esi, eax
  00064	33 ff		 xor	 edi, edi
  00066	8d 9e f8 80 00
	00		 lea	 ebx, DWORD PTR [esi+33016]
  0006c	8d 64 24 00	 npad	 4
$LL3@Restore:

; 130  : 		SetTexture(i, m_CurrentState.m_Textures[i]);

  00070	ff 33		 push	 DWORD PTR [ebx]
  00072	8b ce		 mov	 ecx, esi
  00074	57		 push	 edi
  00075	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
  0007a	47		 inc	 edi
  0007b	8d 5b 04	 lea	 ebx, DWORD PTR [ebx+4]
  0007e	83 ff 08	 cmp	 edi, 8
  00081	72 ed		 jb	 SHORT $LL3@Restore

; 131  : 	
; 132  : 	m_bForce = false;

  00083	5f		 pop	 edi
  00084	c6 86 6c 33 01
	00 00		 mov	 BYTE PTR [esi+78700], 0
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx

; 133  : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
?Restore@CStateManager@@QAEXXZ ENDP			; CStateManager::Restore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ?SetDefaultState@CStateManager@@QAEXXZ
_TEXT	SEGMENT
_DefaultMat$ = -1672					; size = 68
_Identity$ = -1604					; size = 64
_av4Null$ = -1540					; size = 1536
__$ArrayPad$ = -4					; size = 4
?SetDefaultState@CStateManager@@QAEXXZ PROC		; CStateManager::SetDefaultState, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 06 00
	00		 sub	 esp, 1672		; 00000688H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 137  : 	m_CurrentState.ResetState();

  00016	8d 8e 78 66 00
	00		 lea	 ecx, DWORD PTR [esi+26232]
  0001c	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 138  : 	m_CopyState.ResetState();

  00021	8d 8e ec cc 00
	00		 lea	 ecx, DWORD PTR [esi+52460]
  00027	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 139  : 	m_ChipState.ResetState();

  0002c	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002f	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 147  : 	SetTransform(D3DTS_WORLD, &Identity);

  00034	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  0003a	66 c7 86 6c 33
	01 00 01 00	 mov	 WORD PTR [esi+78700], 1
  00043	50		 push	 eax
  00044	68 00 01 00 00	 push	 256			; 00000100H
  00049	8b ce		 mov	 ecx, esi
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  0004b	c7 85 f4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+56], 0
  00055	c7 85 f0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+52], 0
  0005f	c7 85 ec f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+48], 0
  00069	c7 85 e8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+44], 0
  00073	c7 85 e0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+36], 0
  0007d	c7 85 dc f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+32], 0
  00087	c7 85 d8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+28], 0
  00091	c7 85 d4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+24], 0
  0009b	c7 85 cc f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+16], 0
  000a5	c7 85 c8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+12], 0
  000af	c7 85 c4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+8], 0
  000b9	c7 85 c0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+4], 0

; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000c3	c7 85 f8 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+60], 1065353216 ; 3f800000H
  000cd	c7 85 e4 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+40], 1065353216 ; 3f800000H
  000d7	c7 85 d0 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+20], 1065353216 ; 3f800000H
  000e1	c7 85 bc f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp], 1065353216 ; 3f800000H
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp

; 147  : 	SetTransform(D3DTS_WORLD, &Identity);

  000eb	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 148  : 	SetTransform(D3DTS_VIEW, &Identity);

  000f0	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  000f6	8b ce		 mov	 ecx, esi
  000f8	50		 push	 eax
  000f9	6a 02		 push	 2
  000fb	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 149  : 	SetTransform(D3DTS_PROJECTION, &Identity);

  00100	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  00106	8b ce		 mov	 ecx, esi
  00108	50		 push	 eax
  00109	6a 03		 push	 3
  0010b	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 150  : 
; 151  : 	D3DMATERIAL8 DefaultMat;
; 152  : 	ZeroMemory(&DefaultMat, sizeof(D3DMATERIAL8));

  00110	6a 44		 push	 68			; 00000044H
  00112	8d 85 78 f9 ff
	ff		 lea	 eax, DWORD PTR _DefaultMat$[ebp]
  00118	6a 00		 push	 0
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 _memset
  00120	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000

; 153  : 
; 154  : 	DefaultMat.Diffuse.r = 1.0f;
; 155  : 	DefaultMat.Diffuse.g = 1.0f;
; 156  : 	DefaultMat.Diffuse.b = 1.0f;
; 157  : 	DefaultMat.Diffuse.a = 1.0f;
; 158  : 	DefaultMat.Ambient.r = 1.0f;
; 159  : 	DefaultMat.Ambient.g = 1.0f;
; 160  : 	DefaultMat.Ambient.b = 1.0f;
; 161  : 	DefaultMat.Ambient.a = 1.0f;
; 162  : 	DefaultMat.Emissive.r = 0.0f;
; 163  : 	DefaultMat.Emissive.g = 0.0f;
; 164  : 	DefaultMat.Emissive.b = 0.0f;
; 165  : 	DefaultMat.Emissive.a = 0.0f;
; 166  : 	DefaultMat.Specular.r = 0.0f;
; 167  : 	DefaultMat.Specular.g = 0.0f;
; 168  : 	DefaultMat.Specular.b = 0.0f;
; 169  : 	DefaultMat.Specular.a = 0.0f;
; 170  : 	DefaultMat.Power = 0.0f;
; 171  : 
; 172  : 	SetMaterial(&DefaultMat);

  00127	8d 85 78 f9 ff
	ff		 lea	 eax, DWORD PTR _DefaultMat$[ebp]
  0012d	0f 11 85 78 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp], xmm0
  00134	83 c4 0c	 add	 esp, 12			; 0000000cH
  00137	8b ce		 mov	 ecx, esi
  00139	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  00140	0f 11 85 88 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+16], xmm0
  00147	c7 85 b8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _DefaultMat$[ebp+64], 0
  00151	0f 57 c0	 xorps	 xmm0, xmm0
  00154	50		 push	 eax
  00155	0f 11 85 a8 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+48], xmm0
  0015c	0f 11 85 98 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+32], xmm0
  00163	e8 00 00 00 00	 call	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial

; 173  : 
; 174  : 	SetRenderState(D3DRS_DIFFUSEMATERIALSOURCE, D3DMCS_MATERIAL);

  00168	6a 00		 push	 0
  0016a	68 91 00 00 00	 push	 145			; 00000091H
  0016f	8b ce		 mov	 ecx, esi
  00171	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 175  : 	SetRenderState(D3DRS_SPECULARMATERIALSOURCE, D3DMCS_MATERIAL);

  00176	6a 00		 push	 0
  00178	68 92 00 00 00	 push	 146			; 00000092H
  0017d	8b ce		 mov	 ecx, esi
  0017f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 176  : 	SetRenderState(D3DRS_AMBIENTMATERIALSOURCE, D3DMCS_MATERIAL);

  00184	6a 00		 push	 0
  00186	68 93 00 00 00	 push	 147			; 00000093H
  0018b	8b ce		 mov	 ecx, esi
  0018d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 177  : 	SetRenderState(D3DRS_EMISSIVEMATERIALSOURCE, D3DMCS_MATERIAL);

  00192	6a 00		 push	 0
  00194	68 94 00 00 00	 push	 148			; 00000094H
  00199	8b ce		 mov	 ecx, esi
  0019b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 178  : 
; 179  : 	SetRenderState(D3DRS_LINEPATTERN, 0xFFFFFFFF);

  001a0	6a ff		 push	 -1
  001a2	6a 0a		 push	 10			; 0000000aH
  001a4	8b ce		 mov	 ecx, esi
  001a6	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 180  : 	SetRenderState(D3DRS_LASTPIXEL, FALSE);

  001ab	6a 00		 push	 0
  001ad	6a 10		 push	 16			; 00000010H
  001af	8b ce		 mov	 ecx, esi
  001b1	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 181  : 	SetRenderState(D3DRS_ALPHAREF, 1);

  001b6	6a 01		 push	 1
  001b8	6a 18		 push	 24			; 00000018H
  001ba	8b ce		 mov	 ecx, esi
  001bc	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 182  : 	SetRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATEREQUAL);

  001c1	6a 07		 push	 7
  001c3	6a 19		 push	 25			; 00000019H
  001c5	8b ce		 mov	 ecx, esi
  001c7	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 183  : 	SetRenderState(D3DRS_ZVISIBLE, FALSE);

  001cc	6a 00		 push	 0
  001ce	6a 1e		 push	 30			; 0000001eH
  001d0	8b ce		 mov	 ecx, esi
  001d2	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 184  : 	SetRenderState(D3DRS_FOGSTART, 0);

  001d7	6a 00		 push	 0
  001d9	6a 24		 push	 36			; 00000024H
  001db	8b ce		 mov	 ecx, esi
  001dd	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 185  : 	SetRenderState(D3DRS_FOGEND, 0);

  001e2	6a 00		 push	 0
  001e4	6a 25		 push	 37			; 00000025H
  001e6	8b ce		 mov	 ecx, esi
  001e8	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 186  : 	SetRenderState(D3DRS_FOGDENSITY, 0);

  001ed	6a 00		 push	 0
  001ef	6a 26		 push	 38			; 00000026H
  001f1	8b ce		 mov	 ecx, esi
  001f3	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 187  : 	SetRenderState(D3DRS_EDGEANTIALIAS, FALSE);

  001f8	6a 00		 push	 0
  001fa	6a 28		 push	 40			; 00000028H
  001fc	8b ce		 mov	 ecx, esi
  001fe	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 188  : 	SetRenderState(D3DRS_ZBIAS, 0);

  00203	6a 00		 push	 0
  00205	6a 2f		 push	 47			; 0000002fH
  00207	8b ce		 mov	 ecx, esi
  00209	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 189  : 	SetRenderState(D3DRS_STENCILWRITEMASK, 0xFFFFFFFF);

  0020e	6a ff		 push	 -1
  00210	6a 3b		 push	 59			; 0000003bH
  00212	8b ce		 mov	 ecx, esi
  00214	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 190  : 	SetRenderState(D3DRS_AMBIENT, 0x00000000);

  00219	6a 00		 push	 0
  0021b	68 8b 00 00 00	 push	 139			; 0000008bH
  00220	8b ce		 mov	 ecx, esi
  00222	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 191  : 	SetRenderState(D3DRS_LOCALVIEWER, FALSE);

  00227	6a 00		 push	 0
  00229	68 8e 00 00 00	 push	 142			; 0000008eH
  0022e	8b ce		 mov	 ecx, esi
  00230	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 192  : 	SetRenderState(D3DRS_NORMALIZENORMALS, FALSE);

  00235	6a 00		 push	 0
  00237	68 8f 00 00 00	 push	 143			; 0000008fH
  0023c	8b ce		 mov	 ecx, esi
  0023e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 193  : 	SetRenderState(D3DRS_VERTEXBLEND, D3DVBF_DISABLE);

  00243	6a 00		 push	 0
  00245	68 97 00 00 00	 push	 151			; 00000097H
  0024a	8b ce		 mov	 ecx, esi
  0024c	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 194  : 	SetRenderState(D3DRS_CLIPPLANEENABLE, 0);

  00251	6a 00		 push	 0
  00253	68 98 00 00 00	 push	 152			; 00000098H
  00258	8b ce		 mov	 ecx, esi
  0025a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 195  : 	SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING, FALSE);

  0025f	6a 00		 push	 0
  00261	68 99 00 00 00	 push	 153			; 00000099H
  00266	8b ce		 mov	 ecx, esi
  00268	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 196  : 	SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, FALSE);

  0026d	6a 00		 push	 0
  0026f	68 a1 00 00 00	 push	 161			; 000000a1H
  00274	8b ce		 mov	 ecx, esi
  00276	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 197  : 	SetRenderState(D3DRS_MULTISAMPLEMASK, 0xFFFFFFFF);

  0027b	6a ff		 push	 -1
  0027d	68 a2 00 00 00	 push	 162			; 000000a2H
  00282	8b ce		 mov	 ecx, esi
  00284	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 198  : 	SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE);

  00289	6a 00		 push	 0
  0028b	68 a7 00 00 00	 push	 167			; 000000a7H
  00290	8b ce		 mov	 ecx, esi
  00292	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 199  : 	SetRenderState(D3DRS_COLORWRITEENABLE, 0xFFFFFFFF);

  00297	6a ff		 push	 -1
  00299	68 a8 00 00 00	 push	 168			; 000000a8H
  0029e	8b ce		 mov	 ecx, esi
  002a0	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 200  : 	SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);

  002a5	6a 03		 push	 3
  002a7	6a 08		 push	 8
  002a9	8b ce		 mov	 ecx, esi
  002ab	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 201  : 	SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD);

  002b0	6a 02		 push	 2
  002b2	6a 09		 push	 9
  002b4	8b ce		 mov	 ecx, esi
  002b6	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 202  : 	SetRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  002bb	6a 02		 push	 2
  002bd	6a 16		 push	 22			; 00000016H
  002bf	8b ce		 mov	 ecx, esi
  002c1	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 203  : 	SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

  002c6	6a 00		 push	 0
  002c8	6a 1b		 push	 27			; 0000001bH
  002ca	8b ce		 mov	 ecx, esi
  002cc	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 204  : 	SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);

  002d1	6a 01		 push	 1
  002d3	68 ab 00 00 00	 push	 171			; 000000abH
  002d8	8b ce		 mov	 ecx, esi
  002da	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 205  : 	SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  002df	6a 05		 push	 5
  002e1	6a 13		 push	 19			; 00000013H
  002e3	8b ce		 mov	 ecx, esi
  002e5	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 206  : 	SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  002ea	6a 06		 push	 6
  002ec	6a 14		 push	 20			; 00000014H
  002ee	8b ce		 mov	 ecx, esi
  002f0	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 207  : 	SetRenderState(D3DRS_FOGENABLE, FALSE);

  002f5	6a 00		 push	 0
  002f7	6a 1c		 push	 28			; 0000001cH
  002f9	8b ce		 mov	 ecx, esi
  002fb	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 208  : 	SetRenderState(D3DRS_FOGCOLOR, 0xFF000000);

  00300	68 00 00 00 ff	 push	 -16777216		; ff000000H
  00305	6a 22		 push	 34			; 00000022H
  00307	8b ce		 mov	 ecx, esi
  00309	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 209  : 	SetRenderState(D3DRS_FOGTABLEMODE, D3DFOG_NONE);

  0030e	6a 00		 push	 0
  00310	6a 23		 push	 35			; 00000023H
  00312	8b ce		 mov	 ecx, esi
  00314	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 210  : 	SetRenderState(D3DRS_FOGVERTEXMODE, D3DFOG_LINEAR);

  00319	6a 03		 push	 3
  0031b	68 8c 00 00 00	 push	 140			; 0000008cH
  00320	8b ce		 mov	 ecx, esi
  00322	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 211  : 	SetRenderState(D3DRS_RANGEFOGENABLE, FALSE);

  00327	6a 00		 push	 0
  00329	6a 30		 push	 48			; 00000030H
  0032b	8b ce		 mov	 ecx, esi
  0032d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 212  : 	SetRenderState(D3DRS_ZENABLE, TRUE);

  00332	6a 01		 push	 1
  00334	6a 07		 push	 7
  00336	8b ce		 mov	 ecx, esi
  00338	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 213  : 	SetRenderState(D3DRS_ZFUNC, D3DCMP_LESSEQUAL);

  0033d	6a 04		 push	 4
  0033f	6a 17		 push	 23			; 00000017H
  00341	8b ce		 mov	 ecx, esi
  00343	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 214  : 	SetRenderState(D3DRS_ZWRITEENABLE, TRUE);

  00348	6a 01		 push	 1
  0034a	6a 0e		 push	 14			; 0000000eH
  0034c	8b ce		 mov	 ecx, esi
  0034e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 215  : 	SetRenderState(D3DRS_DITHERENABLE, TRUE);

  00353	6a 01		 push	 1
  00355	6a 1a		 push	 26			; 0000001aH
  00357	8b ce		 mov	 ecx, esi
  00359	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 216  : 	SetRenderState(D3DRS_STENCILENABLE, FALSE);

  0035e	6a 00		 push	 0
  00360	6a 34		 push	 52			; 00000034H
  00362	8b ce		 mov	 ecx, esi
  00364	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 217  : 	SetRenderState(D3DRS_ALPHATESTENABLE, FALSE);

  00369	6a 00		 push	 0
  0036b	6a 0f		 push	 15			; 0000000fH
  0036d	8b ce		 mov	 ecx, esi
  0036f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 218  : 	SetRenderState(D3DRS_CLIPPING, TRUE);

  00374	6a 01		 push	 1
  00376	68 88 00 00 00	 push	 136			; 00000088H
  0037b	8b ce		 mov	 ecx, esi
  0037d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 219  : 	SetRenderState(D3DRS_LIGHTING, FALSE);

  00382	6a 00		 push	 0
  00384	68 89 00 00 00	 push	 137			; 00000089H
  00389	8b ce		 mov	 ecx, esi
  0038b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 220  : 	SetRenderState(D3DRS_SPECULARENABLE, FALSE);

  00390	6a 00		 push	 0
  00392	6a 1d		 push	 29			; 0000001dH
  00394	8b ce		 mov	 ecx, esi
  00396	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 221  : 	SetRenderState(D3DRS_COLORVERTEX, FALSE);

  0039b	6a 00		 push	 0
  0039d	68 8d 00 00 00	 push	 141			; 0000008dH
  003a2	8b ce		 mov	 ecx, esi
  003a4	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 222  : 	SetRenderState(D3DRS_WRAP0, 0);

  003a9	6a 00		 push	 0
  003ab	68 80 00 00 00	 push	 128			; 00000080H
  003b0	8b ce		 mov	 ecx, esi
  003b2	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 223  : 	SetRenderState(D3DRS_WRAP1, 0);

  003b7	6a 00		 push	 0
  003b9	68 81 00 00 00	 push	 129			; 00000081H
  003be	8b ce		 mov	 ecx, esi
  003c0	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 224  : 	SetRenderState(D3DRS_WRAP2, 0);

  003c5	6a 00		 push	 0
  003c7	68 82 00 00 00	 push	 130			; 00000082H
  003cc	8b ce		 mov	 ecx, esi
  003ce	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 225  : 	SetRenderState(D3DRS_WRAP3, 0);

  003d3	6a 00		 push	 0
  003d5	68 83 00 00 00	 push	 131			; 00000083H
  003da	8b ce		 mov	 ecx, esi
  003dc	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 226  : 	SetRenderState(D3DRS_WRAP4, 0);

  003e1	6a 00		 push	 0
  003e3	68 84 00 00 00	 push	 132			; 00000084H
  003e8	8b ce		 mov	 ecx, esi
  003ea	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 227  : 	SetRenderState(D3DRS_WRAP5, 0);

  003ef	6a 00		 push	 0
  003f1	68 85 00 00 00	 push	 133			; 00000085H
  003f6	8b ce		 mov	 ecx, esi
  003f8	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 228  : 	SetRenderState(D3DRS_WRAP6, 0);

  003fd	6a 00		 push	 0
  003ff	68 86 00 00 00	 push	 134			; 00000086H
  00404	8b ce		 mov	 ecx, esi
  00406	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 229  : 	SetRenderState(D3DRS_WRAP7, 0);

  0040b	6a 00		 push	 0
  0040d	68 87 00 00 00	 push	 135			; 00000087H
  00412	8b ce		 mov	 ecx, esi
  00414	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 230  : 
; 231  : 	SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

  00419	6a 04		 push	 4
  0041b	6a 01		 push	 1
  0041d	6a 00		 push	 0
  0041f	8b ce		 mov	 ecx, esi
  00421	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 232  : 	SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00426	6a 02		 push	 2
  00428	6a 02		 push	 2
  0042a	6a 00		 push	 0
  0042c	8b ce		 mov	 ecx, esi
  0042e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 233  : 	SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_CURRENT);

  00433	6a 01		 push	 1
  00435	6a 03		 push	 3
  00437	6a 00		 push	 0
  00439	8b ce		 mov	 ecx, esi
  0043b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 234  : 	SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00440	6a 02		 push	 2
  00442	6a 05		 push	 5
  00444	6a 00		 push	 0
  00446	8b ce		 mov	 ecx, esi
  00448	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 235  : 	SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_CURRENT);

  0044d	6a 01		 push	 1
  0044f	6a 06		 push	 6
  00451	6a 00		 push	 0
  00453	8b ce		 mov	 ecx, esi
  00455	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 236  : 	SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

  0045a	6a 02		 push	 2
  0045c	6a 04		 push	 4
  0045e	6a 00		 push	 0
  00460	8b ce		 mov	 ecx, esi
  00462	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 237  : 
; 238  : 	SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00467	6a 01		 push	 1
  00469	6a 01		 push	 1
  0046b	6a 01		 push	 1
  0046d	8b ce		 mov	 ecx, esi
  0046f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 239  : 	SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00474	6a 02		 push	 2
  00476	6a 02		 push	 2
  00478	6a 01		 push	 1
  0047a	8b ce		 mov	 ecx, esi
  0047c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 240  : 	SetTextureStageState(1, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00481	6a 00		 push	 0
  00483	6a 03		 push	 3
  00485	6a 01		 push	 1
  00487	8b ce		 mov	 ecx, esi
  00489	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 241  : 	SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  0048e	6a 01		 push	 1
  00490	6a 04		 push	 4
  00492	6a 01		 push	 1
  00494	8b ce		 mov	 ecx, esi
  00496	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 242  : 	SetTextureStageState(1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  0049b	6a 02		 push	 2
  0049d	6a 05		 push	 5
  0049f	6a 01		 push	 1
  004a1	8b ce		 mov	 ecx, esi
  004a3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 243  : 	SetTextureStageState(1, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  004a8	6a 00		 push	 0
  004aa	6a 06		 push	 6
  004ac	6a 01		 push	 1
  004ae	8b ce		 mov	 ecx, esi
  004b0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 244  : 
; 245  : 	SetTextureStageState(2, D3DTSS_COLOROP, D3DTOP_DISABLE);

  004b5	6a 01		 push	 1
  004b7	6a 01		 push	 1
  004b9	6a 02		 push	 2
  004bb	8b ce		 mov	 ecx, esi
  004bd	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 246  : 	SetTextureStageState(2, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  004c2	6a 02		 push	 2
  004c4	6a 02		 push	 2
  004c6	6a 02		 push	 2
  004c8	8b ce		 mov	 ecx, esi
  004ca	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 247  : 	SetTextureStageState(2, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  004cf	6a 00		 push	 0
  004d1	6a 03		 push	 3
  004d3	6a 02		 push	 2
  004d5	8b ce		 mov	 ecx, esi
  004d7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 248  : 	SetTextureStageState(2, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  004dc	6a 01		 push	 1
  004de	6a 04		 push	 4
  004e0	6a 02		 push	 2
  004e2	8b ce		 mov	 ecx, esi
  004e4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 249  : 	SetTextureStageState(2, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  004e9	6a 02		 push	 2
  004eb	6a 05		 push	 5
  004ed	6a 02		 push	 2
  004ef	8b ce		 mov	 ecx, esi
  004f1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 250  : 	SetTextureStageState(2, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  004f6	6a 00		 push	 0
  004f8	6a 06		 push	 6
  004fa	6a 02		 push	 2
  004fc	8b ce		 mov	 ecx, esi
  004fe	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 251  : 
; 252  : 	SetTextureStageState(3, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00503	6a 01		 push	 1
  00505	6a 01		 push	 1
  00507	6a 03		 push	 3
  00509	8b ce		 mov	 ecx, esi
  0050b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 253  : 	SetTextureStageState(3, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00510	6a 02		 push	 2
  00512	6a 02		 push	 2
  00514	6a 03		 push	 3
  00516	8b ce		 mov	 ecx, esi
  00518	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 254  : 	SetTextureStageState(3, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  0051d	6a 00		 push	 0
  0051f	6a 03		 push	 3
  00521	6a 03		 push	 3
  00523	8b ce		 mov	 ecx, esi
  00525	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 255  : 	SetTextureStageState(3, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  0052a	6a 01		 push	 1
  0052c	6a 04		 push	 4
  0052e	6a 03		 push	 3
  00530	8b ce		 mov	 ecx, esi
  00532	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 256  : 	SetTextureStageState(3, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00537	6a 02		 push	 2
  00539	6a 05		 push	 5
  0053b	6a 03		 push	 3
  0053d	8b ce		 mov	 ecx, esi
  0053f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 257  : 	SetTextureStageState(3, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00544	6a 00		 push	 0
  00546	6a 06		 push	 6
  00548	6a 03		 push	 3
  0054a	8b ce		 mov	 ecx, esi
  0054c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 258  : 
; 259  : 	SetTextureStageState(4, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00551	6a 01		 push	 1
  00553	6a 01		 push	 1
  00555	6a 04		 push	 4
  00557	8b ce		 mov	 ecx, esi
  00559	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 260  : 	SetTextureStageState(4, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  0055e	6a 02		 push	 2
  00560	6a 02		 push	 2
  00562	6a 04		 push	 4
  00564	8b ce		 mov	 ecx, esi
  00566	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 261  : 	SetTextureStageState(4, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  0056b	6a 00		 push	 0
  0056d	6a 03		 push	 3
  0056f	6a 04		 push	 4
  00571	8b ce		 mov	 ecx, esi
  00573	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 262  : 	SetTextureStageState(4, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00578	6a 01		 push	 1
  0057a	6a 04		 push	 4
  0057c	6a 04		 push	 4
  0057e	8b ce		 mov	 ecx, esi
  00580	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 263  : 	SetTextureStageState(4, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00585	6a 02		 push	 2
  00587	6a 05		 push	 5
  00589	6a 04		 push	 4
  0058b	8b ce		 mov	 ecx, esi
  0058d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 264  : 	SetTextureStageState(4, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00592	6a 00		 push	 0
  00594	6a 06		 push	 6
  00596	6a 04		 push	 4
  00598	8b ce		 mov	 ecx, esi
  0059a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 265  : 
; 266  : 	SetTextureStageState(5, D3DTSS_COLOROP, D3DTOP_DISABLE);

  0059f	6a 01		 push	 1
  005a1	6a 01		 push	 1
  005a3	6a 05		 push	 5
  005a5	8b ce		 mov	 ecx, esi
  005a7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 267  : 	SetTextureStageState(5, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  005ac	6a 02		 push	 2
  005ae	6a 02		 push	 2
  005b0	6a 05		 push	 5
  005b2	8b ce		 mov	 ecx, esi
  005b4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 268  : 	SetTextureStageState(5, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  005b9	6a 00		 push	 0
  005bb	6a 03		 push	 3
  005bd	6a 05		 push	 5
  005bf	8b ce		 mov	 ecx, esi
  005c1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 269  : 	SetTextureStageState(5, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  005c6	6a 01		 push	 1
  005c8	6a 04		 push	 4
  005ca	6a 05		 push	 5
  005cc	8b ce		 mov	 ecx, esi
  005ce	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 270  : 	SetTextureStageState(5, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  005d3	6a 02		 push	 2
  005d5	6a 05		 push	 5
  005d7	6a 05		 push	 5
  005d9	8b ce		 mov	 ecx, esi
  005db	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 271  : 	SetTextureStageState(5, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  005e0	6a 00		 push	 0
  005e2	6a 06		 push	 6
  005e4	6a 05		 push	 5
  005e6	8b ce		 mov	 ecx, esi
  005e8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 272  : 
; 273  : 	SetTextureStageState(6, D3DTSS_COLOROP, D3DTOP_DISABLE);

  005ed	6a 01		 push	 1
  005ef	6a 01		 push	 1
  005f1	6a 06		 push	 6
  005f3	8b ce		 mov	 ecx, esi
  005f5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 274  : 	SetTextureStageState(6, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  005fa	6a 02		 push	 2
  005fc	6a 02		 push	 2
  005fe	6a 06		 push	 6
  00600	8b ce		 mov	 ecx, esi
  00602	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 275  : 	SetTextureStageState(6, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00607	6a 00		 push	 0
  00609	6a 03		 push	 3
  0060b	6a 06		 push	 6
  0060d	8b ce		 mov	 ecx, esi
  0060f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 276  : 	SetTextureStageState(6, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00614	6a 01		 push	 1
  00616	6a 04		 push	 4
  00618	6a 06		 push	 6
  0061a	8b ce		 mov	 ecx, esi
  0061c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 277  : 	SetTextureStageState(6, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00621	6a 02		 push	 2
  00623	6a 05		 push	 5
  00625	6a 06		 push	 6
  00627	8b ce		 mov	 ecx, esi
  00629	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 278  : 	SetTextureStageState(6, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  0062e	6a 00		 push	 0
  00630	6a 06		 push	 6
  00632	6a 06		 push	 6
  00634	8b ce		 mov	 ecx, esi
  00636	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 279  : 
; 280  : 	SetTextureStageState(7, D3DTSS_COLOROP, D3DTOP_DISABLE);

  0063b	6a 01		 push	 1
  0063d	6a 01		 push	 1
  0063f	6a 07		 push	 7
  00641	8b ce		 mov	 ecx, esi
  00643	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 281  : 	SetTextureStageState(7, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00648	6a 02		 push	 2
  0064a	6a 02		 push	 2
  0064c	6a 07		 push	 7
  0064e	8b ce		 mov	 ecx, esi
  00650	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 282  : 	SetTextureStageState(7, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00655	6a 00		 push	 0
  00657	6a 03		 push	 3
  00659	6a 07		 push	 7
  0065b	8b ce		 mov	 ecx, esi
  0065d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 283  : 	SetTextureStageState(7, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00662	6a 01		 push	 1
  00664	6a 04		 push	 4
  00666	6a 07		 push	 7
  00668	8b ce		 mov	 ecx, esi
  0066a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 284  : 	SetTextureStageState(7, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  0066f	6a 02		 push	 2
  00671	6a 05		 push	 5
  00673	6a 07		 push	 7
  00675	8b ce		 mov	 ecx, esi
  00677	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 285  : 	SetTextureStageState(7, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  0067c	6a 00		 push	 0
  0067e	6a 06		 push	 6
  00680	6a 07		 push	 7
  00682	8b ce		 mov	 ecx, esi
  00684	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 286  : 
; 287  : 	SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, 0);

  00689	6a 00		 push	 0
  0068b	6a 0b		 push	 11			; 0000000bH
  0068d	6a 00		 push	 0
  0068f	8b ce		 mov	 ecx, esi
  00691	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 288  : 	SetTextureStageState(1, D3DTSS_TEXCOORDINDEX, 1);

  00696	6a 01		 push	 1
  00698	6a 0b		 push	 11			; 0000000bH
  0069a	6a 01		 push	 1
  0069c	8b ce		 mov	 ecx, esi
  0069e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 289  : 	SetTextureStageState(2, D3DTSS_TEXCOORDINDEX, 2);

  006a3	6a 02		 push	 2
  006a5	6a 0b		 push	 11			; 0000000bH
  006a7	6a 02		 push	 2
  006a9	8b ce		 mov	 ecx, esi
  006ab	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 290  : 	SetTextureStageState(3, D3DTSS_TEXCOORDINDEX, 3);

  006b0	6a 03		 push	 3
  006b2	6a 0b		 push	 11			; 0000000bH
  006b4	6a 03		 push	 3
  006b6	8b ce		 mov	 ecx, esi
  006b8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 291  : 	SetTextureStageState(4, D3DTSS_TEXCOORDINDEX, 4);

  006bd	6a 04		 push	 4
  006bf	6a 0b		 push	 11			; 0000000bH
  006c1	6a 04		 push	 4
  006c3	8b ce		 mov	 ecx, esi
  006c5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 292  : 	SetTextureStageState(5, D3DTSS_TEXCOORDINDEX, 5);

  006ca	6a 05		 push	 5
  006cc	6a 0b		 push	 11			; 0000000bH
  006ce	6a 05		 push	 5
  006d0	8b ce		 mov	 ecx, esi
  006d2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 293  : 	SetTextureStageState(6, D3DTSS_TEXCOORDINDEX, 6);

  006d7	6a 06		 push	 6
  006d9	6a 0b		 push	 11			; 0000000bH
  006db	6a 06		 push	 6
  006dd	8b ce		 mov	 ecx, esi
  006df	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 294  : 	SetTextureStageState(7, D3DTSS_TEXCOORDINDEX, 7);

  006e4	6a 07		 push	 7
  006e6	6a 0b		 push	 11			; 0000000bH
  006e8	6a 07		 push	 7
  006ea	8b ce		 mov	 ecx, esi
  006ec	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 295  : 
; 296  : 	SetTextureStageState(0, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  006f1	6a 02		 push	 2
  006f3	6a 11		 push	 17			; 00000011H
  006f5	6a 00		 push	 0
  006f7	8b ce		 mov	 ecx, esi
  006f9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 297  : 	SetTextureStageState(0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  006fe	6a 02		 push	 2
  00700	6a 10		 push	 16			; 00000010H
  00702	6a 00		 push	 0
  00704	8b ce		 mov	 ecx, esi
  00706	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 298  : 	SetTextureStageState(0, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  0070b	6a 02		 push	 2
  0070d	6a 12		 push	 18			; 00000012H
  0070f	6a 00		 push	 0
  00711	8b ce		 mov	 ecx, esi
  00713	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 299  : 
; 300  : 	SetTextureStageState(1, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  00718	6a 02		 push	 2
  0071a	6a 11		 push	 17			; 00000011H
  0071c	6a 01		 push	 1
  0071e	8b ce		 mov	 ecx, esi
  00720	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 301  : 	SetTextureStageState(1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  00725	6a 02		 push	 2
  00727	6a 10		 push	 16			; 00000010H
  00729	6a 01		 push	 1
  0072b	8b ce		 mov	 ecx, esi
  0072d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 302  : 	SetTextureStageState(1, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  00732	6a 02		 push	 2
  00734	6a 12		 push	 18			; 00000012H
  00736	6a 01		 push	 1
  00738	8b ce		 mov	 ecx, esi
  0073a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 303  : 
; 304  : 	SetTextureStageState(2, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  0073f	6a 02		 push	 2
  00741	6a 11		 push	 17			; 00000011H
  00743	6a 02		 push	 2
  00745	8b ce		 mov	 ecx, esi
  00747	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 305  : 	SetTextureStageState(2, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  0074c	6a 02		 push	 2
  0074e	6a 10		 push	 16			; 00000010H
  00750	6a 02		 push	 2
  00752	8b ce		 mov	 ecx, esi
  00754	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 306  : 	SetTextureStageState(2, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  00759	6a 02		 push	 2
  0075b	6a 12		 push	 18			; 00000012H
  0075d	6a 02		 push	 2
  0075f	8b ce		 mov	 ecx, esi
  00761	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 307  : 
; 308  : 	SetTextureStageState(3, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  00766	6a 02		 push	 2
  00768	6a 11		 push	 17			; 00000011H
  0076a	6a 03		 push	 3
  0076c	8b ce		 mov	 ecx, esi
  0076e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 309  : 	SetTextureStageState(3, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  00773	6a 02		 push	 2
  00775	6a 10		 push	 16			; 00000010H
  00777	6a 03		 push	 3
  00779	8b ce		 mov	 ecx, esi
  0077b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 310  : 	SetTextureStageState(3, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  00780	6a 02		 push	 2
  00782	6a 12		 push	 18			; 00000012H
  00784	6a 03		 push	 3
  00786	8b ce		 mov	 ecx, esi
  00788	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 311  : 
; 312  : 	SetTextureStageState(4, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  0078d	6a 02		 push	 2
  0078f	6a 11		 push	 17			; 00000011H
  00791	6a 04		 push	 4
  00793	8b ce		 mov	 ecx, esi
  00795	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 313  : 	SetTextureStageState(4, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  0079a	6a 02		 push	 2
  0079c	6a 10		 push	 16			; 00000010H
  0079e	6a 04		 push	 4
  007a0	8b ce		 mov	 ecx, esi
  007a2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 314  : 	SetTextureStageState(4, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  007a7	6a 02		 push	 2
  007a9	6a 12		 push	 18			; 00000012H
  007ab	6a 04		 push	 4
  007ad	8b ce		 mov	 ecx, esi
  007af	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 315  : 
; 316  : 	SetTextureStageState(5, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  007b4	6a 02		 push	 2
  007b6	6a 11		 push	 17			; 00000011H
  007b8	6a 05		 push	 5
  007ba	8b ce		 mov	 ecx, esi
  007bc	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 317  : 	SetTextureStageState(5, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  007c1	6a 02		 push	 2
  007c3	6a 10		 push	 16			; 00000010H
  007c5	6a 05		 push	 5
  007c7	8b ce		 mov	 ecx, esi
  007c9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 318  : 	SetTextureStageState(5, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  007ce	6a 02		 push	 2
  007d0	6a 12		 push	 18			; 00000012H
  007d2	6a 05		 push	 5
  007d4	8b ce		 mov	 ecx, esi
  007d6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 319  : 
; 320  : 	SetTextureStageState(6, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  007db	6a 02		 push	 2
  007dd	6a 11		 push	 17			; 00000011H
  007df	6a 06		 push	 6
  007e1	8b ce		 mov	 ecx, esi
  007e3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 321  : 	SetTextureStageState(6, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  007e8	6a 02		 push	 2
  007ea	6a 10		 push	 16			; 00000010H
  007ec	6a 06		 push	 6
  007ee	8b ce		 mov	 ecx, esi
  007f0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 322  : 	SetTextureStageState(6, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  007f5	6a 02		 push	 2
  007f7	6a 12		 push	 18			; 00000012H
  007f9	6a 06		 push	 6
  007fb	8b ce		 mov	 ecx, esi
  007fd	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 323  : 
; 324  : 	SetTextureStageState(7, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  00802	6a 02		 push	 2
  00804	6a 11		 push	 17			; 00000011H
  00806	6a 07		 push	 7
  00808	8b ce		 mov	 ecx, esi
  0080a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 325  : 	SetTextureStageState(7, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  0080f	6a 02		 push	 2
  00811	6a 10		 push	 16			; 00000010H
  00813	6a 07		 push	 7
  00815	8b ce		 mov	 ecx, esi
  00817	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 326  : 	SetTextureStageState(7, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  0081c	6a 02		 push	 2
  0081e	6a 12		 push	 18			; 00000012H
  00820	6a 07		 push	 7
  00822	8b ce		 mov	 ecx, esi
  00824	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 327  : 
; 328  : 	SetTextureStageState(0, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00829	6a 01		 push	 1
  0082b	6a 0d		 push	 13			; 0000000dH
  0082d	6a 00		 push	 0
  0082f	8b ce		 mov	 ecx, esi
  00831	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 329  : 	SetTextureStageState(0, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  00836	6a 01		 push	 1
  00838	6a 0e		 push	 14			; 0000000eH
  0083a	6a 00		 push	 0
  0083c	8b ce		 mov	 ecx, esi
  0083e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 330  : 	SetTextureStageState(1, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00843	6a 01		 push	 1
  00845	6a 0d		 push	 13			; 0000000dH
  00847	6a 01		 push	 1
  00849	8b ce		 mov	 ecx, esi
  0084b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 331  : 	SetTextureStageState(1, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  00850	6a 01		 push	 1
  00852	6a 0e		 push	 14			; 0000000eH
  00854	6a 01		 push	 1
  00856	8b ce		 mov	 ecx, esi
  00858	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 332  : 	SetTextureStageState(2, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  0085d	6a 01		 push	 1
  0085f	6a 0d		 push	 13			; 0000000dH
  00861	6a 02		 push	 2
  00863	8b ce		 mov	 ecx, esi
  00865	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 333  : 	SetTextureStageState(2, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  0086a	6a 01		 push	 1
  0086c	6a 0e		 push	 14			; 0000000eH
  0086e	6a 02		 push	 2
  00870	8b ce		 mov	 ecx, esi
  00872	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 334  : 	SetTextureStageState(3, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00877	6a 01		 push	 1
  00879	6a 0d		 push	 13			; 0000000dH
  0087b	6a 03		 push	 3
  0087d	8b ce		 mov	 ecx, esi
  0087f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 335  : 	SetTextureStageState(3, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  00884	6a 01		 push	 1
  00886	6a 0e		 push	 14			; 0000000eH
  00888	6a 03		 push	 3
  0088a	8b ce		 mov	 ecx, esi
  0088c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 336  : 	SetTextureStageState(4, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00891	6a 01		 push	 1
  00893	6a 0d		 push	 13			; 0000000dH
  00895	6a 04		 push	 4
  00897	8b ce		 mov	 ecx, esi
  00899	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 337  : 	SetTextureStageState(4, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  0089e	6a 01		 push	 1
  008a0	6a 0e		 push	 14			; 0000000eH
  008a2	6a 04		 push	 4
  008a4	8b ce		 mov	 ecx, esi
  008a6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 338  : 	SetTextureStageState(5, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  008ab	6a 01		 push	 1
  008ad	6a 0d		 push	 13			; 0000000dH
  008af	6a 05		 push	 5
  008b1	8b ce		 mov	 ecx, esi
  008b3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 339  : 	SetTextureStageState(5, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  008b8	6a 01		 push	 1
  008ba	6a 0e		 push	 14			; 0000000eH
  008bc	6a 05		 push	 5
  008be	8b ce		 mov	 ecx, esi
  008c0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 340  : 	SetTextureStageState(6, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  008c5	6a 01		 push	 1
  008c7	6a 0d		 push	 13			; 0000000dH
  008c9	6a 06		 push	 6
  008cb	8b ce		 mov	 ecx, esi
  008cd	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 341  : 	SetTextureStageState(6, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  008d2	6a 01		 push	 1
  008d4	6a 0e		 push	 14			; 0000000eH
  008d6	6a 06		 push	 6
  008d8	8b ce		 mov	 ecx, esi
  008da	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 342  : 	SetTextureStageState(7, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  008df	6a 01		 push	 1
  008e1	6a 0d		 push	 13			; 0000000dH
  008e3	6a 07		 push	 7
  008e5	8b ce		 mov	 ecx, esi
  008e7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 343  : 	SetTextureStageState(7, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  008ec	6a 01		 push	 1
  008ee	6a 0e		 push	 14			; 0000000eH
  008f0	6a 07		 push	 7
  008f2	8b ce		 mov	 ecx, esi
  008f4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 344  : 
; 345  : 	SetTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  008f9	6a 00		 push	 0
  008fb	6a 18		 push	 24			; 00000018H
  008fd	6a 00		 push	 0
  008ff	8b ce		 mov	 ecx, esi
  00901	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 346  : 	SetTextureStageState(1, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00906	6a 00		 push	 0
  00908	6a 18		 push	 24			; 00000018H
  0090a	6a 01		 push	 1
  0090c	8b ce		 mov	 ecx, esi
  0090e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 347  : 	SetTextureStageState(2, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00913	6a 00		 push	 0
  00915	6a 18		 push	 24			; 00000018H
  00917	6a 02		 push	 2
  00919	8b ce		 mov	 ecx, esi
  0091b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 348  : 	SetTextureStageState(3, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00920	6a 00		 push	 0
  00922	6a 18		 push	 24			; 00000018H
  00924	6a 03		 push	 3
  00926	8b ce		 mov	 ecx, esi
  00928	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 349  : 	SetTextureStageState(4, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  0092d	6a 00		 push	 0
  0092f	6a 18		 push	 24			; 00000018H
  00931	6a 04		 push	 4
  00933	8b ce		 mov	 ecx, esi
  00935	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 350  : 	SetTextureStageState(5, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  0093a	6a 00		 push	 0
  0093c	6a 18		 push	 24			; 00000018H
  0093e	6a 05		 push	 5
  00940	8b ce		 mov	 ecx, esi
  00942	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 351  : 	SetTextureStageState(6, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00947	6a 00		 push	 0
  00949	6a 18		 push	 24			; 00000018H
  0094b	6a 06		 push	 6
  0094d	8b ce		 mov	 ecx, esi
  0094f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 352  : 	SetTextureStageState(7, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00954	6a 00		 push	 0
  00956	6a 18		 push	 24			; 00000018H
  00958	6a 07		 push	 7
  0095a	8b ce		 mov	 ecx, esi
  0095c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 353  : 
; 354  : 	SetTexture(0, NULL);

  00961	6a 00		 push	 0
  00963	6a 00		 push	 0
  00965	8b ce		 mov	 ecx, esi
  00967	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 355  : 	SetTexture(1, NULL);

  0096c	6a 00		 push	 0
  0096e	6a 01		 push	 1
  00970	8b ce		 mov	 ecx, esi
  00972	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 356  : 	SetTexture(2, NULL);

  00977	6a 00		 push	 0
  00979	6a 02		 push	 2
  0097b	8b ce		 mov	 ecx, esi
  0097d	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 357  : 	SetTexture(3, NULL);

  00982	6a 00		 push	 0
  00984	6a 03		 push	 3
  00986	8b ce		 mov	 ecx, esi
  00988	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 358  : 	SetTexture(4, NULL);

  0098d	6a 00		 push	 0
  0098f	6a 04		 push	 4
  00991	8b ce		 mov	 ecx, esi
  00993	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 359  : 	SetTexture(5, NULL);

  00998	6a 00		 push	 0
  0099a	6a 05		 push	 5
  0099c	8b ce		 mov	 ecx, esi
  0099e	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 360  : 	SetTexture(6, NULL);

  009a3	6a 00		 push	 0
  009a5	6a 06		 push	 6
  009a7	8b ce		 mov	 ecx, esi
  009a9	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 361  : 	SetTexture(7, NULL);

  009ae	6a 00		 push	 0
  009b0	6a 07		 push	 7
  009b2	8b ce		 mov	 ecx, esi
  009b4	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 362  : 
; 363  : 	SetPixelShader(0);

  009b9	6a 00		 push	 0
  009bb	8b ce		 mov	 ecx, esi
  009bd	e8 00 00 00 00	 call	 ?SetPixelShader@CStateManager@@QAEXK@Z ; CStateManager::SetPixelShader

; 364  : 	SetVertexShader(D3DFVF_XYZ);

  009c2	6a 02		 push	 2
  009c4	8b ce		 mov	 ecx, esi
  009c6	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 365  : 
; 366  : 	D3DXVECTOR4 av4Null[STATEMANAGER_MAX_VCONSTANTS];
; 367  : 	memset(av4Null, 0, sizeof(av4Null));

  009cb	68 00 06 00 00	 push	 1536			; 00000600H
  009d0	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  009d6	6a 00		 push	 0
  009d8	50		 push	 eax
  009d9	e8 00 00 00 00	 call	 _memset
  009de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 368  : 	SetVertexShaderConstant(0, av4Null, STATEMANAGER_MAX_VCONSTANTS);

  009e1	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  009e7	8b ce		 mov	 ecx, esi
  009e9	6a 60		 push	 96			; 00000060H
  009eb	50		 push	 eax
  009ec	6a 00		 push	 0
  009ee	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 369  : 	SetPixelShaderConstant(0, av4Null, STATEMANAGER_MAX_PCONSTANTS);

  009f3	6a 08		 push	 8
  009f5	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  009fb	8b ce		 mov	 ecx, esi
  009fd	50		 push	 eax
  009fe	6a 00		 push	 0
  00a00	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant

; 370  : 
; 371  : 	m_bForce = false;
; 372  : 
; 373  : #ifdef _DEBUG
; 374  : 	int i, j;
; 375  : 	for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; i++)
; 376  : 		m_bRenderStateSavingFlag[i] = FALSE;
; 377  : 
; 378  : 	for (j = 0; j < STATEMANAGER_MAX_TRANSFORMSTATES; j++)
; 379  : 		m_bTransformSavingFlag[j] = FALSE;
; 380  : 
; 381  : 	for (j = 0; j < STATEMANAGER_MAX_STAGES; ++j)
; 382  : 		for (i = 0; i < STATEMANAGER_MAX_TEXTURESTATES; ++i)
; 383  : 			m_bTextureStageStateSavingFlag[j][i] = FALSE;
; 384  : #endif _DEBUG
; 385  : }

  00a05	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a08	c6 86 6c 33 01
	00 00		 mov	 BYTE PTR [esi+78700], 0
  00a0f	33 cd		 xor	 ecx, ebp
  00a11	5e		 pop	 esi
  00a12	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a17	8b e5		 mov	 esp, ebp
  00a19	5d		 pop	 ebp
  00a1a	c3		 ret	 0
?SetDefaultState@CStateManager@@QAEXXZ ENDP		; CStateManager::SetDefaultState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ??1CStateManager@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CStateManager@@UAE@XZ PROC				; CStateManager::~CStateManager, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CStateManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CStateManager@@6B@

; 67   : 	if (m_lpD3DDev)

  0002f	8b 8e 78 33 01
	00		 mov	 ecx, DWORD PTR [esi+78712]
  00035	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0003c	85 c9		 test	 ecx, ecx
  0003e	74 10		 je	 SHORT $LN1@CStateMana

; 68   : 	{
; 69   : 		m_lpD3DDev->Release();

  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	51		 push	 ecx
  00043	ff 50 08	 call	 DWORD PTR [eax+8]

; 70   : 		m_lpD3DDev = NULL;

  00046	c7 86 78 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78712], 0
$LN1@CStateMana:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  00050	8b 86 60 33 01
	00		 mov	 eax, DWORD PTR [esi+78688]
  00056	85 c0		 test	 eax, eax
  00058	74 27		 je	 SHORT $LN21@CStateMana
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00060	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00063	c7 86 60 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78688], 0

; 1630 : 			this->_Mylast = pointer();

  0006d	c7 86 64 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78692], 0

; 1631 : 			this->_Myend = pointer();

  00077	c7 86 68 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78696], 0
$LN21@CStateMana:
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h

; 19   : 	{ 

  00081	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00087	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp

; 72   : }

  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CStateManager@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCStateManager@@@@UAE@XZ ; CSingleton<CStateManager>::~CSingleton<CStateManager>
__unwindfunclet$??1CStateManager@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 60 33 01
	00		 add	 ecx, 78688		; 00013360H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
__ehhandler$??1CStateManager@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CStateManager@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CStateManager@@UAE@XZ ENDP				; CStateManager::~CStateManager
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp
;	COMDAT ??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpDevice$ = 8						; size = 4
??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z PROC	; CStateManager::CStateManager, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00029	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, esi ; CSingleton<CStateManager>::ms_singleton
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp

; 58   : {

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h

; 162  : 		CStateManagerState()

  00036	8d 86 f0 65 00
	00		 lea	 eax, DWORD PTR [esi+26096]
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp

; 58   : {

  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CStateManager@@6B@
  00042	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00047	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL28@CStateMana:
  00050	49		 dec	 ecx
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h

; 71   : 		{

  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00057	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0005e	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00061	79 ed		 jns	 SHORT $LL28@CStateMana

; 72   : 		}
; 73   : 
; 74   : 		bool operator == (const CStreamData& rhs) const
; 75   : 		{
; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));
; 77   : 		}
; 78   : 
; 79   : 		LPDIRECT3DVERTEXBUFFER8	m_lpStreamData;
; 80   : 		UINT					m_Stride;
; 81   : };
; 82   : 
; 83   : class CIndexData
; 84   : {
; 85   : 	public:
; 86   : 		CIndexData(LPDIRECT3DINDEXBUFFER8 pIndexData = NULL, UINT BaseVertexIndex = 0)
; 87   : 			: m_lpIndexData(pIndexData),
; 88   : 		m_BaseVertexIndex(BaseVertexIndex)
; 89   : 		{

  00063	c7 86 70 66 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+26224], 0

; 162  : 		CStateManagerState()

  0006d	8d 86 64 cc 00
	00		 lea	 eax, DWORD PTR [esi+52324]

; 72   : 		}
; 73   : 
; 74   : 		bool operator == (const CStreamData& rhs) const
; 75   : 		{
; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));
; 77   : 		}
; 78   : 
; 79   : 		LPDIRECT3DVERTEXBUFFER8	m_lpStreamData;
; 80   : 		UINT					m_Stride;
; 81   : };
; 82   : 
; 83   : class CIndexData
; 84   : {
; 85   : 	public:
; 86   : 		CIndexData(LPDIRECT3DINDEXBUFFER8 pIndexData = NULL, UINT BaseVertexIndex = 0)
; 87   : 			: m_lpIndexData(pIndexData),
; 88   : 		m_BaseVertexIndex(BaseVertexIndex)
; 89   : 		{

  00073	c7 86 74 66 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+26228], 0
  0007d	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
$LL58@CStateMana:
  00082	49		 dec	 ecx

; 71   : 		{

  00083	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00089	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00090	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00093	79 ed		 jns	 SHORT $LL58@CStateMana

; 72   : 		}
; 73   : 
; 74   : 		bool operator == (const CStreamData& rhs) const
; 75   : 		{
; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));
; 77   : 		}
; 78   : 
; 79   : 		LPDIRECT3DVERTEXBUFFER8	m_lpStreamData;
; 80   : 		UINT					m_Stride;
; 81   : };
; 82   : 
; 83   : class CIndexData
; 84   : {
; 85   : 	public:
; 86   : 		CIndexData(LPDIRECT3DINDEXBUFFER8 pIndexData = NULL, UINT BaseVertexIndex = 0)
; 87   : 			: m_lpIndexData(pIndexData),
; 88   : 		m_BaseVertexIndex(BaseVertexIndex)
; 89   : 		{

  00095	c7 86 e4 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+52452], 0

; 162  : 		CStateManagerState()

  0009f	8d 86 d8 32 01
	00		 lea	 eax, DWORD PTR [esi+78552]

; 72   : 		}
; 73   : 
; 74   : 		bool operator == (const CStreamData& rhs) const
; 75   : 		{
; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));
; 77   : 		}
; 78   : 
; 79   : 		LPDIRECT3DVERTEXBUFFER8	m_lpStreamData;
; 80   : 		UINT					m_Stride;
; 81   : };
; 82   : 
; 83   : class CIndexData
; 84   : {
; 85   : 	public:
; 86   : 		CIndexData(LPDIRECT3DINDEXBUFFER8 pIndexData = NULL, UINT BaseVertexIndex = 0)
; 87   : 			: m_lpIndexData(pIndexData),
; 88   : 		m_BaseVertexIndex(BaseVertexIndex)
; 89   : 		{

  000a5	c7 86 e8 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+52456], 0
  000af	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  000b4	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL88@CStateMana:
  000c0	49		 dec	 ecx

; 71   : 		{

  000c1	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000c7	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  000ce	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  000d1	79 ed		 jns	 SHORT $LL88@CStateMana

; 72   : 		}
; 73   : 
; 74   : 		bool operator == (const CStreamData& rhs) const
; 75   : 		{
; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));
; 77   : 		}
; 78   : 
; 79   : 		LPDIRECT3DVERTEXBUFFER8	m_lpStreamData;
; 80   : 		UINT					m_Stride;
; 81   : };
; 82   : 
; 83   : class CIndexData
; 84   : {
; 85   : 	public:
; 86   : 		CIndexData(LPDIRECT3DINDEXBUFFER8 pIndexData = NULL, UINT BaseVertexIndex = 0)
; 87   : 			: m_lpIndexData(pIndexData),
; 88   : 		m_BaseVertexIndex(BaseVertexIndex)
; 89   : 		{

  000d3	c7 86 58 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78680], 0
  000dd	c7 86 5c 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78684], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 482  : 		_Myfirst = pointer();

  000e7	c7 86 60 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78688], 0

; 483  : 		_Mylast = pointer();

  000f1	c7 86 64 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78692], 0

; 484  : 		_Myend = pointer();

  000fb	c7 86 68 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78696], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.cpp

; 62   : 	SetDevice(lpDevice);

  00105	ff 75 08	 push	 DWORD PTR _lpDevice$[ebp]
  00108	8b ce		 mov	 ecx, esi
  0010a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0010e	c7 86 78 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78712], 0
  00118	c6 86 6d 33 01
	00 00		 mov	 BYTE PTR [esi+78701], 0
  0011f	c7 86 70 33 01
	00 02 00 00 00	 mov	 DWORD PTR [esi+78704], 2
  00129	c7 86 74 33 01
	00 02 00 00 00	 mov	 DWORD PTR [esi+78708], 2
  00133	e8 00 00 00 00	 call	 ?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z ; CStateManager::SetDevice

; 63   : }

  00138	8b c6		 mov	 eax, esi
  0013a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00144	59		 pop	 ecx
  00145	5e		 pop	 esi
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCStateManager@@@@UAE@XZ ; CSingleton<CStateManager>::~CSingleton<CStateManager>
__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 60 33 01
	00		 add	 ecx, 78688		; 00013360H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
__ehhandler$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z ENDP	; CStateManager::CStateManager
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
;	COMDAT ??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z PROC	; CSingleton<CStateManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 19   : 	{ 

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton
  0001a	74 09		 je	 SHORT $LN6@scalar
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z ENDP	; CSingleton<CStateManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
;	COMDAT ??1?$CSingleton@VCStateManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCStateManager@@@@UAE@XZ PROC		; CSingleton<CStateManager>::~CSingleton<CStateManager>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCStateManager@@@@UAE@XZ ENDP		; CSingleton<CStateManager>::~CSingleton<CStateManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
;	COMDAT ??0?$CSingleton@VCStateManager@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CSingleton@VCStateManager@@@@QAE@XZ PROC		; CSingleton<CStateManager>::CSingleton<CStateManager>, COMDAT
; _this$ = ecx

; 11   : 	CSingleton()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 12   : 	{ 
; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 
; 15   : 		ms_singleton = (T*) ((int) this + offset);
; 16   : 	} 

  00006	8b c1		 mov	 eax, ecx
  00008	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, ecx ; CSingleton<CStateManager>::ms_singleton
  0000e	c3		 ret	 0
??0?$CSingleton@VCStateManager@@@@QAE@XZ ENDP		; CSingleton<CStateManager>::CSingleton<CStateManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
;	COMDAT ?ResetState@CStateManagerState@@QAEXXZ
_TEXT	SEGMENT
?ResetState@CStateManagerState@@QAEXXZ PROC		; CStateManagerState::ResetState, COMDAT
; _this$ = ecx

; 167  : 		{

  00000	8b d1		 mov	 edx, ecx

; 168  : 			DWORD i, y;
; 169  : 
; 170  : 			for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; i++)
; 171  : 				m_RenderStates[i] = 0x7FFFFFFF;

  00002	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0000e	8b fa		 mov	 edi, edx
  00010	f3 ab		 rep stosd

; 172  : 
; 173  : 			for (i = 0; i < STATEMANAGER_MAX_STAGES; i++)

  00012	8d ba 00 04 00
	00		 lea	 edi, DWORD PTR [edx+1024]

; 174  : 				for (y = 0; y < STATEMANAGER_MAX_TEXTURESTATES; y++)
; 175  : 					m_TextureStates[i][y] = 0x7FFFFFFF;

  00018	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0001d	f3 ab		 rep stosd

; 71   : 		{

  0001f	33 f6		 xor	 esi, esi

; 176  : 
; 177  : 			for (i = 0; i < STATEMANAGER_MAX_STREAMS; i++)

  00021	8d 82 ec 65 00
	00		 lea	 eax, DWORD PTR [edx+26092]

; 71   : 		{

  00027	33 ff		 xor	 edi, edi

; 176  : 
; 177  : 			for (i = 0; i < STATEMANAGER_MAX_STREAMS; i++)

  00029	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0002e	8b ff		 npad	 2
$LL15@ResetState:

; 178  : 				m_StreamData[i] = CStreamData();

  00030	89 30		 mov	 DWORD PTR [eax], esi
  00032	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00035	89 78 fc	 mov	 DWORD PTR [eax-4], edi
  00038	49		 dec	 ecx
  00039	75 f5		 jne	 SHORT $LL15@ResetState

; 179  : 
; 180  : 			m_IndexData = CIndexData();

  0003b	89 b2 6c 66 00
	00		 mov	 DWORD PTR [edx+26220], esi

; 72   : 		}
; 73   : 
; 74   : 		bool operator == (const CStreamData& rhs) const
; 75   : 		{
; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));
; 77   : 		}
; 78   : 
; 79   : 		LPDIRECT3DVERTEXBUFFER8	m_lpStreamData;
; 80   : 		UINT					m_Stride;
; 81   : };
; 82   : 
; 83   : class CIndexData
; 84   : {
; 85   : 	public:
; 86   : 		CIndexData(LPDIRECT3DINDEXBUFFER8 pIndexData = NULL, UINT BaseVertexIndex = 0)
; 87   : 			: m_lpIndexData(pIndexData),
; 88   : 		m_BaseVertexIndex(BaseVertexIndex)
; 89   : 		{

  00041	8d 82 dc 1a 00
	00		 lea	 eax, DWORD PTR [edx+6876]

; 179  : 
; 180  : 			m_IndexData = CIndexData();

  00047	89 b2 70 66 00
	00		 mov	 DWORD PTR [edx+26224], esi

; 72   : 		}
; 73   : 
; 74   : 		bool operator == (const CStreamData& rhs) const
; 75   : 		{
; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));
; 77   : 		}
; 78   : 
; 79   : 		LPDIRECT3DVERTEXBUFFER8	m_lpStreamData;
; 80   : 		UINT					m_Stride;
; 81   : };
; 82   : 
; 83   : class CIndexData
; 84   : {
; 85   : 	public:
; 86   : 		CIndexData(LPDIRECT3DINDEXBUFFER8 pIndexData = NULL, UINT BaseVertexIndex = 0)
; 87   : 			: m_lpIndexData(pIndexData),
; 88   : 		m_BaseVertexIndex(BaseVertexIndex)
; 89   : 		{

  0004d	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00052	5f		 pop	 edi

; 181  : 
; 182  : 			for (i = 0; i < STATEMANAGER_MAX_STAGES; i++)
; 183  : 				m_Textures[i] = NULL;

  00053	89 b2 80 1a 00
	00		 mov	 DWORD PTR [edx+6784], esi
  00059	89 b2 84 1a 00
	00		 mov	 DWORD PTR [edx+6788], esi
  0005f	89 b2 88 1a 00
	00		 mov	 DWORD PTR [edx+6792], esi
  00065	89 b2 8c 1a 00
	00		 mov	 DWORD PTR [edx+6796], esi
  0006b	89 b2 90 1a 00
	00		 mov	 DWORD PTR [edx+6800], esi
  00071	89 b2 94 1a 00
	00		 mov	 DWORD PTR [edx+6804], esi
  00077	89 b2 98 1a 00
	00		 mov	 DWORD PTR [edx+6808], esi
  0007d	89 b2 9c 1a 00
	00		 mov	 DWORD PTR [edx+6812], esi
  00083	5e		 pop	 esi
$LL9@ResetState:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00084	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h

; 187  : 			for (i = 0; i < STATEMANAGER_MAX_TRANSFORMSTATES; i++)

  0008b	8d 40 40	 lea	 eax, DWORD PTR [eax+64]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  0008e	c7 40 c0 00 00
	00 00		 mov	 DWORD PTR [eax-64], 0
  00095	c7 40 bc 00 00
	00 00		 mov	 DWORD PTR [eax-68], 0
  0009c	c7 40 b8 00 00
	00 00		 mov	 DWORD PTR [eax-72], 0
  000a3	c7 40 b0 00 00
	00 00		 mov	 DWORD PTR [eax-80], 0
  000aa	c7 40 ac 00 00
	00 00		 mov	 DWORD PTR [eax-84], 0
  000b1	c7 40 a8 00 00
	00 00		 mov	 DWORD PTR [eax-88], 0
  000b8	c7 40 a4 00 00
	00 00		 mov	 DWORD PTR [eax-92], 0
  000bf	c7 40 9c 00 00
	00 00		 mov	 DWORD PTR [eax-100], 0
  000c6	c7 40 98 00 00
	00 00		 mov	 DWORD PTR [eax-104], 0
  000cd	c7 40 94 00 00
	00 00		 mov	 DWORD PTR [eax-108], 0
  000d4	c7 40 90 00 00
	00 00		 mov	 DWORD PTR [eax-112], 0

; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000db	c7 40 c8 00 00
	80 3f		 mov	 DWORD PTR [eax-56], 1065353216 ; 3f800000H
  000e2	c7 40 b4 00 00
	80 3f		 mov	 DWORD PTR [eax-76], 1065353216 ; 3f800000H
  000e9	c7 40 a0 00 00
	80 3f		 mov	 DWORD PTR [eax-96], 1065353216 ; 3f800000H
  000f0	c7 40 8c 00 00
	80 3f		 mov	 DWORD PTR [eax-116], 1065353216 ; 3f800000H
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h

; 187  : 			for (i = 0; i < STATEMANAGER_MAX_TRANSFORMSTATES; i++)

  000f7	49		 dec	 ecx
  000f8	75 8a		 jne	 SHORT $LL9@ResetState

; 188  : 				D3DXMatrixIdentity(&m_Matrices[i]);
; 189  : 
; 190  : 			for (i = 0; i < STATEMANAGER_MAX_VCONSTANTS; i++)

  000fa	0f 57 c0	 xorps	 xmm0, xmm0
  000fd	8d 82 00 14 00
	00		 lea	 eax, DWORD PTR [edx+5120]
  00103	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00108	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL6@ResetState:
  00110	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 191  : 				m_VertexShaderConstants[i] = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f);

  00113	f3 0f 7f 40 f0	 movdqu	 XMMWORD PTR [eax-16], xmm0
  00118	49		 dec	 ecx
  00119	75 f5		 jne	 SHORT $LL6@ResetState

; 192  : 
; 193  : 			for (i = 0; i < STATEMANAGER_MAX_PCONSTANTS; i++)
; 194  : 				m_PixelShaderConstants[i] = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f);
; 195  : 
; 196  : 			m_dwPixelShader = 0;
; 197  : 			m_dwVertexShader = D3DFVF_XYZ;
; 198  : 
; 199  : 			ZeroMemory(&m_Matrices, sizeof(D3DXMATRIX) * STATEMANAGER_MAX_TRANSFORMSTATES);

  0011b	0f 57 c0	 xorps	 xmm0, xmm0
  0011e	8d 82 a8 1a 00
	00		 lea	 eax, DWORD PTR [edx+6824]
  00124	68 00 4b 00 00	 push	 19200			; 00004b00H
  00129	51		 push	 ecx
  0012a	f3 0f 7f 82 00
	1a 00 00	 movdqu	 XMMWORD PTR [edx+6656], xmm0
  00132	50		 push	 eax
  00133	f3 0f 7f 82 10
	1a 00 00	 movdqu	 XMMWORD PTR [edx+6672], xmm0
  0013b	f3 0f 7f 82 20
	1a 00 00	 movdqu	 XMMWORD PTR [edx+6688], xmm0
  00143	f3 0f 7f 82 30
	1a 00 00	 movdqu	 XMMWORD PTR [edx+6704], xmm0
  0014b	f3 0f 7f 82 40
	1a 00 00	 movdqu	 XMMWORD PTR [edx+6720], xmm0
  00153	f3 0f 7f 82 50
	1a 00 00	 movdqu	 XMMWORD PTR [edx+6736], xmm0
  0015b	f3 0f 7f 82 60
	1a 00 00	 movdqu	 XMMWORD PTR [edx+6752], xmm0
  00163	f3 0f 7f 82 70
	1a 00 00	 movdqu	 XMMWORD PTR [edx+6768], xmm0
  0016b	89 8a a0 1a 00
	00		 mov	 DWORD PTR [edx+6816], ecx
  00171	c7 82 a4 1a 00
	00 02 00 00 00	 mov	 DWORD PTR [edx+6820], 2
  0017b	e8 00 00 00 00	 call	 _memset
  00180	83 c4 0c	 add	 esp, 12			; 0000000cH

; 200  : 		}

  00183	c3		 ret	 0
?ResetState@CStateManagerState@@QAEXXZ ENDP		; CStateManagerState::ResetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
;	COMDAT ??0CStateManagerState@@QAE@XZ
_TEXT	SEGMENT
??0CStateManagerState@@QAE@XZ PROC			; CStateManagerState::CStateManagerState, COMDAT
; _this$ = ecx

; 162  : 		CStateManagerState()

  00000	8d 81 ec 65 00
	00		 lea	 eax, DWORD PTR [ecx+26092]
  00006	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH
  0000b	eb 03 8d 49 00	 npad	 5
$LL22@CStateMana:
  00010	4a		 dec	 edx

; 71   : 		{

  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0001e	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00021	79 ed		 jns	 SHORT $LL22@CStateMana

; 72   : 		}
; 73   : 
; 74   : 		bool operator == (const CStreamData& rhs) const
; 75   : 		{
; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));
; 77   : 		}
; 78   : 
; 79   : 		LPDIRECT3DVERTEXBUFFER8	m_lpStreamData;
; 80   : 		UINT					m_Stride;
; 81   : };
; 82   : 
; 83   : class CIndexData
; 84   : {
; 85   : 	public:
; 86   : 		CIndexData(LPDIRECT3DINDEXBUFFER8 pIndexData = NULL, UINT BaseVertexIndex = 0)
; 87   : 			: m_lpIndexData(pIndexData),
; 88   : 		m_BaseVertexIndex(BaseVertexIndex)
; 89   : 		{

  00023	c7 81 6c 66 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+26220], 0

; 163  : 		{
; 164  : 		}

  0002d	8b c1		 mov	 eax, ecx

; 72   : 		}
; 73   : 
; 74   : 		bool operator == (const CStreamData& rhs) const
; 75   : 		{
; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));
; 77   : 		}
; 78   : 
; 79   : 		LPDIRECT3DVERTEXBUFFER8	m_lpStreamData;
; 80   : 		UINT					m_Stride;
; 81   : };
; 82   : 
; 83   : class CIndexData
; 84   : {
; 85   : 	public:
; 86   : 		CIndexData(LPDIRECT3DINDEXBUFFER8 pIndexData = NULL, UINT BaseVertexIndex = 0)
; 87   : 			: m_lpIndexData(pIndexData),
; 88   : 		m_BaseVertexIndex(BaseVertexIndex)
; 89   : 		{

  0002f	c7 81 70 66 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+26224], 0

; 163  : 		{
; 164  : 		}

  00039	c3		 ret	 0
??0CStateManagerState@@QAE@XZ ENDP			; CStateManagerState::CStateManagerState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
;	COMDAT ??8CIndexData@@QBE_NABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??8CIndexData@@QBE_NABV0@@Z PROC			; CIndexData::operator==, COMDAT
; _this$ = ecx

; 93   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 94   : 			return ((m_lpIndexData == rhs.m_lpIndexData) && (m_BaseVertexIndex == rhs.m_BaseVertexIndex));

  00003	8b 55 08	 mov	 edx, DWORD PTR _rhs$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	75 0e		 jne	 SHORT $LN3@operator
  0000c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000f	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00012	75 06		 jne	 SHORT $LN3@operator
  00014	b0 01		 mov	 al, 1

; 95   : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN3@operator:

; 94   : 			return ((m_lpIndexData == rhs.m_lpIndexData) && (m_BaseVertexIndex == rhs.m_BaseVertexIndex));

  0001a	32 c0		 xor	 al, al

; 95   : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??8CIndexData@@QBE_NABV0@@Z ENDP			; CIndexData::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
;	COMDAT ??0CIndexData@@QAE@PAUIDirect3DIndexBuffer8@@I@Z
_TEXT	SEGMENT
_pIndexData$ = 8					; size = 4
_BaseVertexIndex$ = 12					; size = 4
??0CIndexData@@QAE@PAUIDirect3DIndexBuffer8@@I@Z PROC	; CIndexData::CIndexData, COMDAT
; _this$ = ecx

; 89   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _pIndexData$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR _BaseVertexIndex$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 90   : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CIndexData@@QAE@PAUIDirect3DIndexBuffer8@@I@Z ENDP	; CIndexData::CIndexData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
;	COMDAT ??_FCStreamData@@QAEXXZ
_TEXT	SEGMENT
??_FCStreamData@@QAEXXZ PROC				; CStreamData::`default constructor closure', COMDAT
; _this$ = ecx

; 71   : 		{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000d	c3		 ret	 0
??_FCStreamData@@QAEXXZ ENDP				; CStreamData::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
;	COMDAT ??8CStreamData@@QBE_NABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??8CStreamData@@QBE_NABV0@@Z PROC			; CStreamData::operator==, COMDAT
; _this$ = ecx

; 75   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));

  00003	8b 55 08	 mov	 edx, DWORD PTR _rhs$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	75 0e		 jne	 SHORT $LN3@operator
  0000c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000f	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00012	75 06		 jne	 SHORT $LN3@operator
  00014	b0 01		 mov	 al, 1

; 77   : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN3@operator:

; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));

  0001a	32 c0		 xor	 al, al

; 77   : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??8CStreamData@@QBE_NABV0@@Z ENDP			; CStreamData::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\statemanager.h
;	COMDAT ??0CStreamData@@QAE@PAUIDirect3DVertexBuffer8@@I@Z
_TEXT	SEGMENT
_pStreamData$ = 8					; size = 4
_Stride$ = 12						; size = 4
??0CStreamData@@QAE@PAUIDirect3DVertexBuffer8@@I@Z PROC	; CStreamData::CStreamData, COMDAT
; _this$ = ecx

; 71   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _pStreamData$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR _Stride$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 72   : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CStreamData@@QAE@PAUIDirect3DVertexBuffer8@@I@Z ENDP	; CStreamData::CStreamData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1510 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1511 : #ifdef D3DX_DEBUG
; 1512 :     if(!pOut)
; 1513 :         return NULL;
; 1514 : #endif
; 1515 : 
; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00006	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0
  0000d	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0
  00014	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
  0001b	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  00022	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
  00029	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  00030	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00037	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  0003e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00045	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0004c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00053	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0005a	c7 40 3c 00 00
	80 3f		 mov	 DWORD PTR [eax+60], 1065353216 ; 3f800000H
  00061	c7 40 28 00 00
	80 3f		 mov	 DWORD PTR [eax+40], 1065353216 ; 3f800000H
  00068	c7 40 14 00 00
	80 3f		 mov	 DWORD PTR [eax+20], 1065353216 ; 3f800000H
  0006f	c7 00 00 00 80
	3f		 mov	 DWORD PTR [eax], 1065353216 ; 3f800000H

; 1522 :     return pOut;
; 1523 : }

  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXMATRIX@@QAE@ABU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_mat$ = 8						; size = 4
??0D3DXMATRIX@@QAE@ABU_D3DMATRIX@@@Z PROC		; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 462  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 463  :     memcpy(&_11, &mat, sizeof(D3DXMATRIX));

  00003	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  00006	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  0000a	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  0000e	f3 0f 6f 40 10	 movdqu	 xmm0, XMMWORD PTR [eax+16]
  00013	f3 0f 7f 41 10	 movdqu	 XMMWORD PTR [ecx+16], xmm0
  00018	f3 0f 6f 40 20	 movdqu	 xmm0, XMMWORD PTR [eax+32]
  0001d	f3 0f 7f 41 20	 movdqu	 XMMWORD PTR [ecx+32], xmm0
  00022	f3 0f 6f 40 30	 movdqu	 xmm0, XMMWORD PTR [eax+48]

; 464  : }

  00027	8b c1		 mov	 eax, ecx
  00029	f3 0f 7f 41 30	 movdqu	 XMMWORD PTR [ecx+48], xmm0
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0D3DXMATRIX@@QAE@ABU_D3DMATRIX@@@Z ENDP		; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fw$ = 20						; size = 4
??0D3DXVECTOR4@@QAE@MMMM@Z PROC				; D3DXVECTOR4::D3DXVECTOR4, COMDAT
; _this$ = ecx

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 322  :     y = fy;
; 323  :     z = fz;
; 324  :     w = fw;
; 325  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fw$[ebp]
  00027	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
??0D3DXVECTOR4@@QAE@MMMM@Z ENDP				; D3DXVECTOR4::D3DXVECTOR4
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR4@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR4@@QAE@XZ PROC				; D3DXVECTOR4::D3DXVECTOR4, COMDAT
; _this$ = ecx

; 133  :     D3DXVECTOR4() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR4@@QAE@XZ ENDP				; D3DXVECTOR4::D3DXVECTOR4
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	4e		 dec	 esi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b cf		 mov	 ecx, edi
  00014	ff d3		 call	 ebx
  00016	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  00019	4e		 dec	 esi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5f		 pop	 edi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
