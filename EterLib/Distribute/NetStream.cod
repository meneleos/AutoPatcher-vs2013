; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\GamePackages\Client\Tools\Patcher2017\EterLib\NetStream.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_nullNameValuePairs DD FLAT:_s_nullNameValuePairs
	ORG $+4
_s_bSequenceTable DB 0afH
	DB	0caH
	DB	08aH
	DB	0cfH
	DB	048H
	DB	0a7H
	DB	054H
	DB	0c7H
	DB	0d7H
	DB	0dfH
	DB	01H
	DB	025H
	DB	072H
	DB	0f7H
	DB	06fH
	DB	084H
	DB	0bcH
	DB	037H
	DB	046H
	DB	0e3H
	DB	024H
	DB	0daH
	DB	0a1H
	DB	0c8H
	DB	0eeH
	DB	036H
	DB	07cH
	DB	033H
	DB	02fH
	DB	098H
	DB	076H
	DB	05eH
	DB	0e2H
	DB	01H
	DB	02eH
	DB	0abH
	DB	029H
	DB	03H
	DB	0f2H
	DB	01H
	DB	0e2H
	DB	0f3H
	DB	0a5H
	DB	056H
	DB	06bH
	DB	015H
	DB	05aH
	DB	0a7H
	DB	0ccH
	DB	021H
	DB	08bH
	DB	070H
	DB	0fbH
	DB	0acH
	DB	03aH
	DB	06bH
	DB	0e3H
	DB	036H
	DB	09eH
	DB	092H
	DB	04eH
	DB	016H
	DB	0f1H
	DB	031H
	DB	096H
	DB	09fH
	DB	05cH
	DB	03fH
	DB	0a2H
	DB	050H
	DB	0bfH
	DB	06H
	DB	0c3H
	DB	066H
	DB	0dbH
	DB	030H
	DB	0faH
	DB	0b5H
	DB	0d7H
	DB	047H
	DB	0d6H
	DB	0e3H
	DB	0b8H
	DB	053H
	DB	090H
	DB	072H
	DB	0beH
	DB	0f3H
	DB	0a8H
	DB	0dcH
	DB	07H
	DB	076H
	DB	072H
	DB	078H
	DB	0a7H
	DB	0aH
	DB	018H
	DB	084H
	DB	0c8H
	DB	03bH
	DB	0d4H
	DB	089H
	DB	041H
	DB	018H
	DB	0efH
	DB	09cH
	DB	048H
	DB	06aH
	DB	052H
	DB	0a0H
	DB	0b2H
	DB	0a9H
	DB	04H
	DB	0eaH
	DB	07cH
	DB	094H
	DB	0dcH
	DB	03bH
	DB	09H
	DB	085H
	DB	097H
	DB	010H
	DB	07bH
	DB	0bH
	DB	088H
	DB	023H
	DB	094H
	DB	020H
	DB	027H
	DB	05dH
	DB	0daH
	DB	0fbH
	DB	0e6H
	DB	01cH
	DB	015H
	DB	056H
	DB	038H
	DB	0dcH
	DB	0c1H
	DB	0bH
	DB	0fcH
	DB	0f3H
	DB	0b4H
	DB	01H
	DB	0deH
	DB	031H
	DB	016H
	DB	0bbH
	DB	0ebH
	DB	09eH
	DB	0c0H
	DB	083H
	DB	02eH
	DB	03cH
	DB	0eH
	DB	036H
	DB	0deH
	DB	0a2H
	DB	056H
	DB	086H
	DB	080H
	DB	032H
	DB	082H
	DB	0e6H
	DB	0cdH
	DB	017H
	DB	03eH
	DB	086H
	DB	074H
	DB	07fH
	DB	091H
	DB	0f0H
	DB	073H
	DB	046H
	DB	0f2H
	DB	0d1H
	DB	0f6H
	DB	088H
	DB	0dH
	DB	062H
	DB	027H
	DB	04dH
	DB	065H
	DB	055H
	DB	09H
	DB	074H
	DB	0bH
	DB	067H
	DB	096H
	DB	061H
	DB	0edH
	DB	017H
	DB	013H
	DB	0f0H
	DB	0feH
	DB	0e1H
	DB	087H
	DB	0bcH
	DB	0e7H
	DB	0fbH
	DB	03cH
	DB	079H
	DB	06dH
	DB	0afH
	DB	03fH
	DB	060H
	DB	01H
	DB	036H
	DB	068H
	DB	0eH
	DB	018H
	DB	0fH
	DB	05bH
	DB	07dH
	DB	0e3H
	DB	064H
	DB	071H
	DB	0eeH
	DB	0cbH
	DB	09H
	DB	0cfH
	DB	03aH
	DB	09fH
	DB	0e3H
	DB	02bH
	DB	01eH
	DB	045H
	DB	0b2H
	DB	0daH
	DB	02dH
	DB	02fH
	DB	096H
	DB	0a6H
	DB	09cH
	DB	046H
	DB	0e5H
	DB	07cH
	DB	0c6H
	DB	09bH
	DB	0e4H
	DB	0d4H
	DB	0b3H
	DB	073H
	DB	0afH
	DB	0b0H
	DB	057H
	DB	093H
	DB	023H
	DB	046H
	DB	0dfH
	DB	0abH
	DB	016H
	DB	01aH
	DB	04bH
	DB	079H
	DB	045H
	DB	06aH
	DB	0beH
	DB	0f7H
	DB	0c4H
	DB	0ebH
	DB	0a6H
	DB	05cH
	DB	012H
	DB	043H
	DB	022H
	DB	077H
	DB	0bfH
	DB	0e9H
	DB	092H
	DB	024H
	DB	03eH
	DB	046H
	DB	097H
	DB	0eeH
	DB	077H
	DB	0eeH
	DB	082H
	DB	09aH
	DB	0b4H
	DB	062H
	DB	0c5H
	DB	04bH
	DB	0fbH
	DB	011H
	DB	0c4H
	DB	041H
	DB	0faH
	DB	084H
	DB	0b9H
	DB	040H
	DB	0efH
	DB	060H
	DB	09cH
	DB	082H
	DB	0a4H
	DB	03eH
	DB	0f9H
	DB	064H
	DB	0a7H
	DB	08dH
	DB	089H
	DB	0e6H
	DB	053H
	DB	0a0H
	DB	055H
	DB	04aH
	DB	090H
	DB	057H
	DB	064H
	DB	045H
	DB	03aH
	DB	02aH
	DB	090H
	DB	036H
	DB	03cH
	DB	0d5H
	DB	078H
	DB	0b6H
	DB	0d9H
	DB	032H
	DB	0f6H
	DB	049H
	DB	012H
	DB	013H
	DB	0cbH
	DB	0b6H
	DB	0d1H
	DB	046H
	DB	09bH
	DB	079H
	DB	053H
	DB	0a4H
	DB	0dfH
	DB	026H
	DB	045H
	DB	0b4H
	DB	071H
	DB	055H
	DB	0dH
	DB	0d5H
	DB	09bH
	DB	047H
	DB	080H
	DB	0abH
	DB	07dH
	DB	03cH
	DB	081H
	DB	075H
	DB	0f2H
	DB	0daH
	DB	027H
	DB	06aH
	DB	025H
	DB	03aH
	DB	07dH
	DB	0f0H
	DB	0f0H
	DB	0ceH
	DB	0b6H
	DB	0cH
	DB	049H
	DB	0aH
	DB	0b0H
	DB	0a8H
	DB	0b0H
	DB	076H
	DB	05eH
	DB	022H
	DB	0cbH
	DB	06bH
	DB	077H
	DB	0e6H
	DB	032H
	DB	077H
	DB	013H
	DB	02fH
	DB	0b3H
	DB	094H
	DB	0a5H
	DB	0a7H
	DB	0efH
	DB	04cH
	DB	012H
	DB	015H
	DB	086H
	DB	0fH
	DB	085H
	DB	0f7H
	DB	0deH
	DB	03dH
	DB	083H
	DB	0a7H
	DB	047H
	DB	035H
	DB	050H
	DB	077H
	DB	02bH
	DB	0aeH
	DB	099H
	DB	0f6H
	DB	099H
	DB	091H
	DB	0deH
	DB	0cbH
	DB	09H
	DB	0f1H
	DB	07bH
	DB	0bdH
	DB	06H
	DB	021H
	DB	0e4H
	DB	0f5H
	DB	06dH
	DB	0f6H
	DB	08aH
	DB	074H
	DB	085H
	DB	011H
	DB	0ebH
	DB	064H
	DB	04eH
	DB	06fH
	DB	0cH
	DB	015H
	DB	0a4H
	DB	0dcH
	DB	08dH
	DB	04fH
	DB	0bH
	DB	0a6H
	DB	047H
	DB	0a5H
	DB	0b7H
	DB	0a5H
	DB	0f0H
	DB	041H
	DB	017H
	DB	06cH
	DB	0feH
	DB	09cH
	DB	0dH
	DB	063H
	DB	093H
	DB	07bH
	DB	0d9H
	DB	09dH
	DB	06fH
	DB	05fH
	DB	0aeH
	DB	05bH
	DB	044H
	DB	0fcH
	DB	0caH
	DB	0cfH
	DB	013H
	DB	0efH
	DB	0acH
	DB	020H
	DB	03fH
	DB	0b8H
	DB	0c6H
	DB	06H
	DB	0ddH
	DB	0feH
	DB	0abH
	DB	0ceH
	DB	040H
	DB	042H
	DB	03cH
	DB	03fH
	DB	0dfH
	DB	049H
	DB	022H
	DB	0f2H
	DB	044H
	DB	0fbH
	DB	090H
	DB	0b3H
	DB	0daH
	DB	040H
	DB	08eH
	DB	01fH
	DB	03dH
	DB	0d9H
	DB	0efH
	DB	0cfH
	DB	0c9H
	DB	01cH
	DB	0efH
	DB	088H
	DB	0d4H
	DB	037H
	DB	08fH
	DB	0b2H
	DB	036H
	DB	0baH
	DB	082H
	DB	0f5H
	DB	0fdH
	DB	03eH
	DB	0b4H
	DB	0ddH
	DB	07H
	DB	0d6H
	DB	0d0H
	DB	04cH
	DB	0d2H
	DB	061H
	DB	07fH
	DB	0adH
	DB	0a1H
	DB	0fH
	DB	04dH
	DB	05fH
	DB	0e8H
	DB	03dH
	DB	02fH
	DB	032H
	DB	059H
	DB	09fH
	DB	0baH
	DB	0aeH
	DB	056H
	DB	0c9H
	DB	061H
	DB	0cH
	DB	085H
	DB	063H
	DB	02H
	DB	03H
	DB	021H
	DB	0b6H
	DB	0e0H
	DB	029H
	DB	0dH
	DB	0b1H
	DB	0f4H
	DB	0dfH
	DB	092H
	DB	074H
	DB	0dH
	DB	0b4H
	DB	03H
	DB	05aH
	DB	014H
	DB	06bH
	DB	017H
	DB	0c2H
	DB	01dH
	DB	0f0H
	DB	0e1H
	DB	058H
	DB	09fH
	DB	038H
	DB	022H
	DB	080H
	DB	0c3H
	DB	0a7H
	DB	064H
	DB	045H
	DB	0aaH
	DB	085H
	DB	0fbH
	DB	0bH
	DB	02eH
	DB	088H
	DB	03cH
	DB	023H
	DB	068H
	DB	0cfH
	DB	018H
	DB	0f5H
	DB	084H
	DB	01bH
	DB	0cfH
	DB	018H
	DB	07H
	DB	0e7H
	DB	0daH
	DB	024H
	DB	0d8H
	DB	0bdH
	DB	07cH
	DB	0f7H
	DB	0f5H
	DB	01fH
	DB	0f7H
	DB	03aH
	DB	046H
	DB	05cH
	DB	07fH
	DB	071H
	DB	062H
	DB	0fbH
	DB	07cH
	DB	090H
	DB	084H
	DB	0b9H
	DB	034H
	DB	06dH
	DB	09H
	DB	04cH
	DB	063H
	DB	0dH
	DB	0e6H
	DB	0b2H
	DB	025H
	DB	06dH
	DB	01aH
	DB	00H
	DB	012H
	DB	072H
	DB	03dH
	DB	0eH
	DB	06aH
	DB	0b3H
	DB	02dH
	DB	063H
	DB	0edH
	DB	074H
	DB	03fH
	DB	06dH
	DB	0e5H
	DB	0a1H
	DB	069H
	DB	0e1H
	DB	0b2H
	DB	06eH
	DB	01bH
	DB	0e6H
	DB	0dbH
	DB	024H
	DB	033H
	DB	0beH
	DB	0b0H
	DB	099H
	DB	071H
	DB	0d5H
	DB	08H
	DB	08cH
	DB	056H
	DB	01aH
	DB	0feH
	DB	093H
	DB	028H
	DB	0e9H
	DB	047H
	DB	056H
	DB	0ccH
	DB	0b4H
	DB	04aH
	DB	0cH
	DB	023H
	DB	0afH
	DB	0aeH
	DB	0cH
	DB	091H
	DB	0e0H
	DB	07aH
	DB	0adH
	DB	0c7H
	DB	0d5H
	DB	051H
	DB	07aH
	DB	094H
	DB	082H
	DB	014H
	DB	086H
	DB	058H
	DB	09bH
	DB	013H
	DB	02eH
	DB	0b5H
	DB	091H
	DB	042H
	DB	05eH
	DB	0faH
	DB	09H
	DB	034H
	DB	0c7H
	DB	0beH
	DB	07eH
	DB	0d4H
	DB	0e1H
	DB	02eH
	DB	03H
	DB	06dH
	DB	03fH
	DB	0e3H
	DB	068H
	DB	06cH
	DB	02bH
	DB	03eH
	DB	0beH
	DB	0a5H
	DB	0d3H
	DB	041H
	DB	039H
	DB	05aH
	DB	019H
	DB	0d5H
	DB	0ecH
	DB	0c7H
	DB	0bH
	DB	0fdH
	DB	0aH
	DB	069H
	DB	0f9H
	DB	092H
	DB	09dH
	DB	0c1H
	DB	051H
	DB	09bH
	DB	016H
	DB	0b2H
	DB	049H
	DB	098H
	DB	021H
	DB	09H
	DB	07cH
	DB	089H
	DB	075H
	DB	0a7H
	DB	0c7H
	DB	034H
	DB	0ccH
	DB	01bH
	DB	0f4H
	DB	07H
	DB	0f4H
	DB	08eH
	DB	0dcH
	DB	0e1H
	DB	056H
	DB	0e7H
	DB	060H
	DB	0dfH
	DB	0d1H
	DB	05aH
	DB	072H
	DB	0eeH
	DB	09bH
	DB	044H
	DB	0bH
	DB	032H
	DB	0f6H
	DB	054H
	DB	0caH
	DB	018H
	DB	05dH
	DB	0c7H
	DB	021H
	DB	053H
	DB	0eeH
	DB	069H
	DB	07H
	DB	0bcH
	DB	04H
	DB	0fcH
	DB	043H
	DB	0f9H
	DB	0bH
	DB	09fH
	DB	05bH
	DB	0e0H
	DB	07H
	DB	0bbH
	DB	040H
	DB	0d8H
	DB	016H
	DB	0b2H
	DB	048H
	DB	032H
	DB	0f6H
	DB	053H
	DB	064H
	DB	06eH
	DB	027H
	DB	0aeH
	DB	06H
	DB	05H
	DB	076H
	DB	028H
	DB	058H
	DB	0e5H
	DB	011H
	DB	05fH
	DB	022H
	DB	015H
	DB	0dbH
	DB	065H
	DB	08eH
	DB	0e6H
	DB	05H
	DB	0eaH
	DB	0c7H
	DB	08bH
	DB	0a6H
	DB	08H
	DB	065H
	DB	03dH
	DB	03bH
	DB	0adH
	DB	06fH
	DB	0b1H
	DB	080H
	DB	053H
	DB	020H
	DB	0a7H
	DB	02H
	DB	027H
	DB	0acH
	DB	0f8H
	DB	0ceH
	DB	05H
	DB	0deH
	DB	05fH
	DB	0e4H
	DB	080H
	DB	0f3H
	DB	0c0H
	DB	0e5H
	DB	083H
	DB	0a8H
	DB	06aH
	DB	06eH
	DB	0efH
	DB	0f5H
	DB	094H
	DB	078H
	DB	0daH
	DB	0d1H
	DB	033H
	DB	08H
	DB	0c0H
	DB	0e4H
	DB	088H
	DB	014H
	DB	085H
	DB	0b0H
	DB	096H
	DB	02cH
	DB	05dH
	DB	08fH
	DB	0faH
	DB	0e2H
	DB	0edH
	DB	0d9H
	DB	0c7H
	DB	06eH
	DB	0cdH
	DB	08H
	DB	054H
	DB	051H
	DB	030H
	DB	03eH
	DB	03fH
	DB	021H
	DB	0b3H
	DB	0d4H
	DB	019H
	DB	08fH
	DB	026H
	DB	04cH
	DB	017H
	DB	067H
	DB	0b0H
	DB	0a0H
	DB	07bH
	DB	036H
	DB	0d0H
	DB	012H
	DB	062H
	DB	02eH
	DB	021H
	DB	0dcH
	DB	090H
	DB	0fH
	DB	0b6H
	DB	058H
	DB	07dH
	DB	085H
	DB	0e0H
	DB	051H
	DB	056H
	DB	011H
	DB	08fH
	DB	096H
	DB	032H
	DB	0c3H
	DB	0eaH
	DB	0caH
	DB	0d2H
	DB	090H
	DB	096H
	DB	0e9H
	DB	0f7H
	DB	048H
	DB	0aH
	DB	0f3H
	DB	0fdH
	DB	0daH
	DB	06H
	DB	061H
	DB	089H
	DB	0a7H
	DB	0bdH
	DB	01aH
	DB	0b6H
	DB	0f4H
	DB	0f2H
	DB	035H
	DB	07aH
	DB	0d3H
	DB	06H
	DB	050H
	DB	0e4H
	DB	016H
	DB	0e6H
	DB	097H
	DB	0d9H
	DB	051H
	DB	0e1H
	DB	0acH
	DB	0e2H
	DB	079H
	DB	016H
	DB	0daH
	DB	0c1H
	DB	021H
	DB	0ceH
	DB	0bfH
	DB	07bH
	DB	055H
	DB	0a0H
	DB	05H
	DB	0fcH
	DB	0deH
	DB	09fH
	DB	033H
	DB	0d3H
	DB	092H
	DB	0e7H
	DB	0cdH
	DB	0e5H
	DB	0eeH
	DB	01eH
	DB	04aH
	DB	05H
	DB	06H
	DB	061H
	DB	05eH
	DB	0d6H
	DB	044H
	DB	0bH
	DB	0b9H
	DB	0bdH
	DB	0a0H
	DB	015H
	DB	0feH
	DB	0c1H
	DB	063H
	DB	0beH
	DB	0bdH
	DB	0b8H
	DB	0dfH
	DB	042H
	DB	035H
	DB	0beH
	DB	0e1H
	DB	0e8H
	DB	092H
	DB	0f3H
	DB	0d0H
	DB	060H
	DB	059H
	DB	03fH
	DB	07eH
	DB	0a4H
	DB	044H
	DB	04H
	DB	06H
	DB	022H
	DB	0dbH
	DB	04aH
	DB	02dH
	DB	015H
	DB	087H
	DB	0ceH
	DB	02aH
	DB	086H
	DB	010H
	DB	08eH
	DB	0c5H
	DB	04dH
	DB	0c6H
	DB	0a5H
	DB	090H
	DB	07cH
	DB	064H
	DB	0f1H
	DB	065H
	DB	076H
	DB	0e6H
	DB	0b5H
	DB	056H
	DB	040H
	DB	0f5H
	DB	054H
	DB	0e4H
	DB	0b9H
	DB	0d8H
	DB	06bH
	DB	0dcH
	DB	034H
	DB	035H
	DB	089H
	DB	049H
	DB	0bdH
	DB	0d7H
	DB	0f3H
	DB	0c3H
	DB	068H
	DB	02H
	DB	089H
	DB	0b5H
	DB	0c8H
	DB	02fH
	DB	046H
	DB	0c4H
	DB	013H
	DB	0b8H
	DB	0a9H
	DB	09H
	DB	09fH
	DB	060H
	DB	05fH
	DB	05fH
	DB	0d5H
	DB	034H
	DB	045H
	DB	0fH
	DB	0dH
	DB	030H
	DB	0ebH
	DB	041H
	DB	065H
	DB	076H
	DB	08aH
	DB	0a2H
	DB	0cdH
	DB	0fdH
	DB	067H
	DB	036H
	DB	00H
	DB	0f0H
	DB	06cH
	DB	049H
	DB	0a0H
	DB	032H
	DB	0eH
	DB	033H
	DB	0eaH
	DB	038H
	DB	03dH
	DB	08aH
	DB	018H
	DB	01cH
	DB	0eaH
	DB	0edH
	DB	050H
	DB	0afH
	DB	0fcH
	DB	05dH
	DB	0dfH
	DB	069H
	DB	09eH
	DB	0c4H
	DB	05fH
	DB	0a9H
	DB	0e7H
	DB	02dH
	DB	0a7H
	DB	04fH
	DB	064H
	DB	0a8H
	DB	0bfH
	DB	050H
	DB	0f1H
	DB	0dfH
	DB	082H
	DB	07fH
	DB	014H
	DB	06eH
	DB	0b7H
	DB	0d0H
	DB	0f8H
	DB	0cfH
	DB	0ecH
	DB	063H
	DB	03dH
	DB	0bdH
	DB	013H
	DB	0baH
	DB	01bH
	DB	072H
	DB	024H
	DB	03aH
	DB	0b7H
	DB	083H
	DB	0e3H
	DB	09fH
	DB	030H
	DB	0bH
	DB	06eH
	DB	094H
	DB	033H
	DB	0adH
	DB	064H
	DB	0a4H
	DB	08eH
	DB	0e7H
	DB	025H
	DB	022H
	DB	056H
	DB	05cH
	DB	072H
	DB	04fH
	DB	0acH
	DB	0deH
	DB	0b3H
	DB	069H
	DB	09cH
	DB	046H
	DB	024H
	DB	0b8H
	DB	039H
	DB	048H
	DB	072H
	DB	0f0H
	DB	04bH
	DB	0d5H
	DB	010H
	DB	07cH
	DB	0e0H
	DB	07eH
	DB	090H
	DB	015H
	DB	02cH
	DB	0f5H
	DB	0b9H
	DB	03aH
	DB	0ddH
	DB	05eH
	DB	0dbH
	DB	034H
	DB	03bH
	DB	04eH
	DB	03H
	DB	0e7H
	DB	02eH
	DB	036H
	DB	051H
	DB	0caH
	DB	07dH
	DB	076H
	DB	03H
	DB	036H
	DB	03eH
	DB	0f4H
	DB	027H
	DB	08aH
	DB	0caH
	DB	037H
	DB	07H
	DB	02cH
	DB	035H
	DB	017H
	DB	0c0H
	DB	0e0H
	DB	0dH
	DB	07aH
	DB	01cH
	DB	0eaH
	DB	059H
	DB	0f7H
	DB	09eH
	DB	094H
	DB	0c6H
	DB	0a2H
	DB	07cH
	DB	074H
	DB	0d8H
	DB	04dH
	DB	03fH
	DB	0d5H
	DB	043H
	DB	0c2H
	DB	0cH
	DB	082H
	DB	037H
	DB	0b2H
	DB	08cH
	DB	03H
	DB	069H
	DB	013H
	DB	02fH
	DB	09eH
	DB	02aH
	DB	0efH
	DB	080H
	DB	0b7H
	DB	0e9H
	DB	01cH
	DB	022H
	DB	0c2H
	DB	093H
	DB	0c1H
	DB	057H
	DB	05aH
	DB	064H
	DB	053H
	DB	0ceH
	DB	0bcH
	DB	0a1H
	DB	08eH
	DB	013H
	DB	064H
	DB	0d0H
	DB	09eH
	DB	066H
	DB	08H
	DB	052H
	DB	072H
	DB	0bH
	DB	0bbH
	DB	085H
	DB	0b9H
	DB	0daH
	DB	030H
	DB	029H
	DB	05bH
	DB	0e7H
	DB	093H
	DB	0f6H
	DB	0aH
	DB	056H
	DB	08aH
	DB	04bH
	DB	02eH
	DB	065H
	DB	02fH
	DB	081H
	DB	034H
	DB	0ecH
	DB	0a2H
	DB	042H
	DB	00H
	DB	08H
	DB	013H
	DB	01eH
	DB	0edH
	DB	09bH
	DB	070H
	DB	061H
	DB	026H
	DB	0acH
	DB	0e6H
	DB	060H
	DB	087H
	DB	096H
	DB	089H
	DB	062H
	DB	0fdH
	DB	09cH
	DB	0d8H
	DB	088H
	DB	0f3H
	DB	063H
	DB	0d3H
	DB	0a1H
	DB	0c8H
	DB	04H
	DB	023H
	DB	07dH
	DB	070H
	DB	046H
	DB	03fH
	DB	0efH
	DB	0cdH
	DB	0d2H
	DB	0eH
	DB	0bbH
	DB	06eH
	DB	07fH
	DB	01dH
	DB	094H
	DB	0abH
	DB	084H
	DB	0f4H
	DB	0b2H
	DB	01bH
	DB	0feH
	DB	094H
	DB	099H
	DB	09bH
	DB	06dH
	DB	022H
	DB	0fH
	DB	0d0H
	DB	0f5H
	DB	0b0H
	DB	01aH
	DB	079H
	DB	054H
	DB	017H
	DB	069H
	DB	09aH
	DB	056H
	DB	059H
	DB	068H
	DB	029H
	DB	068H
	DB	024H
	DB	097H
	DB	067H
	DB	0c1H
	DB	0acH
	DB	092H
	DB	046H
	DB	0a1H
	DB	045H
	DB	061H
	DB	0a0H
	DB	0d9H
	DB	0faH
	DB	0bcH
	DB	047H
	DB	09cH
	DB	0cbH
	DB	097H
	DB	013H
	DB	0fcH
	DB	031H
	DB	0cH
	DB	051H
	DB	048H
	DB	076H
	DB	06bH
	DB	01fH
	DB	0cfH
	DB	0d3H
	DB	0c7H
	DB	038H
	DB	077H
	DB	0dfH
	DB	01fH
	DB	039H
	DB	08cH
	DB	0b1H
	DB	0feH
	DB	0adH
	DB	0f6H
	DB	061H
	DB	0ceH
	DB	050H
	DB	0dbH
	DB	08bH
	DB	017H
	DB	0f8H
	DB	0d6H
	DB	02fH
	DB	0cH
	DB	0d3H
	DB	060H
	DB	018H
	DB	0a4H
	DB	029H
	DB	08eH
	DB	010H
	DB	0c7H
	DB	0deH
	DB	063H
	DB	08fH
	DB	096H
	DB	0dbH
	DB	06fH
	DB	0b6H
	DB	094H
	DB	07bH
	DB	0e7H
	DB	094H
	DB	02aH
	DB	05fH
	DB	075H
	DB	0f8H
	DB	0afH
	DB	0d0H
	DB	04H
	DB	0c7H
	DB	0c9H
	DB	0daH
	DB	076H
	DB	055H
	DB	0afH
	DB	0d6H
	DB	0edH
	DB	054H
	DB	07fH
	DB	07cH
	DB	065H
	DB	047H
	DB	05bH
	DB	0c8H
	DB	0d7H
	DB	0f2H
	DB	024H
	DB	0c6H
	DB	029H
	DB	0b9H
	DB	0c2H
	DB	011H
	DB	0cdH
	DB	0ecH
	DB	070H
	DB	043H
	DB	065H
	DB	0a0H
	DB	093H
	DB	069H
	DB	0e7H
	DB	0ddH
	DB	0c3H
	DB	05eH
	DB	033H
	DB	073H
	DB	0b4H
	DB	021H
	DB	048H
	DB	035H
	DB	01eH
	DB	0adH
	DB	07cH
	DB	0f8H
	DB	0f5H
	DB	0d3H
	DB	06bH
	DB	09aH
	DB	09bH
	DB	094H
	DB	0d3H
	DB	05eH
	DB	026H
	DB	0a1H
	DB	0caH
	DB	096H
	DB	064H
	DB	0afH
	DB	0b6H
	DB	0f7H
	DB	098H
	DB	09eH
	DB	0d5H
	DB	05cH
	DB	07cH
	DB	089H
	DB	050H
	DB	032H
	DB	0aaH
	DB	098H
	DB	067H
	DB	048H
	DB	046H
	DB	0e3H
	DB	042H
	DB	0bbH
	DB	0b8H
	DB	0adH
	DB	056H
	DB	0d3H
	DB	043H
	DB	02aH
	DB	0b1H
	DB	0e8H
	DB	04bH
	DB	0fbH
	DB	07fH
	DB	0afH
	DB	0abH
	DB	0b6H
	DB	028H
	DB	0c3H
	DB	0d4H
	DB	07dH
	DB	09fH
	DB	052H
	DB	07H
	DB	0efH
	DB	04H
	DB	032H
	DB	088H
	DB	0eaH
	DB	07aH
	DB	04eH
	DB	0ceH
	DB	0bcH
	DB	0bH
	DB	07H
	DB	0eaH
	DB	0e0H
	DB	05aH
	DB	0adH
	DB	08bH
	DB	0cH
	DB	096H
	DB	056H
	DB	087H
	DB	095H
	DB	07H
	DB	0b2H
	DB	04cH
	DB	0aeH
	DB	076H
	DB	0a1H
	DB	02cH
	DB	017H
	DB	073H
	DB	0b3H
	DB	07H
	DB	077H
	DB	0e5H
	DB	010H
	DB	062H
	DB	0dfH
	DB	05eH
	DB	0b0H
	DB	01dH
	DB	0e8H
	DB	038H
	DB	08H
	DB	04aH
	DB	092H
	DB	0b5H
	DB	0d5H
	DB	01fH
	DB	0cbH
	DB	02cH
	DB	0a6H
	DB	061H
	DB	0b2H
	DB	05aH
	DB	02eH
	DB	061H
	DB	050H
	DB	0cfH
	DB	0eH
	DB	067H
	DB	043H
	DB	0c1H
	DB	0eeH
	DB	0baH
	DB	027H
	DB	0feH
	DB	09cH
	DB	07H
	DB	05dH
	DB	04dH
	DB	024H
	DB	0c6H
	DB	05H
	DB	02cH
	DB	011H
	DB	098H
	DB	061H
	DB	0e6H
	DB	037H
	DB	02dH
	DB	092H
	DB	0ddH
	DB	0fH
	DB	0c5H
	DB	038H
	DB	03dH
	DB	0a6H
	DB	089H
	DB	0dH
	DB	0b4H
	DB	070H
	DB	0cfH
	DB	0f5H
	DB	05fH
	DB	08aH
	DB	01dH
	DB	0ddH
	DB	0a6H
	DB	025H
	DB	03cH
	DB	073H
	DB	0c8H
	DB	03H
	DB	079H
	DB	075H
	DB	014H
	DB	091H
	DB	056H
	DB	07aH
	DB	0c8H
	DB	084H
	DB	08cH
	DB	0a6H
	DB	013H
	DB	052H
	DB	05fH
	DB	050H
	DB	0f9H
	DB	068H
	DB	0dcH
	DB	02eH
	DB	058H
	DB	0acH
	DB	025H
	DB	038H
	DB	0b6H
	DB	0c1H
	DB	016H
	DB	05dH
	DB	066H
	DB	052H
	DB	050H
	DB	030H
	DB	0d4H
	DB	0c9H
	DB	0a5H
	DB	068H
	DB	05bH
	DB	0fbH
	DB	062H
	DB	0a3H
	DB	00H
	DB	0efH
	DB	04bH
	DB	013H
	DB	042H
	DB	02aH
	DB	0e2H
	DB	0bbH
	DB	012H
	DB	0bfH
	DB	0eaH
	DB	06aH
	DB	06cH
	DB	010H
	DB	0a2H
	DB	0a2H
	DB	0d1H
	DB	0b9H
	DB	00H
	DB	039H
	DB	08bH
	DB	051H
	DB	0e8H
	DB	0e0H
	DB	09aH
	DB	0eH
	DB	049H
	DB	076H
	DB	0aH
	DB	0acH
	DB	01aH
	DB	08aH
	DB	01cH
	DB	065H
	DB	01dH
	DB	05eH
	DB	0fH
	DB	01H
	DB	01bH
	DB	021H
	DB	040H
	DB	085H
	DB	0cH
	DB	02dH
	DB	095H
	DB	0aeH
	DB	0cfH
	DB	0e6H
	DB	0e7H
	DB	050H
	DB	09fH
	DB	074H
	DB	0a1H
	DB	088H
	DB	055H
	DB	0bbH
	DB	096H
	DB	01eH
	DB	032H
	DB	021H
	DB	04aH
	DB	04dH
	DB	02bH
	DB	066H
	DB	032H
	DB	048H
	DB	0c5H
	DB	042H
	DB	0c8H
	DB	060H
	DB	0e2H
	DB	089H
	DB	0e5H
	DB	0eeH
	DB	0b6H
	DB	0faH
	DB	01eH
	DB	06H
	DB	061H
	DB	06H
	DB	056H
	DB	02H
	DB	0f9H
	DB	077H
	DB	0aH
	DB	0ceH
	DB	034H
	DB	0a1H
	DB	0edH
	DB	066H
	DB	042H
	DB	038H
	DB	0b3H
	DB	06dH
	DB	09fH
	DB	0e6H
	DB	0b5H
	DB	0e4H
	DB	0a8H
	DB	0feH
	DB	0c4H
	DB	08bH
	DB	088H
	DB	02aH
	DB	0faH
	DB	0beH
	DB	025H
	DB	019H
	DB	0c4H
	DB	06H
	DB	09eH
	DB	09bH
	DB	08H
	DB	099H
	DB	013H
	DB	013H
	DB	0e7H
	DB	047H
	DB	034H
	DB	0d5H
	DB	0aeH
	DB	076H
	DB	08eH
	DB	062H
	DB	0e3H
	DB	0adH
	DB	0c8H
	DB	019H
	DB	092H
	DB	071H
	DB	097H
	DB	057H
	DB	0fdH
	DB	09fH
	DB	081H
	DB	0f8H
	DB	05eH
	DB	026H
	DB	091H
	DB	0a3H
	DB	02cH
	DB	030H
	DB	03fH
	DB	0b4H
	DB	049H
	DB	0d1H
	DB	047H
	DB	032H
	DB	01aH
	DB	07bH
	DB	087H
	DB	048H
	DB	071H
	DB	016H
	DB	02aH
	DB	055H
	DB	0c3H
	DB	0f3H
	DB	0edH
	DB	0d5H
	DB	065H
	DB	06H
	DB	0acH
	DB	0e2H
	DB	0a5H
	DB	0adH
	DB	05bH
	DB	084H
	DB	0d3H
	DB	06cH
	DB	028H
	DB	080H
	DB	01dH
	DB	0e6H
	DB	035H
	DB	066H
	DB	0b8H
	DB	07cH
	DB	018H
	DB	0d2H
	DB	077H
	DB	0a0H
	DB	09aH
	DB	0e8H
	DB	036H
	DB	0c5H
	DB	0bdH
	DB	07aH
	DB	0b9H
	DB	02bH
	DB	050H
	DB	09eH
	DB	031H
	DB	07dH
	DB	02H
	DB	0d7H
	DB	02bH
	DB	0dcH
	DB	05cH
	DB	07fH
	DB	04aH
	DB	04H
	DB	00H
	DB	067H
	DB	0eaH
	DB	0b4H
	DB	04dH
	DB	023H
	DB	0b0H
	DB	066H
	DB	076H
	DB	028H
	DB	07H
	DB	011H
	DB	090H
	DB	0bcH
	DB	0d6H
	DB	04eH
	DB	037H
	DB	010H
	DB	079H
	DB	08H
	DB	0afH
	DB	02bH
	DB	085H
	DB	031H
	DB	03H
	DB	0b0H
	DB	0eH
	DB	0deH
	DB	030H
	DB	0d7H
	DB	062H
	DB	0afH
	DB	0beH
	DB	0ccH
	DB	0e3H
	DB	0dH
	DB	0efH
	DB	014H
	DB	073H
	DB	066H
	DB	0bbH
	DB	0f9H
	DB	0f7H
	DB	04cH
	DB	0b6H
	DB	0ceH
	DB	01aH
	DB	0eeH
	DB	0dfH
	DB	094H
	DB	076H
	DB	0fH
	DB	0bfH
	DB	0fbH
	DB	0bfH
	DB	042H
	DB	0acH
	DB	0cdH
	DB	0a0H
	DB	05dH
	DB	026H
	DB	03H
	DB	08cH
	DB	0e4H
	DB	0cfH
	DB	0f0H
	DB	0f1H
	DB	0bfH
	DB	05H
	DB	0e4H
	DB	0a6H
	DB	0c1H
	DB	05eH
	DB	09eH
	DB	0eH
	DB	016H
	DB	0ecH
	DB	0a8H
	DB	084H
	DB	0ccH
	DB	03dH
	DB	0faH
	DB	05bH
	DB	07cH
	DB	076H
	DB	01bH
	DB	03eH
	DB	023H
	DB	069H
	DB	0deH
	DB	00H
	DB	08fH
	DB	0e1H
	DB	0dH
	DB	0f3H
	DB	0b1H
	DB	0fdH
	DB	066H
	DB	0f0H
	DB	082H
	DB	04bH
	DB	097H
	DB	044H
	DB	02aH
	DB	0b5H
	DB	0d2H
	DB	040H
	DB	0a3H
	DB	07bH
	DB	044H
	DB	070H
	DB	038H
	DB	0beH
	DB	04cH
	DB	034H
	DB	035H
	DB	0e6H
	DB	072H
	DB	0d7H
	DB	050H
	DB	0d0H
	DB	0d8H
	DB	05fH
	DB	0b2H
	DB	065H
	DB	0d3H
	DB	0e3H
	DB	0e2H
	DB	03aH
	DB	0d4H
	DB	065H
	DB	05H
	DB	0ecH
	DB	02aH
	DB	02fH
	DB	0a2H
	DB	0fcH
	DB	0eeH
	DB	046H
	DB	0f7H
	DB	033H
	DB	037H
	DB	0afH
	DB	071H
	DB	03H
	DB	0e3H
	DB	0a6H
	DB	0e9H
	DB	0d5H
	DB	07fH
	DB	03bH
	DB	0a6H
	DB	0d7H
	DB	01aH
	DB	059H
	DB	0bcH
	DB	0edH
	DB	03dH
	DB	09fH
	DB	0a7H
	DB	091H
	DB	05H
	DB	0adH
	DB	07eH
	DB	02fH
	DB	05cH
	DB	0a1H
	DB	0abH
	DB	04cH
	DB	067H
	DB	0a3H
	DB	0feH
	DB	09eH
	DB	053H
	DB	071H
	DB	0a1H
	DB	0b6H
	DB	097H
	DB	08cH
	DB	08cH
	DB	017H
	DB	047H
	DB	033H
	DB	06eH
	DB	0e0H
	DB	0cH
	DB	02bH
	DB	04fH
	DB	049H
	DB	0caH
	DB	0f6H
	DB	05bH
	DB	050H
	DB	024H
	DB	059H
	DB	07fH
	DB	081H
	DB	0faH
	DB	0abH
	DB	04dH
	DB	0e2H
	DB	0ceH
	DB	0cbH
	DB	081H
	DB	0a2H
	DB	0bcH
	DB	0a3H
	DB	059H
	DB	055H
	DB	0afH
	DB	0e6H
	DB	0ebH
	DB	0f6H
	DB	099H
	DB	0daH
	DB	0d7H
	DB	0a6H
	DB	06H
	DB	0a6H
	DB	06fH
	DB	051H
	DB	09eH
	DB	0caH
	DB	0a1H
	DB	0c2H
	DB	0a4H
	DB	0a0H
	DB	0c3H
	DB	01fH
	DB	0cbH
	DB	011H
	DB	02H
	DB	09bH
	DB	0ddH
	DB	084H
	DB	03eH
	DB	09aH
	DB	0a7H
	DB	017H
	DB	06fH
	DB	057H
	DB	0fdH
	DB	05cH
	DB	04eH
	DB	018H
	DB	037H
	DB	0a5H
	DB	0beH
	DB	0bcH
	DB	04dH
	DB	02eH
	DB	08dH
	DB	06bH
	DB	079H
	DB	0aeH
	DB	02eH
	DB	01eH
	DB	050H
	DB	0f2H
	DB	03dH
	DB	09bH
	DB	083H
	DB	0bfH
	DB	037H
	DB	0e0H
	DB	044H
	DB	0f4H
	DB	0fbH
	DB	06bH
	DB	0dH
	DB	06bH
	DB	0c2H
	DB	08aH
	DB	047H
	DB	090H
	DB	0a2H
	DB	0fdH
	DB	036H
	DB	061H
	DB	0bbH
	DB	03H
	DB	090H
	DB	049H
	DB	06eH
	DB	0aH
	DB	078H
	DB	01dH
	DB	0a7H
	DB	0c8H
	DB	08fH
	DB	064H
	DB	0e3H
	DB	013H
	DB	024H
	DB	01cH
	DB	074H
	DB	0e7H
	DB	090H
	DB	070H
	DB	053H
	DB	09dH
	DB	05bH
	DB	016H
	DB	029H
	DB	0a3H
	DB	0a6H
	DB	0cbH
	DB	0a1H
	DB	05dH
	DB	0adH
	DB	0dcH
	DB	0dfH
	DB	0bdH
	DB	0a6H
	DB	04fH
	DB	047H
	DB	01fH
	DB	0ebH
	DB	0eeH
	DB	067H
	DB	0faH
	DB	053H
	DB	04bH
	DB	0eH
	DB	0f7H
	DB	0e6H
	DB	02H
	DB	0dfH
	DB	078H
	DB	072H
	DB	034H
	DB	095H
	DB	04eH
	DB	04aH
	DB	0beH
	DB	0f1H
	DB	071H
	DB	0bH
	DB	013H
	DB	0ceH
	DB	0b8H
	DB	070H
	DB	0aeH
	DB	0f5H
	DB	096H
	DB	07dH
	DB	03dH
	DB	0b5H
	DB	0e8H
	DB	02cH
	DB	09cH
	DB	0e3H
	DB	0feH
	DB	067H
	DB	072H
	DB	0f6H
	DB	0ceH
	DB	074H
	DB	0d7H
	DB	047H
	DB	067H
	DB	08bH
	DB	05cH
	DB	0b5H
	DB	055H
	DB	01cH
	DB	027H
	DB	0c6H
	DB	0a6H
	DB	03aH
	DB	015H
	DB	0deH
	DB	02aH
	DB	044H
	DB	0d4H
	DB	0c0H
	DB	041H
	DB	012H
	DB	0f5H
	DB	02bH
	DB	0bdH
	DB	092H
	DB	08eH
	DB	0bcH
	DB	07aH
	DB	01H
	DB	034H
	DB	049H
	DB	0f5H
	DB	08bH
	DB	010H
	DB	0dcH
	DB	017H
	DB	06cH
	DB	092H
	DB	0ebH
	DB	088H
	DB	0b9H
	DB	0b3H
	DB	02fH
	DB	073H
	DB	048H
	DB	08dH
	DB	09eH
	DB	08cH
	DB	062H
	DB	0deH
	DB	04eH
	DB	074H
	DB	0d5H
	DB	079H
	DB	0b1H
	DB	068H
	DB	08H
	DB	06fH
	DB	0e2H
	DB	089H
	DB	023H
	DB	02cH
	DB	0feH
	DB	02eH
	DB	03cH
	DB	0dbH
	DB	0c4H
	DB	029H
	DB	0edH
	DB	0b0H
	DB	0b1H
	DB	0a7H
	DB	0e3H
	DB	061H
	DB	09aH
	DB	02dH
	DB	0eeH
	DB	0b8H
	DB	039H
	DB	0d1H
	DB	098H
	DB	087H
	DB	046H
	DB	0edH
	DB	080H
	DB	0f8H
	DB	056H
	DB	09H
	DB	0e7H
	DB	0b9H
	DB	012H
	DB	08aH
	DB	065H
	DB	011H
	DB	0b8H
	DB	022H
	DB	0ecH
	DB	07dH
	DB	04bH
	DB	0daH
	DB	0adH
	DB	07cH
	DB	02H
	DB	092H
	DB	05dH
	DB	01cH
	DB	03fH
	DB	04dH
	DB	0d5H
	DB	0f7H
	DB	01fH
	DB	0edH
	DB	080H
	DB	0e4H
	DB	0dbH
	DB	080H
	DB	05dH
	DB	0b1H
	DB	089H
	DB	0c4H
	DB	0eaH
	DB	09bH
	DB	04fH
	DB	051H
	DB	02cH
	DB	087H
	DB	0f2H
	DB	019H
	DB	084H
	DB	0bdH
	DB	073H
	DB	033H
	DB	03aH
	DB	075H
	DB	045H
	DB	098H
	DB	012H
	DB	084H
	DB	065H
	DB	067H
	DB	07cH
	DB	04H
	DB	0d4H
	DB	07cH
	DB	0e8H
	DB	0b0H
	DB	0fdH
	DB	0c6H
	DB	0e1H
	DB	087H
	DB	08bH
	DB	04dH
	DB	0a3H
	DB	05bH
	DB	01eH
	DB	0cfH
	DB	062H
	DB	011H
	DB	069H
	DB	0e7H
	DB	0ceH
	DB	05cH
	DB	01bH
	DB	088H
	DB	052H
	DB	060H
	DB	021H
	DB	064H
	DB	064H
	DB	086H
	DB	0cbH
	DB	0e0H
	DB	0aH
	DB	0a0H
	DB	05eH
	DB	0f3H
	DB	0d0H
	DB	0dbH
	DB	03aH
	DB	032H
	DB	0e2H
	DB	045H
	DB	07fH
	DB	086H
	DB	0a0H
	DB	09dH
	DB	0d6H
	DB	04H
	DB	02eH
	DB	0bfH
	DB	06bH
	DB	0fcH
	DB	01cH
	DB	086H
	DB	086H
	DB	06eH
	DB	066H
	DB	027H
	DB	0d2H
	DB	0caH
	DB	02eH
	DB	01eH
	DB	02bH
	DB	038H
	DB	03eH
	DB	089H
	DB	0abH
	DB	0fH
	DB	0e4H
	DB	065H
	DB	0c1H
	DB	0c8H
	DB	0abH
	DB	041H
	DB	04fH
	DB	04cH
	DB	05fH
	DB	0a5H
	DB	0cfH
	DB	08dH
	DB	0e4H
	DB	03bH
	DB	0bH
	DB	02H
	DB	041H
	DB	011H
	DB	070H
	DB	0a7H
	DB	038H
	DB	0c3H
	DB	0f1H
	DB	0e5H
	DB	061H
	DB	01eH
	DB	01fH
	DB	0a0H
	DB	027H
	DB	04aH
	DB	02fH
	DB	0dH
	DB	0b0H
	DB	0f0H
	DB	0d5H
	DB	05cH
	DB	0b2H
	DB	0a4H
	DB	028H
	DB	012H
	DB	0caH
	DB	0f8H
	DB	01fH
	DB	0afH
	DB	0b3H
	DB	02aH
	DB	0b1H
	DB	0f5H
	DB	03bH
	DB	0a2H
	DB	01dH
	DB	0f3H
	DB	0e5H
	DB	08fH
	DB	0d9H
	DB	047H
	DB	0adH
	DB	078H
	DB	067H
	DB	054H
	DB	0c3H
	DB	097H
	DB	0e0H
	DB	0f3H
	DB	08H
	DB	036H
	DB	050H
	DB	03aH
	DB	05bH
	DB	0f7H
	DB	0cbH
	DB	0a5H
	DB	070H
	DB	0ebH
	DB	055H
	DB	025H
	DB	016H
	DB	087H
	DB	09aH
	DB	0d1H
	DB	0a9H
	DB	0b7H
	DB	0c5H
	DB	0fH
	DB	047H
	DB	09fH
	DB	0d5H
	DB	074H
	DB	098H
	DB	03eH
	DB	049H
	DB	0dbH
	DB	055H
	DB	0a9H
	DB	0cfH
	DB	0dcH
	DB	060H
	DB	09fH
	DB	018H
	DB	0bbH
	DB	097H
	DB	0e3H
	DB	061H
	DB	09H
	DB	04fH
	DB	036H
	DB	0adH
	DB	0e5H
	DB	03dH
	DB	048H
	DB	0b7H
	DB	0e6H
	DB	07fH
	DB	0fcH
	DB	0f5H
	DB	047H
	DB	01cH
	DB	04cH
	DB	03bH
	DB	0b4H
	DB	08aH
	DB	084H
	DB	090H
	DB	05fH
	DB	0aeH
	DB	060H
	DB	03cH
	DB	0fH
	DB	00H
	DB	0d3H
	DB	0caH
	DB	018H
	DB	038H
	DB	0abH
	DB	021H
	DB	087H
	DB	0e1H
	DB	04eH
	DB	06dH
	DB	020H
	DB	096H
	DB	025H
	DB	086H
	DB	095H
	DB	0a1H
	DB	0fcH
	DB	0dcH
	DB	0beH
	DB	049H
	DB	019H
	DB	073H
	DB	053H
	DB	01dH
	DB	05H
	DB	0b2H
	DB	0cbH
	DB	0e4H
	DB	06eH
	DB	0daH
	DB	065H
	DB	043H
	DB	025H
	DB	07dH
	DB	07bH
	DB	050H
	DB	01eH
	DB	03H
	DB	033H
	DB	06cH
	DB	0f0H
	DB	0d2H
	DB	082H
	DB	095H
	DB	0d8H
	DB	018H
	DB	038H
	DB	0d5H
	DB	0f5H
	DB	0f6H
	DB	01fH
	DB	08eH
	DB	06aH
	DB	0f1H
	DB	02bH
	DB	0eeH
	DB	0a4H
	DB	0f7H
	DB	0d4H
	DB	014H
	DB	052H
	DB	03aH
	DB	0d6H
	DB	0f7H
	DB	0b7H
	DB	052H
	DB	048H
	DB	0d5H
	DB	0d4H
	DB	0faH
	DB	0c1H
	DB	0c5H
	DB	0cdH
	DB	044H
	DB	05cH
	DB	027H
	DB	05cH
	DB	094H
	DB	0fcH
	DB	0d1H
	DB	08bH
	DB	09cH
	DB	0dfH
	DB	075H
	DB	08eH
	DB	0cH
	DB	065H
	DB	0b3H
	DB	083H
	DB	03aH
	DB	0c7H
	DB	055H
	DB	0f3H
	DB	01eH
	DB	04dH
	DB	02bH
	DB	070H
	DB	016H
	DB	080H
	DB	045H
	DB	011H
	DB	042H
	DB	08bH
	DB	05fH
	DB	06H
	DB	0e7H
	DB	086H
	DB	062H
	DB	0fbH
	DB	083H
	DB	0b4H
	DB	07H
	DB	09fH
	DB	094H
	DB	07cH
	DB	02fH
	DB	020H
	DB	0e1H
	DB	0e2H
	DB	0a3H
	DB	09bH
	DB	02aH
	DB	0f9H
	DB	0fH
	DB	048H
	DB	0c6H
	DB	03aH
	DB	038H
	DB	0dcH
	DB	03aH
	DB	0fcH
	DB	0eeH
	DB	07cH
	DB	088H
	DB	04eH
	DB	082H
	DB	0efH
	DB	054H
	DB	065H
	DB	0ebH
	DB	0d7H
	DB	099H
	DB	072H
	DB	0f7H
	DB	02eH
	DB	0efH
	DB	027H
	DB	04fH
	DB	051H
	DB	089H
	DB	072H
	DB	06dH
	DB	0b3H
	DB	0ebH
	DB	07cH
	DB	07bH
	DB	0b3H
	DB	037H
	DB	0b3H
	DB	090H
	DB	071H
	DB	0b0H
	DB	0feH
	DB	0eeH
	DB	0b9H
	DB	0ccH
	DB	0f0H
	DB	0a9H
	DB	021H
	DB	0d5H
	DB	016H
	DB	079H
	DB	06fH
	DB	088H
	DB	071H
	DB	01eH
	DB	0f7H
	DB	018H
	DB	0ecH
	DB	04aH
	DB	0a1H
	DB	05fH
	DB	0b7H
	DB	0d4H
	DB	04cH
	DB	0b3H
	DB	0cfH
	DB	07fH
	DB	0eaH
	DB	083H
	DB	08fH
	DB	05dH
	DB	0b3H
	DB	08fH
	DB	0cbH
	DB	0ecH
	DB	05cH
	DB	03cH
	DB	097H
	DB	0fdH
	DB	013H
	DB	02dH
	DB	077H
	DB	082H
	DB	0b5H
	DB	068H
	DB	0a0H
	DB	02eH
	DB	080H
	DB	0dH
	DB	078H
	DB	0a1H
	DB	06dH
	DB	0afH
	DB	0f5H
	DB	039H
	DB	063H
	DB	0c5H
	DB	0b8H
	DB	04fH
	DB	0c8H
	DB	0c7H
	DB	02cH
	DB	0fbH
	DB	057H
	DB	0f7H
	DB	0e9H
	DB	034H
	DB	034H
	DB	01H
	DB	032H
	DB	0c6H
	DB	02eH
	DB	029H
	DB	04aH
	DB	063H
	DB	091H
	DB	06aH
	DB	091H
	DB	091H
	DB	078H
	DB	0aH
	DB	033H
	DB	065H
	DB	0b9H
	DB	0a8H
	DB	01eH
	DB	09dH
	DB	06eH
	DB	056H
	DB	06cH
	DB	0b6H
	DB	01eH
	DB	098H
	DB	0b2H
	DB	076H
	DB	010H
	DB	09cH
	DB	02aH
	DB	0c3H
	DB	09dH
	DB	0dbH
	DB	08bH
	DB	04bH
	DB	05H
	DB	055H
	DB	0afH
	DB	016H
	DB	03fH
	DB	041H
	DB	0a7H
	DB	037H
	DB	0cbH
	DB	05aH
	DB	09cH
	DB	05H
	DB	03H
	DB	03aH
	DB	0a2H
	DB	071H
	DB	090H
	DB	0fH
	DB	0a7H
	DB	0afH
	DB	027H
	DB	05aH
	DB	026H
	DB	037H
	DB	077H
	DB	0cfH
	DB	0fbH
	DB	094H
	DB	0abH
	DB	087H
	DB	0e0H
	DB	0b0H
	DB	05cH
	DB	010H
	DB	0c6H
	DB	09bH
	DB	051H
	DB	0edH
	DB	0d3H
	DB	01dH
	DB	048H
	DB	0efH
	DB	023H
	DB	04bH
	DB	02bH
	DB	0c5H
	DB	03cH
	DB	0bbH
	DB	055H
	DB	0e3H
	DB	06bH
	DB	07cH
	DB	0bdH
	DB	011H
	DB	034H
	DB	035H
	DB	0e0H
	DB	030H
	DB	04aH
	DB	08cH
	DB	037H
	DB	0aaH
	DB	0bcH
	DB	093H
	DB	0baH
	DB	03H
	DB	0aeH
	DB	0cH
	DB	0f0H
	DB	082H
	DB	0a9H
	DB	039H
	DB	0f2H
	DB	0ccH
	DB	084H
	DB	01eH
	DB	012H
	DB	040H
	DB	059H
	DB	0e6H
	DB	024H
	DB	045H
	DB	064H
	DB	062H
	DB	056H
	DB	018H
	DB	097H
	DB	0b7H
	DB	048H
	DB	061H
	DB	0c3H
	DB	0feH
	DB	0cH
	DB	081H
	DB	012H
	DB	0c6H
	DB	084H
	DB	0c0H
	DB	0d3H
	DB	076H
	DB	0c3H
	DB	07dH
	DB	02fH
	DB	0b6H
	DB	0c9H
	DB	034H
	DB	054H
	DB	0dbH
	DB	074H
	DB	02dH
	DB	0c3H
	DB	019H
	DB	072H
	DB	0a7H
	DB	07bH
	DB	049H
	DB	0bfH
	DB	092H
	DB	080H
	DB	087H
	DB	0f4H
	DB	044H
	DB	06H
	DB	01H
	DB	045H
	DB	018H
	DB	0c8H
	DB	0caH
	DB	0d8H
	DB	01cH
	DB	0c0H
	DB	01cH
	DB	019H
	DB	06fH
	DB	052H
	DB	0e2H
	DB	0a3H
	DB	026H
	DB	03eH
	DB	098H
	DB	054H
	DB	081H
	DB	031H
	DB	046H
	DB	0a8H
	DB	0acH
	DB	08fH
	DB	0e7H
	DB	0beH
	DB	010H
	DB	0eeH
	DB	0b3H
	DB	0d4H
	DB	0f4H
	DB	035H
	DB	01aH
	DB	0dH
	DB	07dH
	DB	064H
	DB	066H
	DB	019H
	DB	0a4H
	DB	082H
	DB	032H
	DB	015H
	DB	0d5H
	DB	094H
	DB	038H
	DB	07bH
	DB	052H
	DB	0d0H
	DB	0cfH
	DB	054H
	DB	02H
	DB	017H
	DB	07cH
	DB	02eH
	DB	026H
	DB	065H
	DB	0edH
	DB	0b6H
	DB	054H
	DB	021H
	DB	08bH
	DB	0c9H
	DB	0d5H
	DB	0a5H
	DB	0d6H
	DB	053H
	DB	0bH
	DB	0bcH
	DB	0ebH
	DB	0afH
	DB	0bfH
	DB	01eH
	DB	044H
	DB	015H
	DB	032H
	DB	07dH
	DB	090H
	DB	05H
	DB	0cdH
	DB	061H
	DB	059H
	DB	050H
	DB	0f7H
	DB	0d5H
	DB	07eH
	DB	09dH
	DB	0baH
	DB	0ebH
	DB	054H
	DB	08fH
	DB	08dH
	DB	0dfH
	DB	059H
	DB	063H
	DB	06H
	DB	0afH
	DB	037H
	DB	011H
	DB	0ecH
	DB	023H
	DB	040H
	DB	0acH
	DB	0c1H
	DB	085H
	DB	041H
	DB	073H
	DB	082H
	DB	0d1H
	DB	078H
	DB	050H
	DB	0b2H
	DB	051H
	DB	0a0H
	DB	02aH
	DB	0a7H
	DB	09fH
	DB	0c8H
	DB	062H
	DB	0bH
	DB	01dH
	DB	071H
	DB	018H
	DB	07dH
	DB	04aH
	DB	0fbH
	DB	083H
	DB	07aH
	DB	033H
	DB	014H
	DB	067H
	DB	0d5H
	DB	054H
	DB	093H
	DB	097H
	DB	059H
	DB	0d4H
	DB	0cH
	DB	0dbH
	DB	026H
	DB	04H
	DB	0acH
	DB	0d9H
	DB	056H
	DB	0ccH
	DB	04H
	DB	0fdH
	DB	06cH
	DB	0ccH
	DB	0dfH
	DB	0f7H
	DB	06aH
	DB	052H
	DB	010H
	DB	0e7H
	DB	01cH
	DB	08bH
	DB	0eaH
	DB	096H
	DB	0beH
	DB	0feH
	DB	07dH
	DB	095H
	DB	053H
	DB	090H
	DB	0acH
	DB	02dH
	DB	065H
	DB	038H
	DB	088H
	DB	0cH
	DB	03dH
	DB	035H
	DB	0e5H
	DB	013H
	DB	03H
	DB	069H
	DB	090H
	DB	0eeH
	DB	037H
	DB	070H
	DB	066H
	DB	021H
	DB	042H
	DB	0f6H
	DB	09H
	DB	0deH
	DB	082H
	DB	0f3H
	DB	075H
	DB	0c1H
	DB	072H
	DB	073H
	DB	0d6H
	DB	0c5H
	DB	04H
	DB	083H
	DB	072H
	DB	0e9H
	DB	03cH
	DB	0fbH
	DB	0f5H
	DB	0f8H
	DB	0b0H
	DB	05bH
	DB	0cH
	DB	0b3H
	DB	0c4H
	DB	01cH
	DB	023H
	DB	07bH
	DB	08cH
	DB	089H
	DB	09cH
	DB	04fH
	DB	00H
	DB	025H
	DB	02eH
	DB	083H
	DB	098H
	DB	023H
	DB	045H
	DB	0bH
	DB	016H
	DB	01cH
	DB	051H
	DB	09aH
	DB	01fH
	DB	0c3H
	DB	084H
	DB	05bH
	DB	03fH
	DB	0f9H
	DB	0d3H
	DB	0f0H
	DB	055H
	DB	05fH
	DB	024H
	DB	099H
	DB	07bH
	DB	047H
	DB	016H
	DB	09H
	DB	051H
	DB	032H
	DB	0d7H
	DB	051H
	DB	058H
	DB	085H
	DB	054H
	DB	070H
	DB	028H
	DB	019H
	DB	07cH
	DB	03fH
	DB	035H
	DB	04dH
	DB	0d9H
	DB	0d4H
	DB	090H
	DB	0ddH
	DB	0afH
	DB	0d0H
	DB	0d7H
	DB	084H
	DB	041H
	DB	0acH
	DB	0e3H
	DB	065H
	DB	046H
	DB	060H
	DB	02dH
	DB	05cH
	DB	0e8H
	DB	07eH
	DB	08fH
	DB	040H
	DB	04fH
	DB	067H
	DB	0c5H
	DB	024H
	DB	0d7H
	DB	0edH
	DB	03dH
	DB	0d3H
	DB	02dH
	DB	0f2H
	DB	021H
	DB	086H
	DB	047H
	DB	032H
	DB	064H
	DB	0f6H
	DB	082H
	DB	03cH
	DB	0faH
	DB	0c3H
	DB	068H
	DB	0dfH
	DB	029H
	DB	0afH
	DB	0bfH
	DB	0d5H
	DB	08bH
	DB	028H
	DB	0d3H
	DB	09aH
	DB	068H
	DB	0a3H
	DB	081H
	DB	0adH
	DB	0c7H
	DB	05aH
	DB	09bH
	DB	084H
	DB	0adH
	DB	049H
	DB	077H
	DB	04fH
	DB	04fH
	DB	0beH
	DB	081H
	DB	0b4H
	DB	036H
	DB	04H
	DB	070H
	DB	031H
	DB	0c7H
	DB	0d9H
	DB	090H
	DB	070H
	DB	09H
	DB	050H
	DB	047H
	DB	014H
	DB	078H
	DB	01bH
	DB	0afH
	DB	060H
	DB	03eH
	DB	031H
	DB	0eH
	DB	06H
	DB	0bH
	DB	02aH
	DB	08bH
	DB	039H
	DB	0f2H
	DB	082H
	DB	088H
	DB	042H
	DB	0c1H
	DB	0aH
	DB	0f6H
	DB	0f7H
	DB	08dH
	DB	0e7H
	DB	0a8H
	DB	055H
	DB	0c1H
	DB	03aH
	DB	045H
	DB	04aH
	DB	08aH
	DB	0cH
	DB	05eH
	DB	083H
	DB	0a7H
	DB	0eH
	DB	0e3H
	DB	0e5H
	DB	0bfH
	DB	072H
	DB	0ecH
	DB	04aH
	DB	09cH
	DB	0f7H
	DB	083H
	DB	0fH
	DB	07aH
	DB	08bH
	DB	051H
	DB	03cH
	DB	095H
	DB	0c8H
	DB	0b3H
	DB	023H
	DB	030H
	DB	05dH
	DB	0f7H
	DB	0f1H
	DB	097H
	DB	0bdH
	DB	03cH
	DB	0a1H
	DB	0c9H
	DB	01aH
	DB	0a4H
	DB	071H
	DB	029H
	DB	09H
	DB	0d7H
	DB	068H
	DB	07bH
	DB	044H
	DB	032H
	DB	097H
	DB	03cH
	DB	036H
	DB	0a6H
	DB	036H
	DB	0c1H
	DB	077H
	DB	0f2H
	DB	0d7H
	DB	0bfH
	DB	0a6H
	DB	07aH
	DB	0efH
	DB	083H
	DB	0f2H
	DB	061H
	DB	09aH
	DB	0b0H
	DB	01dH
	DB	0bcH
	DB	07aH
	DB	038H
	DB	061H
	DB	06cH
	DB	0e0H
	DB	06aH
	DB	0c3H
	DB	0c8H
	DB	065H
	DB	08H
	DB	0faH
	DB	07cH
	DB	044H
	DB	031H
	DB	0a2H
	DB	0f9H
	DB	073H
	DB	01bH
	DB	0ecH
	DB	04bH
	DB	05aH
	DB	014H
	DB	045H
	DB	04bH
	DB	097H
	DB	038H
	DB	02cH
	DB	0b2H
	DB	0e8H
	DB	04aH
	DB	06fH
	DB	0e3H
	DB	082H
	DB	0d0H
	DB	0cfH
	DB	0e2H
	DB	0bbH
	DB	093H
	DB	0abH
	DB	0a0H
	DB	01bH
	DB	0a6H
	DB	01eH
	DB	0deH
	DB	058H
	DB	0c0H
	DB	0d8H
	DB	0cbH
	DB	05bH
	DB	0c6H
	DB	096H
	DB	0b6H
	DB	0daH
	DB	0dbH
	DB	081H
	DB	0f1H
	DB	094H
	DB	0adH
	DB	024H
	DB	07dH
	DB	0f7H
	DB	093H
	DB	0e0H
	DB	0f9H
	DB	0e4H
	DB	0b0H
	DB	0dcH
	DB	0a0H
	DB	0c3H
	DB	088H
	DB	041H
	DB	0deH
	DB	0afH
	DB	0deH
	DB	0bdH
	DB	08H
	DB	0a0H
	DB	097H
	DB	053H
	DB	0fbH
	DB	0ddH
	DB	0e9H
	DB	032H
	DB	038H
	DB	045H
	DB	0b3H
	DB	02aH
	DB	0d9H
	DB	062H
	DB	04fH
	DB	0d7H
	DB	0d9H
	DB	062H
	DB	0b8H
	DB	0d4H
	DB	047H
	DB	06aH
	DB	0b1H
	DB	067H
	DB	0adH
	DB	0baH
	DB	029H
	DB	08dH
	DB	06aH
	DB	08H
	DB	04bH
	DB	072H
	DB	028H
	DB	0e2H
	DB	045H
	DB	025H
	DB	0c0H
	DB	02fH
	DB	057H
	DB	0f8H
	DB	0f3H
	DB	0cH
	DB	0a3H
	DB	04eH
	DB	0edH
	DB	072H
	DB	026H
	DB	0c7H
	DB	0d4H
	DB	0deH
	DB	01cH
	DB	09cH
	DB	0c8H
	DB	04eH
	DB	04H
	DB	077H
	DB	09H
	DB	0acH
	DB	05H
	DB	073H
	DB	0b5H
	DB	0cfH
	DB	065H
	DB	05dH
	DB	033H
	DB	0aaH
	DB	082H
	DB	073H
	DB	059H
	DB	05aH
	DB	0ecH
	DB	0ccH
	DB	0e5H
	DB	090H
	DB	01bH
	DB	0d3H
	DB	082H
	DB	0c0H
	DB	01bH
	DB	0d6H
	DB	020H
	DB	038H
	DB	073H
	DB	0e8H
	DB	086H
	DB	0f7H
	DB	0dfH
	DB	0fH
	DB	0a4H
	DB	064H
	DB	02H
	DB	0d9H
	DB	0b4H
	DB	0e6H
	DB	038H
	DB	0e7H
	DB	091H
	DB	03aH
	DB	05bH
	DB	06aH
	DB	014H
	DB	048H
	DB	0b6H
	DB	0f9H
	DB	058H
	DB	0d2H
	DB	04dH
	DB	0daH
	DB	093H
	DB	0e8H
	DB	032H
	DB	0b3H
	DB	021H
	DB	0a5H
	DB	01dH
	DB	027H
	DB	01dH
	DB	07cH
	DB	0b5H
	DB	042H
	DB	061H
	DB	0b7H
	DB	01cH
	DB	016H
	DB	09eH
	DB	0d3H
	DB	0fdH
	DB	0afH
	DB	08eH
	DB	059H
	DB	01aH
	DB	0a2H
	DB	022H
	DB	0d0H
	DB	01dH
	DB	07aH
	DB	023H
	DB	06aH
	DB	0d5H
	DB	037H
	DB	053H
	DB	08H
	DB	06aH
	DB	0f3H
	DB	0adH
	DB	07H
	DB	09aH
	DB	04bH
	DB	084H
	DB	050H
	DB	08dH
	DB	0e5H
	DB	08H
	DB	029H
	DB	0fbH
	DB	026H
	DB	07dH
	DB	0f9H
	DB	0d5H
	DB	0cH
	DB	0d2H
	DB	06fH
	DB	02eH
	DB	0f4H
	DB	0c0H
	DB	04bH
	DB	0efH
	DB	063H
	DB	0b6H
	DB	0c5H
	DB	09aH
	DB	089H
	DB	0cdH
	DB	06H
	DB	0fdH
	DB	0faH
	DB	08cH
	DB	098H
	DB	0c5H
	DB	011H
	DB	069H
	DB	053H
	DB	076H
	DB	0f0H
	DB	07dH
	DB	072H
	DB	018H
	DB	0faH
	DB	0ebH
	DB	06dH
	DB	086H
	DB	03fH
	DB	0ddH
	DB	0b4H
	DB	0b3H
	DB	01eH
	DB	01H
	DB	0a3H
	DB	081H
	DB	037H
	DB	0e8H
	DB	01dH
	DB	040H
	DB	036H
	DB	0a2H
	DB	03eH
	DB	0b1H
	DB	0aeH
	DB	057H
	DB	077H
	DB	0c0H
	DB	040H
	DB	0cbH
	DB	037H
	DB	031H
	DB	0c8H
	DB	02aH
	DB	0c8H
	DB	043H
	DB	095H
	DB	037H
	DB	0c9H
	DB	0d4H
	DB	094H
	DB	0fdH
	DB	089H
	DB	0b2H
	DB	07eH
	DB	0acH
	DB	034H
	DB	035H
	DB	096H
	DB	0d0H
	DB	076H
	DB	0ccH
	DB	0f2H
	DB	034H
	DB	07eH
	DB	0a2H
	DB	0bH
	DB	0f6H
	DB	0e2H
	DB	04bH
	DB	042H
	DB	099H
	DB	0fcH
	DB	0bH
	DB	0c3H
	DB	0c5H
	DB	0cdH
	DB	0d9H
	DB	0fcH
	DB	097H
	DB	0aeH
	DB	091H
	DB	015H
	DB	0b7H
	DB	044H
	DB	094H
	DB	0e4H
	DB	0f8H
	DB	049H
	DB	07bH
	DB	049H
	DB	0bfH
	DB	0c7H
	DB	03dH
	DB	074H
	DB	047H
	DB	05fH
	DB	0feH
	DB	0bdH
	DB	0c1H
	DB	04bH
	DB	00H
	DB	05bH
	DB	048H
	DB	08aH
	DB	09fH
	DB	0eH
	DB	058H
	DB	079H
	DB	08bH
	DB	06fH
	DB	0a7H
	DB	01dH
	DB	04H
	DB	0dfH
	DB	0e1H
	DB	018H
	DB	0c4H
	DB	05aH
	DB	062H
	DB	0bfH
	DB	0a3H
	DB	0a1H
	DB	087H
	DB	060H
	DB	016H
	DB	04eH
	DB	03fH
	DB	016H
	DB	0cH
	DB	01H
	DB	0e0H
	DB	08bH
	DB	05dH
	DB	0a8H
	DB	016H
	DB	0fcH
	DB	0b6H
	DB	0edH
	DB	0f5H
	DB	0c1H
	DB	0dcH
	DB	01dH
	DB	0dfH
	DB	0e1H
	DB	0fcH
	DB	041H
	DB	0f9H
	DB	041H
	DB	09bH
	DB	05cH
	DB	01H
	DB	03fH
	DB	0feH
	DB	089H
	DB	020H
	DB	094H
	DB	0d7H
	DB	05fH
	DB	02aH
	DB	064H
	DB	061H
	DB	08aH
	DB	0efH
	DB	0beH
	DB	033H
	DB	086H
	DB	03bH
	DB	06aH
	DB	0f3H
	DB	0b0H
	DB	02cH
	DB	0d1H
	DB	0cdH
	DB	08bH
	DB	0b3H
	DB	04bH
	DB	0ccH
	DB	02dH
	DB	08cH
	DB	0e7H
	DB	08aH
	DB	08eH
	DB	028H
	DB	09H
	DB	097H
	DB	048H
	DB	01dH
	DB	0eeH
	DB	027H
	DB	0c7H
	DB	053H
	DB	088H
	DB	052H
	DB	0c3H
	DB	0c6H
	DB	06H
	DB	0c9H
	DB	02H
	DB	070H
	DB	0bdH
	DB	032H
	DB	01cH
	DB	08fH
	DB	01H
	DB	0a8H
	DB	0c2H
	DB	04cH
	DB	0f4H
	DB	0f0H
	DB	058H
	DB	0ddH
	DB	0faH
	DB	066H
	DB	085H
	DB	083H
	DB	0fdH
	DB	04dH
	DB	0a0H
	DB	06dH
	DB	074H
	DB	0e7H
	DB	040H
	DB	0fdH
	DB	0baH
	DB	04H
	DB	0c4H
	DB	0c0H
	DB	0cdH
	DB	047H
	DB	0b0H
	DB	0cH
	DB	079H
	DB	04cH
	DB	09bH
	DB	0f9H
	DB	0f4H
	DB	0deH
	DB	0c5H
	DB	06aH
	DB	0cfH
	DB	01fH
	DB	048H
	DB	0caH
	DB	05H
	DB	0cdH
	DB	04eH
	DB	083H
	DB	01bH
	DB	06eH
	DB	0f0H
	DB	0fH
	DB	057H
	DB	031H
	DB	0dH
	DB	012H
	DB	0b5H
	DB	052H
	DB	052H
	DB	083H
	DB	019H
	DB	082H
	DB	0fH
	DB	012H
	DB	0ceH
	DB	0abH
	DB	0dH
	DB	044H
	DB	08aH
	DB	052H
	DB	0aeH
	DB	0d9H
	DB	0f0H
	DB	0f6H
	DB	024H
	DB	0f6H
	DB	044H
	DB	072H
	DB	07aH
	DB	0deH
	DB	060H
	DB	06bH
	DB	0edH
	DB	037H
	DB	01cH
	DB	07bH
	DB	0c8H
	DB	0d1H
	DB	04dH
	DB	01bH
	DB	0d5H
	DB	0e5H
	DB	01dH
	DB	0e4H
	DB	0f7H
	DB	0ecH
	DB	010H
	DB	084H
	DB	031H
	DB	01aH
	DB	0d7H
	DB	05fH
	DB	0f3H
	DB	0c8H
	DB	0d5H
	DB	097H
	DB	03fH
	DB	01aH
	DB	0aH
	DB	0b9H
	DB	078H
	DB	0eaH
	DB	025H
	DB	0e5H
	DB	022H
	DB	0c1H
	DB	061H
	DB	0ebH
	DB	093H
	DB	02eH
	DB	086H
	DB	069H
	DB	014H
	DB	0a4H
	DB	0ceH
	DB	0dH
	DB	091H
	DB	0deH
	DB	011H
	DB	042H
	DB	0f9H
	DB	0e8H
	DB	021H
	DB	06dH
	DB	032H
	DB	0f6H
	DB	06H
	DB	071H
	DB	090H
	DB	08fH
	DB	0abH
	DB	09H
	DB	07aH
	DB	050H
	DB	0eeH
	DB	01dH
	DB	012H
	DB	0d0H
	DB	09H
	DB	0a6H
	DB	07eH
	DB	08fH
	DB	08fH
	DB	093H
	DB	0b3H
	DB	05eH
	DB	020H
	DB	045H
	DB	03eH
	DB	031H
	DB	07H
	DB	0b7H
	DB	09aH
	DB	028H
	DB	0a4H
	DB	04cH
	DB	01fH
	DB	0aaH
	DB	03dH
	DB	02fH
	DB	0baH
	DB	0e8H
	DB	038H
	DB	0b4H
	DB	03aH
	DB	0a7H
	DB	0d1H
	DB	04cH
	DB	0f7H
	DB	05aH
	DB	0f2H
	DB	0f5H
	DB	06aH
	DB	03H
	DB	089H
	DB	01eH
	DB	061H
	DB	029H
	DB	0e3H
	DB	01fH
	DB	05bH
	DB	0eaH
	DB	056H
	DB	075H
	DB	093H
	DB	0fbH
	DB	0c1H
	DB	032H
	DB	026H
	DB	0feH
	DB	062H
	DB	0e0H
	DB	0e8H
	DB	01aH
	DB	016H
	DB	0a2H
	DB	041H
	DB	0e7H
	DB	0eeH
	DB	0b8H
	DB	0c2H
	DB	062H
	DB	0afH
	DB	02dH
	DB	065H
	DB	039H
	DB	0caH
	DB	046H
	DB	0e2H
	DB	0aeH
	DB	0e5H
	DB	0bdH
	DB	01aH
	DB	03cH
	DB	033H
	DB	0adH
	DB	038H
	DB	074H
	DB	05fH
	DB	05fH
	DB	0f2H
	DB	0c1H
	DB	0bfH
	DB	05bH
	DB	0dcH
	DB	0d5H
	DB	0fdH
	DB	09dH
	DB	03eH
	DB	0edH
	DB	057H
	DB	01H
	DB	0cfH
	DB	07H
	DB	0adH
	DB	0b4H
	DB	0bfH
	DB	078H
	DB	07aH
	DB	0a2H
	DB	0a7H
	DB	060H
	DB	060H
	DB	0c1H
	DB	09dH
	DB	093H
	DB	0eeH
	DB	0d5H
	DB	087H
	DB	04eH
	DB	0b4H
	DB	07bH
	DB	090H
	DB	0f4H
	DB	0d6H
	DB	06dH
	DB	0caH
	DB	0d5H
	DB	08aH
	DB	088H
	DB	043H
	DB	0e1H
	DB	09H
	DB	092H
	DB	0e8H
	DB	0b6H
	DB	047H
	DB	029H
	DB	0afH
	DB	0c1H
	DB	0cbH
	DB	057H
	DB	023H
	DB	02dH
	DB	019H
	DB	040H
	DB	040H
	DB	087H
	DB	095H
	DB	048H
	DB	0d5H
	DB	04bH
	DB	0c3H
	DB	066H
	DB	0bfH
	DB	09aH
	DB	053H
	DB	0aH
	DB	0efH
	DB	0deH
	DB	093H
	DB	0b2H
	DB	040H
	DB	09cH
	DB	045H
	DB	0a9H
	DB	0d3H
	DB	0cH
	DB	0d2H
	DB	083H
	DB	04eH
	DB	09eH
	DB	0daH
	DB	071H
	DB	04bH
	DB	0f3H
	DB	031H
	DB	0cH
	DB	0faH
	DB	0c6H
	DB	054H
	DB	0d0H
	DB	091H
	DB	097H
	DB	0b7H
	DB	051H
	DB	032H
	DB	08aH
	DB	05cH
	DB	0a2H
	DB	069H
	DB	06fH
	DB	055H
	DB	02aH
	DB	08bH
	DB	09bH
	DB	0d3H
	DB	05fH
	DB	0a7H
	DB	0a6H
	DB	0e2H
	DB	0f5H
	DB	0c4H
	DB	0bdH
	DB	0e6H
	DB	090H
	DB	031H
	DB	018H
	DB	01cH
	DB	02cH
	DB	05fH
	DB	0efH
	DB	07dH
	DB	0f0H
	DB	087H
	DB	035H
	DB	0c2H
	DB	0b9H
	DB	0bfH
	DB	09eH
	DB	0dbH
	DB	0a9H
	DB	0eH
	DB	032H
	DB	0d3H
	DB	099H
	DB	0cdH
	DB	0a7H
	DB	0f9H
	DB	0f4H
	DB	0cdH
	DB	0dcH
	DB	06bH
	DB	012H
	DB	01bH
	DB	0d1H
	DB	022H
	DB	04cH
	DB	06aH
	DB	03eH
	DB	0f8H
	DB	0c9H
	DB	02eH
	DB	076H
	DB	03aH
	DB	0b5H
	DB	02bH
	DB	0fcH
	DB	0efH
	DB	0eaH
	DB	09bH
	DB	0cbH
	DB	014H
	DB	029H
	DB	07dH
	DB	0e7H
	DB	0c3H
	DB	0caH
	DB	0fH
	DB	03dH
	DB	0c0H
	DB	05cH
	DB	099H
	DB	0abH
	DB	0eeH
	DB	0b4H
	DB	07dH
	DB	011H
	DB	081H
	DB	067H
	DB	050H
	DB	07aH
	DB	0b0H
	DB	0fdH
	DB	070H
	DB	0ebH
	DB	034H
	DB	09bH
	DB	068H
	DB	0a3H
	DB	06H
	DB	05H
	DB	0eeH
	DB	01bH
	DB	02eH
	DB	06dH
	DB	082H
	DB	071H
	DB	038H
	DB	092H
	DB	02eH
	DB	078H
	DB	06eH
	DB	0c8H
	DB	024H
	DB	05dH
	DB	0fcH
	DB	022H
	DB	06fH
	DB	0fdH
	DB	089H
	DB	03fH
	DB	0f7H
	DB	0baH
	DB	0bcH
	DB	0e7H
	DB	0a6H
	DB	0f0H
	DB	083H
	DB	0fH
	DB	094H
	DB	08aH
	DB	093H
	DB	084H
	DB	025H
	DB	042H
	DB	071H
	DB	0a7H
	DB	033H
	DB	0a9H
	DB	0b9H
	DB	062H
	DB	023H
	DB	029H
	DB	0aaH
	DB	047H
	DB	086H
	DB	027H
	DB	0e8H
	DB	075H
	DB	0a5H
	DB	0f2H
	DB	034H
	DB	09dH
	DB	0adH
	DB	0f1H
	DB	086H
	DB	054H
	DB	0e2H
	DB	089H
	DB	0e2H
	DB	0f7H
	DB	093H
	DB	0f6H
	DB	0fbH
	DB	0b8H
	DB	039H
	DB	06dH
	DB	061H
	DB	06cH
	DB	017H
	DB	09aH
	DB	04eH
	DB	03aH
	DB	0c3H
	DB	0f8H
	DB	02H
	DB	0caH
	DB	0a0H
	DB	0eaH
	DB	0bfH
	DB	046H
	DB	0ddH
	DB	0f4H
	DB	0e3H
	DB	0bH
	DB	0e6H
	DB	0e9H
	DB	0deH
	DB	049H
	DB	0f3H
	DB	0c2H
	DB	041H
	DB	087H
	DB	039H
	DB	03dH
	DB	041H
	DB	0f1H
	DB	02aH
	DB	022H
	DB	05eH
	DB	042H
	DB	03cH
	DB	02dH
	DB	0fbH
	DB	01H
	DB	0a5H
	DB	0fdH
	DB	04bH
	DB	046H
	DB	069H
	DB	08aH
	DB	0cH
	DB	0c6H
	DB	07fH
	DB	070H
	DB	0d2H
	DB	0e5H
	DB	05aH
	DB	0b1H
	DB	0afH
	DB	0cdH
	DB	0f3H
	DB	070H
	DB	056H
	DB	0acH
	DB	02eH
	DB	017H
	DB	09eH
	DB	058H
	DB	0b8H
	DB	07dH
	DB	09aH
	DB	0f4H
	DB	0aaH
	DB	097H
	DB	075H
	DB	0cfH
	DB	015H
	DB	040H
	DB	017H
	DB	0fdH
	DB	0cbH
	DB	023H
	DB	0c5H
	DB	0caH
	DB	013H
	DB	018H
	DB	031H
	DB	0edH
	DB	049H
	DB	0e0H
	DB	0bbH
	DB	0bdH
	DB	051H
	DB	012H
	DB	06aH
	DB	07fH
	DB	029H
	DB	0aH
	DB	0d8H
	DB	061H
	DB	087H
	DB	0f2H
	DB	057H
	DB	0b1H
	DB	0aH
	DB	04cH
	DB	081H
	DB	09fH
	DB	08dH
	DB	018H
	DB	09dH
	DB	0d8H
	DB	0bbH
	DB	063H
	DB	0a3H
	DB	0ceH
	DB	0faH
	DB	0d4H
	DB	0bcH
	DB	045H
	DB	035H
	DB	079H
	DB	082H
	DB	087H
	DB	08bH
	DB	0ecH
	DB	086H
	DB	035H
	DB	0f6H
	DB	0deH
	DB	096H
	DB	0fdH
	DB	0d2H
	DB	06dH
	DB	0afH
	DB	05cH
	DB	0baH
	DB	032H
	DB	0fbH
	DB	0c7H
	DB	04aH
	DB	09aH
	DB	0a0H
	DB	06H
	DB	07dH
	DB	0c3H
	DB	0d5H
	DB	0f8H
	DB	019H
	DB	092H
	DB	03eH
	DB	0cdH
	DB	08bH
	DB	0c0H
	DB	0d4H
	DB	018H
	DB	02dH
	DB	05cH
	DB	0ccH
	DB	025H
	DB	0baH
	DB	063H
	DB	0a2H
	DB	08dH
	DB	051H
	DB	053H
	DB	06aH
	DB	08bH
	DB	05H
	DB	066H
	DB	053H
	DB	04fH
	DB	080H
	DB	073H
	DB	0d5H
	DB	0feH
	DB	0b6H
	DB	02bH
	DB	0f7H
	DB	04fH
	DB	03dH
	DB	0b5H
	DB	01eH
	DB	0c9H
	DB	0f5H
	DB	0f2H
	DB	061H
	DB	023H
	DB	0ceH
	DB	02eH
	DB	0c7H
	DB	08aH
	DB	011H
	DB	0eaH
	DB	097H
	DB	062H
	DB	03eH
	DB	02H
	DB	06dH
	DB	0c2H
	DB	0e8H
	DB	040H
	DB	091H
	DB	069H
	DB	033H
	DB	067H
	DB	0e7H
	DB	0eaH
	DB	092H
	DB	05fH
	DB	0b9H
	DB	050H
	DB	015H
	DB	0d7H
	DB	01aH
	DB	08aH
	DB	04bH
	DB	07bH
	DB	02eH
	DB	01aH
	DB	0a9H
	DB	075H
	DB	024H
	DB	03aH
	DB	060H
	DB	0bcH
	DB	01dH
	DB	01eH
	DB	03eH
	DB	08aH
	DB	0e0H
	DB	027H
	DB	0cbH
	DB	073H
	DB	091H
	DB	0feH
	DB	05aH
	DB	0f8H
	DB	069H
	DB	0edH
	DB	059H
	DB	024H
	DB	0bdH
	DB	06eH
	DB	07bH
	DB	0d7H
	DB	079H
	DB	046H
	DB	0d2H
	DB	0a7H
	DB	061H
	DB	0fbH
	DB	01dH
	DB	05H
	DB	036H
	DB	07eH
	DB	041H
	DB	053H
	DB	01cH
	DB	080H
	DB	0deH
	DB	0fdH
	DB	0a7H
	DB	02aH
	DB	0f0H
	DB	0b8H
	DB	0a8H
	DB	04bH
	DB	0b2H
	DB	013H
	DB	0b8H
	DB	0cH
	DB	0b6H
	DB	076H
	DB	0f9H
	DB	032H
	DB	04eH
	DB	073H
	DB	0f8H
	DB	021H
	DB	09aH
	DB	05aH
	DB	01dH
	DB	038H
	DB	0deH
	DB	0d3H
	DB	036H
	DB	021H
	DB	027H
	DB	052H
	DB	0a1H
	DB	085H
	DB	050H
	DB	0c8H
	DB	02fH
	DB	041H
	DB	02H
	DB	0d8H
	DB	0dH
	DB	034H
	DB	0ebH
	DB	0c5H
	DB	0bfH
	DB	022H
	DB	03dH
	DB	039H
	DB	0d3H
	DB	0bH
	DB	02dH
	DB	0ccH
	DB	0acH
	DB	0c7H
	DB	0a6H
	DB	0c9H
	DB	00H
	DB	086H
	DB	01dH
	DB	0b5H
	DB	027H
	DB	0c4H
	DB	09H
	DB	0c8H
	DB	04aH
	DB	0d8H
	DB	011H
	DB	07aH
	DB	09aH
	DB	092H
	DB	0d2H
	DB	0a7H
	DB	046H
	DB	03eH
	DB	06dH
	DB	06H
	DB	060H
	DB	0aaH
	DB	040H
	DB	034H
	DB	036H
	DB	0ecH
	DB	081H
	DB	0e2H
	DB	034H
	DB	028H
	DB	02cH
	DB	0b4H
	DB	0aeH
	DB	04aH
	DB	06aH
	DB	055H
	DB	0fH
	DB	073H
	DB	01eH
	DB	0d8H
	DB	04dH
	DB	0afH
	DB	0d2H
	DB	0e7H
	DB	0c1H
	DB	0a5H
	DB	0fH
	DB	09H
	DB	0e3H
	DB	07cH
	DB	0fH
	DB	044H
	DB	0a7H
	DB	0ceH
	DB	0f8H
	DB	0ddH
	DB	03bH
	DB	07aH
	DB	0c0H
	DB	070H
	DB	0a2H
	DB	06cH
	DB	025H
	DB	0d1H
	DB	0b6H
	DB	08fH
	DB	027H
	DB	045H
	DB	04H
	DB	0c5H
	DB	01fH
	DB	0d0H
	DB	0f4H
	DB	0f1H
	DB	038H
	DB	0b6H
	DB	018H
	DB	047H
	DB	03fH
	DB	0fbH
	DB	0c3H
	DB	04fH
	DB	0c0H
	DB	0eaH
	DB	09dH
	DB	039H
	DB	048H
	DB	0d9H
	DB	0b3H
	DB	09H
	DB	0c9H
	DB	0d5H
	DB	0f5H
	DB	0eeH
	DB	027H
	DB	0acH
	DB	0fdH
	DB	0ceH
	DB	0f2H
	DB	081H
	DB	014H
	DB	091H
	DB	052H
	DB	088H
	DB	03H
	DB	0aH
	DB	03fH
	DB	01bH
	DB	051H
	DB	07fH
	DB	097H
	DB	095H
	DB	04eH
	DB	0d7H
	DB	080H
	DB	06bH
	DB	011H
	DB	0c9H
	DB	0c4H
	DB	044H
	DB	052H
	DB	08eH
	DB	099H
	DB	048H
	DB	0fcH
	DB	041H
	DB	075H
	DB	0fbH
	DB	010H
	DB	0e7H
	DB	07dH
	DB	0a3H
	DB	079H
	DB	050H
	DB	02cH
	DB	0fbH
	DB	05aH
	DB	0eaH
	DB	097H
	DB	02cH
	DB	0e9H
	DB	0aeH
	DB	0c1H
	DB	0b7H
	DB	086H
	DB	0c1H
	DB	024H
	DB	017H
	DB	0bH
	DB	068H
	DB	0daH
	DB	0ddH
	DB	0f7H
	DB	074H
	DB	0a5H
	DB	074H
	DB	0b5H
	DB	01bH
	DB	070H
	DB	045H
	DB	082H
	DB	06eH
	DB	0e8H
	DB	07bH
	DB	0beH
	DB	015H
	DB	078H
	DB	019H
	DB	080H
	DB	08fH
	DB	0c4H
	DB	06aH
	DB	03eH
	DB	086H
	DB	0a2H
	DB	0c4H
	DB	0c8H
	DB	0c6H
	DB	05bH
	DB	0d3H
	DB	0aeH
	DB	036H
	DB	031H
	DB	026H
	DB	0aaH
	DB	0d7H
	DB	09bH
	DB	0e0H
	DB	072H
	DB	0cH
	DB	026H
	DB	075H
	DB	07aH
	DB	010H
	DB	0f0H
	DB	0b8H
	DB	0a4H
	DB	0e8H
	DB	052H
	DB	025H
	DB	078H
	DB	017H
	DB	010H
	DB	0b6H
	DB	01eH
	DB	0b2H
	DB	0faH
	DB	0e6H
	DB	0f8H
	DB	056H
	DB	03aH
	DB	027H
	DB	08cH
	DB	06cH
	DB	04eH
	DB	0b7H
	DB	0c3H
	DB	0e9H
	DB	098H
	DB	0b5H
	DB	075H
	DB	0beH
	DB	02bH
	DB	070H
	DB	04eH
	DB	01dH
	DB	029H
	DB	0f3H
	DB	06H
	DB	07bH
	DB	098H
	DB	07fH
	DB	013H
	DB	028H
	DB	036H
	DB	031H
	DB	05aH
	DB	032H
	DB	097H
	DB	0d2H
	DB	08H
	DB	0d1H
	DB	0faH
	DB	095H
	DB	0bdH
	DB	0c8H
	DB	0ccH
	DB	081H
	DB	0b2H
	DB	065H
	DB	038H
	DB	028H
	DB	024H
	DB	063H
	DB	018H
	DB	0f2H
	DB	00H
	DB	042H
	DB	066H
	DB	07H
	DB	03dH
	DB	07eH
	DB	06H
	DB	0cfH
	DB	0a7H
	DB	0bbH
	DB	01H
	DB	081H
	DB	06dH
	DB	098H
	DB	0d4H
	DB	076H
	DB	0eaH
	DB	04fH
	DB	08bH
	DB	0a8H
	DB	018H
	DB	058H
	DB	02bH
	DB	0caH
	DB	0bdH
	DB	0e2H
	DB	072H
	DB	061H
	DB	0c5H
	DB	08bH
	DB	054H
	DB	0c6H
	DB	04dH
	DB	03aH
	DB	0cdH
	DB	08aH
	DB	0b9H
	DB	053H
	DB	05bH
	DB	0e0H
	DB	0fH
	DB	0dbH
	DB	0e1H
	DB	07dH
	DB	0f4H
	DB	0b6H
	DB	073H
	DB	0dfH
	DB	06H
	DB	0feH
	DB	088H
	DB	01eH
	DB	057H
	DB	0b3H
	DB	068H
	DB	094H
	DB	016H
	DB	0dbH
	DB	0f5H
	DB	0dcH
	DB	067H
	DB	0caH
	DB	0a3H
	DB	034H
	DB	05H
	DB	0f0H
	DB	0beH
	DB	03eH
	DB	044H
	DB	099H
	DB	01fH
	DB	0d2H
	DB	0f5H
	DB	02H
	DB	050H
	DB	0eaH
	DB	038H
	DB	0c3H
	DB	0caH
	DB	03fH
	DB	0c2H
	DB	0d2H
	DB	05dH
	DB	099H
	DB	087H
	DB	0c6H
	DB	02eH
	DB	09dH
	DB	022H
	DB	0a4H
	DB	0f9H
	DB	09H
	DB	06fH
	DB	09dH
	DB	03dH
	DB	0f3H
	DB	08eH
	DB	07bH
	DB	033H
	DB	052H
	DB	095H
	DB	0d1H
	DB	026H
	DB	08bH
	DB	0d3H
	DB	076H
	DB	0f5H
	DB	08cH
	DB	0baH
	DB	0c0H
	DB	0cbH
	DB	0fcH
	DB	093H
	DB	0a8H
	DB	097H
	DB	09aH
	DB	0eeH
	DB	045H
	DB	0b8H
	DB	011H
	DB	0e9H
	DB	0b2H
	DB	099H
	DB	0d8H
	DB	0d0H
	DB	0d6H
	DB	0cdH
	DB	05fH
	DB	053H
	DB	080H
	DB	032H
	DB	068H
	DB	052H
	DB	058H
	DB	0f3H
	DB	0a6H
	DB	04eH
	DB	0e9H
	DB	033H
	DB	09H
	DB	02aH
	DB	07eH
	DB	086H
	DB	03dH
	DB	027H
	DB	09dH
	DB	058H
	DB	096H
	DB	0e2H
	DB	090H
	DB	027H
	DB	04dH
	DB	0c2H
	DB	0c1H
	DB	0a5H
	DB	093H
	DB	098H
	DB	0f2H
	DB	073H
	DB	06bH
	DB	073H
	DB	0a5H
	DB	0d3H
	DB	046H
	DB	0fdH
	DB	047H
	DB	06cH
	DB	04cH
	DB	0b0H
	DB	01fH
	DB	0d5H
	DB	05aH
	DB	09dH
	DB	0dbH
	DB	018H
	DB	044H
	DB	079H
	DB	070H
	DB	0daH
	DB	0dbH
	DB	080H
	DB	082H
	DB	029H
	DB	043H
	DB	044H
	DB	0cfH
	DB	0d7H
	DB	05cH
	DB	0c2H
	DB	04bH
	DB	0c8H
	DB	0b6H
	DB	0f0H
	DB	01cH
	DB	07cH
	DB	06eH
	DB	0e3H
	DB	0e8H
	DB	03aH
	DB	094H
	DB	08H
	DB	08fH
	DB	06fH
	DB	025H
	DB	06bH
	DB	087H
	DB	0e8H
	DB	0e4H
	DB	077H
	DB	044H
	DB	041H
	DB	0f7H
	DB	0c6H
	DB	06aH
	DB	03bH
	DB	0bH
	DB	0b9H
	DB	092H
	DB	067H
	DB	0fcH
	DB	05dH
	DB	0afH
	DB	033H
	DB	0cdH
	DB	04cH
	DB	0afH
	DB	03cH
	DB	030H
	DB	018H
	DB	077H
	DB	044H
	DB	09fH
	DB	07H
	DB	0b3H
	DB	0c4H
	DB	0f2H
	DB	0baH
	DB	02dH
	DB	0d7H
	DB	032H
	DB	071H
	DB	019H
	DB	0a9H
	DB	038H
	DB	04H
	DB	065H
	DB	043H
	DB	03dH
	DB	0f7H
	DB	02bH
	DB	0b9H
	DB	0d5H
	DB	0daH
	DB	0ecH
	DB	0a3H
	DB	027H
	DB	01cH
	DB	0e0H
	DB	0d6H
	DB	034H
	DB	0d7H
	DB	01cH
	DB	053H
	DB	05eH
	DB	04fH
	DB	097H
	DB	051H
	DB	0bH
	DB	0c5H
	DB	0a9H
	DB	0bcH
	DB	037H
	DB	042H
	DB	0e6H
	DB	0efH
	DB	0c5H
	DB	04cH
	DB	033H
	DB	04H
	DB	0c3H
	DB	0ddH
	DB	03dH
	DB	099H
	DB	039H
	DB	0aaH
	DB	03eH
	DB	0dfH
	DB	0c6H
	DB	09eH
	DB	0b7H
	DB	07bH
	DB	076H
	DB	053H
	DB	0ceH
	DB	054H
	DB	0a2H
	DB	067H
	DB	0a6H
	DB	02dH
	DB	02dH
	DB	0cfH
	DB	06aH
	DB	0e3H
	DB	012H
	DB	051H
	DB	0d3H
	DB	0d8H
	DB	01dH
	DB	087H
	DB	05cH
	DB	060H
	DB	065H
	DB	099H
	DB	07aH
	DB	01eH
	DB	044H
	DB	0b8H
	DB	0feH
	DB	08bH
	DB	0d6H
	DB	0b6H
	DB	07H
	DB	0ccH
	DB	0aH
	DB	055H
	DB	021H
	DB	02cH
	DB	0bcH
	DB	047H
	DB	0d9H
	DB	069H
	DB	017H
	DB	044H
	DB	0cdH
	DB	0a9H
	DB	015H
	DB	0a1H
	DB	02H
	DB	032H
	DB	029H
	DB	0ddH
	DB	092H
	DB	0fH
	DB	077H
	DB	0dH
	DB	02dH
	DB	03cH
	DB	045H
	DB	02cH
	DB	047H
	DB	09bH
	DB	062H
	DB	04eH
	DB	068H
	DB	0ebH
	DB	023H
	DB	0aH
	DB	098H
	DB	0e0H
	DB	051H
	DB	072H
	DB	0c9H
	DB	0e8H
	DB	0b6H
	DB	097H
	DB	012H
	DB	0cbH
	DB	0b9H
	DB	014H
	DB	07dH
	DB	062H
	DB	0f1H
	DB	08fH
	DB	0f0H
	DB	0e8H
	DB	01dH
	DB	09eH
	DB	0a4H
	DB	062H
	DB	04aH
	DB	0ebH
	DB	07eH
	DB	0adH
	DB	0b9H
	DB	0e6H
	DB	019H
	DB	0ddH
	DB	0f0H
	DB	0b1H
	DB	0beH
	DB	0c2H
	DB	0a3H
	DB	08H
	DB	02bH
	DB	05aH
	DB	020H
	DB	03dH
	DB	0a5H
	DB	059H
	DB	0d0H
	DB	0a2H
	DB	0bbH
	DB	042H
	DB	033H
	DB	0adH
	DB	02bH
	DB	050H
	DB	04cH
	DB	0d0H
	DB	032H
	DB	096H
	DB	03cH
	DB	0b0H
	DB	0c3H
	DB	0f6H
	DB	018H
	DB	0ddH
	DB	0d4H
	DB	088H
	DB	0fH
	DB	013H
	DB	04bH
	DB	0b3H
	DB	01bH
	DB	0f5H
	DB	08dH
	DB	0baH
	DB	0b2H
	DB	0b3H
	DB	014H
	DB	083H
	DB	056H
	DB	0d0H
	DB	0c5H
	DB	09H
	DB	0fdH
	DB	071H
	DB	0d8H
	DB	0c9H
	DB	0c1H
	DB	08bH
	DB	060H
	DB	0fdH
	DB	03cH
	DB	0a4H
	DB	0f4H
	DB	0d3H
	DB	02H
	DB	0c9H
	DB	05dH
	DB	011H
	DB	0dcH
	DB	028H
	DB	044H
	DB	078H
	DB	01fH
	DB	0d2H
	DB	033H
	DB	0d1H
	DB	06H
	DB	048H
	DB	0d5H
	DB	05cH
	DB	098H
	DB	09bH
	DB	0e5H
	DB	016H
	DB	08cH
	DB	03eH
	DB	0dfH
	DB	04eH
	DB	0c9H
	DB	0bfH
	DB	04dH
	DB	086H
	DB	064H
	DB	042H
	DB	05aH
	DB	066H
	DB	0dH
	DB	0b7H
	DB	0f7H
	DB	069H
	DB	060H
	DB	03cH
	DB	0e1H
	DB	07fH
	DB	0fH
	DB	016H
	DB	0d0H
	DB	015H
	DB	0ddH
	DB	0a6H
	DB	0f1H
	DB	076H
	DB	0c2H
	DB	057H
	DB	08cH
	DB	04fH
	DB	095H
	DB	0ebH
	DB	09eH
	DB	0dfH
	DB	0abH
	DB	0ebH
	DB	066H
	DB	011H
	DB	0adH
	DB	0c0H
	DB	0f6H
	DB	0baH
	DB	0f8H
	DB	0eeH
	DB	0a4H
	DB	059H
	DB	02cH
	DB	086H
	DB	058H
	DB	0baH
	DB	09cH
	DB	029H
	DB	050H
	DB	0f9H
	DB	050H
	DB	0c1H
	DB	0efH
	DB	013H
	DB	019H
	DB	0fbH
	DB	0e1H
	DB	02eH
	DB	0e7H
	DB	080H
	DB	0eH
	DB	094H
	DB	0ebH
	DB	074H
	DB	025H
	DB	01aH
	DB	0b5H
	DB	01cH
	DB	054H
	DB	02eH
	DB	08bH
	DB	0f8H
	DB	07H
	DB	0b7H
	DB	080H
	DB	05fH
	DB	0f1H
	DB	09cH
	DB	08H
	DB	042H
	DB	097H
	DB	058H
	DB	083H
	DB	07H
	DB	0eaH
	DB	09cH
	DB	04H
	DB	0cdH
	DB	04bH
	DB	0ebH
	DB	0cdH
	DB	059H
	DB	00H
	DB	03aH
	DB	04eH
	DB	0a4H
	DB	054H
	DB	083H
	DB	041H
	DB	0a8H
	DB	0b1H
	DB	0ccH
	DB	022H
	DB	0b8H
	DB	04H
	DB	0a2H
	DB	018H
	DB	0f5H
	DB	03fH
	DB	09fH
	DB	0b8H
	DB	056H
	DB	0f8H
	DB	03cH
	DB	05eH
	DB	0e3H
	DB	059H
	DB	0e1H
	DB	031H
	DB	0a4H
	DB	04dH
	DB	07fH
	DB	07dH
	DB	04eH
	DB	0b9H
	DB	0cbH
	DB	072H
	DB	08dH
	DB	04fH
	DB	0b3H
	DB	0b5H
	DB	080H
	DB	080H
	DB	0d7H
	DB	039H
	DB	084H
	DB	07aH
	DB	0d0H
	DB	0faH
	DB	03aH
	DB	071H
	DB	033H
	DB	010H
	DB	0e9H
	DB	06fH
	DB	0edH
	DB	04dH
	DB	048H
	DB	0cfH
	DB	07fH
	DB	06cH
	DB	01eH
	DB	07eH
	DB	0eaH
	DB	0ebH
	DB	038H
	DB	036H
	DB	05eH
	DB	045H
	DB	06H
	DB	013H
	DB	0faH
	DB	086H
	DB	013H
	DB	0d3H
	DB	040H
	DB	018H
	DB	0cdH
	DB	090H
	DB	013H
	DB	08H
	DB	081H
	DB	046H
	DB	019H
	DB	06bH
	DB	035H
	DB	07H
	DB	039H
	DB	0fdH
	DB	057H
	DB	038H
	DB	06aH
	DB	075H
	DB	0b6H
	DB	0d4H
	DB	061H
	DB	0eeH
	DB	0cH
	DB	03fH
	DB	034H
	DB	012H
	DB	0d1H
	DB	0aeH
	DB	018H
	DB	0e5H
	DB	082H
	DB	058H
	DB	0fdH
	DB	051H
	DB	0e9H
	DB	090H
	DB	0d8H
	DB	0eaH
	DB	056H
	DB	071H
	DB	0d6H
	DB	0bH
	DB	0f8H
	DB	010H
	DB	088H
	DB	050H
	DB	048H
	DB	0f3H
	DB	045H
	DB	0feH
	DB	0c8H
	DB	0a6H
	DB	06dH
	DB	054H
	DB	065H
	DB	021H
	DB	0e5H
	DB	038H
	DB	0cfH
	DB	0feH
	DB	09dH
	DB	0d2H
	DB	057H
	DB	01bH
	DB	024H
	DB	0c0H
	DB	0abH
	DB	07cH
	DB	02cH
	DB	081H
	DB	0eeH
	DB	03H
	DB	0cH
	DB	0e7H
	DB	013H
	DB	095H
	DB	0b7H
	DB	05bH
	DB	089H
	DB	0fcH
	DB	0d9H
	DB	0d1H
	DB	023H
	DB	0c6H
	DB	0a6H
	DB	088H
	DB	0e7H
	DB	08cH
	DB	0c0H
	DB	037H
	DB	0bH
	DB	0ddH
	DB	0aH
	DB	063H
	DB	0f8H
	DB	0adH
	DB	0a3H
	DB	024H
	DB	02bH
	DB	0cfH
	DB	0a5H
	DB	01aH
	DB	0d2H
	DB	032H
	DB	081H
	DB	065H
	DB	0c7H
	DB	039H
	DB	040H
	DB	0d0H
	DB	036H
	DB	01aH
	DB	022H
	DB	059H
	DB	0e0H
	DB	0c8H
	DB	0e1H
	DB	048H
	DB	0d5H
	DB	023H
	DB	080H
	DB	0e0H
	DB	080H
	DB	08aH
	DB	0c3H
	DB	07aH
	DB	0b8H
	DB	0e7H
	DB	09eH
	DB	0e3H
	DB	037H
	DB	0c4H
	DB	0fdH
	DB	08aH
	DB	0f6H
	DB	07fH
	DB	0efH
	DB	03eH
	DB	038H
	DB	031H
	DB	0fH
	DB	06eH
	DB	0caH
	DB	031H
	DB	0c7H
	DB	02cH
	DB	07aH
	DB	029H
	DB	074H
	DB	050H
	DB	0cbH
	DB	0f4H
	DB	0b0H
	DB	04dH
	DB	00H
	DB	075H
	DB	047H
	DB	038H
	DB	05dH
	DB	065H
	DB	01cH
	DB	014H
	DB	02aH
	DB	099H
	DB	09eH
	DB	0a0H
	DB	019H
	DB	08fH
	DB	0deH
	DB	0d0H
	DB	040H
	DB	06dH
	DB	03fH
	DB	0bH
	DB	09fH
	DB	086H
	DB	037H
	DB	099H
	DB	02fH
	DB	02cH
	DB	0e9H
	DB	07bH
	DB	0a0H
	DB	01aH
	DB	0c8H
	DB	020H
	DB	08fH
	DB	08fH
	DB	058H
	DB	06cH
	DB	0f4H
	DB	074H
	DB	01H
	DB	09fH
	DB	0eH
	DB	09fH
	DB	0bfH
	DB	0a6H
	DB	0aeH
	DB	09fH
	DB	077H
	DB	0eeH
	DB	0dH
	DB	0b6H
	DB	07aH
	DB	02cH
	DB	0bcH
	DB	031H
	DB	0c5H
	DB	0ecH
	DB	05dH
	DB	02fH
	DB	068H
	DB	0feH
	DB	04aH
	DB	0b0H
	DB	01fH
	DB	059H
	DB	040H
	DB	078H
	DB	046H
	DB	0b4H
	DB	0ecH
	DB	047H
	DB	054H
	DB	07bH
	DB	066H
	DB	094H
	DB	022H
	DB	016H
	DB	034H
	DB	09aH
	DB	05H
	DB	0c0H
	DB	0d0H
	DB	0feH
	DB	06dH
	DB	0eH
	DB	031H
	DB	033H
	DB	0faH
	DB	08eH
	DB	0e2H
	DB	0e2H
	DB	08dH
	DB	0acH
	DB	093H
	DB	02dH
	DB	085H
	DB	053H
	DB	0a5H
	DB	04bH
	DB	08H
	DB	012H
	DB	012H
	DB	0dcH
	DB	08dH
	DB	079H
	DB	0f0H
	DB	0b0H
	DB	08fH
	DB	0a4H
	DB	0caH
	DB	014H
	DB	065H
	DB	01bH
	DB	014H
	DB	052H
	DB	029H
	DB	0c4H
	DB	086H
	DB	0a3H
	DB	053H
	DB	0e8H
	DB	086H
	DB	061H
	DB	095H
	DB	099H
	DB	08eH
	DB	09aH
	DB	0ecH
	DB	0b3H
	DB	0e6H
	DB	075H
	DB	0c5H
	DB	0f8H
	DB	0d1H
	DB	054H
	DB	0f1H
	DB	0c2H
	DB	084H
	DB	01H
	DB	067H
	DB	0ceH
	DB	016H
	DB	04cH
	DB	069H
	DB	0a9H
	DB	09fH
	DB	093H
	DB	06eH
	DB	0a5H
	DB	0b6H
	DB	041H
	DB	08eH
	DB	03eH
	DB	022H
	DB	0a3H
	DB	0d7H
	DB	0b0H
	DB	0bdH
	DB	045H
	DB	0e3H
	DB	0a4H
	DB	0baH
	DB	0aaH
	DB	01eH
	DB	0cH
	DB	07eH
	DB	08fH
	DB	0ceH
	DB	03H
	DB	091H
	DB	0b5H
	DB	051H
	DB	0a7H
	DB	02H
	DB	0baH
	DB	0d0H
	DB	021H
	DB	0cdH
	DB	0beH
	DB	0c6H
	DB	05H
	DB	00H
	DB	0d4H
	DB	043H
	DB	023H
	DB	078H
	DB	09aH
	DB	053H
	DB	037H
	DB	05fH
	DB	038H
	DB	05bH
	DB	099H
	DB	062H
	DB	0f8H
	DB	0a5H
	DB	0e0H
	DB	089H
	DB	0f3H
	DB	063H
	DB	01bH
	DB	0a9H
	DB	0b4H
	DB	042H
	DB	02cH
	DB	0eeH
	DB	013H
	DB	04dH
	DB	03dH
	DB	0d1H
	DB	015H
	DB	042H
	DB	051H
	DB	0e9H
	DB	05H
	DB	074H
	DB	0e2H
	DB	09fH
	DB	048H
	DB	099H
	DB	07fH
	DB	00H
	DB	074H
	DB	019H
	DB	062H
	DB	06eH
	DB	0bfH
	DB	043H
	DB	077H
	DB	033H
	DB	026H
	DB	092H
	DB	05dH
	DB	0daH
	DB	054H
	DB	089H
	DB	049H
	DB	067H
	DB	056H
	DB	086H
	DB	0b8H
	DB	0eaH
	DB	048H
	DB	0aH
	DB	055H
	DB	04dH
	DB	0feH
	DB	038H
	DB	06dH
	DB	0c6H
	DB	051H
	DB	0ecH
	DB	0c6H
	DB	0c5H
	DB	06H
	DB	029H
	DB	0b3H
	DB	045H
	DB	0ebH
	DB	02bH
	DB	079H
	DB	012H
	DB	03dH
	DB	0d6H
	DB	06cH
	DB	091H
	DB	060H
	DB	0b5H
	DB	078H
	DB	036H
	DB	0bcH
	DB	031H
	DB	022H
	DB	05H
	DB	0bbH
	DB	077H
	DB	053H
	DB	03aH
	DB	02fH
	DB	040H
	DB	01H
	DB	00H
	DB	02dH
	DB	0c7H
	DB	0c5H
	DB	033H
	DB	070H
	DB	0f9H
	DB	079H
	DB	05cH
	DB	0a4H
	DB	0f2H
	DB	06eH
	DB	062H
	DB	049H
	DB	05aH
	DB	073H
	DB	029H
	DB	010H
	DB	0ecH
	DB	05fH
	DB	04cH
	DB	09dH
	DB	01H
	DB	0d1H
	DB	0d8H
	DB	078H
	DB	025H
	DB	013H
	DB	027H
	DB	0e4H
	DB	093H
	DB	027H
	DB	012H
	DB	05bH
	DB	06dH
	DB	0c4H
	DB	04bH
	DB	067H
	DB	03eH
	DB	0a7H
	DB	08bH
	DB	0b0H
	DB	095H
	DB	0edH
	DB	079H
	DB	0efH
	DB	062H
	DB	0a2H
	DB	080H
	DB	0ceH
	DB	03H
	DB	04cH
	DB	0ebH
	DB	04H
	DB	01eH
	DB	045H
	DB	0fcH
	DB	0c2H
	DB	0d7H
	DB	024H
	DB	0a7H
	DB	06cH
	DB	0cbH
	DB	0b9H
	DB	047H
	DB	039H
	DB	07fH
	DB	093H
	DB	020H
	DB	03dH
	DB	0baH
	DB	0abH
	DB	06eH
	DB	051H
	DB	01aH
	DB	0e7H
	DB	0c0H
	DB	0fbH
	DB	0bH
	DB	0c0H
	DB	0caH
	DB	0eH
	DB	0eH
	DB	036H
	DB	091H
	DB	02cH
	DB	0faH
	DB	0eH
	DB	06fH
	DB	0d3H
	DB	0b2H
	DB	017H
	DB	0bfH
	DB	07eH
	DB	051H
	DB	07H
	DB	037H
	DB	050H
	DB	09aH
	DB	057H
	DB	08dH
	DB	056H
	DB	03H
	DB	07bH
	DB	027H
	DB	01dH
	DB	064H
	DB	0e7H
	DB	019H
	DB	06fH
	DB	029H
	DB	063H
	DB	0fcH
	DB	0b6H
	DB	01aH
	DB	0eH
	DB	0e2H
	DB	094H
	DB	09cH
	DB	0d1H
	DB	068H
	DB	04fH
	DB	0e9H
	DB	028H
	DB	04dH
	DB	03bH
	DB	030H
	DB	084H
	DB	0bH
	DB	04aH
	DB	0dbH
	DB	098H
	DB	020H
	DB	05eH
	DB	094H
	DB	047H
	DB	0fbH
	DB	0f8H
	DB	0afH
	DB	094H
	DB	0e7H
	DB	0d8H
	DB	078H
	DB	064H
	DB	08fH
	DB	012H
	DB	0f1H
	DB	0f1H
	DB	0a6H
	DB	08eH
	DB	0c4H
	DB	08fH
	DB	0ddH
	DB	02eH
	DB	0b7H
	DB	02bH
	DB	0e8H
	DB	067H
	DB	02fH
	DB	0f3H
	DB	032H
	DB	08aH
	DB	0cH
	DB	052H
	DB	0e9H
	DB	0a0H
	DB	09aH
	DB	065H
	DB	099H
	DB	04aH
	DB	0f9H
	DB	01H
	DB	0a2H
	DB	0f1H
	DB	0e4H
	DB	0b1H
	DB	04H
	DB	0d7H
	DB	0a3H
	DB	02bH
	DB	066H
	DB	0e7H
	DB	0baH
	DB	0c4H
	DB	016H
	DB	0f1H
	DB	06fH
	DB	07eH
	DB	0d9H
	DB	09fH
	DB	072H
	DB	0cH
	DB	02aH
	DB	07fH
	DB	05eH
	DB	093H
	DB	020H
	DB	078H
	DB	0f8H
	DB	03aH
	DB	042H
	DB	073H
	DB	0baH
	DB	0e4H
	DB	0e4H
	DB	0a0H
	DB	096H
	DB	069H
	DB	0f7H
	DB	0baH
	DB	094H
	DB	0ddH
	DB	0a2H
	DB	04fH
	DB	0a2H
	DB	039H
	DB	041H
	DB	092H
	DB	0b7H
	DB	01bH
	DB	032H
	DB	02bH
	DB	0a6H
	DB	0dbH
	DB	02aH
	DB	06H
	DB	0efH
	DB	0c9H
	DB	0fdH
	DB	068H
	DB	04H
	DB	041H
	DB	05bH
	DB	03fH
	DB	0a5H
	DB	041H
	DB	05fH
	DB	03dH
	DB	0aaH
	DB	057H
	DB	077H
	DB	0beH
	DB	035H
	DB	01aH
	DB	0eH
	DB	058H
	DB	0d2H
	DB	0ceH
	DB	0eaH
	DB	08bH
	DB	06aH
	DB	09cH
	DB	036H
	DB	011H
	DB	0f7H
	DB	0dfH
	DB	096H
	DB	0e7H
	DB	0a9H
	DB	095H
	DB	051H
	DB	02eH
	DB	0d6H
	DB	0acH
	DB	06dH
	DB	0fbH
	DB	06dH
	DB	0ccH
	DB	0b8H
	DB	097H
	DB	024H
	DB	030H
	DB	056H
	DB	0d8H
	DB	0caH
	DB	0e3H
	DB	031H
	DB	09dH
	DB	0b3H
	DB	09bH
	DB	0a8H
	DB	01eH
	DB	038H
	DB	05eH
	DB	0aeH
	DB	0b0H
	DB	03eH
	DB	046H
	DB	098H
	DB	0e8H
	DB	0dbH
	DB	069H
	DB	017H
	DB	032H
	DB	096H
	DB	04H
	DB	02eH
	DB	04H
	DB	0d0H
	DB	067H
	DB	01cH
	DB	074H
	DB	097H
	DB	072H
	DB	0ccH
	DB	062H
	DB	057H
	DB	07eH
	DB	080H
	DB	08aH
	DB	01aH
	DB	029H
	DB	028H
	DB	0d2H
	DB	088H
	DB	0d6H
	DB	083H
	DB	0c6H
	DB	01dH
	DB	09bH
	DB	02fH
	DB	078H
	DB	06H
	DB	0c5H
	DB	02aH
	DB	09cH
	DB	0c9H
	DB	0d8H
	DB	020H
	DB	01aH
	DB	040H
	DB	03cH
	DB	0eH
	DB	0d7H
	DB	02fH
	DB	0dbH
	DB	0baH
	DB	06H
	DB	05aH
	DB	03bH
	DB	010H
	DB	074H
	DB	064H
	DB	038H
	DB	0c6H
	DB	06cH
	DB	08eH
	DB	0c9H
	DB	0b3H
	DB	0acH
	DB	066H
	DB	062H
	DB	0a4H
	DB	0ebH
	DB	029H
	DB	04fH
	DB	088H
	DB	072H
	DB	028H
	DB	028H
	DB	0dH
	DB	0e7H
	DB	0e4H
	DB	01bH
	DB	0bfH
	DB	014H
	DB	076H
	DB	0f9H
	DB	099H
	DB	0d0H
	DB	035H
	DB	0a9H
	DB	0c5H
	DB	01aH
	DB	061H
	DB	08cH
	DB	06H
	DB	0efH
	DB	0d6H
	DB	0b9H
	DB	01cH
	DB	03dH
	DB	09cH
	DB	0c1H
	DB	029H
	DB	0c5H
	DB	011H
	DB	031H
	DB	0b7H
	DB	0b8H
	DB	0d8H
	DB	044H
	DB	0a0H
	DB	0bdH
	DB	0dfH
	DB	0dfH
	DB	051H
	DB	056H
	DB	0daH
	DB	0eaH
	DB	028H
	DB	08fH
	DB	014H
	DB	0edH
	DB	0a9H
	DB	0f4H
	DB	0f9H
	DB	030H
	DB	0e5H
	DB	050H
	DB	0e9H
	DB	02H
	DB	08dH
	DB	06H
	DB	043H
	DB	036H
	DB	0cbH
	DB	054H
	DB	0e6H
	DB	04H
	DB	08cH
	DB	0c0H
	DB	0c7H
	DB	02dH
	DB	0fdH
	DB	0a7H
	DB	0eH
	DB	050H
	DB	0feH
	DB	0e8H
	DB	0baH
	DB	0a6H
	DB	0f7H
	DB	04fH
	DB	014H
	DB	022H
	DB	044H
	DB	08dH
	DB	052H
	DB	02aH
	DB	0deH
	DB	0bbH
	DB	0acH
	DB	0ebH
	DB	0c2H
	DB	0efH
	DB	023H
	DB	0eH
	DB	045H
	DB	089H
	DB	091H
	DB	051H
	DB	04aH
	DB	05aH
	DB	07fH
	DB	049H
	DB	081H
	DB	08dH
	DB	019H
	DB	00H
	DB	0f5H
	DB	053H
	DB	0a6H
	DB	06dH
	DB	0a2H
	DB	03aH
	DB	08fH
	DB	0e7H
	DB	0c8H
	DB	0e1H
	DB	091H
	DB	027H
	DB	09eH
	DB	03eH
	DB	013H
	DB	0e0H
	DB	02fH
	DB	0b5H
	DB	0eeH
	DB	0f3H
	DB	040H
	DB	081H
	DB	045H
	DB	0aH
	DB	05bH
	DB	0c4H
	DB	0d2H
	DB	0dcH
	DB	0d1H
	DB	0ebH
	DB	05dH
	DB	047H
	DB	040H
	DB	083H
	DB	0b5H
	DB	062H
	DB	0beH
	DB	045H
	DB	0c9H
	DB	07H
	DB	0a7H
	DB	05cH
	DB	02eH
	DB	0c5H
	DB	09aH
	DB	0c0H
	DB	0a6H
	DB	049H
	DB	077H
	DB	015H
	DB	03dH
	DB	0b7H
	DB	096H
	DB	03H
	DB	0c1H
	DB	071H
	DB	047H
	DB	015H
	DB	0ceH
	DB	01aH
	DB	01H
	DB	02cH
	DB	0e0H
	DB	0c0H
	DB	0afH
	DB	096H
	DB	0a3H
	DB	0edH
	DB	05cH
	DB	06dH
	DB	074H
	DB	083H
	DB	0c9H
	DB	0a2H
	DB	049H
	DB	0e4H
	DB	064H
	DB	0efH
	DB	0adH
	DB	05bH
	DB	05H
	DB	0ebH
	DB	013H
	DB	01cH
	DB	06eH
	DB	054H
	DB	0dH
	DB	0b5H
	DB	069H
	DB	0dbH
	DB	04fH
	DB	0eaH
	DB	087H
	DB	031H
	DB	02bH
	DB	0b7H
	DB	047H
	DB	0ceH
	DB	025H
	DB	023H
	DB	0bcH
	DB	09aH
	DB	0a6H
	DB	06H
	DB	03dH
	DB	0efH
	DB	0eaH
	DB	021H
	DB	05fH
	DB	099H
	DB	07cH
	DB	0e4H
	DB	05H
	DB	0fH
	DB	080H
	DB	073H
	DB	064H
	DB	08dH
	DB	029H
	DB	04dH
	DB	0e9H
	DB	079H
	DB	0b7H
	DB	0f0H
	DB	02aH
	DB	0e3H
	DB	028H
	DB	071H
	DB	032H
	DB	04eH
	DB	095H
	DB	0eeH
	DB	0e8H
	DB	0bbH
	DB	075H
	DB	0a5H
	DB	0acH
	DB	060H
	DB	047H
	DB	08bH
	DB	079H
	DB	0c3H
	DB	070H
	DB	07eH
	DB	053H
	DB	0f0H
	DB	071H
	DB	037H
	DB	0feH
	DB	01bH
	DB	084H
	DB	068H
	DB	014H
	DB	0bcH
	DB	059H
	DB	03eH
	DB	020H
	DB	082H
	DB	0afH
	DB	052H
	DB	050H
	DB	0c4H
	DB	0c1H
	DB	039H
	DB	081H
	DB	037H
	DB	0deH
	DB	0adH
	DB	017H
	DB	026H
	DB	039H
	DB	011H
	DB	06aH
	DB	02aH
	DB	0fH
	DB	03dH
	DB	09aH
	DB	081H
	DB	074H
	DB	019H
	DB	01cH
	DB	078H
	DB	081H
	DB	030H
	DB	035H
	DB	05bH
	DB	06eH
	DB	055H
	DB	05dH
	DB	09dH
	DB	028H
	DB	0adH
	DB	0e2H
	DB	069H
	DB	066H
	DB	0e3H
	DB	020H
	DB	0c4H
	DB	091H
	DB	0b6H
	DB	06bH
	DB	04aH
	DB	0c7H
	DB	0d5H
	DB	0f3H
	DB	0d7H
	DB	013H
	DB	0fH
	DB	0d8H
	DB	07H
	DB	028H
	DB	0f4H
	DB	07fH
	DB	0aaH
	DB	025H
	DB	035H
	DB	085H
	DB	093H
	DB	08aH
	DB	062H
	DB	0b0H
	DB	032H
	DB	08fH
	DB	093H
	DB	01bH
	DB	0f5H
	DB	077H
	DB	03bH
	DB	0baH
	DB	088H
	DB	0f2H
	DB	026H
	DB	053H
	DB	03aH
	DB	07bH
	DB	0c6H
	DB	012H
	DB	0eH
	DB	0d5H
	DB	0eaH
	DB	015H
	DB	0feH
	DB	0dfH
	DB	015H
	DB	029H
	DB	05H
	DB	04aH
	DB	02eH
	DB	018H
	DB	054H
	DB	090H
	DB	0c9H
	DB	087H
	DB	020H
	DB	0dcH
	DB	0a2H
	DB	016H
	DB	0d4H
	DB	05eH
	DB	050H
	DB	05dH
	DB	0d0H
	DB	0f6H
	DB	030H
	DB	0bH
	DB	072H
	DB	0f7H
	DB	01eH
	DB	01H
	DB	0cdH
	DB	088H
	DB	016H
	DB	04cH
	DB	069H
	DB	0aaH
	DB	075H
	DB	0edH
	DB	0f4H
	DB	0a3H
	DB	086H
	DB	04aH
	DB	0b3H
	DB	0cfH
	DB	0d1H
	DB	0d3H
	DB	0acH
	DB	0f3H
	DB	069H
	DB	081H
	DB	0d1H
	DB	03aH
	DB	05fH
	DB	0a2H
	DB	031H
	DB	0fH
	DB	0aeH
	DB	023H
	DB	07H
	DB	04cH
	DB	024H
	DB	055H
	DB	0d4H
	DB	0baH
	DB	0a1H
	DB	0bdH
	DB	065H
	DB	097H
	DB	02cH
	DB	05bH
	DB	0baH
	DB	0b2H
	DB	025H
	DB	06fH
	DB	02H
	DB	0f6H
	DB	043H
	DB	0aeH
	DB	06aH
	DB	02dH
	DB	0b0H
	DB	0bcH
	DB	067H
	DB	08fH
	DB	05fH
	DB	098H
	DB	09eH
	DB	08dH
	DB	03bH
	DB	026H
	DB	059H
	DB	060H
	DB	0faH
	DB	0aeH
	DB	09aH
	DB	01cH
	DB	06cH
	DB	07fH
	DB	0b3H
	DB	018H
	DB	0daH
	DB	06fH
	DB	04aH
	DB	00H
	DB	05eH
	DB	04cH
	DB	076H
	DB	021H
	DB	07bH
	DB	061H
	DB	04eH
	DB	02cH
	DB	01eH
	DB	035H
	DB	0bbH
	DB	0fcH
	DB	04dH
	DB	0d9H
	DB	08bH
	DB	089H
	DB	00H
	DB	0e4H
	DB	069H
	DB	0faH
	DB	093H
	DB	04H
	DB	018H
	DB	080H
	DB	083H
	DB	04bH
	DB	018H
	DB	0deH
	DB	03aH
	DB	063H
	DB	05eH
	DB	098H
	DB	0afH
	DB	055H
	DB	0baH
	DB	02bH
	DB	0b6H
	DB	088H
	DB	0d6H
	DB	0d4H
	DB	0beH
	DB	012H
	DB	051H
	DB	0cH
	DB	0ecH
	DB	0dcH
	DB	095H
	DB	06cH
	DB	042H
	DB	07eH
	DB	0e7H
	DB	055H
	DB	082H
	DB	00H
	DB	0d5H
	DB	086H
	DB	0caH
	DB	06eH
	DB	0e4H
	DB	06H
	DB	0d1H
	DB	043H
	DB	01eH
	DB	01H
	DB	098H
	DB	0d8H
	DB	0acH
	DB	0ceH
	DB	0e1H
	DB	03H
	DB	023H
	DB	0a0H
	DB	016H
	DB	075H
	DB	02cH
	DB	082H
	DB	052H
	DB	0c2H
	DB	0eeH
	DB	094H
	DB	041H
	DB	0d6H
	DB	06aH
	DB	044H
	DB	056H
	DB	0bfH
	DB	04aH
	DB	022H
	DB	02eH
	DB	02fH
	DB	0a7H
	DB	00H
	DB	072H
	DB	0c5H
	DB	081H
	DB	08bH
	DB	01fH
	DB	02eH
	DB	05aH
	DB	01H
	DB	031H
	DB	07eH
	DB	0a1H
	DB	0c6H
	DB	0f3H
	DB	0cdH
	DB	049H
	DB	0c5H
	DB	010H
	DB	0b8H
	DB	0daH
	DB	0d1H
	DB	08fH
	DB	045H
	DB	016H
	DB	066H
	DB	05H
	DB	0dfH
	DB	08H
	DB	034H
	DB	0fH
	DB	0afH
	DB	0b3H
	DB	01H
	DB	075H
	DB	035H
	DB	08cH
	DB	094H
	DB	0e2H
	DB	067H
	DB	095H
	DB	015H
	DB	065H
	DB	0b6H
	DB	0dbH
	DB	059H
	DB	05H
	DB	0a5H
	DB	09eH
	DB	015H
	DB	05eH
	DB	079H
	DB	066H
	DB	06dH
	DB	03eH
	DB	07cH
	DB	0d3H
	DB	044H
	DB	0dbH
	DB	0dbH
	DB	0f7H
	DB	0eaH
	DB	08bH
	DB	02bH
	DB	06cH
	DB	081H
	DB	061H
	DB	0f8H
	DB	016H
	DB	0c3H
	DB	0dfH
	DB	02cH
	DB	0d8H
	DB	045H
	DB	0e2H
	DB	035H
	DB	01eH
	DB	0e7H
	DB	05aH
	DB	0bdH
	DB	07dH
	DB	0b8H
	DB	037H
	DB	0e3H
	DB	026H
	DB	0f5H
	DB	0e0H
	DB	07aH
	DB	03aH
	DB	0bcH
	DB	056H
	DB	0b1H
	DB	0a8H
	DB	062H
	DB	0dcH
	DB	015H
	DB	0e3H
	DB	0bdH
	DB	08dH
	DB	079H
	DB	082H
	DB	0edH
	DB	0a5H
	DB	0daH
	DB	033H
	DB	089H
	DB	08fH
	DB	052H
	DB	0f0H
	DB	0e9H
	DB	010H
	DB	06eH
	DB	0a2H
	DB	0c6H
	DB	053H
	DB	049H
	DB	0bcH
	DB	034H
	DB	0c3H
	DB	076H
	DB	0f0H
	DB	099H
	DB	0a7H
	DB	019H
	DB	07bH
	DB	085H
	DB	0adH
	DB	0deH
	DB	0c2H
	DB	0bbH
	DB	059H
	DB	0c4H
	DB	0a9H
	DB	0feH
	DB	0a0H
	DB	05cH
	DB	08H
	DB	0afH
	DB	0aeH
	DB	0f9H
	DB	09aH
	DB	03eH
	DB	068H
	DB	0bcH
	DB	06H
	DB	03bH
	DB	06H
	DB	042H
	DB	06fH
	DB	049H
	DB	039H
	DB	0e0H
	DB	063H
	DB	0e0H
	DB	079H
	DB	0deH
	DB	0e5H
	DB	028H
	DB	0beH
	DB	029H
	DB	063H
	DB	097H
	DB	0edH
	DB	0dH
	DB	016H
	DB	0eH
	DB	069H
	DB	01fH
	DB	0beH
	DB	098H
	DB	098H
	DB	0d8H
	DB	0d6H
	DB	080H
	DB	095H
	DB	05cH
	DB	0bcH
	DB	01cH
	DB	01fH
	DB	0abH
	DB	0e4H
	DB	058H
	DB	08cH
	DB	048H
	DB	0b8H
	DB	07H
	DB	028H
	DB	01fH
	DB	0aeH
	DB	066H
	DB	048H
	DB	012H
	DB	0fdH
	DB	036H
	DB	09eH
	DB	014H
	DB	0c4H
	DB	087H
	DB	0b2H
	DB	083H
	DB	020H
	DB	04bH
	DB	05cH
	DB	077H
	DB	0ccH
	DB	071H
	DB	053H
	DB	09H
	DB	08dH
	DB	072H
	DB	0b4H
	DB	073H
	DB	04aH
	DB	0c1H
	DB	03bH
	DB	083H
	DB	048H
	DB	063H
	DB	0a2H
	DB	0f6H
	DB	049H
	DB	06aH
	DB	088H
	DB	0c6H
	DB	020H
	DB	0a6H
	DB	05bH
	DB	0e4H
	DB	02eH
	DB	0eH
	DB	068H
	DB	0ceH
	DB	0d9H
	DB	044H
	DB	046H
	DB	026H
	DB	0b6H
	DB	019H
	DB	02fH
	DB	044H
	DB	0cH
	DB	063H
	DB	037H
	DB	056H
	DB	0a4H
	DB	073H
	DB	059H
	DB	0ecH
	DB	056H
	DB	07bH
	DB	063H
	DB	020H
	DB	0e5H
	DB	06bH
	DB	0e6H
	DB	07H
	DB	012H
	DB	042H
	DB	0ebH
	DB	041H
	DB	0d0H
	DB	0d4H
	DB	08fH
	DB	02aH
	DB	098H
	DB	0d5H
	DB	050H
	DB	04fH
	DB	06eH
	DB	0feH
	DB	014H
	DB	07aH
	DB	0e1H
	DB	0caH
	DB	051H
	DB	087H
	DB	03eH
	DB	0aaH
	DB	0f3H
	DB	015H
	DB	027H
	DB	0d7H
	DB	035H
	DB	08cH
	DB	0c2H
	DB	09bH
	DB	093H
	DB	0d5H
	DB	05eH
	DB	00H
	DB	096H
	DB	02fH
	DB	054H
	DB	026H
	DB	059H
	DB	0ecH
	DB	07bH
	DB	029H
	DB	0bcH
	DB	0e9H
	DB	028H
	DB	050H
	DB	065H
	DB	089H
	DB	01bH
	DB	036H
	DB	090H
	DB	0d9H
	DB	0e0H
	DB	085H
	DB	0eeH
	DB	087H
	DB	0dcH
	DB	024H
	DB	015H
	DB	09fH
	DB	03fH
	DB	028H
	DB	0f4H
	DB	09dH
	DB	0a7H
	DB	08bH
	DB	0ccH
	DB	0fbH
	DB	031H
	DB	0a5H
	DB	069H
	DB	0acH
	DB	0ceH
	DB	026H
	DB	017H
	DB	076H
	DB	0f5H
	DB	0fbH
	DB	01H
	DB	011H
	DB	032H
	DB	091H
	DB	0eaH
	DB	013H
	DB	096H
	DB	0d9H
	DB	01bH
	DB	0f2H
	DB	07dH
	DB	0afH
	DB	093H
	DB	0bdH
	DB	0d7H
	DB	08H
	DB	05bH
	DB	00H
	DB	014H
	DB	0a8H
	DB	07bH
	DB	045H
	DB	0cdH
	DB	0e4H
	DB	072H
	DB	01dH
	DB	08aH
	DB	09H
	DB	093H
	DB	080H
	DB	05H
	DB	014H
	DB	092H
	DB	037H
	DB	026H
	DB	0fcH
	DB	0c9H
	DB	03cH
	DB	057H
	DB	064H
	DB	030H
	DB	0d4H
	DB	014H
	DB	043H
	DB	012H
	DB	06cH
	DB	04bH
	DB	0edH
	DB	06cH
	DB	05fH
	DB	016H
	DB	0e7H
	DB	025H
	DB	0e3H
	DB	04dH
	DB	017H
	DB	080H
	DB	0d7H
	DB	020H
	DB	015H
	DB	0d8H
	DB	025H
	DB	0a8H
	DB	0eaH
	DB	0dbH
	DB	04eH
	DB	0e7H
	DB	0a5H
	DB	08bH
	DB	03fH
	DB	0bH
	DB	0bbH
	DB	094H
	DB	09eH
	DB	07eH
	DB	026H
	DB	0bH
	DB	0c9H
	DB	093H
	DB	077H
	DB	0a9H
	DB	0a9H
	DB	0dfH
	DB	04eH
	DB	0eH
	DB	02dH
	DB	065H
	DB	08eH
	DB	084H
	DB	085H
	DB	023H
	DB	05dH
	DB	02aH
	DB	04cH
	DB	048H
	DB	06H
	DB	09aH
	DB	031H
	DB	02bH
	DB	026H
	DB	0efH
	DB	0b5H
	DB	061H
	DB	084H
	DB	055H
	DB	0dfH
	DB	02bH
	DB	060H
	DB	02aH
	DB	0beH
	DB	058H
	DB	053H
	DB	0e8H
	DB	038H
	DB	0a1H
	DB	076H
	DB	0e4H
	DB	086H
	DB	084H
	DB	069H
	DB	0cH
	DB	028H
	DB	0c7H
	DB	0b5H
	DB	074H
	DB	010H
	DB	0bbH
	DB	0fH
	DB	0c0H
	DB	0e6H
	DB	0b5H
	DB	0b1H
	DB	09dH
	DB	096H
	DB	0b5H
	DB	0f2H
	DB	077H
	DB	060H
	DB	0d2H
	DB	021H
	DB	020H
	DB	0aaH
	DB	074H
	DB	088H
	DB	062H
	DB	016H
	DB	0feH
	DB	047H
	DB	09cH
	DB	03H
	DB	0b1H
	DB	028H
	DB	02bH
	DB	0f8H
	DB	0ddH
	DB	09fH
	DB	088H
	DB	019H
	DB	02fH
	DB	0c9H
	DB	07fH
	DB	064H
	DB	0faH
	DB	09cH
	DB	0faH
	DB	030H
	DB	0fH
	DB	072H
	DB	091H
	DB	0e2H
	DB	093H
	DB	0b1H
	DB	08dH
	DB	087H
	DB	0b9H
	DB	070H
	DB	01dH
	DB	0b8H
	DB	0b7H
	DB	039H
	DB	0bbH
	DB	0e8H
	DB	061H
	DB	067H
	DB	061H
	DB	0beH
	DB	07H
	DB	0eaH
	DB	057H
	DB	0b5H
	DB	034H
	DB	0d7H
	DB	01aH
	DB	02fH
	DB	074H
	DB	016H
	DB	05fH
	DB	084H
	DB	08H
	DB	0f0H
	DB	0e6H
	DB	01cH
	DB	022H
	DB	0f3H
	DB	0a3H
	DB	0dbH
	DB	064H
	DB	0c1H
	DB	014H
	DB	01dH
	DB	07aH
	DB	0d0H
	DB	085H
	DB	0dcH
	DB	038H
	DB	0e7H
	DB	01bH
	DB	0beH
	DB	052H
	DB	073H
	DB	075H
	DB	086H
	DB	0caH
	DB	0fH
	DB	0b5H
	DB	03fH
	DB	0a4H
	DB	015H
	DB	0c3H
	DB	0adH
	DB	086H
	DB	02aH
	DB	049H
	DB	0a8H
	DB	01fH
	DB	0ecH
	DB	085H
	DB	083H
	DB	02eH
	DB	099H
	DB	0a0H
	DB	0a9H
	DB	0e9H
	DB	0a6H
	DB	06H
	DB	0a1H
	DB	08eH
	DB	0a0H
	DB	061H
	DB	0e0H
	DB	014H
	DB	056H
	DB	0e6H
	DB	0deH
	DB	0e4H
	DB	09cH
	DB	09eH
	DB	08aH
	DB	031H
	DB	0e1H
	DB	0b7H
	DB	0b7H
	DB	0dH
	DB	01H
	DB	0e0H
	DB	02cH
	DB	06dH
	DB	066H
	DB	0afH
	DB	01cH
	DB	07fH
	DB	0d0H
	DB	045H
	DB	06aH
	DB	0f6H
	DB	04bH
	DB	0cH
	DB	085H
	DB	06bH
	DB	0ecH
	DB	0e5H
	DB	00H
	DB	0c2H
	DB	04cH
	DB	05eH
	DB	028H
	DB	0e8H
	DB	0fcH
	DB	0b2H
	DB	099H
	DB	0dfH
	DB	06aH
	DB	0d1H
	DB	06cH
	DB	0eaH
	DB	0b2H
	DB	018H
	DB	058H
	DB	098H
	DB	047H
	DB	074H
	DB	018H
	DB	097H
	DB	0b9H
	DB	02H
	DB	08eH
	DB	084H
	DB	08eH
	DB	014H
	DB	0f0H
	DB	0faH
	DB	079H
	DB	0f0H
	DB	0beH
	DB	0c5H
	DB	04fH
	DB	0e6H
	DB	02eH
	DB	0ccH
	DB	019H
	DB	048H
	DB	02cH
	DB	03H
	DB	01aH
	DB	098H
	DB	0edH
	DB	04cH
	DB	030H
	DB	046H
	DB	064H
	DB	077H
	DB	03bH
	DB	07cH
	DB	010H
	DB	0f4H
	DB	0feH
	DB	09eH
	DB	0f9H
	DB	08dH
	DB	033H
	DB	06aH
	DB	088H
	DB	02cH
	DB	05bH
	DB	0c6H
	DB	072H
	DB	02aH
	DB	02dH
	DB	0a0H
	DB	0f6H
	DB	0c5H
	DB	068H
	DB	0a2H
	DB	0c8H
	DB	082H
	DB	03bH
	DB	0b6H
	DB	04eH
	DB	0eaH
	DB	0fdH
	DB	0b2H
	DB	063H
	DB	039H
	DB	0afH
	DB	073H
	DB	0adH
	DB	0aeH
	DB	091H
	DB	027H
	DB	0bbH
	DB	044H
	DB	091H
	DB	0c3H
	DB	071H
	DB	06cH
	DB	0bH
	DB	0e3H
	DB	017H
	DB	038H
	DB	04H
	DB	0eH
	DB	0feH
	DB	06dH
	DB	031H
	DB	0c7H
	DB	06fH
	DB	0ebH
	DB	0feH
	DB	0beH
	DB	0d7H
	DB	07cH
	DB	0f0H
	DB	03bH
	DB	035H
	DB	020H
	DB	02eH
	DB	0e2H
	DB	0ceH
	DB	0bfH
	DB	08aH
	DB	0aH
	DB	05H
	DB	01cH
	DB	0ceH
	DB	0f5H
	DB	09H
	DB	0d9H
	DB	059H
	DB	020H
	DB	091H
	DB	05dH
	DB	0adH
	DB	010H
	DB	0caH
	DB	0deH
	DB	058H
	DB	0baH
	DB	0cbH
	DB	057H
	DB	0f8H
	DB	0a3H
	DB	0d3H
	DB	0e9H
	DB	0deH
	DB	09H
	DB	0bH
	DB	08cH
	DB	06bH
	DB	059H
	DB	0cbH
	DB	0f5H
	DB	0e3H
	DB	050H
	DB	092H
	DB	0b2H
	DB	046H
	DB	09bH
	DB	0cH
	DB	09fH
	DB	0bbH
	DB	09dH
	DB	07dH
	DB	0e8H
	DB	02eH
	DB	048H
	DB	0c8H
	DB	086H
	DB	082H
	DB	094H
	DB	0ddH
	DB	07bH
	DB	0b7H
	DB	031H
	DB	0e5H
	DB	016H
	DB	0b9H
	DB	070H
	DB	0a2H
	DB	025H
	DB	049H
	DB	06eH
	DB	09bH
	DB	02dH
	DB	0bfH
	DB	0adH
	DB	05fH
	DB	085H
	DB	0c8H
	DB	06bH
	DB	026H
	DB	04H
	DB	089H
	DB	0a3H
	DB	0ecH
	DB	0b7H
	DB	06bH
	DB	0b5H
	DB	0bdH
	DB	0eeH
	DB	0c9H
	DB	01bH
	DB	0e9H
	DB	081H
	DB	04cH
	DB	0cfH
	DB	097H
	DB	06H
	DB	040H
	DB	0b9H
	DB	0aaH
	DB	08aH
	DB	029H
	DB	0c5H
	DB	037H
	DB	068H
	DB	073H
	DB	097H
	DB	0edH
	DB	03cH
	DB	03H
	DB	093H
	DB	040H
	DB	0cH
	DB	0b6H
	DB	0adH
	DB	043H
	DB	0a2H
	DB	063H
	DB	01H
	DB	011H
	DB	02eH
	DB	01cH
	DB	0faH
	DB	02fH
	DB	0e7H
	DB	04bH
	DB	047H
	DB	0edH
	DB	08bH
	DB	01H
	DB	019H
	DB	095H
	DB	0a9H
	DB	0deH
	DB	0cdH
	DB	091H
	DB	0d2H
	DB	0e4H
	DB	080H
	DB	08eH
	DB	0e7H
	DB	093H
	DB	04fH
	DB	074H
	DB	04bH
	DB	0fcH
	DB	0b7H
	DB	06dH
	DB	0dfH
	DB	039H
	DB	07eH
	DB	08dH
	DB	0d4H
	DB	0f8H
	DB	0bdH
	DB	0bdH
	DB	044H
	DB	084H
	DB	02bH
	DB	050H
	DB	085H
	DB	0c3H
	DB	0e5H
	DB	0afH
	DB	0a3H
	DB	033H
	DB	041H
	DB	0f5H
	DB	018H
	DB	041H
	DB	084H
	DB	080H
	DB	0d5H
	DB	053H
	DB	074H
	DB	0a0H
	DB	050H
	DB	0abH
	DB	0eH
	DB	031H
	DB	064H
	DB	08cH
	DB	0beH
	DB	03aH
	DB	085H
	DB	0fbH
	DB	077H
	DB	04aH
	DB	080H
	DB	022H
	DB	09aH
	DB	086H
	DB	0e6H
	DB	00H
	DB	036H
	DB	0aH
	DB	0b3H
	DB	077H
	DB	00H
	DB	0cbH
	DB	0b9H
	DB	04H
	DB	0cbH
	DB	0fH
	DB	058H
	DB	0bfH
	DB	0afH
	DB	0a8H
	DB	06cH
	DB	0bdH
	DB	059H
	DB	0d0H
	DB	0c9H
	DB	098H
	DB	0bH
	DB	0ceH
	DB	094H
	DB	02H
	DB	019H
	DB	095H
	DB	025H
	DB	033H
	DB	01cH
	DB	0cH
	DB	034H
	DB	052H
	DB	095H
	DB	0e7H
	DB	049H
	DB	095H
	DB	033H
	DB	082H
	DB	019H
	DB	07fH
	DB	091H
	DB	071H
	DB	03fH
	DB	041H
	DB	09aH
	DB	0abH
	DB	07eH
	DB	073H
	DB	0fcH
	DB	0c7H
	DB	0cH
	DB	087H
	DB	017H
	DB	021H
	DB	08aH
	DB	030H
	DB	0b6H
	DB	02fH
	DB	0e3H
	DB	052H
	DB	03bH
	DB	018H
	DB	0a4H
	DB	0d0H
	DB	07fH
	DB	06dH
	DB	0e5H
	DB	032H
	DB	0f0H
	DB	07eH
	DB	0b1H
	DB	02H
	DB	0f0H
	DB	0f1H
	DB	0c3H
	DB	0bH
	DB	01dH
	DB	0c1H
	DB	07eH
	DB	099H
	DB	08aH
	DB	0bH
	DB	022H
	DB	0a1H
	DB	02cH
	DB	02cH
	DB	051H
	DB	062H
	DB	05bH
	DB	035H
	DB	0b4H
	DB	096H
	DB	0ccH
	DB	0d8H
	DB	0e6H
	DB	04cH
	DB	046H
	DB	04cH
	DB	07fH
	DB	0b6H
	DB	0caH
	DB	0b0H
	DB	039H
	DB	03bH
	DB	022H
	DB	0fcH
	DB	0c5H
	DB	0bfH
	DB	03eH
	DB	0c4H
	DB	059H
	DB	048H
	DB	0cfH
	DB	07bH
	DB	0e9H
	DB	07bH
	DB	0a7H
	DB	0bbH
	DB	0ddH
	DB	082H
	DB	070H
	DB	092H
	DB	019H
	DB	03eH
	DB	0eaH
	DB	07fH
	DB	0aH
	DB	0b0H
	DB	04bH
	DB	09H
	DB	068H
	DB	017H
	DB	03aH
	DB	021H
	DB	0d1H
	DB	05cH
	DB	09dH
	DB	098H
	DB	01cH
	DB	0dbH
	DB	05dH
	DB	0f5H
	DB	025H
	DB	0acH
	DB	0f0H
	DB	08eH
	DB	028H
	DB	019H
	DB	04aH
	DB	085H
	DB	09bH
	DB	0bbH
	DB	018H
	DB	035H
	DB	079H
	DB	082H
	DB	0b4H
	DB	03H
	DB	033H
	DB	080H
	DB	0dH
	DB	01bH
	DB	017H
	DB	047H
	DB	03cH
	DB	0e8H
	DB	023H
	DB	0d9H
	DB	01H
	DB	0bfH
	DB	0b6H
	DB	0ddH
	DB	0b5H
	DB	05bH
	DB	08aH
	DB	0a6H
	DB	0e9H
	DB	0b2H
	DB	03fH
	DB	0b4H
	DB	038H
	DB	0dbH
	DB	0efH
	DB	0cfH
	DB	011H
	DB	069H
	DB	052H
	DB	045H
	DB	06cH
	DB	06H
	DB	0c5H
	DB	0f8H
	DB	021H
	DB	0dcH
	DB	040H
	DB	05eH
	DB	046H
	DB	064H
	DB	0b7H
	DB	047H
	DB	024H
	DB	0edH
	DB	026H
	DB	059H
	DB	049H
	DB	0b0H
	DB	07fH
	DB	034H
	DB	0e3H
	DB	0bfH
	DB	0e8H
	DB	09bH
	DB	09bH
	DB	0d8H
	DB	0ebH
	DB	02cH
	DB	0c1H
	DB	03eH
	DB	071H
	DB	0adH
	DB	0c3H
	DB	0b7H
	DB	0a7H
	DB	0e5H
	DB	094H
	DB	0e7H
	DB	0c3H
	DB	0daH
	DB	0cbH
	DB	07bH
	DB	0a2H
	DB	06fH
	DB	06aH
	DB	0c8H
	DB	048H
	DB	0b3H
	DB	0f8H
	DB	0c8H
	DB	067H
	DB	05cH
	DB	088H
	DB	0cfH
	DB	0f8H
	DB	024H
	DB	028H
	DB	0e4H
	DB	0cfH
	DB	0e9H
	DB	0a2H
	DB	041H
	DB	098H
	DB	067H
	DB	0f8H
	DB	040H
	DB	0ccH
	DB	0eH
	DB	0a7H
	DB	090H
	DB	068H
	DB	0f3H
	DB	0cH
	DB	0bH
	DB	0e2H
	DB	076H
	DB	053H
	DB	0abH
	DB	0aaH
	DB	04dH
	DB	074H
	DB	012H
	DB	0a9H
	DB	07cH
	DB	0e2H
	DB	022H
	DB	0a0H
	DB	0bH
	DB	07H
	DB	0efH
	DB	075H
	DB	02aH
	DB	031H
	DB	0eH
	DB	091H
	DB	0aaH
	DB	0cdH
	DB	05eH
	DB	0b8H
	DB	0f4H
	DB	0eeH
	DB	021H
	DB	068H
	DB	07aH
	DB	02dH
	DB	04cH
	DB	0f1H
	DB	080H
	DB	0f7H
	DB	09cH
	DB	04dH
	DB	0ebH
	DB	02eH
	DB	077H
	DB	068H
	DB	011H
	DB	099H
	DB	088H
	DB	09cH
	DB	021H
	DB	078H
	DB	012H
	DB	04bH
	DB	0a9H
	DB	09fH
	DB	05cH
	DB	054H
	DB	06dH
	DB	0baH
	DB	08cH
	DB	0e1H
	DB	029H
	DB	0aeH
	DB	04bH
	DB	0a3H
	DB	0dbH
	DB	017H
	DB	015H
	DB	0dbH
	DB	08eH
	DB	031H
	DB	02aH
	DB	07aH
	DB	060H
	DB	021H
	DB	0e2H
	DB	071H
	DB	0baH
	DB	0eaH
	DB	08dH
	DB	0dbH
	DB	063H
	DB	09fH
	DB	0a6H
	DB	08cH
	DB	03fH
	DB	03H
	DB	061H
	DB	02cH
	DB	03dH
	DB	0edH
	DB	08eH
	DB	066H
	DB	09cH
	DB	0d9H
	DB	08aH
	DB	0f7H
	DB	0f0H
	DB	09fH
	DB	0d4H
	DB	07fH
	DB	0d1H
	DB	07eH
	DB	079H
	DB	032H
	DB	09fH
	DB	05cH
	DB	023H
	DB	0d9H
	DB	047H
	DB	0b1H
	DB	036H
	DB	02aH
	DB	0d0H
	DB	0dcH
	DB	0b6H
	DB	090H
	DB	0e0H
	DB	018H
	DB	03cH
	DB	01eH
	DB	086H
	DB	0caH
	DB	05H
	DB	023H
	DB	0a4H
	DB	08fH
	DB	09bH
	DB	015H
	DB	0aeH
	DB	0efH
	DB	014H
	DB	00H
	DB	06eH
	DB	08dH
	DB	032H
	DB	08dH
	DB	069H
	DB	0d5H
	DB	0e6H
	DB	030H
	DB	087H
	DB	01dH
	DB	05aH
	DB	058H
	DB	07aH
	DB	091H
	DB	068H
	DB	0daH
	DB	029H
	DB	0a5H
	DB	078H
	DB	0afH
	DB	070H
	DB	0fcH
	DB	053H
	DB	095H
	DB	08cH
	DB	0eeH
	DB	02aH
	DB	0bbH
	DB	0deH
	DB	03fH
	DB	0bbH
	DB	0ccH
	DB	04cH
	DB	06eH
	DB	0d9H
	DB	0b6H
	DB	044H
	DB	040H
	DB	066H
	DB	04bH
	DB	05eH
	DB	041H
	DB	023H
	DB	058H
	DB	052H
	DB	08cH
	DB	0b2H
	DB	07bH
	DB	032H
	DB	02bH
	DB	0abH
	DB	0a2H
	DB	029H
	DB	07eH
	DB	0b7H
	DB	035H
	DB	0ecH
	DB	0e2H
	DB	0f0H
	DB	04bH
	DB	022H
	DB	02dH
	DB	018H
	DB	0edH
	DB	09bH
	DB	071H
	DB	024H
	DB	0dfH
	DB	0b1H
	DB	08bH
	DB	02bH
	DB	08fH
	DB	0ccH
	DB	0cdH
	DB	067H
	DB	01fH
	DB	05aH
	DB	01aH
	DB	01aH
	DB	08cH
	DB	046H
	DB	045H
	DB	0afH
	DB	0eeH
	DB	0c3H
	DB	067H
	DB	024H
	DB	0b0H
	DB	0c9H
	DB	095H
	DB	0fbH
	DB	06bH
	DB	0c2H
	DB	093H
	DB	05aH
	DB	05eH
	DB	084H
	DB	07eH
	DB	0bdH
	DB	037H
	DB	0aH
	DB	068H
	DB	046H
	DB	056H
	DB	036H
	DB	0aeH
	DB	0f4H
	DB	091H
	DB	0c8H
	DB	08fH
	DB	09dH
	DB	08eH
	DB	0d4H
	DB	0ccH
	DB	0fcH
	DB	019H
	DB	0b4H
	DB	022H
	DB	0c9H
	DB	07eH
	DB	037H
	DB	046H
	DB	0eaH
	DB	079H
	DB	059H
	DB	0c4H
	DB	057H
	DB	0deH
	DB	043H
	DB	015H
	DB	095H
	DB	0cdH
	DB	0fcH
	DB	05bH
	DB	024H
	DB	033H
	DB	0aH
	DB	01aH
	DB	044H
	DB	053H
	DB	029H
	DB	062H
	DB	061H
	DB	0fdH
	DB	0aeH
	DB	05fH
	DB	017H
	DB	063H
	DB	01H
	DB	061H
	DB	062H
	DB	0b7H
	DB	027H
	DB	0ccH
	DB	031H
	DB	080H
	DB	091H
	DB	088H
	DB	0deH
	DB	0d4H
	DB	01dH
	DB	074H
	DB	0a2H
	DB	01aH
	DB	0d0H
	DB	047H
	DB	0ccH
	DB	05aH
	DB	0e0H
	DB	091H
	DB	02dH
	DB	0aH
	DB	073H
	DB	08fH
	DB	08H
	DB	022H
	DB	06eH
	DB	09fH
	DB	086H
	DB	06fH
	DB	01H
	DB	068H
	DB	027H
	DB	028H
	DB	035H
	DB	0d7H
	DB	028H
	DB	0c6H
	DB	0dfH
	DB	08H
	DB	01bH
	DB	0fcH
	DB	0fbH
	DB	03eH
	DB	096H
	DB	0ccH
	DB	085H
	DB	0e2H
	DB	0a7H
	DB	0e5H
	DB	074H
	DB	0d4H
	DB	0efH
	DB	0e7H
	DB	064H
	DB	077H
	DB	08aH
	DB	0d2H
	DB	017H
	DB	090H
	DB	0c1H
	DB	097H
	DB	0f8H
	DB	0e8H
	DB	03fH
	DB	0adH
	DB	040H
	DB	068H
	DB	0f3H
	DB	020H
	DB	0efH
	DB	0fH
	DB	01dH
	DB	0ebH
	DB	0ccH
	DB	033H
	DB	039H
	DB	0d1H
	DB	017H
	DB	0e0H
	DB	0b7H
	DB	0bH
	DB	0b5H
	DB	0a7H
	DB	073H
	DB	01bH
	DB	09fH
	DB	0fdH
	DB	06dH
	DB	036H
	DB	08eH
	DB	030H
	DB	0ceH
	DB	087H
	DB	098H
	DB	08dH
	DB	035H
	DB	0d9H
	DB	0f5H
	DB	029H
	DB	0f9H
	DB	065H
	DB	0b7H
	DB	097H
	DB	052H
	DB	085H
	DB	04aH
	DB	08bH
	DB	0d6H
	DB	061H
	DB	06cH
	DB	08fH
	DB	0ecH
	DB	0a1H
	DB	0b6H
	DB	060H
	DB	0bcH
	DB	056H
	DB	05eH
	DB	0aaH
	DB	08dH
	DB	0ecH
	DB	0daH
	DB	0dbH
	DB	0f3H
	DB	0f2H
	DB	069H
	DB	0a8H
	DB	0ccH
	DB	0dfH
	DB	051H
	DB	047H
	DB	045H
	DB	09H
	DB	05eH
	DB	097H
	DB	0eH
	DB	0a8H
	DB	0a2H
	DB	0e5H
	DB	08aH
	DB	08eH
	DB	0f4H
	DB	077H
	DB	031H
	DB	0abH
	DB	0d7H
	DB	06dH
	DB	082H
	DB	036H
	DB	018H
	DB	08fH
	DB	0a2H
	DB	072H
	DB	06bH
	DB	096H
	DB	066H
	DB	0d4H
	DB	03fH
	DB	0b2H
	DB	034H
	DB	090H
	DB	079H
	DB	07aH
	DB	019H
	DB	0d7H
	DB	091H
	DB	0a7H
	DB	01H
	DB	035H
	DB	08dH
	DB	08bH
	DB	043H
	DB	02H
	DB	03H
	DB	074H
	DB	0adH
	DB	0daH
	DB	062H
	DB	030H
	DB	090H
	DB	0f9H
	DB	0bfH
	DB	033H
	DB	0ecH
	DB	0aaH
	DB	0c9H
	DB	0d2H
	DB	00H
	DB	088H
	DB	085H
	DB	034H
	DB	098H
	DB	07fH
	DB	02eH
	DB	031H
	DB	057H
	DB	0c0H
	DB	0d8H
	DB	0d7H
	DB	075H
	DB	0e5H
	DB	063H
	DB	0b8H
	DB	0e7H
	DB	066H
	DB	0adH
	DB	016H
	DB	0c0H
	DB	08fH
	DB	046H
	DB	051H
	DB	089H
	DB	086H
	DB	084H
	DB	076H
	DB	031H
	DB	0cdH
	DB	049H
	DB	031H
	DB	056H
	DB	04fH
	DB	0e5H
	DB	06eH
	DB	0ceH
	DB	014H
	DB	0a0H
	DB	0a5H
	DB	054H
	DB	0f8H
	DB	07eH
	DB	0c9H
	DB	0dfH
	DB	0e1H
	DB	03H
	DB	0c7H
	DB	0c8H
	DB	030H
	DB	0ddH
	DB	089H
	DB	0bfH
	DB	0a4H
	DB	0dbH
	DB	049H
	DB	0aaH
	DB	0dfH
	DB	040H
	DB	0dbH
	DB	0aeH
	DB	089H
	DB	08dH
	DB	084H
	DB	058H
	DB	073H
	DB	073H
	DB	027H
	DB	07H
	DB	014H
	DB	0cdH
	DB	05cH
	DB	0dH
	DB	0cbH
	DB	026H
	DB	06cH
	DB	0adH
	DB	0a8H
	DB	035H
	DB	0f5H
	DB	0d8H
	DB	092H
	DB	080H
	DB	098H
	DB	0b6H
	DB	0dbH
	DB	062H
	DB	061H
	DB	0bbH
	DB	0a2H
	DB	0bdH
	DB	0e9H
	DB	0abH
	DB	04bH
	DB	06fH
	DB	05H
	DB	03eH
	DB	0e2H
	DB	02cH
	DB	045H
	DB	076H
	DB	079H
	DB	021H
	DB	083H
	DB	0c4H
	DB	0c7H
	DB	0f0H
	DB	0f2H
	DB	070H
	DB	0a5H
	DB	0e8H
	DB	04aH
	DB	0b7H
	DB	069H
	DB	062H
	DB	0eeH
	DB	045H
	DB	0c4H
	DB	050H
	DB	081H
	DB	0e6H
	DB	08dH
	DB	06bH
	DB	093H
	DB	0d8H
	DB	05aH
	DB	018H
	DB	096H
	DB	03dH
	DB	0c3H
	DB	05cH
	DB	033H
	DB	03eH
	DB	07dH
	DB	037H
	DB	03H
	DB	045H
	DB	0a7H
	DB	0f5H
	DB	0b6H
	DB	04dH
	DB	05fH
	DB	080H
	DB	084H
	DB	0c8H
	DB	0e2H
	DB	0f2H
	DB	08eH
	DB	028H
	DB	044H
	DB	08fH
	DB	08eH
	DB	0d1H
	DB	0faH
	DB	022H
	DB	02bH
	DB	056H
	DB	0b9H
	DB	0c1H
	DB	013H
	DB	07eH
	DB	01eH
	DB	0c6H
	DB	0bcH
	DB	01cH
	DB	0fdH
	DB	03fH
	DB	061H
	DB	0a5H
	DB	0b5H
	DB	018H
	DB	072H
	DB	015H
	DB	018H
	DB	076H
	DB	05dH
	DB	0fbH
	DB	06aH
	DB	06bH
	DB	0a3H
	DB	0aeH
	DB	0faH
	DB	032H
	DB	00H
	DB	076H
	DB	0d4H
	DB	0aaH
	DB	04cH
	DB	08eH
	DB	0ecH
	DB	0deH
	DB	0dH
	DB	08aH
	DB	0a5H
	DB	049H
	DB	0a6H
	DB	0a3H
	DB	09H
	DB	09H
	DB	049H
	DB	0beH
	DB	0a0H
	DB	03bH
	DB	053H
	DB	0b9H
	DB	0b2H
	DB	030H
	DB	035H
	DB	01dH
	DB	09cH
	DB	0d8H
	DB	04bH
	DB	017H
	DB	08aH
	DB	0caH
	DB	0dH
	DB	05fH
	DB	076H
	DB	059H
	DB	06eH
	DB	0e2H
	DB	039H
	DB	07bH
	DB	06dH
	DB	05eH
	DB	0c5H
	DB	015H
	DB	082H
	DB	0ceH
	DB	09dH
	DB	0cbH
	DB	0dH
	DB	03eH
	DB	087H
	DB	0dfH
	DB	077H
	DB	03aH
	DB	010H
	DB	0acH
	DB	0d6H
	DB	02cH
	DB	05H
	DB	022H
	DB	044H
	DB	090H
	DB	0ecH
	DB	051H
	DB	06fH
	DB	0e2H
	DB	02bH
	DB	0ddH
	DB	045H
	DB	0e3H
	DB	0d9H
	DB	0b3H
	DB	042H
	DB	01fH
	DB	048H
	DB	0c4H
	DB	0edH
	DB	0e5H
	DB	011H
	DB	07aH
	DB	0a3H
	DB	018H
	DB	05aH
	DB	01cH
	DB	052H
	DB	06aH
	DB	048H
	DB	029H
	DB	017H
	DB	0cdH
	DB	0caH
	DB	05bH
	DB	0ddH
	DB	037H
	DB	02cH
	DB	04dH
	DB	09aH
	DB	0d6H
	DB	0abH
	DB	0dfH
	DB	0baH
	DB	085H
	DB	093H
	DB	07dH
	DB	0a4H
	DB	0dbH
	DB	0c1H
	DB	012H
	DB	041H
	DB	052H
	DB	08cH
	DB	0e5H
	DB	06aH
	DB	066H
	DB	081H
	DB	0bcH
	DB	050H
	DB	0c9H
	DB	065H
	DB	067H
	DB	017H
	DB	0afH
	DB	042H
	DB	0f4H
	DB	0e7H
	DB	0eeH
	DB	043H
	DB	02H
	DB	0c5H
	DB	06eH
	DB	0e1H
	DB	01H
	DB	0f3H
	DB	0f5H
	DB	07eH
	DB	018H
	DB	051H
	DB	0bfH
	DB	02aH
	DB	093H
	DB	013H
	DB	036H
	DB	0f8H
	DB	07dH
	DB	01cH
	DB	07aH
	DB	0baH
	DB	06cH
	DB	0c3H
	DB	09fH
	DB	0d4H
	DB	0dbH
	DB	050H
	DB	096H
	DB	0d0H
	DB	0b7H
	DB	085H
	DB	093H
	DB	0b9H
	DB	04cH
	DB	02H
	DB	09bH
	DB	0ccH
	DB	075H
	DB	091H
	DB	04bH
	DB	0dH
	DB	0e3H
	DB	08aH
	DB	037H
	DB	0f6H
	DB	09dH
	DB	0ecH
	DB	0efH
	DB	01cH
	DB	09H
	DB	06aH
	DB	0d6H
	DB	0f5H
	DB	0adH
	DB	076H
	DB	04aH
	DB	089H
	DB	046H
	DB	0e0H
	DB	0daH
	DB	0fdH
	DB	0e6H
	DB	0edH
	DB	0b7H
	DB	0b2H
	DB	070H
	DB	0d3H
	DB	07fH
	DB	0e5H
	DB	065H
	DB	04aH
	DB	073H
	DB	0c8H
	DB	0d4H
	DB	0aaH
	DB	03fH
	DB	073H
	DB	018H
	DB	02fH
	DB	0fH
	DB	0a0H
	DB	019H
	DB	0e5H
	DB	096H
	DB	0c7H
	DB	0dbH
	DB	0e0H
	DB	0d0H
	DB	023H
	DB	042H
	DB	02bH
	DB	0a0H
	DB	029H
	DB	01aH
	DB	059H
	DB	0dbH
	DB	08aH
	DB	02dH
	DB	0daH
	DB	0efH
	DB	012H
	DB	025H
	DB	063H
	DB	05bH
	DB	0f9H
	DB	08eH
	DB	09aH
	DB	0ecH
	DB	026H
	DB	04aH
	DB	0fbH
	DB	0c6H
	DB	0e2H
	DB	061H
	DB	0ddH
	DB	02aH
	DB	0bdH
	DB	03eH
	DB	07bH
	DB	0e0H
	DB	00H
	DB	0a6H
	DB	01H
	DB	0a8H
	DB	040H
	DB	05aH
	DB	084H
	DB	04aH
	DB	07H
	DB	0deH
	DB	0baH
	DB	099H
	DB	04H
	DB	09dH
	DB	0f4H
	DB	07eH
	DB	0abH
	DB	0fH
	DB	0eaH
	DB	0d1H
	DB	0d8H
	DB	0e7H
	DB	019H
	DB	0bcH
	DB	0c8H
	DB	076H
	DB	0e6H
	DB	086H
	DB	0b4H
	DB	062H
	DB	0e6H
	DB	0b5H
	DB	089H
	DB	0e8H
	DB	05eH
	DB	0c9H
	DB	043H
	DB	063H
	DB	094H
	DB	0caH
	DB	0c1H
	DB	04fH
	DB	064H
	DB	0c6H
	DB	0ecH
	DB	0d8H
	DB	0c4H
	DB	099H
	DB	0e7H
	DB	0afH
	DB	0eaH
	DB	0c1H
	DB	017H
	DB	04H
	DB	0fdH
	DB	060H
	DB	0f9H
	DB	0e4H
	DB	0e6H
	DB	0afH
	DB	0c7H
	DB	0ceH
	DB	0e4H
	DB	051H
	DB	037H
	DB	0c2H
	DB	09aH
	DB	0f9H
	DB	0a5H
	DB	02fH
	DB	0c4H
	DB	068H
	DB	07eH
	DB	029H
	DB	0aeH
	DB	0ebH
	DB	02H
	DB	0f2H
	DB	05H
	DB	06aH
	DB	022H
	DB	0efH
	DB	0abH
	DB	0b9H
	DB	074H
	DB	0a9H
	DB	01aH
	DB	06eH
	DB	0eH
	DB	01H
	DB	09dH
	DB	0d5H
	DB	04fH
	DB	02H
	DB	0a6H
	DB	086H
	DB	045H
	DB	042H
	DB	081H
	DB	0eaH
	DB	0f0H
	DB	046H
	DB	0d2H
	DB	0efH
	DB	0efH
	DB	01H
	DB	05bH
	DB	071H
	DB	0f3H
	DB	060H
	DB	05bH
	DB	017H
	DB	0cfH
	DB	07H
	DB	0d0H
	DB	044H
	DB	030H
	DB	0eaH
	DB	033H
	DB	03fH
	DB	06bH
	DB	050H
	DB	094H
	DB	0bbH
	DB	053H
	DB	03cH
	DB	042H
	DB	098H
	DB	0fdH
	DB	043H
	DB	03H
	DB	06eH
	DB	0aH
	DB	0d6H
	DB	05eH
	DB	0f9H
	DB	0d7H
	DB	0b9H
	DB	0eaH
	DB	04cH
	DB	099H
	DB	047H
	DB	0e2H
	DB	06aH
	DB	0cdH
	DB	033H
	DB	02eH
	DB	0feH
	DB	09dH
	DB	061H
	DB	0bdH
	DB	09H
	DB	032H
	DB	052H
	DB	044H
	DB	085H
	DB	0eH
	DB	087H
	DB	01eH
	DB	08bH
	DB	04aH
	DB	0a0H
	DB	0faH
	DB	054H
	DB	077H
	DB	0d8H
	DB	0cdH
	DB	0cfH
	DB	013H
	DB	0b9H
	DB	09bH
	DB	0acH
	DB	080H
	DB	07eH
	DB	096H
	DB	0cdH
	DB	031H
	DB	0c5H
	DB	04cH
	DB	0ceH
	DB	0a6H
	DB	0aH
	DB	057H
	DB	0d8H
	DB	05dH
	DB	09cH
	DB	0ddH
	DB	0eaH
	DB	0a3H
	DB	07bH
	DB	077H
	DB	0edH
	DB	01dH
	DB	0f1H
	DB	043H
	DB	014H
	DB	0caH
	DB	011H
	DB	0e3H
	DB	05dH
	DB	04aH
	DB	0feH
	DB	0bH
	DB	04aH
	DB	0fcH
	DB	021H
	DB	019H
	DB	02eH
	DB	066H
	DB	065H
	DB	0fcH
	DB	0eH
	DB	070H
	DB	055H
	DB	066H
	DB	04dH
	DB	0f1H
	DB	0c4H
	DB	038H
	DB	095H
	DB	040H
	DB	02fH
	DB	03H
	DB	05dH
	DB	021H
	DB	046H
	DB	072H
	DB	06cH
	DB	0d7H
	DB	0d5H
	DB	0c9H
	DB	022H
	DB	0d5H
	DB	054H
	DB	06dH
	DB	0d2H
	DB	076H
	DB	06H
	DB	081H
	DB	0dcH
	DB	06bH
	DB	0fdH
	DB	06aH
	DB	05bH
	DB	053H
	DB	051H
	DB	028H
	DB	0c4H
	DB	016H
	DB	0e0H
	DB	0d9H
	DB	056H
	DB	010H
	DB	0ddH
	DB	034H
	DB	0b1H
	DB	0a3H
	DB	0a6H
	DB	01eH
	DB	07bH
	DB	0fbH
	DB	0e7H
	DB	09eH
	DB	051H
	DB	03dH
	DB	08bH
	DB	0a4H
	DB	033H
	DB	011H
	DB	026H
	DB	010H
	DB	07cH
	DB	024H
	DB	0faH
	DB	058H
	DB	0f7H
	DB	04cH
	DB	080H
	DB	03cH
	DB	0e1H
	DB	061H
	DB	096H
	DB	038H
	DB	0f1H
	DB	074H
	DB	06cH
	DB	0a3H
	DB	097H
	DB	092H
	DB	0c1H
	DB	014H
	DB	0fH
	DB	029H
	DB	032H
	DB	060H
	DB	0e5H
	DB	03dH
	DB	084H
	DB	098H
	DB	04eH
	DB	0aaH
	DB	029H
	DB	04aH
	DB	04fH
	DB	024H
	DB	0a2H
	DB	0c6H
	DB	0efH
	DB	0a3H
	DB	03H
	DB	0d1H
	DB	05H
	DB	099H
	DB	0aH
	DB	076H
	DB	08dH
	DB	0f6H
	DB	01aH
	DB	026H
	DB	09H
	DB	05bH
	DB	03aH
	DB	097H
	DB	05H
	DB	0ebH
	DB	0f8H
	DB	0eaH
	DB	029H
	DB	07dH
	DB	04H
	DB	077H
	DB	0a8H
	DB	02dH
	DB	041H
	DB	077H
	DB	051H
	DB	0e4H
	DB	03eH
	DB	041H
	DB	088H
	DB	041H
	DB	092H
	DB	0dH
	DB	0dbH
	DB	01cH
	DB	084H
	DB	0e8H
	DB	013H
	DB	01eH
	DB	0fH
	DB	09cH
	DB	07aH
	DB	0c8H
	DB	034H
	DB	0feH
	DB	0b4H
	DB	0acH
	DB	069H
	DB	05dH
	DB	0aaH
	DB	06dH
	DB	054H
	DB	0d2H
	DB	09aH
	DB	096H
	DB	04aH
	DB	0ebH
	DB	07bH
	DB	088H
	DB	0acH
	DB	083H
	DB	049H
	DB	03fH
	DB	010H
	DB	025H
	DB	05cH
	DB	014H
	DB	08eH
	DB	0eeH
	DB	033H
	DB	09dH
	DB	0bH
	DB	02dH
	DB	0e6H
	DB	040H
	DB	02cH
	DB	01bH
	DB	06cH
	DB	095H
	DB	079H
	DB	017H
	DB	04H
	DB	04dH
	DB	0e9H
	DB	09eH
	DB	0e3H
	DB	034H
	DB	0bH
	DB	0deH
	DB	03cH
	DB	037H
	DB	0e1H
	DB	086H
	DB	0f6H
	DB	0f2H
	DB	02bH
	DB	0d2H
	DB	07H
	DB	0b9H
	DB	0c1H
	DB	03aH
	DB	0d7H
	DB	0cdH
	DB	0e6H
	DB	0beH
	DB	08dH
	DB	013H
	DB	059H
	DB	0f9H
	DB	029H
	DB	0d2H
	DB	091H
	DB	0acH
	DB	0a0H
	DB	07bH
	DB	04bH
	DB	084H
	DB	030H
	DB	0d5H
	DB	0e3H
	DB	0ebH
	DB	0eH
	DB	0c5H
	DB	072H
	DB	084H
	DB	0b8H
	DB	09eH
	DB	057H
	DB	040H
	DB	0d7H
	DB	098H
	DB	0f9H
	DB	0afH
	DB	0e5H
	DB	0e1H
	DB	0edH
	DB	073H
	DB	074H
	DB	0c7H
	DB	0edH
	DB	09dH
	DB	09aH
	DB	07fH
	DB	04aH
	DB	0baH
	DB	07aH
	DB	016H
	DB	040H
	DB	02aH
	DB	0ebH
	DB	024H
	DB	017H
	DB	079H
	DB	069H
	DB	09H
	DB	07dH
	DB	023H
	DB	027H
	DB	0d4H
	DB	063H
	DB	00H
	DB	06eH
	DB	0dcH
	DB	02fH
	DB	054H
	DB	0beH
	DB	09dH
	DB	048H
	DB	034H
	DB	065H
	DB	036H
	DB	051H
	DB	07fH
	DB	035H
	DB	09cH
	DB	03bH
	DB	02fH
	DB	032H
	DB	0faH
	DB	0d9H
	DB	09dH
	DB	09eH
	DB	070H
	DB	018H
	DB	08H
	DB	079H
	DB	015H
	DB	0aaH
	DB	0a1H
	DB	0eaH
	DB	08dH
	DB	0a1H
	DB	059H
	DB	06bH
	DB	050H
	DB	02dH
	DB	02aH
	DB	0edH
	DB	075H
	DB	0ddH
	DB	053H
	DB	02bH
	DB	030H
	DB	053H
	DB	0dfH
	DB	0ccH
	DB	08eH
	DB	010H
	DB	0feH
	DB	089H
	DB	069H
	DB	09cH
	DB	028H
	DB	0d9H
	DB	034H
	DB	0afH
	DB	053H
	DB	04aH
	DB	05bH
	DB	074H
	DB	0b4H
	DB	0e8H
	DB	095H
	DB	08dH
	DB	054H
	DB	0e6H
	DB	0baH
	DB	07fH
	DB	054H
	DB	0b0H
	DB	0dcH
	DB	0a8H
	DB	0dbH
	DB	0dH
	DB	07bH
	DB	0bcH
	DB	0d9H
	DB	0aH
	DB	04cH
	DB	058H
	DB	013H
	DB	035H
	DB	075H
	DB	0baH
	DB	0fH
	DB	029H
	DB	06aH
	DB	0e1H
	DB	0f2H
	DB	0c5H
	DB	057H
	DB	0a7H
	DB	0afH
	DB	0ecH
	DB	035H
	DB	04H
	DB	0d3H
	DB	070H
	DB	03H
	DB	029H
	DB	021H
	DB	060H
	DB	051H
	DB	07cH
	DB	06dH
	DB	0ccH
	DB	0b8H
	DB	0c7H
	DB	056H
	DB	084H
	DB	020H
	DB	069H
	DB	0b9H
	DB	015H
	DB	024H
	DB	048H
	DB	03fH
	DB	08eH
	DB	02bH
	DB	0b1H
	DB	0d4H
	DB	082H
	DB	05aH
	DB	084H
	DB	0eeH
	DB	0fH
	DB	08H
	DB	0c3H
	DB	0feH
	DB	08bH
	DB	06cH
	DB	09fH
	DB	0ebH
	DB	03dH
	DB	01dH
	DB	059H
	DB	089H
	DB	055H
	DB	021H
	DB	0dfH
	DB	05aH
	DB	0c1H
	DB	049H
	DB	014H
	DB	056H
	DB	0ecH
	DB	0dcH
	DB	015H
	DB	0faH
	DB	08H
	DB	0c7H
	DB	0cfH
	DB	0aH
	DB	022H
	DB	054H
	DB	078H
	DB	0b0H
	DB	0dcH
	DB	0bbH
	DB	0b0H
	DB	068H
	DB	028H
	DB	0cfH
	DB	0d3H
	DB	0e4H
	DB	06cH
	DB	02dH
	DB	06eH
	DB	0c2H
	DB	0ceH
	DB	04eH
	DB	01dH
	DB	010H
	DB	017H
	DB	0b0H
	DB	0e5H
	DB	04H
	DB	0dH
	DB	0fbH
	DB	00H
	DB	015H
	DB	0c3H
	DB	04fH
	DB	09eH
	DB	065H
	DB	0a4H
	DB	018H
	DB	095H
	DB	01H
	DB	0d3H
	DB	0c5H
	DB	069H
	DB	07cH
	DB	096H
	DB	03dH
	DB	061H
	DB	03H
	DB	0e9H
	DB	0d0H
	DB	045H
	DB	038H
	DB	09eH
	DB	0e1H
	DB	0c7H
	DB	0b6H
	DB	013H
	DB	0aeH
	DB	0baH
	DB	020H
	DB	02aH
	DB	03aH
	DB	036H
	DB	0edH
	DB	08aH
	DB	054H
	DB	0d2H
	DB	0aeH
	DB	0ebH
	DB	068H
	DB	0afH
	DB	0c0H
	DB	0aeH
	DB	098H
	DB	0bcH
	DB	045H
	DB	055H
	DB	01eH
	DB	0c7H
	DB	0beH
	DB	06eH
	DB	0eH
	DB	077H
	DB	0eH
	DB	0efH
	DB	03fH
	DB	0c4H
	DB	03H
	DB	06dH
	DB	0feH
	DB	024H
	DB	097H
	DB	0b9H
	DB	0d9H
	DB	05H
	DB	0c3H
	DB	0adH
	DB	057H
	DB	072H
	DB	09aH
	DB	0c0H
	DB	0a1H
	DB	0daH
	DB	0eeH
	DB	03aH
	DB	097H
	DB	034H
	DB	0fH
	DB	035H
	DB	0fbH
	DB	0cdH
	DB	0a4H
	DB	089H
	DB	045H
	DB	032H
	DB	0f9H
	DB	05H
	DB	0f6H
	DB	07cH
	DB	072H
	DB	075H
	DB	020H
	DB	08aH
	DB	02fH
	DB	079H
	DB	08fH
	DB	0f2H
	DB	028H
	DB	0e7H
	DB	0e4H
	DB	0c2H
	DB	028H
	DB	086H
	DB	01dH
	DB	017H
	DB	040H
	DB	0b4H
	DB	0caH
	DB	04fH
	DB	069H
	DB	046H
	DB	01eH
	DB	0eH
	DB	050H
	DB	063H
	DB	040H
	DB	04aH
	DB	068H
	DB	0b6H
	DB	0c6H
	DB	05bH
	DB	02dH
	DB	0e7H
	DB	0e5H
	DB	0dbH
	DB	061H
	DB	0f4H
	DB	0cfH
	DB	09H
	DB	0dcH
	DB	0b4H
	DB	04bH
	DB	084H
	DB	0bbH
	DB	068H
	DB	01bH
	DB	0fbH
	DB	09cH
	DB	065H
	DB	04cH
	DB	07H
	DB	0acH
	DB	06aH
	DB	015H
	DB	0fcH
	DB	04dH
	DB	0d5H
	DB	0c6H
	DB	0b6H
	DB	0cH
	DB	08dH
	DB	091H
	DB	0b8H
	DB	0f4H
	DB	077H
	DB	095H
	DB	0d6H
	DB	06cH
	DB	0e4H
	DB	0dfH
	DB	0c9H
	DB	019H
	DB	0abH
	DB	0cdH
	DB	0d4H
	DB	014H
	DB	0e9H
	DB	0d1H
	DB	0b1H
	DB	04fH
	DB	01eH
	DB	0b8H
	DB	07bH
	DB	08H
	DB	04dH
	DB	078H
	DB	055H
	DB	0a2H
	DB	03fH
	DB	08bH
	DB	0afH
	DB	04dH
	DB	01dH
	DB	0e7H
	DB	0c1H
	DB	014H
	DB	07dH
	DB	098H
	DB	081H
	DB	062H
	DB	0f8H
	DB	0caH
	DB	07cH
	DB	024H
	DB	098H
	DB	051H
	DB	038H
	DB	02H
	DB	0a2H
	DB	069H
	DB	052H
	DB	040H
	DB	022H
	DB	04dH
	DB	048H
	DB	0efH
	DB	0c6H
	DB	09eH
	DB	092H
	DB	085H
	DB	0a9H
	DB	0c1H
	DB	0d2H
	DB	0c7H
	DB	0aaH
	DB	015H
	DB	0dbH
	DB	0a7H
	DB	0adH
	DB	0dcH
	DB	0bH
	DB	026H
	DB	0a7H
	DB	07H
	DB	04aH
	DB	0c0H
	DB	0d7H
	DB	03H
	DB	0c2H
	DB	07bH
	DB	06cH
	DB	094H
	DB	0bbH
	DB	0fH
	DB	0e2H
	DB	084H
	DB	0feH
	DB	029H
	DB	023H
	DB	011H
	DB	0aeH
	DB	0ccH
	DB	053H
	DB	02H
	DB	014H
	DB	07dH
	DB	017H
	DB	070H
	DB	025H
	DB	044H
	DB	04dH
	DB	0afH
	DB	0eaH
	DB	075H
	DB	036H
	DB	0b4H
	DB	0b5H
	DB	0fH
	DB	0b7H
	DB	078H
	DB	0aH
	DB	0a4H
	DB	08dH
	DB	045H
	DB	0b3H
	DB	070H
	DB	0c9H
	DB	0b2H
	DB	099H
	DB	06cH
	DB	043H
	DB	0c7H
	DB	0b9H
	DB	096H
	DB	0c9H
	DB	04dH
	DB	014H
	DB	060H
	DB	0bdH
	DB	0b9H
	DB	025H
	DB	08bH
	DB	069H
	DB	010H
	DB	080H
	DB	020H
	DB	044H
	DB	036H
	DB	02fH
	DB	0fcH
	DB	02eH
	DB	0b8H
	DB	0a1H
	DB	0bbH
	DB	0fdH
	DB	0d4H
	DB	0abH
	DB	048H
	DB	07H
	DB	045H
	DB	034H
	DB	04aH
	DB	08dH
	DB	0edH
	DB	061H
	DB	0d6H
	DB	0bbH
	DB	0f4H
	DB	038H
	DB	079H
	DB	0aeH
	DB	0dcH
	DB	084H
	DB	098H
	DB	0ecH
	DB	05H
	DB	0b8H
	DB	031H
	DB	03bH
	DB	067H
	DB	0adH
	DB	0e9H
	DB	020H
	DB	0ceH
	DB	0a5H
	DB	09dH
	DB	0a3H
	DB	052H
	DB	065H
	DB	0aaH
	DB	017H
	DB	09aH
	DB	0f5H
	DB	0a4H
	DB	08H
	DB	0d6H
	DB	0fbH
	DB	043H
	DB	0cbH
	DB	034H
	DB	0bdH
	DB	07bH
	DB	011H
	DB	0c1H
	DB	093H
	DB	07dH
	DB	0c7H
	DB	04cH
	DB	02eH
	DB	082H
	DB	033H
	DB	05cH
	DB	06cH
	DB	053H
	DB	02bH
	DB	013H
	DB	070H
	DB	04fH
	DB	0e4H
	DB	056H
	DB	0f9H
	DB	0fbH
	DB	070H
	DB	06fH
	DB	021H
	DB	0f7H
	DB	046H
	DB	01dH
	DB	03cH
	DB	013H
	DB	0d0H
	DB	079H
	DB	0eH
	DB	061H
	DB	03bH
	DB	0a1H
	DB	05eH
	DB	03H
	DB	06dH
	DB	08cH
	DB	086H
	DB	0a0H
	DB	0e8H
	DB	072H
	DB	0f3H
	DB	094H
	DB	05H
	DB	0e3H
	DB	0e3H
	DB	0e9H
	DB	03aH
	DB	05dH
	DB	066H
	DB	02aH
	DB	0cdH
	DB	07H
	DB	023H
	DB	093H
	DB	0a3H
	DB	05fH
	DB	0a6H
	DB	074H
	DB	0d8H
	DB	034H
	DB	055H
	DB	014H
	DB	0d5H
	DB	0b3H
	DB	018H
	DB	043H
	DB	0bfH
	DB	01eH
	DB	0e3H
	DB	029H
	DB	090H
	DB	057H
	DB	0bdH
	DB	096H
	DB	0bbH
	DB	021H
	DB	00H
	DB	075H
	DB	07eH
	DB	066H
	DB	0a0H
	DB	04cH
	DB	0ecH
	DB	0c3H
	DB	0e0H
	DB	090H
	DB	023H
	DB	07H
	DB	084H
	DB	07bH
	DB	0bbH
	DB	0d9H
	DB	08fH
	DB	011H
	DB	08dH
	DB	027H
	DB	055H
	DB	0cdH
	DB	0c4H
	DB	0b8H
	DB	0f6H
	DB	056H
	DB	090H
	DB	0b4H
	DB	06cH
	DB	04cH
	DB	055H
	DB	0ebH
	DB	041H
	DB	0d3H
	DB	0d2H
	DB	0e1H
	DB	021H
	DB	0bfH
	DB	0a5H
	DB	081H
	DB	051H
	DB	048H
	DB	08H
	DB	0d5H
	DB	0c3H
	DB	043H
	DB	0b0H
	DB	0d3H
	DB	055H
	DB	0bdH
	DB	0faH
	DB	0aaH
	DB	08bH
	DB	0c0H
	DB	0e2H
	DB	02H
	DB	096H
	DB	0f2H
	DB	036H
	DB	082H
	DB	0beH
	DB	08bH
	DB	06eH
	DB	01H
	DB	060H
	DB	041H
	DB	062H
	DB	01H
	DB	02H
	DB	09H
	DB	02H
	DB	0d2H
	DB	0d0H
	DB	089H
	DB	0a8H
	DB	015H
	DB	0cdH
	DB	0d8H
	DB	0e8H
	DB	023H
	DB	017H
	DB	063H
	DB	04dH
	DB	022H
	DB	0a3H
	DB	0afH
	DB	025H
	DB	0b9H
	DB	0a3H
	DB	05bH
	DB	0bbH
	DB	062H
	DB	0e7H
	DB	02bH
	DB	0e2H
	DB	048H
	DB	0ebH
	DB	046H
	DB	0c8H
	DB	06dH
	DB	0ceH
	DB	0caH
	DB	040H
	DB	09fH
	DB	054H
	DB	069H
	DB	034H
	DB	0a1H
	DB	0c1H
	DB	09cH
	DB	0c4H
	DB	0d8H
	DB	080H
	DB	012H
	DB	0fbH
	DB	024H
	DB	0c2H
	DB	0a0H
	DB	05eH
	DB	0e5H
	DB	0fbH
	DB	01aH
	DB	048H
	DB	0e3H
	DB	0c4H
	DB	02cH
	DB	0abH
	DB	031H
	DB	0f1H
	DB	0f3H
	DB	09eH
	DB	0c0H
	DB	03eH
	DB	05fH
	DB	0dfH
	DB	093H
	DB	0c8H
	DB	015H
	DB	0b4H
	DB	0aH
	DB	0b1H
	DB	07aH
	DB	0e3H
	DB	032H
	DB	08cH
	DB	05fH
	DB	0d6H
	DB	0ceH
	DB	00H
	DB	0b4H
	DB	0b4H
	DB	07bH
	DB	04eH
	DB	07dH
	DB	0dfH
	DB	014H
	DB	029H
	DB	0bH
	DB	045H
	DB	01bH
	DB	00H
	DB	063H
	DB	0dbH
	DB	03eH
	DB	0c2H
	DB	0bbH
	DB	051H
	DB	08bH
	DB	050H
	DB	07H
	DB	016H
	DB	082H
	DB	081H
	DB	079H
	DB	0b4H
	DB	08dH
	DB	0d8H
	DB	0bH
	DB	0dcH
	DB	058H
	DB	03fH
	DB	011H
	DB	053H
	DB	08eH
	DB	08eH
	DB	033H
	DB	0a2H
	DB	0b7H
	DB	0beH
	DB	067H
	DB	052H
	DB	0beH
	DB	0caH
	DB	0adH
	DB	07cH
	DB	08eH
	DB	0e9H
	DB	04eH
	DB	099H
	DB	03aH
	DB	055H
	DB	0afH
	DB	0bcH
	DB	056H
	DB	029H
	DB	0f1H
	DB	063H
	DB	081H
	DB	07cH
	DB	0bfH
	DB	059H
	DB	0bcH
	DB	0d1H
	DB	02dH
	DB	04bH
	DB	0dfH
	DB	060H
	DB	06dH
	DB	098H
	DB	09eH
	DB	0d4H
	DB	06aH
	DB	05dH
	DB	01fH
	DB	019H
	DB	05aH
	DB	02dH
	DB	03H
	DB	0a8H
	DB	0c7H
	DB	03dH
	DB	0fdH
	DB	0f6H
	DB	07aH
	DB	0d3H
	DB	0a0H
	DB	06cH
	DB	0b6H
	DB	0a1H
	DB	0e8H
	DB	077H
	DB	07bH
	DB	0a5H
	DB	0c8H
	DB	0a8H
	DB	070H
	DB	0a8H
	DB	088H
	DB	0ddH
	DB	0c0H
	DB	028H
	DB	0b2H
	DB	02cH
	DB	05H
	DB	052H
	DB	045H
	DB	05fH
	DB	07fH
	DB	048H
	DB	087H
	DB	0c6H
	DB	05H
	DB	085H
	DB	03eH
	DB	07fH
	DB	0d8H
	DB	0deH
	DB	06bH
	DB	090H
	DB	00H
	DB	0d4H
	DB	087H
	DB	0faH
	DB	07aH
	DB	050H
	DB	023H
	DB	0ebH
	DB	0f8H
	DB	0acH
	DB	0c9H
	DB	03aH
	DB	054H
	DB	0fcH
	DB	066H
	DB	0d8H
	DB	04fH
	DB	02bH
	DB	039H
	DB	0ceH
	DB	0f2H
	DB	0c0H
	DB	096H
	DB	0f7H
	DB	0c6H
	DB	054H
	DB	0f7H
	DB	01fH
	DB	033H
	DB	063H
	DB	02fH
	DB	0b2H
	DB	038H
	DB	036H
	DB	0aeH
	DB	033H
	DB	086H
	DB	0d1H
	DB	09eH
	DB	00H
	DB	0fdH
	DB	0e7H
	DB	03aH
	DB	0d1H
	DB	0e4H
	DB	020H
	DB	0abH
	DB	0b3H
	DB	04bH
	DB	064H
	DB	03H
	DB	03eH
	DB	025H
	DB	019H
	DB	0b5H
	DB	06bH
	DB	06dH
	DB	0adH
	DB	0bH
	DB	020H
	DB	091H
	DB	03aH
	DB	0d2H
	DB	0c9H
	DB	071H
	DB	01H
	DB	07cH
	DB	077H
	DB	0d3H
	DB	01bH
	DB	0f6H
	DB	051H
	DB	04H
	DB	0b0H
	DB	024H
	DB	068H
	DB	0d0H
	DB	0cfH
	DB	01dH
	DB	09bH
	DB	034H
	DB	020H
	DB	0d9H
	DB	0d8H
	DB	0b8H
	DB	010H
	DB	0c4H
	DB	026H
	DB	0bdH
	DB	0cfH
	DB	046H
	DB	04fH
	DB	089H
	DB	019H
	DB	099H
	DB	07aH
	DB	09aH
	DB	016H
	DB	072H
	DB	0edH
	DB	032H
	DB	069H
	DB	03fH
	DB	0b5H
	DB	01bH
	DB	063H
	DB	01eH
	DB	06bH
	DB	0b2H
	DB	0baH
	DB	08H
	DB	0e6H
	DB	0daH
	DB	061H
	DB	040H
	DB	093H
	DB	071H
	DB	05H
	DB	039H
	DB	0afH
	DB	054H
	DB	07fH
	DB	07eH
	DB	05dH
	DB	019H
	DB	018H
	DB	0d8H
	DB	0b3H
	DB	0aeH
	DB	04bH
	DB	0a1H
	DB	060H
	DB	034H
	DB	0e0H
	DB	016H
	DB	04fH
	DB	0c4H
	DB	034H
	DB	03bH
	DB	077H
	DB	0efH
	DB	043H
	DB	0deH
	DB	04aH
	DB	024H
	DB	01fH
	DB	05eH
	DB	016H
	DB	0a3H
	DB	097H
	DB	0c5H
	DB	077H
	DB	097H
	DB	044H
	DB	0d4H
	DB	0b0H
	DB	0dcH
	DB	0adH
	DB	0e3H
	DB	08bH
	DB	078H
	DB	085H
	DB	0ebH
	DB	0adH
	DB	0e5H
	DB	02H
	DB	07cH
	DB	02aH
	DB	0b5H
	DB	0b7H
	DB	022H
	DB	025H
	DB	07aH
	DB	01H
	DB	0efH
	DB	09fH
	DB	09fH
	DB	04eH
	DB	0b5H
	DB	0c2H
	DB	065H
	DB	07bH
	DB	03aH
	DB	07cH
	DB	03fH
	DB	0fH
	DB	0acH
	DB	01cH
	DB	03dH
	DB	090H
	DB	027H
	DB	035H
	DB	095H
	DB	092H
	DB	0e2H
	DB	0fbH
	DB	094H
	DB	060H
	DB	026H
	DB	0caH
	DB	097H
	DB	0c7H
	DB	06fH
	DB	013H
	DB	048H
	DB	05fH
	DB	032H
	DB	067H
	DB	02dH
	DB	0e7H
	DB	02aH
	DB	013H
	DB	0e2H
	DB	0e3H
	DB	08fH
	DB	0a1H
	DB	0f3H
	DB	03dH
	DB	03eH
	DB	0b0H
	DB	0cdH
	DB	065H
	DB	0e5H
	DB	0e3H
	DB	0f8H
	DB	049H
	DB	0dfH
	DB	0dH
	DB	029H
	DB	085H
	DB	057H
	DB	0c0H
	DB	04eH
	DB	0c7H
	DB	053H
	DB	096H
	DB	027H
	DB	085H
	DB	07eH
	DB	0d4H
	DB	06dH
	DB	0a8H
	DB	0e7H
	DB	0cfH
	DB	08dH
	DB	0f6H
	DB	072H
	DB	01H
	DB	034H
	DB	0b0H
	DB	0b1H
	DB	082H
	DB	095H
	DB	017H
	DB	0e5H
	DB	0eH
	DB	060H
	DB	0c5H
	DB	01cH
	DB	089H
	DB	0caH
	DB	073H
	DB	0caH
	DB	098H
	DB	0baH
	DB	01eH
	DB	0afH
	DB	0e2H
	DB	0a4H
	DB	02eH
	DB	037H
	DB	091H
	DB	0d6H
	DB	01fH
	DB	062H
	DB	0e3H
	DB	095H
	DB	054H
	DB	0e4H
	DB	0caH
	DB	084H
	DB	016H
	DB	0ccH
	DB	01aH
	DB	0adH
	DB	0b2H
	DB	029H
	DB	0eH
	DB	0f7H
	DB	0c4H
	DB	018H
	DB	0c2H
	DB	0b7H
	DB	0e2H
	DB	05cH
	DB	073H
	DB	01H
	DB	08bH
	DB	0d5H
	DB	025H
	DB	0b9H
	DB	0dH
	DB	0b7H
	DB	090H
	DB	0abH
	DB	099H
	DB	0f4H
	DB	041H
	DB	0edH
	DB	0d9H
	DB	08bH
	DB	072H
	DB	070H
	DB	0d7H
	DB	0cH
	DB	01eH
	DB	08aH
	DB	0b4H
	DB	0abH
	DB	02H
	DB	079H
	DB	043H
	DB	045H
	DB	032H
	DB	026H
	DB	0a1H
	DB	0a5H
	DB	0a7H
	DB	02dH
	DB	0faH
	DB	04cH
	DB	066H
	DB	08H
	DB	04H
	DB	0f6H
	DB	033H
	DB	01dH
	DB	0ebH
	DB	0f3H
	DB	0bH
	DB	046H
	DB	080H
	DB	0fcH
	DB	036H
	DB	058H
	DB	089H
	DB	054H
	DB	063H
	DB	03eH
	DB	07fH
	DB	0e4H
	DB	0b8H
	DB	0c3H
	DB	02aH
	DB	06aH
	DB	069H
	DB	0cbH
	DB	08fH
	DB	090H
	DB	078H
	DB	08aH
	DB	0ddH
	DB	0deH
	DB	012H
	DB	061H
	DB	056H
	DB	045H
	DB	07fH
	DB	0c1H
	DB	039H
	DB	0aH
	DB	087H
	DB	039H
	DB	087H
	DB	0bdH
	DB	012H
	DB	011H
	DB	091H
	DB	0f4H
	DB	04fH
	DB	012H
	DB	0d9H
	DB	087H
	DB	055H
	DB	05H
	DB	071H
	DB	03eH
	DB	050H
	DB	01H
	DB	0cfH
	DB	049H
	DB	0bH
	DB	02dH
	DB	0a7H
	DB	01dH
	DB	08eH
	DB	07dH
	DB	0e1H
	DB	08dH
	DB	040H
	DB	09bH
	DB	018H
	DB	0c7H
	DB	0d4H
	DB	09fH
	DB	06H
	DB	066H
	DB	030H
	DB	097H
	DB	05bH
	DB	0feH
	DB	029H
	DB	0b5H
	DB	087H
	DB	0fdH
	DB	0baH
	DB	078H
	DB	03dH
	DB	08aH
	DB	07aH
	DB	08cH
	DB	0d3H
	DB	085H
	DB	0b9H
	DB	0fbH
	DB	023H
	DB	0c7H
	DB	079H
	DB	05H
	DB	0d5H
	DB	0b9H
	DB	0a0H
	DB	0edH
	DB	02H
	DB	0f5H
	DB	0dH
	DB	08H
	DB	0dbH
	DB	03dH
	DB	01fH
	DB	0b7H
	DB	03cH
	DB	049H
	DB	06dH
	DB	043H
	DB	047H
	DB	0a7H
	DB	0bcH
	DB	084H
	DB	032H
	DB	0b6H
	DB	090H
	DB	086H
	DB	0bbH
	DB	04aH
	DB	082H
	DB	0deH
	DB	092H
	DB	0fbH
	DB	0e4H
	DB	068H
	DB	036H
	DB	05H
	DB	0d5H
	DB	0b7H
	DB	07aH
	DB	0e2H
	DB	0bfH
	DB	057H
	DB	09fH
	DB	0deH
	DB	0fH
	DB	0dbH
	DB	0a7H
	DB	0fbH
	DB	09fH
	DB	0efH
	DB	0a3H
	DB	0dbH
	DB	0f3H
	DB	055H
	DB	092H
	DB	085H
	DB	0dbH
	DB	04eH
	DB	04fH
	DB	0ddH
	DB	0adH
	DB	061H
	DB	05aH
	DB	012H
	DB	0c9H
	DB	090H
	DB	017H
	DB	09fH
	DB	048H
	DB	092H
	DB	082H
	DB	087H
	DB	069H
	DB	022H
	DB	0e5H
	DB	078H
	DB	07eH
	DB	08eH
	DB	074H
	DB	09dH
	DB	0fdH
	DB	097H
	DB	0f8H
	DB	071H
	DB	0ecH
	DB	0bH
	DB	0f6H
	DB	049H
	DB	0d8H
	DB	0c6H
	DB	0a6H
	DB	086H
	DB	028H
	DB	01H
	DB	098H
	DB	072H
	DB	011H
	DB	0b0H
	DB	091H
	DB	0d8H
	DB	0c2H
	DB	015H
	DB	060H
	DB	02cH
	DB	0b6H
	DB	0c6H
	DB	024H
	DB	0b4H
	DB	0d4H
	DB	018H
	DB	0d1H
	DB	0d2H
	DB	0afH
	DB	0caH
	DB	044H
	DB	01cH
	DB	0d5H
	DB	0bbH
	DB	065H
	DB	0afH
	DB	02H
	DB	0dH
	DB	0b5H
	DB	02aH
	DB	0eH
	DB	04fH
	DB	01cH
	DB	09fH
	DB	07fH
	DB	0aeH
	DB	078H
	DB	0c1H
	DB	043H
	DB	059H
	DB	0edH
	DB	079H
	DB	020H
	DB	091H
	DB	02fH
	DB	0f4H
	DB	0a9H
	DB	080H
	DB	047H
	DB	059H
	DB	04cH
	DB	08bH
	DB	075H
	DB	0a1H
	DB	047H
	DB	05bH
	DB	0d0H
	DB	049H
	DB	068H
	DB	087H
	DB	0f3H
	DB	0f5H
	DB	0d6H
	DB	010H
	DB	015H
	DB	056H
	DB	03eH
	DB	08eH
	DB	018H
	DB	081H
	DB	0e7H
	DB	085H
	DB	0fbH
	DB	087H
	DB	096H
	DB	0aaH
	DB	0fbH
	DB	040H
	DB	02bH
	DB	043H
	DB	019H
	DB	077H
	DB	04eH
	DB	0eH
	DB	099H
	DB	016H
	DB	069H
	DB	06aH
	DB	05fH
	DB	051H
	DB	0f1H
	DB	0d2H
	DB	0c7H
	DB	048H
	DB	063H
	DB	0dcH
	DB	01eH
	DB	0a1H
	DB	0eaH
	DB	0b5H
	DB	024H
	DB	052H
	DB	03bH
	DB	09fH
	DB	059H
	DB	051H
	DB	04aH
	DB	055H
	DB	091H
	DB	075H
	DB	018H
	DB	0aaH
	DB	06dH
	DB	067H
	DB	039H
	DB	07H
	DB	0fcH
	DB	022H
	DB	071H
	DB	0dbH
	DB	074H
	DB	0e3H
	DB	0afH
	DB	0bbH
	DB	02cH
	DB	092H
	DB	018H
	DB	04bH
	DB	034H
	DB	04H
	DB	080H
	DB	0d7H
	DB	056H
	DB	03cH
	DB	077H
	DB	0b0H
	DB	08dH
	DB	0c1H
	DB	085H
	DB	020H
	DB	0b7H
	DB	01eH
	DB	04aH
	DB	025H
	DB	05H
	DB	083H
	DB	0abH
	DB	02H
	DB	0a6H
	DB	09cH
	DB	0ddH
	DB	09aH
	DB	080H
	DB	08dH
	DB	056H
	DB	02dH
	DB	020H
	DB	0edH
	DB	0f7H
	DB	0d4H
	DB	0f1H
	DB	078H
	DB	02cH
	DB	0c8H
	DB	0b4H
	DB	0a4H
	DB	0f8H
	DB	043H
	DB	0e5H
	DB	0fdH
	DB	063H
	DB	09dH
	DB	01cH
	DB	02dH
	DB	042H
	DB	021H
	DB	0b1H
	DB	0edH
	DB	0a2H
	DB	0d7H
	DB	08bH
	DB	081H
	DB	0f1H
	DB	08bH
	DB	08eH
	DB	0c7H
	DB	0b8H
	DB	02fH
	DB	0b5H
	DB	0b0H
	DB	083H
	DB	0a8H
	DB	02aH
	DB	0afH
	DB	0f0H
	DB	05eH
	DB	054H
	DB	069H
	DB	0a1H
	DB	03bH
	DB	067H
	DB	084H
	DB	058H
	DB	04H
	DB	0b2H
	DB	09bH
	DB	0a4H
	DB	0e3H
	DB	089H
	DB	048H
	DB	0bbH
	DB	094H
	DB	0c9H
	DB	02dH
	DB	021H
	DB	0d7H
	DB	0f4H
	DB	0d9H
	DB	07H
	DB	0aaH
	DB	0bH
	DB	08aH
	DB	0d2H
	DB	0b4H
	DB	03bH
	DB	0c3H
	DB	013H
	DB	0fH
	DB	02dH
	DB	035H
	DB	0c9H
	DB	095H
	DB	0b9H
	DB	023H
	DB	019H
	DB	0ebH
	DB	03eH
	DB	0bdH
	DB	0cfH
	DB	0c7H
	DB	06H
	DB	0bH
	DB	05dH
	DB	04fH
	DB	038H
	DB	0fdH
	DB	028H
	DB	02dH
	DB	0d7H
	DB	02fH
	DB	0d8H
	DB	062H
	DB	03aH
	DB	0abH
	DB	017H
	DB	0f4H
	DB	0efH
	DB	0aaH
	DB	04H
	DB	01dH
	DB	0dfH
	DB	0ceH
	DB	032H
	DB	019H
	DB	071H
	DB	04bH
	DB	06H
	DB	0afH
	DB	0aH
	DB	055H
	DB	0f6H
	DB	08fH
	DB	061H
	DB	0d3H
	DB	0dfH
	DB	019H
	DB	0d1H
	DB	08H
	DB	0c6H
	DB	02aH
	DB	0b6H
	DB	09fH
	DB	0cH
	DB	070H
	DB	0caH
	DB	024H
	DB	065H
	DB	0baH
	DB	04eH
	DB	0e9H
	DB	058H
	DB	0adH
	DB	038H
	DB	0aH
	DB	046H
	DB	0a9H
	DB	0d5H
	DB	0cbH
	DB	0d8H
	DB	05fH
	DB	022H
	DB	0cfH
	DB	0eeH
	DB	03H
	DB	024H
	DB	0ceH
	DB	01cH
	DB	0f5H
	DB	056H
	DB	0e2H
	DB	09fH
	DB	0eH
	DB	02H
	DB	0acH
	DB	07eH
	DB	04dH
	DB	050H
	DB	064H
	DB	08H
	DB	09eH
	DB	04eH
	DB	0dfH
	DB	0cbH
	DB	086H
	DB	06aH
	DB	012H
	DB	0afH
	DB	040H
	DB	0deH
	DB	088H
	DB	01fH
	DB	01H
	DB	058H
	DB	08dH
	DB	083H
	DB	07cH
	DB	0dcH
	DB	09fH
	DB	0f2H
	DB	033H
	DB	03H
	DB	092H
	DB	0c0H
	DB	084H
	DB	03fH
	DB	0bfH
	DB	0d1H
	DB	08fH
	DB	024H
	DB	05aH
	DB	0adH
	DB	0f1H
	DB	03aH
	DB	079H
	DB	078H
	DB	024H
	DB	0cH
	DB	0a7H
	DB	0e3H
	DB	0eaH
	DB	030H
	DB	03H
	DB	06bH
	DB	08H
	DB	011H
	DB	0eeH
	DB	05H
	DB	0edH
	DB	0eH
	DB	0f7H
	DB	021H
	DB	090H
	DB	0aH
	DB	062H
	DB	016H
	DB	0c9H
	DB	022H
	DB	067H
	DB	0d8H
	DB	0c5H
	DB	0c1H
	DB	07H
	DB	0b7H
	DB	07cH
	DB	00H
	DB	0afH
	DB	0a0H
	DB	0cH
	DB	057H
	DB	05H
	DB	076H
	DB	07H
	DB	08H
	DB	061H
	DB	0fH
	DB	019H
	DB	0cfH
	DB	014H
	DB	086H
	DB	05eH
	DB	08bH
	DB	0a8H
	DB	0eeH
	DB	016H
	DB	0bH
	DB	084H
	DB	05fH
	DB	0acH
	DB	0ecH
	DB	038H
	DB	072H
	DB	02eH
	DB	03fH
	DB	0a9H
	DB	0aaH
	DB	040H
	DB	059H
	DB	0cbH
	DB	0cbH
	DB	030H
	DB	0d0H
	DB	043H
	DB	037H
	DB	058H
	DB	024H
	DB	0c5H
	DB	072H
	DB	0f4H
	DB	0daH
	DB	0f8H
	DB	053H
	DB	0e5H
	DB	021H
	DB	0c1H
	DB	07bH
	DB	0abH
	DB	0c6H
	DB	0daH
	DB	058H
	DB	033H
	DB	014H
	DB	04aH
	DB	061H
	DB	0d2H
	DB	0f3H
	DB	0dH
	DB	092H
	DB	0ccH
	DB	058H
	DB	05fH
	DB	07cH
	DB	029H
	DB	022H
	DB	0b3H
	DB	081H
	DB	0c5H
	DB	0f9H
	DB	073H
	DB	0baH
	DB	0d4H
	DB	0ecH
	DB	08dH
	DB	03aH
	DB	08dH
	DB	050H
	DB	0b6H
	DB	03aH
	DB	096H
	DB	091H
	DB	012H
	DB	0c9H
	DB	025H
	DB	05dH
	DB	02bH
	DB	0f8H
	DB	0d0H
	DB	0b7H
	DB	08bH
	DB	01eH
	DB	08fH
	DB	06aH
	DB	09aH
	DB	0b8H
	DB	0cH
	DB	0ceH
	DB	0baH
	DB	0d2H
	DB	0c8H
	DB	02eH
	DB	0dH
	DB	01dH
	DB	09aH
	DB	09bH
	DB	057H
	DB	029H
	DB	06bH
	DB	08dH
	DB	063H
	DB	02H
	DB	020H
	DB	0f4H
	DB	04bH
	DB	045H
	DB	052H
	DB	076H
	DB	0bdH
	DB	0a3H
	DB	0aeH
	DB	0c9H
	DB	0c1H
	DB	03eH
	DB	0b3H
	DB	05cH
	DB	077H
	DB	0c0H
	DB	02bH
	DB	032H
	DB	013H
	DB	073H
	DB	0dfH
	DB	020H
	DB	090H
	DB	07bH
	DB	0bbH
	DB	068H
	DB	0a4H
	DB	0a6H
	DB	0f5H
	DB	087H
	DB	028H
	DB	095H
	DB	07cH
	DB	073H
	DB	0dbH
	DB	04fH
	DB	06aH
	DB	019H
	DB	0f2H
	DB	098H
	DB	0e2H
	DB	034H
	DB	056H
	DB	097H
	DB	090H
	DB	0cdH
	DB	0d7H
	DB	03cH
	DB	07fH
	DB	0eaH
	DB	0afH
	DB	060H
	DB	08aH
	DB	0c0H
	DB	0dbH
	DB	0c6H
	DB	029H
	DB	00H
	DB	06dH
	DB	01fH
	DB	07H
	DB	096H
	DB	0b5H
	DB	083H
	DB	089H
	DB	011H
	DB	052H
	DB	0f3H
	DB	0a9H
	DB	0c4H
	DB	08cH
	DB	0dH
	DB	0f8H
	DB	0e3H
	DB	024H
	DB	0aH
	DB	0b1H
	DB	0fbH
	DB	046H
	DB	0b1H
	DB	066H
	DB	075H
	DB	012H
	DB	0f0H
	DB	0b5H
	DB	06dH
	DB	0b7H
	DB	0deH
	DB	06dH
	DB	0a5H
	DB	07eH
	DB	074H
	DB	0bbH
	DB	0b3H
	DB	077H
	DB	045H
	DB	044H
	DB	0caH
	DB	03aH
	DB	0edH
	DB	0fH
	DB	0c6H
	DB	0faH
	DB	09H
	DB	02aH
	DB	01fH
	DB	092H
	DB	05cH
	DB	09aH
	DB	0d8H
	DB	0eH
	DB	01H
	DB	0cdH
	DB	020H
	DB	072H
	DB	04H
	DB	0dH
	DB	0a9H
	DB	0e2H
	DB	07aH
	DB	04fH
	DB	0e0H
	DB	06eH
	DB	0bH
	DB	014H
	DB	065H
	DB	0d0H
	DB	058H
	DB	0afH
	DB	0bH
	DB	0c6H
	DB	0bfH
	DB	051H
	DB	0c1H
	DB	048H
	DB	07cH
	DB	061H
	DB	0daH
	DB	058H
	DB	07bH
	DB	033H
	DB	066H
	DB	0fcH
	DB	01H
	DB	06H
	DB	06fH
	DB	084H
	DB	013H
	DB	019H
	DB	068H
	DB	0dH
	DB	0e8H
	DB	0c8H
	DB	0faH
	DB	073H
	DB	0ddH
	DB	060H
	DB	044H
	DB	036H
	DB	011H
	DB	0ceH
	DB	07cH
	DB	050H
	DB	021H
	DB	0beH
	DB	098H
	DB	01dH
	DB	020H
	DB	073H
	DB	0f4H
	DB	01bH
	DB	0a6H
	DB	05bH
	DB	018H
	DB	027H
	DB	0e0H
	DB	087H
	DB	0acH
	DB	073H
	DB	021H
	DB	094H
	DB	00H
	DB	089H
	DB	05dH
	DB	0faH
	DB	0fcH
	DB	0baH
	DB	0daH
	DB	0c1H
	DB	071H
	DB	06bH
	DB	090H
	DB	0edH
	DB	0bbH
	DB	031H
	DB	0acH
	DB	054H
	DB	0cdH
	DB	04cH
	DB	047H
	DB	0c2H
	DB	068H
	DB	0edH
	DB	01eH
	DB	080H
	DB	095H
	DB	07eH
	DB	088H
	DB	042H
	DB	0f1H
	DB	029H
	DB	056H
	DB	071H
	DB	0b2H
	DB	033H
	DB	0ebH
	DB	02fH
	DB	0eeH
	DB	0c7H
	DB	0f0H
	DB	060H
	DB	033H
	DB	082H
	DB	0cdH
	DB	06fH
	DB	0b3H
	DB	07bH
	DB	043H
	DB	082H
	DB	0c7H
	DB	08bH
	DB	045H
	DB	0afH
	DB	0f8H
	DB	0e3H
	DB	0b0H
	DB	08eH
	DB	0e1H
	DB	0b8H
	DB	050H
	DB	054H
	DB	0e1H
	DB	0a6H
	DB	0c5H
	DB	014H
	DB	05aH
	DB	0b2H
	DB	043H
	DB	049H
	DB	0f9H
	DB	035H
	DB	029H
	DB	0acH
	DB	0b7H
	DB	0f6H
	DB	01cH
	DB	0eaH
	DB	072H
	DB	060H
	DB	0ecH
	DB	0baH
	DB	06bH
	DB	0b2H
	DB	0e9H
	DB	064H
	DB	016H
	DB	09aH
	DB	0f3H
	DB	0f7H
	DB	0d2H
	DB	0c3H
	DB	04cH
	DB	0b4H
	DB	06bH
	DB	092H
	DB	0c8H
	DB	0c5H
	DB	0c4H
	DB	08cH
	DB	08eH
	DB	0beH
	DB	0c1H
	DB	0b7H
	DB	0eaH
	DB	0f8H
	DB	02eH
	DB	08H
	DB	0e3H
	DB	021H
	DB	0e7H
	DB	051H
	DB	05bH
	DB	053H
	DB	04H
	DB	045H
	DB	0b7H
	DB	099H
	DB	060H
	DB	02bH
	DB	091H
	DB	033H
	DB	0efH
	DB	05eH
	DB	068H
	DB	0daH
	DB	070H
	DB	0b0H
	DB	020H
	DB	035H
	DB	03dH
	DB	02eH
	DB	0f3H
	DB	07eH
	DB	0e5H
	DB	0deH
	DB	077H
	DB	093H
	DB	066H
	DB	0dbH
	DB	0b4H
	DB	0cdH
	DB	02dH
	DB	010H
	DB	0a0H
	DB	0b0H
	DB	0d5H
	DB	0d8H
	DB	04aH
	DB	036H
	DB	04H
	DB	05bH
	DB	0e8H
	DB	073H
	DB	039H
	DB	0d0H
	DB	04eH
	DB	0a9H
	DB	082H
	DB	0edH
	DB	0deH
	DB	03fH
	DB	01cH
	DB	052H
	DB	0beH
	DB	081H
	DB	0b1H
	DB	0b5H
	DB	016H
	DB	018H
	DB	091H
	DB	0caH
	DB	066H
	DB	03eH
	DB	0dbH
	DB	07H
	DB	0eeH
	DB	031H
	DB	0dfH
	DB	0b8H
	DB	067H
	DB	064H
	DB	094H
	DB	0cfH
	DB	0d7H
	DB	0cdH
	DB	0a1H
	DB	0a6H
	DB	078H
	DB	0a3H
	DB	014H
	DB	057H
	DB	062H
	DB	031H
	DB	0aaH
	DB	021H
	DB	0b2H
	DB	05cH
	DB	057H
	DB	048H
	DB	0f3H
	DB	0e8H
	DB	014H
	DB	0d9H
	DB	028H
	DB	06fH
	DB	0e1H
	DB	096H
	DB	0a0H
	DB	041H
	DB	0cfH
	DB	087H
	DB	0a5H
	DB	064H
	DB	057H
	DB	0fdH
	DB	032H
	DB	078H
	DB	0a4H
	DB	0aaH
	DB	01cH
	DB	0b8H
	DB	03H
	DB	07fH
	DB	069H
	DB	02dH
	DB	020H
	DB	09cH
	DB	089H
	DB	077H
	DB	0e4H
	DB	0fcH
	DB	061H
	DB	0f8H
	DB	0d7H
	DB	09H
	DB	0e7H
	DB	039H
	DB	01fH
	DB	088H
	DB	07aH
	DB	0eeH
	DB	08fH
	DB	0a0H
	DB	053H
	DB	0e7H
	DB	01eH
	DB	06H
	DB	060H
	DB	042H
	DB	0b0H
	DB	0fcH
	DB	07aH
	DB	033H
	DB	07cH
	DB	0e4H
	DB	060H
	DB	09cH
	DB	081H
	DB	069H
	DB	094H
	DB	0e5H
	DB	067H
	DB	0f5H
	DB	0dfH
	DB	0beH
	DB	07eH
	DB	047H
	DB	077H
	DB	09dH
	DB	050H
	DB	0f1H
	DB	0dH
	DB	0dfH
	DB	012H
	DB	0dfH
	DB	047H
	DB	030H
	DB	0e5H
	DB	0a8H
	DB	072H
	DB	097H
	DB	025H
	DB	0edH
	DB	0caH
	DB	0a1H
	DB	052H
	DB	02cH
	DB	0bdH
	DB	053H
	DB	015H
	DB	052H
	DB	039H
	DB	0fbH
	DB	0c7H
	DB	019H
	DB	0baH
	DB	0c5H
	DB	0e0H
	DB	032H
	DB	0e3H
	DB	031H
	DB	0a4H
	DB	0f0H
	DB	090H
	DB	036H
	DB	0d0H
	DB	0d8H
	DB	067H
	DB	0b7H
	DB	01H
	DB	059H
	DB	04fH
	DB	026H
	DB	0c6H
	DB	099H
	DB	047H
	DB	019H
	DB	045H
	DB	05H
	DB	06cH
	DB	05bH
	DB	0d7H
	DB	0a6H
	DB	057H
	DB	01fH
	DB	03fH
	DB	092H
	DB	0e5H
	DB	020H
	DB	0c4H
	DB	0c9H
	DB	0d0H
	DB	0e8H
	DB	0baH
	DB	062H
	DB	020H
	DB	0bH
	DB	03bH
	DB	07H
	DB	0c2H
	DB	03cH
	DB	060H
	DB	091H
	DB	0e1H
	DB	028H
	DB	02cH
	DB	029H
	DB	0c0H
	DB	0f0H
	DB	0adH
	DB	02eH
	DB	04cH
	DB	085H
	DB	054H
	DB	024H
	DB	0a5H
	DB	093H
	DB	0b6H
	DB	0bH
	DB	034H
	DB	07bH
	DB	0d4H
	DB	084H
	DB	0e4H
	DB	0fH
	DB	0e6H
	DB	05H
	DB	01aH
	DB	0a1H
	DB	0cH
	DB	05dH
	DB	05dH
	DB	0ebH
	DB	0eeH
	DB	03fH
	DB	014H
	DB	09aH
	DB	068H
	DB	055H
	DB	08cH
	DB	096H
	DB	03H
	DB	058H
	DB	01cH
	DB	057H
	DB	07cH
	DB	041H
	DB	06aH
	DB	033H
	DB	0cbH
	DB	01eH
	DB	02fH
	DB	020H
	DB	0a3H
	DB	014H
	DB	02fH
	DB	08aH
	DB	019H
	DB	0c9H
	DB	02dH
	DB	0a4H
	DB	0a6H
	DB	08aH
	DB	090H
	DB	015H
	DB	04aH
	DB	025H
	DB	0b0H
	DB	032H
	DB	07aH
	DB	0bcH
	DB	0c8H
	DB	07dH
	DB	015H
	DB	065H
	DB	054H
	DB	012H
	DB	0a6H
	DB	0beH
	DB	045H
	DB	073H
	DB	0ddH
	DB	074H
	DB	013H
	DB	01H
	DB	08H
	DB	043H
	DB	08bH
	DB	0a0H
	DB	08cH
	DB	038H
	DB	045H
	DB	0b2H
	DB	043H
	DB	0d6H
	DB	0c7H
	DB	08dH
	DB	0fbH
	DB	0f7H
	DB	0bfH
	DB	0f5H
	DB	0b4H
	DB	09H
	DB	0f2H
	DB	04aH
	DB	06eH
	DB	047H
	DB	05cH
	DB	094H
	DB	06H
	DB	021H
	DB	087H
	DB	063H
	DB	016H
	DB	09bH
	DB	064H
	DB	01eH
	DB	05eH
	DB	070H
	DB	0bfH
	DB	06aH
	DB	0a8H
	DB	084H
	DB	01dH
	DB	06bH
	DB	05bH
	DB	0e4H
	DB	0f8H
	DB	0d6H
	DB	05dH
	DB	039H
	DB	04cH
	DB	091H
	DB	042H
	DB	03fH
	DB	0dbH
	DB	030H
	DB	086H
	DB	0b7H
	DB	0c4H
	DB	0dH
	DB	059H
	DB	04dH
	DB	0efH
	DB	06fH
	DB	0e8H
	DB	0d4H
	DB	0dH
	DB	0c6H
	DB	045H
	DB	04cH
	DB	031H
	DB	06dH
	DB	0d1H
	DB	04eH
	DB	0d9H
	DB	0acH
	DB	0b2H
	DB	052H
	DB	04H
	DB	08fH
	DB	08bH
	DB	050H
	DB	022H
	DB	04dH
	DB	010H
	DB	07dH
	DB	07dH
	DB	016H
	DB	036H
	DB	0c2H
	DB	023H
	DB	0fH
	DB	08fH
	DB	093H
	DB	07eH
	DB	078H
	DB	068H
	DB	0bH
	DB	0beH
	DB	0adH
	DB	058H
	DB	0efH
	DB	09aH
	DB	02aH
	DB	0bdH
	DB	074H
	DB	056H
	DB	0efH
	DB	0c7H
	DB	05aH
	DB	080H
	DB	0d2H
	DB	02bH
	DB	0a2H
	DB	0a0H
	DB	03bH
	DB	020H
	DB	09dH
	DB	051H
	DB	0d5H
	DB	0dfH
	DB	0f4H
	DB	0e4H
	DB	06fH
	DB	088H
	DB	0e2H
	DB	067H
	DB	070H
	DB	0eeH
	DB	026H
	DB	01eH
	DB	0c6H
	DB	016H
	DB	038H
	DB	0f0H
	DB	053H
	DB	0adH
	DB	0c6H
	DB	044H
	DB	0f4H
	DB	0a1H
	DB	0c4H
	DB	047H
	DB	0ccH
	DB	0e6H
	DB	067H
	DB	087H
	DB	086H
	DB	06H
	DB	058H
	DB	05dH
	DB	0e5H
	DB	0ccH
	DB	0c1H
	DB	056H
	DB	0d4H
	DB	025H
	DB	0bdH
	DB	045H
	DB	093H
	DB	064H
	DB	063H
	DB	05aH
	DB	07aH
	DB	01cH
	DB	0caH
	DB	04eH
	DB	0c9H
	DB	091H
	DB	092H
	DB	03eH
	DB	033H
	DB	0d6H
	DB	05H
	DB	07fH
	DB	0bdH
	DB	06dH
	DB	07H
	DB	044H
	DB	0f2H
	DB	0dfH
	DB	021H
	DB	058H
	DB	0acH
	DB	0e3H
	DB	02eH
	DB	082H
	DB	088H
	DB	06cH
	DB	0c7H
	DB	01cH
	DB	0d0H
	DB	0abH
	DB	0f5H
	DB	0caH
	DB	0c7H
	DB	0c0H
	DB	019H
	DB	011H
	DB	0d1H
	DB	0abH
	DB	04fH
	DB	06H
	DB	02H
	DB	0d3H
	DB	05H
	DB	0bfH
	DB	041H
	DB	08cH
	DB	05H
	DB	034H
	DB	06cH
	DB	026H
	DB	0dH
	DB	019H
	DB	089H
	DB	03bH
	DB	01bH
	DB	091H
	DB	0a7H
	DB	063H
	DB	0adH
	DB	0f7H
	DB	0fH
	DB	023H
	DB	0c3H
	DB	056H
	DB	0e3H
	DB	05cH
	DB	067H
	DB	0b6H
	DB	088H
	DB	036H
	DB	03cH
	DB	08aH
	DB	0aH
	DB	041H
	DB	04bH
	DB	0cbH
	DB	0cdH
	DB	0cfH
	DB	07fH
	DB	0b9H
	DB	0f5H
	DB	08cH
	DB	053H
	DB	00H
	DB	0c8H
	DB	06eH
	DB	091H
	DB	0efH
	DB	0d1H
	DB	0bfH
	DB	0e8H
	DB	060H
	DB	0e2H
	DB	02cH
	DB	0b6H
	DB	0c7H
	DB	088H
	DB	09dH
	DB	0fdH
	DB	011H
	DB	053H
	DB	0b9H
	DB	09cH
	DB	0ddH
	DB	07aH
	DB	0e7H
	DB	0a9H
	DB	0c8H
	DB	0b7H
	DB	029H
	DB	082H
	DB	02dH
	DB	036H
	DB	0d5H
	DB	0acH
	DB	0feH
	DB	0c4H
	DB	03fH
	DB	06eH
	DB	016H
	DB	0feH
	DB	0d6H
	DB	077H
	DB	061H
	DB	03H
	DB	0adH
	DB	0a8H
	DB	08cH
	DB	0cbH
	DB	026H
	DB	01dH
	DB	01fH
	DB	0dfH
	DB	0b9H
	DB	0fcH
	DB	05bH
	DB	021H
	DB	0a6H
	DB	0a3H
	DB	058H
	DB	050H
	DB	026H
	DB	06H
	DB	086H
	DB	07cH
	DB	0b2H
	DB	05H
	DB	041H
	DB	0f1H
	DB	0f2H
	DB	0d6H
	DB	070H
	DB	0caH
	DB	04eH
	DB	0d2H
	DB	04dH
	DB	07cH
	DB	0faH
	DB	059H
	DB	048H
	DB	022H
	DB	077H
	DB	0e6H
	DB	02H
	DB	031H
	DB	0e4H
	DB	0dcH
	DB	0d2H
	DB	0bH
	DB	080H
	DB	02bH
	DB	05bH
	DB	027H
	DB	031H
	DB	061H
	DB	0a3H
	DB	0e4H
	DB	066H
	DB	064H
	DB	056H
	DB	05aH
	DB	03bH
	DB	047H
	DB	0a4H
	DB	0aH
	DB	01aH
	DB	0f1H
	DB	086H
	DB	094H
	DB	04cH
	DB	04eH
	DB	0b6H
	DB	0c3H
	DB	035H
	DB	039H
	DB	074H
	DB	01aH
	DB	016H
	DB	0c6H
	DB	0a5H
	DB	017H
	DB	072H
	DB	080H
	DB	03eH
	DB	023H
	DB	0e2H
	DB	061H
	DB	087H
	DB	0c8H
	DB	045H
	DB	0deH
	DB	0a2H
	DB	080H
	DB	026H
	DB	047H
	DB	0aH
	DB	0bfH
	DB	03aH
	DB	010H
	DB	054H
	DB	06H
	DB	05eH
	DB	0cH
	DB	049H
	DB	094H
	DB	045H
	DB	03dH
	DB	02eH
	DB	0daH
	DB	05H
	DB	053H
	DB	071H
	DB	077H
	DB	0d4H
	DB	02fH
	DB	09aH
	DB	0b7H
	DB	090H
	DB	023H
	DB	080H
	DB	055H
	DB	081H
	DB	024H
	DB	056H
	DB	0a7H
	DB	0eaH
	DB	060H
	DB	0e6H
	DB	0a4H
	DB	071H
	DB	0baH
	DB	0aaH
	DB	04fH
	DB	046H
	DB	0f3H
	DB	063H
	DB	08bH
	DB	032H
	DB	012H
	DB	0e6H
	DB	0b6H
	DB	065H
	DB	058H
	DB	02eH
	DB	03aH
	DB	08H
	DB	048H
	DB	0f1H
	DB	098H
	DB	06bH
	DB	0f2H
	DB	06eH
	DB	06cH
	DB	096H
	DB	0c4H
	DB	093H
	DB	081H
	DB	025H
	DB	07aH
	DB	027H
	DB	016H
	DB	036H
	DB	051H
	DB	066H
	DB	07cH
	DB	046H
	DB	0c9H
	DB	088H
	DB	0f7H
	DB	0dbH
	DB	0eeH
	DB	0aeH
	DB	0c1H
	DB	0c6H
	DB	05cH
	DB	0fbH
	DB	0ceH
	DB	0a4H
	DB	06eH
	DB	0e7H
	DB	090H
	DB	061H
	DB	056H
	DB	0fcH
	DB	077H
	DB	01bH
	DB	091H
	DB	078H
	DB	0bfH
	DB	08bH
	DB	09fH
	DB	056H
	DB	041H
	DB	071H
	DB	0bcH
	DB	03eH
	DB	037H
	DB	06H
	DB	0c6H
	DB	02fH
	DB	062H
	DB	035H
	DB	05dH
	DB	024H
	DB	0fbH
	DB	039H
	DB	09fH
	DB	0cbH
	DB	0ddH
	DB	0eH
	DB	033H
	DB	0edH
	DB	0eeH
	DB	089H
	DB	06bH
	DB	066H
	DB	024H
	DB	0fcH
	DB	0dfH
	DB	063H
	DB	08H
	DB	0feH
	DB	0b9H
	DB	04aH
	DB	070H
	DB	0f5H
	DB	088H
	DB	0a7H
	DB	0fcH
	DB	0ceH
	DB	056H
	DB	0deH
	DB	04H
	DB	033H
	DB	03H
	DB	07fH
	DB	06cH
	DB	0a2H
	DB	04bH
	DB	0caH
	DB	031H
	DB	0fdH
	DB	0b8H
	DB	020H
	DB	087H
	DB	024H
	DB	07H
	DB	02bH
	DB	0a0H
	DB	066H
	DB	08fH
	DB	0a9H
	DB	0e4H
	DB	0c8H
	DB	073H
	DB	056H
	DB	0bfH
	DB	0fbH
	DB	07dH
	DB	0bcH
	DB	04aH
	DB	054H
	DB	01bH
	DB	04eH
	DB	087H
	DB	09dH
	DB	0cdH
	DB	074H
	DB	0bfH
	DB	099H
	DB	03fH
	DB	0f0H
	DB	097H
	DB	0f7H
	DB	091H
	DB	09fH
	DB	09cH
	DB	098H
	DB	04aH
	DB	03dH
	DB	0feH
	DB	059H
	DB	066H
	DB	063H
	DB	023H
	DB	0d9H
	DB	039H
	DB	0e2H
	DB	055H
	DB	0b7H
	DB	01fH
	DB	09fH
	DB	08bH
	DB	03aH
	DB	06dH
	DB	092H
	DB	0d7H
	DB	03cH
	DB	07H
	DB	097H
	DB	055H
	DB	0c5H
	DB	089H
	DB	06cH
	DB	03eH
	DB	01bH
	DB	08bH
	DB	0daH
	DB	033H
	DB	0d6H
	DB	097H
	DB	0b1H
	DB	030H
	DB	0feH
	DB	015H
	DB	053H
	DB	058H
	DB	04fH
	DB	036H
	DB	0aeH
	DB	086H
	DB	0d4H
	DB	0cdH
	DB	091H
	DB	0fH
	DB	03cH
	DB	024H
	DB	066H
	DB	0f7H
	DB	0abH
	DB	0feH
	DB	04dH
	DB	071H
	DB	08H
	DB	039H
	DB	0afH
	DB	0a2H
	DB	0c5H
	DB	0aH
	DB	055H
	DB	09cH
	DB	0a2H
	DB	07H
	DB	04cH
	DB	021H
	DB	09bH
	DB	020H
	DB	0f8H
	DB	0eaH
	DB	056H
	DB	0a7H
	DB	0f0H
	DB	02cH
	DB	076H
	DB	082H
	DB	0baH
	DB	032H
	DB	027H
	DB	022H
	DB	02aH
	DB	0d2H
	DB	0a0H
	DB	0f6H
	DB	044H
	DB	028H
	DB	030H
	DB	074H
	DB	0caH
	DB	0f5H
	DB	0fdH
	DB	020H
	DB	012H
	DB	0a0H
	DB	0a6H
	DB	0deH
	DB	041H
	DB	042H
	DB	0feH
	DB	03bH
	DB	0adH
	DB	0d4H
	DB	062H
	DB	01eH
	DB	080H
	DB	058H
	DB	0a1H
	DB	03cH
	DB	08aH
	DB	048H
	DB	0ddH
	DB	0b4H
	DB	01bH
	DB	07eH
	DB	0abH
	DB	0deH
	DB	0a6H
	DB	05cH
	DB	053H
	DB	0f0H
	DB	0d1H
	DB	052H
	DB	090H
	DB	0e4H
	DB	072H
	DB	037H
	DB	043H
	DB	034H
	DB	0f8H
	DB	042H
	DB	0eeH
	DB	026H
	DB	017H
	DB	051H
	DB	045H
	DB	098H
	DB	0aaH
	DB	066H
	DB	054H
	DB	035H
	DB	0aeH
	DB	032H
	DB	06aH
	DB	049H
	DB	030H
	DB	095H
	DB	028H
	DB	0d6H
	DB	0f1H
	DB	0fbH
	DB	047H
	DB	0c4H
	DB	0cdH
	DB	0d7H
	DB	029H
	DB	0bfH
	DB	08eH
	DB	06cH
	DB	0f3H
	DB	07H
	DB	02eH
	DB	062H
	DB	0adH
	DB	045H
	DB	0b4H
	DB	0f2H
	DB	0ddH
	DB	0deH
	DB	0d8H
	DB	032H
	DB	093H
	DB	07H
	DB	0e3H
	DB	0fdH
	DB	0cfH
	DB	014H
	DB	014H
	DB	0f7H
	DB	06aH
	DB	06H
	DB	073H
	DB	0b1H
	DB	04aH
	DB	041H
	DB	09H
	DB	0f2H
	DB	081H
	DB	097H
	DB	0deH
	DB	0f4H
	DB	01fH
	DB	0dH
	DB	058H
	DB	0ccH
	DB	053H
	DB	0dH
	DB	03fH
	DB	0b0H
	DB	06bH
	DB	097H
	DB	063H
	DB	0feH
	DB	01eH
	DB	047H
	DB	07dH
	DB	0edH
	DB	05cH
	DB	091H
	DB	065H
	DB	0c6H
	DB	017H
	DB	0d9H
	DB	0f8H
	DB	0e1H
	DB	09aH
	DB	02H
	DB	0d4H
	DB	09bH
	DB	01aH
	DB	0b4H
	DB	091H
	DB	039H
	DB	0c1H
	DB	0e9H
	DB	085H
	DB	094H
	DB	076H
	DB	044H
	DB	046H
	DB	0e1H
	DB	0dbH
	DB	029H
	DB	060H
	DB	0f9H
	DB	070H
	DB	0ddH
	DB	067H
	DB	04cH
	DB	0eeH
	DB	0ccH
	DB	014H
	DB	07H
	DB	026H
	DB	0dH
	DB	0e8H
	DB	041H
	DB	08eH
	DB	03dH
	DB	0dcH
	DB	0a8H
	DB	071H
	DB	0edH
	DB	061H
	DB	0b3H
	DB	0d7H
	DB	0e6H
	DB	048H
	DB	0cdH
	DB	02bH
	DB	0eH
	DB	02fH
	DB	086H
	DB	037H
	DB	090H
	DB	00H
	DB	0a8H
	DB	06eH
	DB	067H
	DB	074H
	DB	05eH
	DB	0b4H
	DB	088H
	DB	0e4H
	DB	05aH
	DB	015H
	DB	04dH
	DB	09bH
	DB	0a4H
	DB	08aH
	DB	0f8H
	DB	0ccH
	DB	07cH
	DB	0e6H
	DB	02fH
	DB	030H
	DB	03fH
	DB	095H
	DB	078H
	DB	0dH
	DB	0c1H
	DB	07H
	DB	03dH
	DB	0c7H
	DB	03eH
	DB	04dH
	DB	0c8H
	DB	066H
	DB	0bbH
	DB	0afH
	DB	0dbH
	DB	099H
	DB	064H
	DB	0e3H
	DB	0fdH
	DB	0bfH
	DB	079H
	DB	04bH
	DB	0daH
	DB	01eH
	DB	056H
	DB	053H
	DB	0eaH
	DB	0d2H
	DB	03bH
	DB	099H
	DB	03H
	DB	0f9H
	DB	030H
	DB	0faH
	DB	086H
	DB	071H
	DB	02H
	DB	0c3H
	DB	039H
	DB	0c0H
	DB	090H
	DB	081H
	DB	0a6H
	DB	0ccH
	DB	032H
	DB	02H
	DB	066H
	DB	016H
	DB	066H
	DB	065H
	DB	055H
	DB	0dfH
	DB	030H
	DB	031H
	DB	07dH
	DB	086H
	DB	04H
	DB	0e7H
	DB	059H
	DB	0beH
	DB	082H
	DB	0dbH
	DB	0b8H
	DB	032H
	DB	0d7H
	DB	040H
	DB	0a3H
	DB	059H
	DB	083H
	DB	05cH
	DB	099H
	DB	015H
	DB	0deH
	DB	0c0H
	DB	0e1H
	DB	090H
	DB	042H
	DB	0c7H
	DB	0a6H
	DB	028H
	DB	0acH
	DB	0fcH
	DB	08H
	DB	0ddH
	DB	0adH
	DB	05H
	DB	0e3H
	DB	0b1H
	DB	0edH
	DB	0bdH
	DB	071H
	DB	0efH
	DB	099H
	DB	0a9H
	DB	0a1H
	DB	0f0H
	DB	069H
	DB	045H
	DB	0caH
	DB	0edH
	DB	021H
	DB	0e3H
	DB	082H
	DB	00H
	DB	024H
	DB	064H
	DB	090H
	DB	0e6H
	DB	0abH
	DB	038H
	DB	0fH
	DB	059H
	DB	0b4H
	DB	097H
	DB	0b6H
	DB	062H
	DB	09cH
	DB	09aH
	DB	014H
	DB	0aH
	DB	0d7H
	DB	05H
	DB	0f9H
	DB	072H
	DB	0afH
	DB	09bH
	DB	0e2H
	DB	019H
	DB	060H
	DB	0adH
	DB	086H
	DB	082H
	DB	012H
	DB	09H
	DB	02H
	DB	036H
	DB	0ecH
	DB	013H
	DB	01dH
	DB	019H
	DB	0caH
	DB	02dH
	DB	0f1H
	DB	07fH
	DB	044H
	DB	0a8H
	DB	0e1H
	DB	0e0H
	DB	0c2H
	DB	075H
	DB	0ebH
	DB	09bH
	DB	0faH
	DB	065H
	DB	08dH
	DB	0aaH
	DB	081H
	DB	070H
	DB	043H
	DB	0e1H
	DB	09eH
	DB	04aH
	DB	0e3H
	DB	0b0H
	DB	0d2H
	DB	066H
	DB	066H
	DB	040H
	DB	079H
	DB	084H
	DB	059H
	DB	044H
	DB	031H
	DB	04bH
	DB	043H
	DB	075H
	DB	073H
	DB	025H
	DB	0d5H
	DB	036H
	DB	01aH
	DB	0c1H
	DB	051H
	DB	015H
	DB	0a7H
	DB	0deH
	DB	03fH
	DB	029H
	DB	050H
	DB	03H
	DB	08aH
	DB	0eeH
	DB	04dH
	DB	06fH
	DB	01fH
	DB	09fH
	DB	055H
	DB	085H
	DB	0dfH
	DB	0ceH
	DB	089H
	DB	0b8H
	DB	092H
	DB	03aH
	DB	083H
	DB	0d5H
	DB	02fH
	DB	0f6H
	DB	07aH
	DB	06H
	DB	0adH
	DB	094H
	DB	047H
	DB	0feH
	DB	0aaH
	DB	0eeH
	DB	0deH
	DB	0e9H
	DB	018H
	DB	0aeH
	DB	06cH
	DB	023H
	DB	01dH
	DB	039H
	DB	012H
	DB	03cH
	DB	0d9H
	DB	067H
	DB	0c1H
	DB	039H
	DB	036H
	DB	04cH
	DB	072H
	DB	0c8H
	DB	06H
	DB	0f5H
	DB	01eH
	DB	036H
	DB	06dH
	DB	098H
	DB	03cH
	DB	09aH
	DB	02dH
	DB	083H
	DB	099H
	DB	057H
	DB	0f2H
	DB	0f7H
	DB	0c1H
	DB	08aH
	DB	026H
	DB	02eH
	DB	0adH
	DB	043H
	DB	068H
	DB	0bfH
	DB	07fH
	DB	0c1H
	DB	027H
	DB	0c1H
	DB	07aH
	DB	0dcH
	DB	08dH
	DB	0ecH
	DB	025H
	DB	093H
	DB	063H
	DB	043H
	DB	0c9H
	DB	050H
	DB	05bH
	DB	085H
	DB	0eaH
	DB	089H
	DB	0aH
	DB	084H
	DB	0e0H
	DB	07cH
	DB	0fcH
	DB	022H
	DB	07H
	DB	023H
	DB	051H
	DB	0b5H
	DB	0e6H
	DB	039H
	DB	0f4H
	DB	066H
	DB	0faH
	DB	09cH
	DB	0a7H
	DB	0f4H
	DB	0f8H
	DB	035H
	DB	062H
	DB	01fH
	DB	0c9H
	DB	0c5H
	DB	0e1H
	DB	093H
	DB	016H
	DB	03eH
	DB	01aH
	DB	01H
	DB	047H
	DB	0a3H
	DB	05H
	DB	0a7H
	DB	09fH
	DB	081H
	DB	0caH
	DB	0a6H
	DB	025H
	DB	01cH
	DB	0dbH
	DB	0cH
	DB	0d4H
	DB	051H
	DB	0f1H
	DB	04fH
	DB	0edH
	DB	09aH
	DB	044H
	DB	0e6H
	DB	04fH
	DB	0a6H
	DB	085H
	DB	019H
	DB	06cH
	DB	0e7H
	DB	02dH
	DB	02H
	DB	026H
	DB	0c6H
	DB	082H
	DB	06dH
	DB	0e9H
	DB	08H
	DB	015H
	DB	089H
	DB	089H
	DB	05fH
	DB	0afH
	DB	0aeH
	DB	07bH
	DB	08cH
	DB	03aH
	DB	050H
	DB	0ddH
	DB	02dH
	DB	01fH
	DB	04bH
	DB	047H
	DB	064H
	DB	0b1H
	DB	096H
	DB	0bH
	DB	038H
	DB	030H
	DB	0f7H
	DB	09fH
	DB	05dH
	DB	079H
	DB	0c5H
	DB	0a3H
	DB	07cH
	DB	0b2H
	DB	08dH
	DB	084H
	DB	047H
	DB	096H
	DB	0eH
	DB	0a7H
	DB	046H
	DB	03dH
	DB	0a2H
	DB	0d2H
	DB	0f6H
	DB	073H
	DB	030H
	DB	024H
	DB	092H
	DB	07bH
	DB	0eaH
	DB	076H
	DB	0adH
	DB	082H
	DB	082H
	DB	065H
	DB	032H
	DB	0f9H
	DB	05H
	DB	08fH
	DB	0f2H
	DB	04aH
	DB	0b2H
	DB	06fH
	DB	0fcH
	DB	0bfH
	DB	0f3H
	DB	0c3H
	DB	056H
	DB	082H
	DB	0eaH
	DB	09cH
	DB	03fH
	DB	08eH
	DB	0efH
	DB	036H
	DB	081H
	DB	09fH
	DB	0daH
	DB	014H
	DB	09bH
	DB	0c5H
	DB	08bH
	DB	049H
	DB	0c7H
	DB	08dH
	DB	0aeH
	DB	0f9H
	DB	07H
	DB	0b3H
	DB	09H
	DB	079H
	DB	07dH
	DB	0bbH
	DB	0e9H
	DB	07aH
	DB	07bH
	DB	05dH
	DB	0bdH
	DB	051H
	DB	0dfH
	DB	0a9H
	DB	06eH
	DB	09eH
	DB	0b7H
	DB	05eH
	DB	0d5H
	DB	0b8H
	DB	07dH
	DB	0b0H
	DB	04cH
	DB	019H
	DB	0f5H
	DB	0d7H
	DB	062H
	DB	0beH
	DB	0e4H
	DB	090H
	DB	038H
	DB	06bH
	DB	0c3H
	DB	042H
	DB	0e5H
	DB	041H
	DB	07dH
	DB	04fH
	DB	03bH
	DB	079H
	DB	0acH
	DB	0f9H
	DB	0caH
	DB	0dH
	DB	023H
	DB	039H
	DB	02bH
	DB	05aH
	DB	017H
	DB	01H
	DB	013H
	DB	095H
	DB	031H
	DB	05fH
	DB	0aeH
	DB	028H
	DB	0b7H
	DB	091H
	DB	066H
	DB	01cH
	DB	022H
	DB	09eH
	DB	088H
	DB	066H
	DB	060H
	DB	0edH
	DB	0a7H
	DB	0deH
	DB	0bcH
	DB	063H
	DB	058H
	DB	0e8H
	DB	0dcH
	DB	0a2H
	DB	0f5H
	DB	00H
	DB	0dcH
	DB	022H
	DB	0d9H
	DB	0f3H
	DB	0a2H
	DB	0ecH
	DB	089H
	DB	054H
	DB	0cbH
	DB	0b8H
	DB	07cH
	DB	083H
	DB	04aH
	DB	062H
	DB	0a0H
	DB	0ebH
	DB	080H
	DB	0a8H
	DB	052H
	DB	0e1H
	DB	016H
	DB	07aH
	DB	040H
	DB	0d2H
	DB	05dH
	DB	018H
	DB	0bbH
	DB	03aH
	DB	03aH
	DB	032H
	DB	0b9H
	DB	017H
	DB	0d3H
	DB	093H
	DB	08bH
	DB	076H
	DB	00H
	DB	094H
	DB	0caH
	DB	0cbH
	DB	04dH
	DB	0c6H
	DB	050H
	DB	017H
	DB	0a8H
	DB	070H
	DB	04H
	DB	02aH
	DB	098H
	DB	0d5H
	DB	08bH
	DB	0aeH
	DB	0cfH
	DB	04bH
	DB	01H
	DB	0acH
	DB	063H
	DB	0bcH
	DB	0e6H
	DB	09dH
	DB	06eH
	DB	0a0H
	DB	035H
	DB	042H
	DB	0b3H
	DB	040H
	DB	039H
	DB	0b3H
	DB	0d4H
	DB	083H
	DB	080H
	DB	023H
	DB	04bH
	DB	050H
	DB	0b9H
	DB	073H
	DB	040H
	DB	03dH
	DB	09dH
	DB	0d8H
	DB	093H
	DB	029H
	DB	07H
	DB	063H
	DB	074H
	DB	08H
	DB	090H
	DB	057H
	DB	044H
	DB	077H
	DB	075H
	DB	0b3H
	DB	098H
	DB	02aH
	DB	0f5H
	DB	04cH
	DB	06aH
	DB	02fH
	DB	01H
	DB	03fH
	DB	033H
	DB	01H
	DB	0e1H
	DB	0fdH
	DB	051H
	DB	01cH
	DB	071H
	DB	011H
	DB	059H
	DB	010H
	DB	0e9H
	DB	0ecH
	DB	0b8H
	DB	0f0H
	DB	0d0H
	DB	0adH
	DB	0f8H
	DB	061H
	DB	084H
	DB	03dH
	DB	058H
	DB	0f9H
	DB	0f0H
	DB	0f0H
	DB	0a3H
	DB	067H
	DB	03eH
	DB	0eH
	DB	016H
	DB	0beH
	DB	0cdH
	DB	049H
	DB	03fH
	DB	02fH
	DB	047H
	DB	090H
	DB	04bH
	DB	039H
	DB	0a1H
	DB	025H
	DB	049H
	DB	0bH
	DB	012H
	DB	081H
	DB	0fbH
	DB	062H
	DB	02fH
	DB	074H
	DB	043H
	DB	0b4H
	DB	031H
	DB	09cH
	DB	02eH
	DB	0a2H
	DB	08dH
	DB	0d2H
	DB	089H
	DB	04bH
	DB	060H
	DB	09fH
	DB	089H
	DB	02eH
	DB	069H
	DB	0c8H
	DB	0ddH
	DB	0b0H
	DB	0d8H
	DB	0a8H
	DB	069H
	DB	0f9H
	DB	0cdH
	DB	0b2H
	DB	05H
	DB	060H
	DB	035H
	DB	080H
	DB	0c2H
	DB	0e3H
	DB	074H
	DB	086H
	DB	018H
	DB	0a6H
	DB	023H
	DB	047H
	DB	0c8H
	DB	030H
	DB	01aH
	DB	052H
	DB	0fbH
	DB	07aH
	DB	071H
	DB	085H
	DB	029H
	DB	0daH
	DB	04fH
	DB	086H
	DB	0cH
	DB	0a7H
	DB	02fH
	DB	075H
	DB	0a2H
	DB	0fdH
	DB	0a8H
	DB	027H
	DB	05eH
	DB	05dH
	DB	0a8H
	DB	0a0H
	DB	041H
	DB	09cH
	DB	027H
	DB	05aH
	DB	0c2H
	DB	04aH
	DB	0a1H
	DB	08bH
	DB	0faH
	DB	03bH
	DB	05dH
	DB	0f6H
	DB	035H
	DB	0cfH
	DB	07cH
	DB	0ddH
	DB	0aaH
	DB	04bH
	DB	064H
	DB	0b6H
	DB	0f3H
	DB	094H
	DB	0acH
	DB	016H
	DB	012H
	DB	055H
	DB	03dH
	DB	070H
	DB	0b2H
	DB	0e5H
	DB	090H
	DB	0f3H
	DB	03H
	DB	0b8H
	DB	0cdH
	DB	0c5H
	DB	082H
	DB	0eeH
	DB	052H
	DB	0fcH
	DB	02aH
	DB	0afH
	DB	0f3H
	DB	0dfH
	DB	0feH
	DB	0f0H
	DB	0bdH
	DB	0aaH
	DB	03cH
	DB	0a2H
	DB	0e0H
	DB	0afH
	DB	0b6H
	DB	08dH
	DB	0c5H
	DB	0c8H
	DB	0e2H
	DB	04H
	DB	0b8H
	DB	015H
	DB	069H
	DB	049H
	DB	089H
	DB	06cH
	DB	081H
	DB	057H
	DB	033H
	DB	084H
	DB	047H
	DB	05H
	DB	081H
	DB	0f0H
	DB	034H
	DB	076H
	DB	050H
	DB	034H
	DB	067H
	DB	08eH
	DB	05eH
	DB	023H
	DB	031H
	DB	03fH
	DB	0d3H
	DB	0e7H
	DB	04dH
	DB	099H
	DB	0b0H
	DB	030H
	DB	09dH
	DB	069H
	DB	0c5H
	DB	087H
	DB	032H
	DB	04fH
	DB	0f3H
	DB	0b4H
	DB	0a6H
	DB	0a6H
	DB	039H
	DB	06dH
	DB	02bH
	DB	0baH
	DB	0deH
	DB	060H
	DB	0b0H
	DB	02fH
	DB	014H
	DB	018H
	DB	0bdH
	DB	072H
	DB	03cH
	DB	06eH
	DB	0b1H
	DB	08fH
	DB	056H
	DB	07eH
	DB	029H
	DB	086H
	DB	02fH
	DB	047H
	DB	06fH
	DB	0f4H
	DB	0ceH
	DB	0a2H
	DB	044H
	DB	042H
	DB	0d6H
	DB	0eaH
	DB	069H
	DB	08fH
	DB	0d8H
	DB	094H
	DB	04aH
	DB	0b7H
	DB	074H
	DB	07bH
	DB	066H
	DB	088H
	DB	013H
	DB	025H
	DB	0faH
	DB	0ceH
	DB	093H
	DB	02dH
	DB	05eH
	DB	06aH
	DB	0abH
	DB	08H
	DB	070H
	DB	0daH
	DB	04fH
	DB	060H
	DB	04fH
	DB	09dH
	DB	082H
	DB	093H
	DB	05fH
	DB	059H
	DB	0feH
	DB	0c8H
	DB	0e8H
	DB	0d7H
	DB	0ddH
	DB	0b2H
	DB	0fH
	DB	052H
	DB	0adH
	DB	075H
	DB	0dbH
	DB	0c1H
	DB	09aH
	DB	056H
	DB	090H
	DB	0aeH
	DB	083H
	DB	0efH
	DB	098H
	DB	0afH
	DB	0f7H
	DB	088H
	DB	0aH
	DB	0c6H
	DB	0e8H
	DB	05aH
	DB	064H
	DB	06bH
	DB	06dH
	DB	043H
	DB	044H
	DB	06cH
	DB	0dH
	DB	02dH
	DB	044H
	DB	06aH
	DB	060H
	DB	053H
	DB	0bcH
	DB	0eH
	DB	049H
	DB	018H
	DB	0cfH
	DB	0e3H
	DB	06fH
	DB	0e0H
	DB	012H
	DB	072H
	DB	0d0H
	DB	02aH
	DB	0a1H
	DB	048H
	DB	0b3H
	DB	0acH
	DB	0fH
	DB	01cH
	DB	086H
	DB	0f2H
	DB	088H
	DB	0f3H
	DB	036H
	DB	0ccH
	DB	0e0H
	DB	0c2H
	DB	07aH
	DB	025H
	DB	02dH
	DB	0daH
	DB	0f8H
	DB	06aH
	DB	068H
	DB	0c1H
	DB	082H
	DB	0b8H
	DB	0a5H
	DB	071H
	DB	099H
	DB	038H
	DB	0e4H
	DB	0e9H
	DB	0e1H
	DB	06H
	DB	032H
	DB	095H
	DB	0b2H
	DB	0c0H
	DB	0b2H
	DB	0b8H
	DB	0b3H
	DB	0baH
	DB	02dH
	DB	069H
	DB	087H
	DB	0eH
	DB	02dH
	DB	02H
	DB	0b2H
	DB	0d9H
	DB	05cH
	DB	02bH
	DB	0c3H
	DB	045H
	DB	0ecH
	DB	047H
	DB	07dH
	DB	013H
	DB	0b8H
	DB	017H
	DB	0caH
	DB	01dH
	DB	080H
	DB	0acH
	DB	024H
	DB	0b2H
	DB	0c2H
	DB	056H
	DB	073H
	DB	0f4H
	DB	08fH
	DB	0a6H
	DB	0afH
	DB	0bcH
	DB	010H
	DB	0b6H
	DB	04aH
	DB	0bcH
	DB	039H
	DB	0fcH
	DB	017H
	DB	095H
	DB	029H
	DB	0daH
	DB	05aH
	DB	095H
	DB	022H
	DB	0d7H
	DB	0a8H
	DB	05bH
	DB	06eH
	DB	073H
	DB	0f7H
	DB	0eeH
	DB	0a0H
	DB	09bH
	DB	021H
	DB	063H
	DB	0f2H
	DB	014H
	DB	058H
	DB	02H
	DB	0baH
	DB	087H
	DB	0beH
	DB	04bH
	DB	03eH
	DB	09H
	DB	087H
	DB	077H
	DB	085H
	DB	09eH
	DB	08dH
	DB	02eH
	DB	07aH
	DB	0e7H
	DB	0c4H
	DB	01cH
	DB	040H
	DB	0ecH
	DB	0f6H
	DB	0aeH
	DB	0e0H
	DB	06fH
	DB	09eH
	DB	081H
	DB	0bH
	DB	0bfH
	DB	064H
	DB	07dH
	DB	054H
	DB	0bcH
	DB	07fH
	DB	0fH
	DB	0c3H
	DB	03eH
	DB	0d9H
	DB	02H
	DB	0c6H
	DB	062H
	DB	07aH
	DB	04dH
	DB	01H
	DB	08H
	DB	07bH
	DB	0faH
	DB	06fH
	DB	0bfH
	DB	097H
	DB	0afH
	DB	0adH
	DB	0eH
	DB	05fH
	DB	08eH
	DB	07dH
	DB	07dH
	DB	010H
	DB	089H
	DB	0bcH
	DB	0f3H
	DB	07H
	DB	011H
	DB	030H
	DB	087H
	DB	0a0H
	DB	0f3H
	DB	045H
	DB	07aH
	DB	0f5H
	DB	08cH
	DB	05cH
	DB	0efH
	DB	0d9H
	DB	0ddH
	DB	077H
	DB	0d4H
	DB	0d8H
	DB	0e7H
	DB	095H
	DB	0efH
	DB	097H
	DB	043H
	DB	0feH
	DB	076H
	DB	051H
	DB	07cH
	DB	0f3H
	DB	061H
	DB	06H
	DB	031H
	DB	0d4H
	DB	08dH
	DB	042H
	DB	05H
	DB	094H
	DB	0e2H
	DB	0f8H
	DB	0d9H
	DB	0ddH
	DB	0eeH
	DB	066H
	DB	03aH
	DB	05fH
	DB	0bfH
	DB	018H
	DB	0d6H
	DB	095H
	DB	071H
	DB	0beH
	DB	0aaH
	DB	061H
	DB	0d6H
	DB	06dH
	DB	060H
	DB	04dH
	DB	0beH
	DB	05dH
	DB	0c1H
	DB	09fH
	DB	0e2H
	DB	072H
	DB	074H
	DB	070H
	DB	0b4H
	DB	079H
	DB	05H
	DB	018H
	DB	072H
	DB	05fH
	DB	075H
	DB	0e0H
	DB	045H
	DB	0afH
	DB	040H
	DB	06H
	DB	048H
	DB	018H
	DB	01bH
	DB	0b9H
	DB	0d6H
	DB	045H
	DB	09aH
	DB	02dH
	DB	0b2H
	DB	07bH
	DB	0faH
	DB	071H
	DB	0d8H
	DB	0bcH
	DB	011H
	DB	0bbH
	DB	0aeH
	DB	085H
	DB	0acH
	DB	063H
	DB	0feH
	DB	0b1H
	DB	0faH
	DB	0f0H
	DB	090H
	DB	070H
	DB	0d1H
	DB	0d6H
	DB	0a0H
	DB	013H
	DB	05cH
	DB	068H
	DB	0aaH
	DB	0f6H
	DB	022H
	DB	01H
	DB	03cH
	DB	03cH
	DB	02fH
	DB	0eeH
	DB	0b7H
	DB	02aH
	DB	0dfH
	DB	090H
	DB	066H
	DB	0f0H
	DB	0ccH
	DB	015H
	DB	076H
	DB	079H
	DB	0f7H
	DB	0f4H
	DB	0aaH
	DB	073H
	DB	0e5H
	DB	03cH
	DB	063H
	DB	037H
	DB	092H
	DB	04H
	DB	04aH
	DB	06eH
	DB	06cH
	DB	074H
	DB	0e4H
	DB	0eH
	DB	076H
	DB	021H
	DB	0caH
	DB	0a5H
	DB	08fH
	DB	082H
	DB	04fH
	DB	06fH
	DB	093H
	DB	0b5H
	DB	0dfH
	DB	060H
	DB	04aH
	DB	0d5H
	DB	0d9H
	DB	042H
	DB	0caH
	DB	084H
	DB	0b5H
	DB	030H
	DB	040H
	DB	01aH
	DB	067H
	DB	0d2H
	DB	09dH
	DB	032H
	DB	0c0H
	DB	08aH
	DB	0a6H
	DB	0a5H
	DB	018H
	DB	01dH
	DB	046H
	DB	0e2H
	DB	042H
	DB	055H
	DB	0e5H
	DB	091H
	DB	0c4H
	DB	079H
	DB	0c6H
	DB	024H
	DB	0d9H
	DB	011H
	DB	0f9H
	DB	0b3H
	DB	0d3H
	DB	0c4H
	DB	0b7H
	DB	089H
	DB	0f4H
	DB	0f8H
	DB	023H
	DB	05dH
	DB	04bH
	DB	0c1H
	DB	0fH
	DB	08cH
	DB	0cbH
	DB	0b5H
	DB	0b1H
	DB	0e3H
	DB	0d3H
	DB	0f8H
	DB	0c7H
	DB	095H
	DB	04eH
	DB	0adH
	DB	028H
	DB	093H
	DB	0a6H
	DB	06eH
	DB	0b7H
	DB	080H
	DB	080H
	DB	032H
	DB	0b3H
	DB	054H
	DB	0f6H
	DB	0eaH
	DB	05dH
	DB	06cH
	DB	0e3H
	DB	081H
	DB	049H
	DB	0afH
	DB	0c2H
	DB	058H
	DB	0bbH
	DB	08eH
	DB	0eH
	DB	06dH
	DB	0f1H
	DB	061H
	DB	066H
	DB	0b9H
	DB	0f7H
	DB	035H
	DB	0e6H
	DB	09fH
	DB	048H
	DB	08dH
	DB	08dH
	DB	00H
	DB	08dH
	DB	0eH
	DB	0b1H
	DB	0c0H
	DB	0e1H
	DB	0a9H
	DB	0acH
	DB	0bfH
	DB	095H
	DB	010H
	DB	0c0H
	DB	05eH
	DB	0bfH
	DB	03H
	DB	0b6H
	DB	0faH
	DB	091H
	DB	044H
	DB	069H
	DB	083H
	DB	026H
	DB	0cfH
	DB	0bdH
	DB	09dH
	DB	084H
	DB	024H
	DB	03dH
	DB	0ccH
	DB	032H
	DB	04aH
	DB	04dH
	DB	03fH
	DB	0d8H
	DB	0feH
	DB	01H
	DB	0baH
	DB	028H
	DB	0adH
	DB	0f9H
	DB	0bdH
	DB	0bdH
	DB	0baH
	DB	01cH
	DB	0fdH
	DB	03dH
	DB	052H
	DB	0f8H
	DB	0ceH
	DB	017H
	DB	062H
	DB	0d2H
	DB	03dH
	DB	0b2H
	DB	010H
	DB	0daH
	DB	037H
	DB	0b3H
	DB	097H
	DB	05H
	DB	065H
	DB	0e1H
	DB	052H
	DB	0a5H
	DB	0baH
	DB	051H
	DB	026H
	DB	0f5H
	DB	07aH
	DB	0d3H
	DB	06fH
	DB	0b7H
	DB	011H
	DB	02bH
	DB	054H
	DB	08eH
	DB	068H
	DB	0a6H
	DB	08H
	DB	0b7H
	DB	0bdH
	DB	0e9H
	DB	0aH
	DB	07aH
	DB	01cH
	DB	099H
	DB	055H
	DB	054H
	DB	04dH
	DB	0ecH
	DB	0d8H
	DB	033H
	DB	04fH
	DB	0aaH
	DB	0d8H
	DB	089H
	DB	07bH
	DB	0feH
	DB	07fH
	DB	075H
	DB	052H
	DB	0efH
	DB	02eH
	DB	0e2H
	DB	09aH
	DB	082H
	DB	0f1H
	DB	082H
	DB	0a8H
	DB	0f9H
	DB	0b9H
	DB	0e6H
	DB	063H
	DB	043H
	DB	061H
	DB	080H
	DB	0dcH
	DB	037H
	DB	0d4H
	DB	0aaH
	DB	0a3H
	DB	02dH
	DB	0ddH
	DB	0f2H
	DB	0d7H
	DB	0b6H
	DB	07dH
	DB	053H
	DB	035H
	DB	07cH
	DB	0c9H
	DB	07H
	DB	06cH
	DB	077H
	DB	069H
	DB	086H
	DB	079H
	DB	05bH
	DB	0aH
	DB	0a1H
	DB	0d4H
	DB	043H
	DB	088H
	DB	039H
	DB	087H
	DB	06aH
	DB	0b9H
	DB	064H
	DB	021H
	DB	0eH
	DB	0fH
	DB	0c4H
	DB	03bH
	DB	06cH
	DB	0b8H
	DB	092H
	DB	023H
	DB	0b5H
	DB	065H
	DB	0d7H
	DB	032H
	DB	0aeH
	DB	05eH
	DB	01fH
	DB	026H
	DB	0c8H
	DB	025H
	DB	01fH
	DB	0a3H
	DB	02fH
	DB	0c1H
	DB	079H
	DB	0f2H
	DB	0c9H
	DB	0b2H
	DB	07aH
	DB	0b3H
	DB	0ebH
	DB	05eH
	DB	0d4H
	DB	0f9H
	DB	0edH
	DB	09aH
	DB	0b4H
	DB	05aH
	DB	0d2H
	DB	0c6H
	DB	0fdH
	DB	088H
	DB	02cH
	DB	055H
	DB	03aH
	DB	0dbH
	DB	0b4H
	DB	0d8H
	DB	081H
	DB	0fcH
	DB	0feH
	DB	0a1H
	DB	0a0H
	DB	0adH
	DB	063H
	DB	01aH
	DB	0a0H
	DB	0acH
	DB	04cH
	DB	09aH
	DB	061H
	DB	038H
	DB	0f9H
	DB	036H
	DB	0b1H
	DB	067H
	DB	0d0H
	DB	0e5H
	DB	0c1H
	DB	0a3H
	DB	0acH
	DB	0bfH
	DB	0abH
	DB	059H
	DB	016H
	DB	066H
	DB	035H
	DB	0caH
	DB	03fH
	DB	0b6H
	DB	047H
	DB	0bdH
	DB	058H
	DB	0e7H
	DB	06cH
	DB	03bH
	DB	03H
	DB	08cH
	DB	0e8H
	DB	0ceH
	DB	028H
	DB	04aH
	DB	08H
	DB	0a1H
	DB	00H
	DB	039H
	DB	09H
	DB	051H
	DB	09fH
	DB	04aH
	DB	074H
	DB	04cH
	DB	0bH
	DB	021H
	DB	0a5H
	DB	0a0H
	DB	07H
	DB	05aH
	DB	0eaH
	DB	0c5H
	DB	091H
	DB	032H
	DB	084H
	DB	069H
	DB	01aH
	DB	070H
	DB	0a5H
	DB	09cH
	DB	0fcH
	DB	0eH
	DB	06cH
	DB	0a4H
	DB	0d7H
	DB	074H
	DB	0c5H
	DB	0d7H
	DB	02dH
	DB	04eH
	DB	029H
	DB	0ccH
	DB	099H
	DB	09eH
	DB	099H
	DB	0a4H
	DB	03fH
	DB	0beH
	DB	0c4H
	DB	0c5H
	DB	01aH
	DB	0afH
	DB	08bH
	DB	0abH
	DB	0e1H
	DB	010H
	DB	015H
	DB	0fbH
	DB	00H
	DB	03aH
	DB	099H
	DB	07dH
	DB	0c7H
	DB	06H
	DB	022H
	DB	09fH
	DB	0f9H
	DB	0e8H
	DB	0f7H
	DB	0a6H
	DB	0b6H
	DB	0a0H
	DB	074H
	DB	050H
	DB	03fH
	DB	0eH
	DB	074H
	DB	0fdH
	DB	0ccH
	DB	039H
	DB	0c3H
	DB	066H
	DB	0e8H
	DB	050H
	DB	091H
	DB	0caH
	DB	0dfH
	DB	027H
	DB	047H
	DB	060H
	DB	061H
	DB	0e0H
	DB	0ddH
	DB	02aH
	DB	066H
	DB	00H
	DB	049H
	DB	0dfH
	DB	068H
	DB	041H
	DB	086H
	DB	020H
	DB	0e2H
	DB	0faH
	DB	070H
	DB	0a1H
	DB	088H
	DB	065H
	DB	0a0H
	DB	0d5H
	DB	09eH
	DB	0e3H
	DB	03cH
	DB	088H
	DB	0b3H
	DB	0ceH
	DB	053H
	DB	094H
	DB	0f5H
	DB	01aH
	DB	0f4H
	DB	0d6H
	DB	0faH
	DB	052H
	DB	080H
	DB	0e0H
	DB	052H
	DB	0caH
	DB	0c0H
	DB	03bH
	DB	08bH
	DB	048H
	DB	0daH
	DB	06eH
	DB	0c2H
	DB	0caH
	DB	090H
	DB	04cH
	DB	030H
	DB	0b0H
	DB	0a1H
	DB	0cfH
	DB	094H
	DB	0ddH
	DB	058H
	DB	049H
	DB	02cH
	DB	02bH
	DB	05dH
	DB	022H
	DB	046H
	DB	0d1H
	DB	079H
	DB	0c0H
	DB	024H
	DB	0f9H
	DB	0a2H
	DB	0f5H
	DB	0c4H
	DB	0e2H
	DB	031H
	DB	0d0H
	DB	0aaH
	DB	0cH
	DB	0beH
	DB	06eH
	DB	057H
	DB	04fH
	DB	03aH
	DB	087H
	DB	00H
	DB	05bH
	DB	057H
	DB	015H
	DB	039H
	DB	02fH
	DB	05eH
	DB	066H
	DB	05bH
	DB	03bH
	DB	08H
	DB	0a1H
	DB	08cH
	DB	081H
	DB	062H
	DB	0b0H
	DB	07cH
	DB	084H
	DB	0a6H
	DB	0c0H
	DB	0e7H
	DB	058H
	DB	011H
	DB	092H
	DB	0e3H
	DB	0d0H
	DB	080H
	DB	03bH
	DB	020H
	DB	03aH
	DB	043H
	DB	0a0H
	DB	095H
	DB	09aH
	DB	035H
	DB	04fH
	DB	0caH
	DB	013H
	DB	0b5H
	DB	026H
	DB	04eH
	DB	0bdH
	DB	047H
	DB	0daH
	DB	0bfH
	DB	029H
	DB	0bH
	DB	0bbH
	DB	02eH
	DB	031H
	DB	0fbH
	DB	016H
	DB	089H
	DB	0eH
	DB	0a8H
	DB	0edH
	DB	0deH
	DB	0a9H
	DB	0a8H
	DB	07eH
	DB	0e3H
	DB	0ebH
	DB	09eH
	DB	0f9H
	DB	087H
	DB	0d3H
	DB	049H
	DB	0d1H
	DB	0e6H
	DB	0feH
	DB	077H
	DB	0b4H
	DB	03cH
	DB	03eH
	DB	08fH
	DB	07bH
	DB	067H
	DB	01aH
	DB	037H
	DB	015H
	DB	04cH
	DB	034H
	DB	02bH
	DB	055H
	DB	042H
	DB	054H
	DB	043H
	DB	0a0H
	DB	07dH
	DB	0ecH
	DB	01fH
	DB	0e0H
	DB	058H
	DB	0beH
	DB	0daH
	DB	05fH
	DB	012H
	DB	024H
	DB	031H
	DB	0f9H
	DB	0a2H
	DB	028H
	DB	02eH
	DB	05fH
	DB	066H
	DB	03eH
	DB	05aH
	DB	04eH
	DB	058H
	DB	092H
	DB	063H
	DB	0a4H
	DB	046H
	DB	0fH
	DB	07aH
	DB	08H
	DB	0e2H
	DB	0bdH
	DB	0a8H
	DB	060H
	DB	02aH
	DB	047H
	DB	041H
	DB	083H
	DB	085H
	DB	01dH
	DB	062H
	DB	098H
	DB	0c0H
	DB	014H
	DB	012H
	DB	0e3H
	DB	03cH
	DB	040H
	DB	0c2H
	DB	023H
	DB	0fdH
	DB	01dH
	DB	071H
	DB	057H
	DB	02fH
	DB	054H
	DB	07bH
	DB	075H
	DB	0e2H
	DB	0f5H
	DB	07dH
	DB	0c5H
	DB	034H
	DB	0a5H
	DB	026H
	DB	05eH
	DB	0edH
	DB	0e7H
	DB	061H
	DB	073H
	DB	084H
	DB	0c4H
	DB	08bH
	DB	0c4H
	DB	0d8H
	DB	01dH
	DB	0a8H
	DB	094H
	DB	05eH
	DB	06bH
	DB	0b7H
	DB	05cH
	DB	09H
	DB	0a8H
	DB	033H
	DB	038H
	DB	0fdH
	DB	0afH
	DB	0aeH
	DB	0e0H
	DB	025H
	DB	0abH
	DB	027H
	DB	059H
	DB	0d1H
	DB	0ccH
	DB	038H
	DB	0bfH
	DB	0b4H
	DB	099H
	DB	0b2H
	DB	0b8H
	DB	0ddH
	DB	0beH
	DB	07eH
	DB	036H
	DB	0dbH
	DB	0a6H
	DB	0cbH
	DB	0b9H
	DB	092H
	DB	03H
	DB	096H
	DB	09bH
	DB	0acH
	DB	0c9H
	DB	0d3H
	DB	02aH
	DB	0f8H
	DB	02H
	DB	08aH
	DB	01fH
	DB	0aeH
	DB	0b1H
	DB	0f7H
	DB	00H
	DB	0feH
	DB	030H
	DB	0bfH
	DB	033H
	DB	0caH
	DB	0f1H
	DB	0ecH
	DB	028H
	DB	030H
	DB	0eaH
	DB	0deH
	DB	0dH
	DB	091H
	DB	02aH
	DB	046H
	DB	024H
	DB	02dH
	DB	0dcH
	DB	0bfH
	DB	059H
	DB	027H
	DB	014H
	DB	083H
	DB	09fH
	DB	016H
	DB	08eH
	DB	03eH
	DB	044H
	DB	0bfH
	DB	037H
	DB	044H
	DB	0beH
	DB	067H
	DB	083H
	DB	0f2H
	DB	0b1H
	DB	076H
	DB	05fH
	DB	05aH
	DB	0a6H
	DB	04aH
	DB	039H
	DB	033H
	DB	0dbH
	DB	063H
	DB	07aH
	DB	01H
	DB	090H
	DB	0d6H
	DB	040H
	DB	06aH
	DB	0fdH
	DB	054H
	DB	0edH
	DB	09eH
	DB	06bH
	DB	07cH
	DB	05cH
	DB	0afH
	DB	03dH
	DB	093H
	DB	074H
	DB	07bH
	DB	07bH
	DB	0f7H
	DB	06eH
	DB	0acH
	DB	0edH
	DB	04dH
	DB	07H
	DB	095H
	DB	097H
	DB	0bfH
	DB	048H
	DB	074H
	DB	023H
	DB	0c2H
	DB	0f4H
	DB	034H
	DB	09aH
	DB	0b4H
	DB	09eH
	DB	018H
	DB	0aH
	DB	0cH
	DB	036H
	DB	0f4H
	DB	09H
	DB	093H
	DB	0a4H
	DB	0c5H
	DB	0a6H
	DB	098H
	DB	041H
	DB	0a1H
	DB	091H
	DB	030H
	DB	04fH
	DB	07fH
	DB	07dH
	DB	0d5H
	DB	094H
	DB	095H
	DB	096H
	DB	0ddH
	DB	089H
	DB	0b9H
	DB	020H
	DB	07eH
	DB	06dH
	DB	03aH
	DB	033H
	DB	0cH
	DB	053H
	DB	0bcH
	DB	098H
	DB	09H
	DB	0b1H
	DB	0a1H
	DB	01cH
	DB	0d6H
	DB	067H
	DB	0c3H
	DB	06fH
	DB	028H
	DB	065H
	DB	01H
	DB	0d7H
	DB	034H
	DB	01H
	DB	056H
	DB	0bH
	DB	095H
	DB	06bH
	DB	0a1H
	DB	0f2H
	DB	0f4H
	DB	0daH
	DB	093H
	DB	0f2H
	DB	049H
	DB	0cdH
	DB	026H
	DB	0d4H
	DB	0a0H
	DB	063H
	DB	0ecH
	DB	0aaH
	DB	015H
	DB	08eH
	DB	0c6H
	DB	0ebH
	DB	075H
	DB	0aH
	DB	0dbH
	DB	01eH
	DB	0efH
	DB	0dcH
	DB	0f5H
	DB	024H
	DB	05dH
	DB	0cbH
	DB	0aeH
	DB	073H
	DB	037H
	DB	0cfH
	DB	066H
	DB	02cH
	DB	0abH
	DB	0f9H
	DB	01fH
	DB	074H
	DB	048H
	DB	0c5H
	DB	0c8H
	DB	0e8H
	DB	0a8H
	DB	0b6H
	DB	093H
	DB	0bdH
	DB	0c4H
	DB	0daH
	DB	02aH
	DB	0baH
	DB	0e4H
	DB	06H
	DB	0d8H
	DB	0d4H
	DB	062H
	DB	04eH
	DB	0f9H
	DB	040H
	DB	01bH
	DB	028H
	DB	0b3H
	DB	0d1H
	DB	0f8H
	DB	099H
	DB	07eH
	DB	024H
	DB	094H
	DB	09dH
	DB	018H
	DB	05cH
	DB	0e2H
	DB	0e0H
	DB	045H
	DB	0bH
	DB	017H
	DB	059H
	DB	0c9H
	DB	05cH
	DB	034H
	DB	073H
	DB	017H
	DB	019H
	DB	0f8H
	DB	06fH
	DB	0eeH
	DB	05bH
	DB	0bdH
	DB	068H
	DB	01bH
	DB	0d8H
	DB	090H
	DB	0ceH
	DB	0abH
	DB	09H
	DB	069H
	DB	0a9H
	DB	02dH
	DB	07dH
	DB	0c6H
	DB	045H
	DB	0d9H
	DB	0aaH
	DB	0a6H
	DB	01fH
	DB	0b5H
	DB	03dH
	DB	078H
	DB	0feH
	DB	099H
	DB	0acH
	DB	0f1H
	DB	030H
	DB	046H
	DB	0eaH
	DB	09fH
	DB	0b4H
	DB	0c6H
	DB	05eH
	DB	01dH
	DB	0e1H
	DB	0b6H
	DB	02dH
	DB	0b1H
	DB	0e1H
	DB	0b6H
	DB	09aH
	DB	08bH
	DB	0e3H
	DB	018H
	DB	053H
	DB	0a9H
	DB	0f1H
	DB	07dH
	DB	0cfH
	DB	090H
	DB	0b2H
	DB	0dH
	DB	0aH
	DB	0b2H
	DB	027H
	DB	036H
	DB	024H
	DB	057H
	DB	07cH
	DB	010H
	DB	0f7H
	DB	0b0H
	DB	0d6H
	DB	0d5H
	DB	0cdH
	DB	038H
	DB	08cH
	DB	07bH
	DB	069H
	DB	06fH
	DB	032H
	DB	04H
	DB	0faH
	DB	095H
	DB	01cH
	DB	0cdH
	DB	0beH
	DB	08dH
	DB	04bH
	DB	08eH
	DB	01fH
	DB	0feH
	DB	01cH
	DB	0a8H
	DB	0b1H
	DB	043H
	DB	05eH
	DB	055H
	DB	01aH
	DB	05bH
	DB	065H
	DB	091H
	DB	0cH
	DB	0bbH
	DB	067H
	DB	05aH
	DB	074H
	DB	0f4H
	DB	0d5H
	DB	0ddH
	DB	0e3H
	DB	087H
	DB	0e2H
	DB	05eH
	DB	09cH
	DB	07eH
	DB	02dH
	DB	05cH
	DB	08cH
	DB	078H
	DB	06aH
	DB	0abH
	DB	077H
	DB	06H
	DB	0d3H
	DB	0a8H
	DB	049H
	DB	032H
	DB	0feH
	DB	0e3H
	DB	08dH
	DB	0e3H
	DB	075H
	DB	09aH
	DB	0a0H
	DB	05dH
	DB	0f4H
	DB	015H
	DB	0d1H
	DB	04aH
	DB	072H
	DB	0b5H
	DB	051H
	DB	0d4H
	DB	093H
	DB	0edH
	DB	054H
	DB	0c0H
	DB	0c9H
	DB	0e0H
	DB	0b9H
	DB	0b4H
	DB	0cH
	DB	0b0H
	DB	0baH
	DB	05fH
	DB	05aH
	DB	084H
	DB	091H
	DB	0d8H
	DB	068H
	DB	09fH
	DB	0bcH
	DB	05dH
	DB	03aH
	DB	0dcH
	DB	0baH
	DB	0aeH
	DB	071H
	DB	08cH
	DB	0f8H
	DB	064H
	DB	0c1H
	DB	0c9H
	DB	039H
	DB	056H
	DB	037H
	DB	08dH
	DB	096H
	DB	081H
	DB	0edH
	DB	050H
	DB	036H
	DB	079H
	DB	02H
	DB	070H
	DB	0d8H
	DB	0dbH
	DB	0f4H
	DB	06bH
	DB	034H
	DB	0dcH
	DB	0bH
	DB	0f0H
	DB	0baH
	DB	0c4H
	DB	04eH
	DB	075H
	DB	073H
	DB	03fH
	DB	082H
	DB	0ebH
	DB	0a3H
	DB	0c3H
	DB	0b5H
	DB	0ddH
	DB	099H
	DB	0ecH
	DB	0eaH
	DB	031H
	DB	06eH
	DB	0d9H
	DB	01H
	DB	024H
	DB	053H
	DB	082H
	DB	095H
	DB	0acH
	DB	0ddH
	DB	0aH
	DB	018H
	DB	012H
	DB	0e7H
	DB	0a2H
	DB	083H
	DB	0a2H
	DB	067H
	DB	051H
	DB	097H
	DB	05aH
	DB	090H
	DB	099H
	DB	046H
	DB	0b4H
	DB	0ddH
	DB	0fbH
	DB	092H
	DB	077H
	DB	068H
	DB	07dH
	DB	028H
	DB	0d7H
	DB	0d6H
	DB	0a9H
	DB	0fbH
	DB	0aaH
	DB	0abH
	DB	011H
	DB	057H
	DB	08aH
	DB	01cH
	DB	0eeH
	DB	01cH
	DB	083H
	DB	011H
	DB	09fH
	DB	026H
	DB	078H
	DB	0f0H
	DB	03dH
	DB	052H
	DB	02H
	DB	057H
	DB	098H
	DB	0b6H
	DB	035H
	DB	014H
	DB	0c8H
	DB	0acH
	DB	0fbH
	DB	0c5H
	DB	055H
	DB	0d3H
	DB	09dH
	DB	0feH
	DB	050H
	DB	0c7H
	DB	0aaH
	DB	061H
	DB	09eH
	DB	0b4H
	DB	0fcH
	DB	0dH
	DB	0d1H
	DB	080H
	DB	01eH
	DB	0f0H
	DB	026H
	DB	016H
	DB	0e2H
	DB	0e3H
	DB	068H
	DB	064H
	DB	03bH
	DB	080H
	DB	01bH
	DB	0efH
	DB	014H
	DB	063H
	DB	09cH
	DB	010H
	DB	029H
	DB	071H
	DB	064H
	DB	046H
	DB	0efH
	DB	034H
	DB	08dH
	DB	01bH
	DB	015H
	DB	02cH
	DB	0cfH
	DB	013H
	DB	0b8H
	DB	021H
	DB	093H
	DB	0d6H
	DB	013H
	DB	03aH
	DB	06cH
	DB	075H
	DB	01eH
	DB	0d4H
	DB	0d9H
	DB	059H
	DB	0d4H
	DB	074H
	DB	049H
	DB	068H
	DB	0d7H
	DB	065H
	DB	0f8H
	DB	01H
	DB	057H
	DB	05dH
	DB	0c7H
	DB	047H
	DB	011H
	DB	055H
	DB	062H
	DB	026H
	DB	082H
	DB	033H
	DB	0b8H
	DB	03bH
	DB	054H
	DB	0ccH
	DB	092H
	DB	0e6H
	DB	07H
	DB	0feH
	DB	05cH
	DB	025H
	DB	054H
	DB	036H
	DB	0fdH
	DB	0a8H
	DB	02aH
	DB	0c6H
	DB	012H
	DB	02H
	DB	0abH
	DB	0bH
	DB	083H
	DB	03H
	DB	0e7H
	DB	04bH
	DB	04bH
	DB	0f8H
	DB	0a0H
	DB	0adH
	DB	09eH
	DB	0a2H
	DB	060H
	DB	058H
	DB	05eH
	DB	035H
	DB	0a4H
	DB	0f0H
	DB	01cH
	DB	0abH
	DB	06fH
	DB	079H
	DB	050H
	DB	0c3H
	DB	02fH
	DB	0cdH
	DB	06dH
	DB	05aH
	DB	094H
	DB	0feH
	DB	0dbH
	DB	040H
	DB	0aH
	DB	05fH
	DB	044H
	DB	071H
	DB	02aH
	DB	0fH
	DB	06aH
	DB	0cbH
	DB	03cH
	DB	088H
	DB	06eH
	DB	09dH
	DB	060H
	DB	0ccH
	DB	052H
	DB	05H
	DB	03dH
	DB	06eH
	DB	030H
	DB	0adH
	DB	067H
	DB	080H
	DB	0f0H
	DB	017H
	DB	0cdH
	DB	05eH
	DB	0f0H
	DB	062H
	DB	05dH
	DB	0ccH
	DB	023H
	DB	0e6H
	DB	0acH
	DB	0e6H
	DB	058H
	DB	0d6H
	DB	0f5H
	DB	042H
	DB	0a2H
	DB	032H
	DB	04bH
	DB	091H
	DB	04fH
	DB	0abH
	DB	0ddH
	DB	0a1H
	DB	031H
	DB	09bH
	DB	090H
	DB	061H
	DB	049H
	DB	077H
	DB	062H
	DB	03aH
	DB	08eH
	DB	030H
	DB	019H
	DB	0feH
	DB	013H
	DB	0f5H
	DB	0ccH
	DB	036H
	DB	05dH
	DB	079H
	DB	01dH
	DB	0b5H
	DB	050H
	DB	013H
	DB	078H
	DB	073H
	DB	0c4H
	DB	0c3H
	DB	084H
	DB	094H
	DB	0eeH
	DB	062H
	DB	036H
	DB	020H
	DB	0fdH
	DB	046H
	DB	02H
	DB	0c6H
	DB	0beH
	DB	064H
	DB	02H
	DB	0ccH
	DB	014H
	DB	09aH
	DB	04cH
	DB	027H
	DB	090H
	DB	019H
	DB	05dH
	DB	0edH
	DB	012H
	DB	0f9H
	DB	024H
	DB	0e1H
	DB	08cH
	DB	01cH
	DB	0d4H
	DB	052H
	DB	05fH
	DB	059H
	DB	0e6H
	DB	04eH
	DB	0bcH
	DB	09cH
	DB	0eeH
	DB	03aH
	DB	0e3H
	DB	0f0H
	DB	02H
	DB	022H
	DB	0d4H
	DB	083H
	DB	06eH
	DB	0e8H
	DB	09dH
	DB	0baH
	DB	090H
	DB	02eH
	DB	053H
	DB	06dH
	DB	09cH
	DB	0e4H
	DB	068H
	DB	040H
	DB	0c7H
	DB	0f4H
	DB	05cH
	DB	09cH
	DB	0c6H
	DB	0bbH
	DB	0f6H
	DB	0adH
	DB	089H
	DB	033H
	DB	0caH
	DB	078H
	DB	06dH
	DB	02eH
	DB	069H
	DB	0eeH
	DB	0cfH
	DB	03eH
	DB	0f1H
	DB	03eH
	DB	0a7H
	DB	08fH
	DB	079H
	DB	038H
	DB	03eH
	DB	04cH
	DB	0a5H
	DB	0daH
	DB	032H
	DB	0eH
	DB	01bH
	DB	0f9H
	DB	083H
	DB	0f6H
	DB	016H
	DB	04aH
	DB	0b2H
	DB	0dH
	DB	078H
	DB	0bbH
	DB	0bfH
	DB	043H
	DB	035H
	DB	0adH
	DB	071H
	DB	09eH
	DB	01cH
	DB	041H
	DB	05dH
	DB	0fH
	DB	0feH
	DB	084H
	DB	09eH
	DB	0f7H
	DB	03cH
	DB	05cH
	DB	045H
	DB	0e1H
	DB	037H
	DB	077H
	DB	070H
	DB	0d1H
	DB	0f0H
	DB	073H
	DB	048H
	DB	07H
	DB	0bdH
	DB	07aH
	DB	094H
	DB	036H
	DB	037H
	DB	0d3H
	DB	0f8H
	DB	06cH
	DB	081H
	DB	06aH
	DB	08aH
	DB	09eH
	DB	0abH
	DB	067H
	DB	0adH
	DB	02bH
	DB	0ebH
	DB	0cbH
	DB	023H
	DB	028H
	DB	029H
	DB	068H
	DB	08aH
	DB	0dfH
	DB	05fH
	DB	07aH
	DB	032H
	DB	050H
	DB	0edH
	DB	07aH
	DB	0d7H
	DB	02bH
	DB	0f5H
	DB	0ebH
	DB	0e1H
	DB	02dH
	DB	0bfH
	DB	0daH
	DB	019H
	DB	042H
	DB	046H
	DB	0a3H
	DB	060H
	DB	071H
	DB	0cH
	DB	08dH
	DB	09cH
	DB	077H
	DB	059H
	DB	040H
	DB	020H
	DB	02H
	DB	0a8H
	DB	02aH
	DB	062H
	DB	088H
	DB	024H
	DB	094H
	DB	0d8H
	DB	091H
	DB	08eH
	DB	030H
	DB	0bcH
	DB	04H
	DB	01cH
	DB	01eH
	DB	031H
	DB	0dcH
	DB	0f9H
	DB	0c9H
	DB	09eH
	DB	0bfH
	DB	06eH
	DB	0feH
	DB	0b0H
	DB	0f9H
	DB	08cH
	DB	0cdH
	DB	0f0H
	DB	065H
	DB	0eH
	DB	090H
	DB	0e7H
	DB	036H
	DB	0baH
	DB	04aH
	DB	0beH
	DB	0deH
	DB	05eH
	DB	018H
	DB	0efH
	DB	0ecH
	DB	048H
	DB	02dH
	DB	071H
	DB	0e4H
	DB	04bH
	DB	022H
	DB	0c1H
	DB	0c4H
	DB	0ecH
	DB	0dfH
	DB	084H
	DB	05bH
	DB	0deH
	DB	0b5H
	DB	0d4H
	DB	06bH
	DB	083H
	DB	0c5H
	DB	050H
	DB	091H
	DB	057H
	DB	038H
	DB	0c7H
	DB	091H
	DB	02H
	DB	087H
	DB	0f0H
	DB	060H
	DB	09fH
	DB	0e0H
	DB	0cdH
	DB	067H
	DB	0eH
	DB	03fH
	DB	04cH
	DB	0d9H
	DB	061H
	DB	08dH
	DB	09eH
	DB	04eH
	DB	06dH
	DB	0a3H
	DB	029H
	DB	04cH
	DB	059H
	DB	07dH
	DB	037H
	DB	0dcH
	DB	0c3H
	DB	088H
	DB	0edH
	DB	01bH
	DB	0c0H
	DB	035H
	DB	02cH
	DB	043H
	DB	03cH
	DB	01dH
	DB	0a3H
	DB	0dbH
	DB	07eH
	DB	0f0H
	DB	0c3H
	DB	0cH
	DB	0afH
	DB	010H
	DB	0e5H
	DB	012H
	DB	09eH
	DB	05H
	DB	0dfH
	DB	0cH
	DB	0a8H
	DB	089H
	DB	059H
	DB	081H
	DB	07H
	DB	010H
	DB	0ddH
	DB	0caH
	DB	098H
	DB	0cbH
	DB	065H
	DB	0d9H
	DB	080H
	DB	012H
	DB	01dH
	DB	0bdH
	DB	0aeH
	DB	040H
	DB	099H
	DB	02dH
	DB	032H
	DB	0dcH
	DB	0b9H
	DB	0e1H
	DB	0edH
	DB	01fH
	DB	073H
	DB	08cH
	DB	024H
	DB	0d3H
	DB	018H
	DB	04cH
	DB	0dcH
	DB	0f0H
	DB	0cdH
	DB	0e3H
	DB	02H
	DB	0abH
	DB	02fH
	DB	09aH
	DB	0f6H
	DB	014H
	DB	0f3H
	DB	078H
	DB	026H
	DB	090H
	DB	036H
	DB	055H
	DB	0d1H
	DB	04fH
	DB	02H
	DB	083H
	DB	02dH
	DB	0bbH
	DB	0e4H
	DB	01bH
	DB	0dbH
	DB	0d8H
	DB	027H
	DB	07fH
	DB	02cH
	DB	03fH
	DB	0ccH
	DB	09H
	DB	031H
	DB	09aH
	DB	06cH
	DB	0b2H
	DB	0c6H
	DB	09bH
	DB	0ccH
	DB	0bdH
	DB	030H
	DB	0c1H
	DB	036H
	DB	0d5H
	DB	052H
	DB	06cH
	DB	02bH
	DB	0a3H
	DB	0bcH
	DB	02eH
	DB	0a6H
	DB	069H
	DB	069H
	DB	08cH
	DB	084H
	DB	0c4H
	DB	0e4H
	DB	0abH
	DB	045H
	DB	011H
	DB	06aH
	DB	091H
	DB	01aH
	DB	01bH
	DB	02cH
	DB	086H
	DB	0cdH
	DB	0f2H
	DB	0a2H
	DB	09bH
	DB	031H
	DB	052H
	DB	0dcH
	DB	067H
	DB	028H
	DB	0aeH
	DB	054H
	DB	0d3H
	DB	0d2H
	DB	090H
	DB	081H
	DB	079H
	DB	0f9H
	DB	0eaH
	DB	085H
	DB	07eH
	DB	0b0H
	DB	06aH
	DB	0a9H
	DB	075H
	DB	0faH
	DB	093H
	DB	07H
	DB	015H
	DB	0afH
	DB	0b2H
	DB	01cH
	DB	0fcH
	DB	026H
	DB	03eH
	DB	018H
	DB	057H
	DB	090H
	DB	0f4H
	DB	03eH
	DB	038H
	DB	024H
	DB	092H
	DB	08bH
	DB	0f6H
	DB	0a2H
	DB	0dH
	DB	070H
	DB	09cH
	DB	078H
	DB	0f6H
	DB	09aH
	DB	0a8H
	DB	0e0H
	DB	0c3H
	DB	01eH
	DB	0dcH
	DB	0d7H
	DB	0a4H
	DB	071H
	DB	07H
	DB	057H
	DB	08dH
	DB	04H
	DB	07dH
	DB	04bH
	DB	01dH
	DB	054H
	DB	05bH
	DB	091H
	DB	093H
	DB	094H
	DB	0b5H
	DB	0a5H
	DB	020H
	DB	02cH
	DB	0c8H
	DB	0adH
	DB	09dH
	DB	065H
	DB	026H
	DB	014H
	DB	080H
	DB	0ceH
	DB	074H
	DB	0c3H
	DB	0ecH
	DB	051H
	DB	09bH
	DB	011H
	DB	0c3H
	DB	0a2H
	DB	068H
	DB	0d0H
	DB	027H
	DB	066H
	DB	09cH
	DB	0c3H
	DB	0baH
	DB	0f7H
	DB	055H
	DB	0cdH
	DB	0cH
	DB	08bH
	DB	0f3H
	DB	02dH
	DB	0b7H
	DB	0bcH
	DB	05aH
	DB	0d4H
	DB	0a1H
	DB	080H
	DB	068H
	DB	022H
	DB	04fH
	DB	0ddH
	DB	066H
	DB	0bbH
	DB	02fH
	DB	02H
	DB	0ccH
	DB	072H
	DB	025H
	DB	0b4H
	DB	0c3H
	DB	04cH
	DB	01bH
	DB	060H
	DB	08fH
	DB	0d6H
	DB	058H
	DB	064H
	DB	024H
	DB	065H
	DB	0efH
	DB	018H
	DB	012H
	DB	028H
	DB	0d4H
	DB	06cH
	DB	0fcH
	DB	077H
	DB	06cH
	DB	066H
	DB	019H
	DB	03bH
	DB	0c3H
	DB	07fH
	DB	0f6H
	DB	0f2H
	DB	02H
	DB	043H
	DB	0e5H
	DB	0a6H
	DB	0f7H
	DB	029H
	DB	0f2H
	DB	014H
	DB	089H
	DB	02H
	DB	06aH
	DB	061H
	DB	066H
	DB	0eH
	DB	046H
	DB	0d6H
	DB	027H
	DB	0d7H
	DB	0feH
	DB	0fbH
	DB	0c3H
	DB	07bH
	DB	0f2H
	DB	030H
	DB	061H
	DB	08cH
	DB	06bH
	DB	025H
	DB	08bH
	DB	0e1H
	DB	098H
	DB	08dH
	DB	025H
	DB	0fdH
	DB	034H
	DB	09dH
	DB	027H
	DB	0a6H
	DB	0b1H
	DB	030H
	DB	0a8H
	DB	09bH
	DB	091H
	DB	08fH
	DB	0a9H
	DB	058H
	DB	066H
	DB	050H
	DB	030H
	DB	065H
	DB	0ccH
	DB	0f4H
	DB	060H
	DB	0bfH
	DB	025H
	DB	0c2H
	DB	0cbH
	DB	011H
	DB	0e7H
	DB	058H
	DB	0f2H
	DB	00H
	DB	0e5H
	DB	098H
	DB	0fdH
	DB	09aH
	DB	036H
	DB	025H
	DB	0c0H
	DB	067H
	DB	055H
	DB	0e9H
	DB	03H
	DB	067H
	DB	079H
	DB	02cH
	DB	0bfH
	DB	0dfH
	DB	0fcH
	DB	0efH
	DB	0c4H
	DB	0c9H
	DB	0e4H
	DB	025H
	DB	09H
	DB	08aH
	DB	0e7H
	DB	0d5H
	DB	01bH
	DB	050H
	DB	02eH
	DB	0eH
	DB	0cfH
	DB	093H
	DB	0a6H
	DB	0ceH
	DB	0adH
	DB	05cH
	DB	073H
	DB	06fH
	DB	0c3H
	DB	0c9H
	DB	0d8H
	DB	046H
	DB	0b0H
	DB	052H
	DB	073H
	DB	070H
	DB	0b1H
	DB	070H
	DB	0dfH
	DB	0f5H
	DB	0b9H
	DB	0c5H
	DB	01bH
	DB	0c2H
	DB	0cfH
	DB	083H
	DB	098H
	DB	06aH
	DB	053H
	DB	046H
	DB	078H
	DB	023H
	DB	0daH
	DB	09fH
	DB	071H
	DB	08H
	DB	0fbH
	DB	0e5H
	DB	077H
	DB	0c0H
	DB	02fH
	DB	0cfH
	DB	07H
	DB	0dfH
	DB	0a1H
	DB	0f9H
	DB	0cfH
	DB	053H
	DB	0e9H
	DB	0afH
	DB	049H
	DB	0a3H
	DB	0f4H
	DB	0e4H
	DB	067H
	DB	0c4H
	DB	068H
	DB	07fH
	DB	0aeH
	DB	03bH
	DB	0c6H
	DB	028H
	DB	0ddH
	DB	021H
	DB	047H
	DB	050H
	DB	029H
	DB	0c2H
	DB	036H
	DB	021H
	DB	03H
	DB	0e4H
	DB	0f0H
	DB	0bH
	DB	0c4H
	DB	093H
	DB	084H
	DB	014H
	DB	066H
	DB	0eeH
	DB	0c3H
	DB	030H
	DB	092H
	DB	0b9H
	DB	015H
	DB	079H
	DB	0fdH
	DB	0fcH
	DB	0f9H
	DB	0adH
	DB	0b7H
	DB	040H
	DB	055H
	DB	095H
	DB	061H
	DB	09cH
	DB	0e5H
	DB	0aH
	DB	0deH
	DB	09bH
	DB	02bH
	DB	0e2H
	DB	080H
	DB	09cH
	DB	06dH
	DB	0c4H
	DB	0afH
	DB	0f1H
	DB	0d8H
	DB	095H
	DB	0e0H
	DB	09dH
	DB	0c5H
	DB	0f3H
	DB	0d6H
	DB	05aH
	DB	06dH
	DB	0d4H
	DB	057H
	DB	0e6H
	DB	02H
	DB	08eH
	DB	027H
	DB	057H
	DB	025H
	DB	08H
	DB	073H
	DB	0bH
	DB	013H
	DB	053H
	DB	027H
	DB	0bdH
	DB	036H
	DB	0a7H
	DB	0d9H
	DB	023H
	DB	0ecH
	DB	089H
	DB	015H
	DB	0c5H
	DB	09fH
	DB	076H
	DB	0e2H
	DB	065H
	DB	0e9H
	DB	039H
	DB	0c0H
	DB	0d6H
	DB	08eH
	DB	097H
	DB	0beH
	DB	090H
	DB	027H
	DB	065H
	DB	0e8H
	DB	0cbH
	DB	06eH
	DB	0dbH
	DB	056H
	DB	01H
	DB	0aeH
	DB	07dH
	DB	0beH
	DB	064H
	DB	0a5H
	DB	019H
	DB	087H
	DB	092H
	DB	0a2H
	DB	01dH
	DB	0d7H
	DB	042H
	DB	013H
	DB	03bH
	DB	028H
	DB	0fcH
	DB	074H
	DB	068H
	DB	0d3H
	DB	03H
	DB	00H
	DB	092H
	DB	014H
	DB	0a6H
	DB	0f8H
	DB	07cH
	DB	072H
	DB	0e6H
	DB	058H
	DB	049H
	DB	0e7H
	DB	08H
	DB	0c6H
	DB	026H
	DB	06cH
	DB	0ebH
	DB	03fH
	DB	0f4H
	DB	07eH
	DB	062H
	DB	091H
	DB	0d6H
	DB	0a4H
	DB	0a4H
	DB	091H
	DB	04cH
	DB	0a1H
	DB	06H
	DB	0b4H
	DB	0f4H
	DB	089H
	DB	035H
	DB	088H
	DB	09dH
	DB	05bH
	DB	01H
	DB	01aH
	DB	0ceH
	DB	067H
	DB	0f1H
	DB	018H
	DB	04fH
	DB	079H
	DB	05eH
	DB	075H
	DB	066H
	DB	04bH
	DB	0b5H
	DB	0daH
	DB	049H
	DB	018H
	DB	06cH
	DB	09fH
	DB	03cH
	DB	011H
	DB	031H
	DB	089H
	DB	0b2H
	DB	0b7H
	DB	0bdH
	DB	027H
	DB	0c0H
	DB	0f2H
	DB	0afH
	DB	05eH
	DB	0ceH
	DB	030H
	DB	0f7H
	DB	09dH
	DB	097H
	DB	069H
	DB	035H
	DB	066H
	DB	0e3H
	DB	013H
	DB	0dcH
	DB	04aH
	DB	0ddH
	DB	012H
	DB	025H
	DB	028H
	DB	02aH
	DB	091H
	DB	0c7H
	DB	0e5H
	DB	022H
	DB	0f9H
	DB	0eeH
	DB	054H
	DB	031H
	DB	0adH
	DB	07bH
	DB	0f1H
	DB	020H
	DB	0abH
	DB	0cfH
	DB	0eeH
	DB	05bH
	DB	0c7H
	DB	0cH
	DB	0f3H
	DB	0b0H
	DB	0c0H
	DB	05aH
	DB	014H
	DB	054H
	DB	0b6H
	DB	05eH
	DB	032H
	DB	0c8H
	DB	03H
	DB	0d9H
	DB	072H
	DB	014H
	DB	0a2H
	DB	059H
	DB	036H
	DB	01cH
	DB	048H
	DB	0aH
	DB	0ccH
	DB	075H
	DB	086H
	DB	0beH
	DB	016H
	DB	032H
	DB	08eH
	DB	084H
	DB	08dH
	DB	0d5H
	DB	091H
	DB	01H
	DB	086H
	DB	0d1H
	DB	0dbH
	DB	09bH
	DB	026H
	DB	012H
	DB	079H
	DB	0d8H
	DB	0dbH
	DB	0fcH
	DB	0b2H
	DB	0cdH
	DB	011H
	DB	0d4H
	DB	0a6H
	DB	0c7H
	DB	0f0H
	DB	0efH
	DB	051H
	DB	0bdH
	DB	0e4H
	DB	0d7H
	DB	0fbH
	DB	0faH
	DB	089H
	DB	08aH
	DB	00H
	DB	097H
	DB	060H
	DB	011H
	DB	098H
	DB	067H
	DB	0e2H
	DB	0f3H
	DB	082H
	DB	089H
	DB	07H
	DB	0fbH
	DB	062H
	DB	062H
	DB	078H
	DB	094H
	DB	0afH
	DB	08aH
	DB	06aH
	DB	057H
	DB	0d1H
	DB	0daH
	DB	0c6H
	DB	023H
	DB	019H
	DB	0abH
	DB	07bH
	DB	015H
	DB	027H
	DB	05H
	DB	020H
	DB	027H
	DB	01cH
	DB	00H
	DB	038H
	DB	0b5H
	DB	067H
	DB	09aH
	DB	029H
	DB	0e9H
	DB	0a3H
	DB	0afH
	DB	066H
	DB	06H
	DB	091H
	DB	0deH
	DB	09bH
	DB	042H
	DB	0e8H
	DB	085H
	DB	099H
	DB	03aH
	DB	060H
	DB	060H
	DB	05eH
	DB	079H
	DB	08bH
	DB	059H
	DB	0fH
	DB	032H
	DB	0ddH
	DB	02fH
	DB	0d8H
	DB	0faH
	DB	02fH
	DB	090H
	DB	030H
	DB	097H
	DB	02cH
	DB	059H
	DB	01H
	DB	0cfH
	DB	0aH
	DB	0e6H
	DB	056H
	DB	01bH
	DB	046H
	DB	071H
	DB	05dH
	DB	02fH
	DB	0f6H
	DB	0f6H
	DB	06aH
	DB	0d6H
	DB	0d6H
	DB	048H
	DB	0d0H
	DB	0e2H
	DB	021H
	DB	0dfH
	DB	015H
	DB	0feH
	DB	0fH
	DB	0eeH
	DB	0f9H
	DB	03eH
	DB	0feH
	DB	02aH
	DB	055H
	DB	02bH
	DB	084H
	DB	0d6H
	DB	07bH
	DB	0eH
	DB	0bdH
	DB	051H
	DB	029H
	DB	04H
	DB	042H
	DB	07H
	DB	0b3H
	DB	0b8H
	DB	07dH
	DB	09dH
	DB	08fH
	DB	055H
	DB	065H
	DB	060H
	DB	0b7H
	DB	086H
	DB	040H
	DB	0ccH
	DB	085H
	DB	0ceH
	DB	03bH
	DB	080H
	DB	08dH
	DB	03bH
	DB	0aaH
	DB	0e2H
	DB	0e5H
	DB	0aeH
	DB	039H
	DB	0e0H
	DB	03cH
	DB	0f7H
	DB	032H
	DB	0e5H
	DB	07bH
	DB	074H
	DB	0ecH
	DB	02fH
	DB	02dH
	DB	06aH
	DB	04cH
	DB	03dH
	DB	03fH
	DB	0b1H
	DB	09dH
	DB	0f6H
	DB	038H
	DB	05eH
	DB	044H
	DB	0beH
	DB	02dH
	DB	07fH
	DB	0beH
	DB	0baH
	DB	03aH
	DB	0e8H
	DB	01eH
	DB	021H
	DB	098H
	DB	057H
	DB	02H
	DB	054H
	DB	0ceH
	DB	0b4H
	DB	03aH
	DB	0caH
	DB	0a8H
	DB	027H
	DB	0f9H
	DB	0d6H
	DB	012H
	DB	0c6H
	DB	014H
	DB	051H
	DB	078H
	DB	031H
	DB	049H
	DB	0b1H
	DB	0fH
	DB	0dH
	DB	0efH
	DB	0bcH
	DB	08cH
	DB	02eH
	DB	077H
	DB	0c7H
	DB	017H
	DB	015H
	DB	068H
	DB	02fH
	DB	0ecH
	DB	0e9H
	DB	084H
	DB	0bbH
	DB	09eH
	DB	03eH
	DB	086H
	DB	048H
	DB	0e5H
	DB	01H
	DB	09eH
	DB	077H
	DB	047H
	DB	032H
	DB	0c8H
	DB	0bfH
	DB	0e2H
	DB	091H
	DB	0f0H
	DB	0f2H
	DB	09eH
	DB	060H
	DB	0afH
	DB	0abH
	DB	08eH
	DB	0a6H
	DB	0f2H
	DB	026H
	DB	0bcH
	DB	05bH
	DB	055H
	DB	029H
	DB	0c4H
	DB	059H
	DB	064H
	DB	0e3H
	DB	018H
	DB	06bH
	DB	02cH
	DB	0fdH
	DB	06cH
	DB	04aH
	DB	075H
	DB	0b3H
	DB	0fbH
	DB	0bdH
	DB	0f2H
	DB	0deH
	DB	050H
	DB	0e4H
	DB	0d1H
	DB	06eH
	DB	0c4H
	DB	01H
	DB	01aH
	DB	054H
	DB	0a8H
	DB	08cH
	DB	07aH
	DB	0e4H
	DB	0e7H
	DB	04fH
	DB	08dH
	DB	02dH
	DB	0a9H
	DB	0f1H
	DB	011H
	DB	041H
	DB	05dH
	DB	0bcH
	DB	03fH
	DB	049H
	DB	07H
	DB	034H
	DB	07cH
	DB	03H
	DB	071H
	DB	070H
	DB	061H
	DB	041H
	DB	0d4H
	DB	0b3H
	DB	0b0H
	DB	099H
	DB	0b4H
	DB	04aH
	DB	06dH
	DB	0dcH
	DB	0d7H
	DB	067H
	DB	041H
	DB	03fH
	DB	0b7H
	DB	0ceH
	DB	06cH
	DB	0e0H
	DB	0c1H
	DB	07dH
	DB	0a1H
	DB	01fH
	DB	0b9H
	DB	0e0H
	DB	069H
	DB	0c0H
	DB	094H
	DB	0e5H
	DB	043H
	DB	06H
	DB	056H
	DB	025H
	DB	048H
	DB	0aaH
	DB	0d8H
	DB	078H
	DB	0c4H
	DB	08dH
	DB	0c2H
	DB	032H
	DB	0eaH
	DB	01aH
	DB	01aH
	DB	02cH
	DB	05aH
	DB	0d1H
	DB	0fbH
	DB	0c6H
	DB	032H
	DB	0bdH
	DB	0c4H
	DB	0d3H
	DB	0dcH
	DB	07eH
	DB	034H
	DB	0c5H
	DB	0bfH
	DB	048H
	DB	0acH
	DB	082H
	DB	0cdH
	DB	082H
	DB	0a7H
	DB	095H
	DB	02eH
	DB	080H
	DB	0eH
	DB	0f2H
	DB	08eH
	DB	051H
	DB	0a4H
	DB	0f8H
	DB	06bH
	DB	0beH
	DB	025H
	DB	0c5H
	DB	010H
	DB	021H
	DB	0dH
	DB	0c1H
	DB	05eH
	DB	0d1H
	DB	015H
	DB	0bbH
	DB	0cfH
	DB	0c8H
	DB	081H
	DB	08fH
	DB	011H
	DB	0adH
	DB	092H
	DB	0dfH
	DB	031H
	DB	03aH
	DB	0f4H
	DB	0deH
	DB	03bH
	DB	04H
	DB	051H
	DB	049H
	DB	055H
	DB	075H
	DB	042H
	DB	0c0H
	DB	035H
	DB	067H
	DB	07H
	DB	0c4H
	DB	09H
	DB	014H
	DB	087H
	DB	0e6H
	DB	065H
	DB	01cH
	DB	0a2H
	DB	035H
	DB	0e5H
	DB	0a4H
	DB	045H
	DB	076H
	DB	052H
	DB	0d7H
	DB	0d5H
	DB	03H
	DB	012H
	DB	0cbH
	DB	061H
	DB	0ccH
	DB	0cfH
	DB	0b2H
	DB	016H
	DB	0a4H
	DB	029H
	DB	058H
	DB	0e4H
	DB	0ddH
	DB	040H
	DB	0ebH
	DB	022H
	DB	0c8H
	DB	00H
	DB	0a9H
	DB	0afH
	DB	065H
	DB	046H
	DB	0d2H
	DB	01bH
	DB	02cH
	DB	0f6H
	DB	060H
	DB	0a2H
	DB	049H
	DB	038H
	DB	079H
	DB	0ccH
	DB	04aH
	DB	045H
	DB	02eH
	DB	018H
	DB	094H
	DB	061H
	DB	0adH
	DB	039H
	DB	0aH
	DB	07H
	DB	01eH
	DB	0e7H
	DB	0c6H
	DB	08aH
	DB	0aH
	DB	0fH
	DB	08aH
	DB	034H
	DB	03eH
	DB	070H
	DB	07aH
	DB	011H
	DB	08bH
	DB	026H
	DB	087H
	DB	06bH
	DB	048H
	DB	0d1H
	DB	0a3H
	DB	0c1H
	DB	01eH
	DB	0edH
	DB	086H
	DB	04cH
	DB	085H
	DB	09aH
	DB	02dH
	DB	034H
	DB	0d3H
	DB	037H
	DB	0baH
	DB	072H
	DB	01fH
	DB	01H
	DB	0fcH
	DB	0a9H
	DB	010H
	DB	07H
	DB	05dH
	DB	04eH
	DB	0f6H
	DB	057H
	DB	0dfH
	DB	02H
	DB	07dH
	DB	067H
	DB	06dH
	DB	045H
	DB	0b8H
	DB	011H
	DB	08H
	DB	0d6H
	DB	07fH
	DB	0eH
	DB	0a3H
	DB	084H
	DB	0a9H
	DB	0d0H
	DB	038H
	DB	0fcH
	DB	09H
	DB	0f2H
	DB	0eeH
	DB	0a7H
	DB	0f3H
	DB	06bH
	DB	0d0H
	DB	083H
	DB	0f2H
	DB	02eH
	DB	0d2H
	DB	0e9H
	DB	085H
	DB	032H
	DB	06cH
	DB	082H
	DB	099H
	DB	0d9H
	DB	0c8H
	DB	0d2H
	DB	06bH
	DB	050H
	DB	0a9H
	DB	06aH
	DB	0ddH
	DB	0ccH
	DB	0eeH
	DB	07H
	DB	09eH
	DB	028H
	DB	05H
	DB	027H
	DB	09aH
	DB	073H
	DB	04eH
	DB	0fH
	DB	0dfH
	DB	020H
	DB	092H
	DB	0d2H
	DB	04eH
	DB	0e4H
	DB	03cH
	DB	054H
	DB	017H
	DB	0a8H
	DB	056H
	DB	031H
	DB	03H
	DB	09eH
	DB	04H
	DB	0edH
	DB	06eH
	DB	02dH
	DB	058H
	DB	04dH
	DB	07aH
	DB	0c6H
	DB	054H
	DB	098H
	DB	06eH
	DB	0d8H
	DB	0bfH
	DB	0aH
	DB	04dH
	DB	0eH
	DB	098H
	DB	02dH
	DB	0adH
	DB	0aaH
	DB	07fH
	DB	0fcH
	DB	090H
	DB	0bbH
	DB	0d0H
	DB	027H
	DB	0e4H
	DB	027H
	DB	058H
	DB	067H
	DB	046H
	DB	0dbH
	DB	055H
	DB	0b4H
	DB	089H
	DB	02dH
	DB	081H
	DB	04H
	DB	0f3H
	DB	0d6H
	DB	09cH
	DB	0e2H
	DB	02fH
	DB	0dbH
	DB	0ecH
	DB	07cH
	DB	069H
	DB	05H
	DB	029H
	DB	018H
	DB	0afH
	DB	0a8H
	DB	094H
	DB	0bfH
	DB	0e4H
	DB	065H
	DB	0e7H
	DB	0c9H
	DB	0cH
	DB	0bfH
	DB	031H
	DB	0d1H
	DB	01cH
	DB	06H
	DB	087H
	DB	0a5H
	DB	033H
	DB	09H
	DB	029H
	DB	0a6H
	DB	05fH
	DB	045H
	DB	089H
	DB	08fH
	DB	021H
	DB	0f5H
	DB	0cH
	DB	0aH
	DB	0faH
	DB	0b5H
	DB	022H
	DB	02bH
	DB	05eH
	DB	036H
	DB	0eaH
	DB	0c2H
	DB	09bH
	DB	052H
	DB	08cH
	DB	028H
	DB	013H
	DB	03dH
	DB	0f9H
	DB	0aeH
	DB	043H
	DB	01H
	DB	0d3H
	DB	0f5H
	DB	0bH
	DB	0fcH
	DB	09dH
	DB	0e9H
	DB	042H
	DB	027H
	DB	079H
	DB	0e2H
	DB	01eH
	DB	06H
	DB	06cH
	DB	098H
	DB	0bbH
	DB	0fH
	DB	0c3H
	DB	099H
	DB	045H
	DB	0afH
	DB	05dH
	DB	061H
	DB	081H
	DB	069H
	DB	09H
	DB	094H
	DB	027H
	DB	03H
	DB	0c2H
	DB	06aH
	DB	05H
	DB	096H
	DB	0e0H
	DB	08fH
	DB	093H
	DB	07eH
	DB	0f8H
	DB	055H
	DB	0a5H
	DB	073H
	DB	0b7H
	DB	043H
	DB	0f8H
	DB	025H
	DB	0dcH
	DB	034H
	DB	0b3H
	DB	020H
	DB	04dH
	DB	0f8H
	DB	0cfH
	DB	02aH
	DB	05aH
	DB	052H
	DB	094H
	DB	063H
	DB	066H
	DB	0bbH
	DB	0e6H
	DB	0a9H
	DB	0a5H
	DB	06bH
	DB	040H
	DB	086H
	DB	07aH
	DB	054H
	DB	084H
	DB	073H
	DB	0a9H
	DB	0aaH
	DB	066H
	DB	0e1H
	DB	0edH
	DB	0deH
	DB	086H
	DB	04aH
	DB	013H
	DB	03aH
	DB	06bH
	DB	061H
	DB	033H
	DB	0baH
	DB	0bH
	DB	0eH
	DB	08cH
	DB	09fH
	DB	0f0H
	DB	073H
	DB	0daH
	DB	057H
	DB	01dH
	DB	01H
	DB	0c2H
	DB	05dH
	DB	07H
	DB	0bcH
	DB	0b1H
	DB	08cH
	DB	031H
	DB	0dbH
	DB	037H
	DB	017H
	DB	03dH
	DB	0a4H
	DB	0f6H
	DB	0c3H
	DB	06fH
	DB	089H
	DB	07dH
	DB	05aH
	DB	06aH
	DB	030H
	DB	015H
	DB	076H
	DB	03eH
	DB	022H
	DB	016H
	DB	0afH
	DB	095H
	DB	071H
	DB	086H
	DB	0b2H
	DB	072H
	DB	0c9H
	DB	08fH
	DB	079H
	DB	086H
	DB	0c1H
	DB	085H
	DB	037H
	DB	01dH
	DB	03cH
	DB	04fH
	DB	05aH
	DB	0e1H
	DB	0c5H
	DB	09dH
	DB	0d0H
	DB	04fH
	DB	01bH
	DB	02bH
	DB	0baH
	DB	04bH
	DB	0bfH
	DB	031H
	DB	0aH
	DB	0e1H
	DB	0c6H
	DB	039H
	DB	0f6H
	DB	0b7H
	DB	0bfH
	DB	029H
	DB	02aH
	DB	089H
	DB	0b9H
	DB	024H
	DB	090H
	DB	0faH
	DB	0a9H
	DB	0c7H
	DB	018H
	DB	0e6H
	DB	096H
	DB	0f1H
	DB	048H
	DB	0dbH
	DB	0fH
	DB	098H
	DB	02cH
	DB	0a9H
	DB	0c3H
	DB	066H
	DB	0f4H
	DB	083H
	DB	017H
	DB	07eH
	DB	0e5H
	DB	05dH
	DB	0b7H
	DB	0dcH
	DB	016H
	DB	0f7H
	DB	07H
	DB	040H
	DB	01H
	DB	040H
	DB	0e3H
	DB	091H
	DB	03bH
	DB	08eH
	DB	0d9H
	DB	0d2H
	DB	0f4H
	DB	0efH
	DB	044H
	DB	03dH
	DB	0ccH
	DB	053H
	DB	0d5H
	DB	078H
	DB	07cH
	DB	019H
	DB	05eH
	DB	071H
	DB	01cH
	DB	075H
	DB	070H
	DB	02H
	DB	0d2H
	DB	0a7H
	DB	05fH
	DB	0e8H
	DB	09fH
	DB	066H
	DB	0a9H
	DB	021H
	DB	0a6H
	DB	08dH
	DB	032H
	DB	061H
	DB	09bH
	DB	0cH
	DB	034H
	DB	090H
	DB	07cH
	DB	0f7H
	DB	04dH
	DB	0c8H
	DB	0caH
	DB	0a2H
	DB	041H
	DB	047H
	DB	0bbH
	DB	09fH
	DB	038H
	DB	058H
	DB	015H
	DB	0a8H
	DB	05aH
	DB	067H
	DB	051H
	DB	039H
	DB	0d0H
	DB	070H
	DB	09fH
	DB	07aH
	DB	091H
	DB	0c5H
	DB	087H
	DB	0c4H
	DB	027H
	DB	024H
	DB	050H
	DB	0daH
	DB	0b4H
	DB	0ccH
	DB	0d2H
	DB	082H
	DB	095H
	DB	09dH
	DB	025H
	DB	056H
	DB	0e4H
	DB	061H
	DB	0f5H
	DB	01eH
	DB	0b9H
	DB	08aH
	DB	046H
	DB	093H
	DB	072H
	DB	097H
	DB	0cdH
	DB	043H
	DB	088H
	DB	0ecH
	DB	0bdH
	DB	01aH
	DB	0b3H
	DB	0c4H
	DB	05eH
	DB	0daH
	DB	0e8H
	DB	02fH
	DB	0b6H
	DB	01eH
	DB	07bH
	DB	09H
	DB	020H
	DB	091H
	DB	0a7H
	DB	045H
	DB	0e7H
	DB	0cH
	DB	026H
	DB	05eH
	DB	0a9H
	DB	05fH
	DB	068H
	DB	0f0H
	DB	073H
	DB	0daH
	DB	08H
	DB	0c0H
	DB	09dH
	DB	090H
	DB	0adH
	DB	05bH
	DB	02bH
	DB	0e0H
	DB	0a0H
	DB	09H
	DB	03cH
	DB	089H
	DB	038H
	DB	072H
	DB	027H
	DB	0b4H
	DB	07bH
	DB	047H
	DB	046H
	DB	0a2H
	DB	0dH
	DB	0adH
	DB	0afH
	DB	033H
	DB	0cH
	DB	0d8H
	DB	013H
	DB	0f4H
	DB	0c9H
	DB	086H
	DB	0cfH
	DB	0d2H
	DB	047H
	DB	06eH
	DB	0e2H
	DB	074H
	DB	049H
	DB	0eH
	DB	0d5H
	DB	0e9H
	DB	097H
	DB	012H
	DB	0f3H
	DB	0cfH
	DB	084H
	DB	01bH
	DB	04H
	DB	00H
	DB	0e2H
	DB	0c9H
	DB	0a3H
	DB	0efH
	DB	078H
	DB	0d2H
	DB	023H
	DB	04H
	DB	0abH
	DB	036H
	DB	0f8H
	DB	0f5H
	DB	03cH
	DB	049H
	DB	048H
	DB	03H
	DB	037H
	DB	02bH
	DB	078H
	DB	00H
	DB	0b9H
	DB	0cdH
	DB	06aH
	DB	051H
	DB	0dfH
	DB	05eH
	DB	0a0H
	DB	064H
	DB	0f8H
	DB	0a5H
	DB	0e3H
	DB	0dbH
	DB	06fH
	DB	07H
	DB	0cbH
	DB	067H
	DB	0d9H
	DB	06fH
	DB	06cH
	DB	06H
	DB	0a5H
	DB	0e4H
	DB	0fbH
	DB	062H
	DB	02eH
	DB	044H
	DB	065H
	DB	0e4H
	DB	0eeH
	DB	05dH
	DB	0e5H
	DB	0a8H
	DB	02bH
	DB	050H
	DB	0f9H
	DB	0bH
	DB	02eH
	DB	01bH
	DB	0eeH
	DB	027H
	DB	0c0H
	DB	053H
	DB	04H
	DB	0afH
	DB	05aH
	DB	04fH
	DB	018H
	DB	0b4H
	DB	0beH
	DB	04H
	DB	0baH
	DB	0e4H
	DB	0e8H
	DB	036H
	DB	047H
	DB	097H
	DB	07aH
	DB	0acH
	DB	0fbH
	DB	0e8H
	DB	08aH
	DB	0e1H
	DB	092H
	DB	0b5H
	DB	0b1H
	DB	0cH
	DB	041H
	DB	0dfH
	DB	027H
	DB	030H
	DB	08H
	DB	0e7H
	DB	083H
	DB	08bH
	DB	018H
	DB	05eH
	DB	0daH
	DB	030H
	DB	013H
	DB	09aH
	DB	0b3H
	DB	04dH
	DB	07fH
	DB	01cH
	DB	083H
	DB	046H
	DB	0b3H
	DB	07dH
	DB	072H
	DB	030H
	DB	066H
	DB	0fcH
	DB	012H
	DB	078H
	DB	0b3H
	DB	044H
	DB	085H
	DB	0f4H
	DB	024H
	DB	0acH
	DB	0a4H
	DB	02cH
	DB	015H
	DB	0a8H
	DB	0b7H
	DB	02dH
	DB	07H
	DB	013H
	DB	0dcH
	DB	01aH
	DB	0adH
	DB	090H
	DB	0e6H
	DB	0acH
	DB	02cH
	DB	06aH
	DB	0f2H
	DB	0e0H
	DB	067H
	DB	065H
	DB	090H
	DB	0cdH
	DB	063H
	DB	022H
	DB	047H
	DB	096H
	DB	066H
	DB	04cH
	DB	0bH
	DB	08bH
	DB	078H
	DB	02fH
	DB	037H
	DB	08dH
	DB	0d7H
	DB	0efH
	DB	03aH
	DB	05eH
	DB	082H
	DB	096H
	DB	0f7H
	DB	030H
	DB	0a6H
	DB	0deH
	DB	0dcH
	DB	0d3H
	DB	049H
	DB	04fH
	DB	034H
	DB	030H
	DB	034H
	DB	0c4H
	DB	0feH
	DB	097H
	DB	0e6H
	DB	0c5H
	DB	0adH
	DB	04eH
	DB	091H
	DB	0b8H
	DB	059H
	DB	0aH
	DB	0e8H
	DB	090H
	DB	018H
	DB	040H
	DB	00H
	DB	052H
	DB	09fH
	DB	082H
	DB	069H
	DB	097H
	DB	0b2H
	DB	010H
	DB	077H
	DB	0fH
	DB	0e3H
	DB	040H
	DB	0ddH
	DB	097H
	DB	071H
	DB	013H
	DB	05cH
	DB	0efH
	DB	02aH
	DB	0c3H
	DB	035H
	DB	0d8H
	DB	091H
	DB	0c6H
	DB	011H
	DB	0eaH
	DB	0d0H
	DB	0f9H
	DB	07bH
	DB	0e8H
	DB	03bH
	DB	0fbH
	DB	0bbH
	DB	05aH
	DB	07eH
	DB	025H
	DB	0f1H
	DB	0b1H
	DB	0b4H
	DB	069H
	DB	0c0H
	DB	099H
	DB	02aH
	DB	01fH
	DB	0b0H
	DB	09bH
	DB	032H
	DB	0eH
	DB	08bH
	DB	05cH
	DB	051H
	DB	040H
	DB	0b4H
	DB	0e2H
	DB	07H
	DB	0c6H
	DB	0cdH
	DB	0d7H
	DB	0c0H
	DB	0c8H
	DB	041H
	DB	07bH
	DB	0c4H
	DB	0fcH
	DB	0d5H
	DB	0c3H
	DB	0a1H
	DB	048H
	DB	075H
	DB	056H
	DB	031H
	DB	0b5H
	DB	0efH
	DB	05bH
	DB	0d4H
	DB	021H
	DB	0f6H
	DB	086H
	DB	02fH
	DB	02H
	DB	0e3H
	DB	00H
	DB	042H
	DB	098H
	DB	0e2H
	DB	0c8H
	DB	05fH
	DB	030H
	DB	0a1H
	DB	0a0H
	DB	078H
	DB	062H
	DB	09bH
	DB	0bdH
	DB	05fH
	DB	0f1H
	DB	081H
	DB	01H
	DB	03aH
	DB	0f6H
	DB	057H
	DB	0eaH
	DB	0acH
	DB	0c7H
	DB	047H
	DB	02H
	DB	0e8H
	DB	0bdH
	DB	088H
	DB	097H
	DB	040H
	DB	0ebH
	DB	017H
	DB	02H
	DB	085H
	DB	0f9H
	DB	0cbH
	DB	064H
	DB	0a9H
	DB	0ecH
	DB	084H
	DB	0a1H
	DB	04fH
	DB	021H
	DB	05fH
	DB	02eH
	DB	013H
	DB	0e0H
	DB	02fH
	DB	0ccH
	DB	057H
	DB	06H
	DB	0b7H
	DB	084H
	DB	04dH
	DB	07eH
	DB	086H
	DB	036H
	DB	03dH
	DB	08eH
	DB	04dH
	DB	0fcH
	DB	07bH
	DB	064H
	DB	0feH
	DB	01H
	DB	0ddH
	DB	0caH
	DB	0e4H
	DB	07H
	DB	037H
	DB	06aH
	DB	0a9H
	DB	086H
	DB	08bH
	DB	09H
	DB	0b4H
	DB	01eH
	DB	06aH
	DB	063H
	DB	06aH
	DB	041H
	DB	0e9H
	DB	0a1H
	DB	0c5H
	DB	037H
	DB	021H
	DB	0cbH
	DB	0edH
	DB	0ddH
	DB	05bH
	DB	03bH
	DB	0daH
	DB	0d6H
	DB	020H
	DB	059H
	DB	0d7H
	DB	07dH
	DB	0a4H
	DB	03cH
	DB	085H
	DB	0dbH
	DB	0a6H
	DB	02fH
	DB	0e2H
	DB	0b1H
	DB	0b7H
	DB	097H
	DB	04fH
	DB	022H
	DB	07bH
	DB	0b9H
	DB	064H
	DB	065H
	DB	05cH
	DB	0a9H
	DB	01cH
	DB	0fcH
	DB	076H
	DB	0aH
	DB	05aH
	DB	0d1H
	DB	046H
	DB	035H
	DB	0a8H
	DB	0e5H
	DB	08eH
	DB	00H
	DB	063H
	DB	033H
	DB	03cH
	DB	0e8H
	DB	08fH
	DB	063H
	DB	097H
	DB	072H
	DB	015H
	DB	050H
	DB	089H
	DB	065H
	DB	0f1H
	DB	05H
	DB	09eH
	DB	0d5H
	DB	0e9H
	DB	0faH
	DB	080H
	DB	07H
	DB	077H
	DB	0f6H
	DB	011H
	DB	0d1H
	DB	048H
	DB	0d6H
	DB	086H
	DB	070H
	DB	03cH
	DB	095H
	DB	070H
	DB	0a0H
	DB	0c8H
	DB	02cH
	DB	09H
	DB	0d7H
	DB	08fH
	DB	021H
	DB	04aH
	DB	025H
	DB	071H
	DB	0d4H
	DB	08aH
	DB	0e2H
	DB	059H
	DB	029H
	DB	0b9H
	DB	044H
	DB	0a4H
	DB	03aH
	DB	0caH
	DB	09bH
	DB	0b0H
	DB	05bH
	DB	06eH
	DB	078H
	DB	0b2H
	DB	074H
	DB	0e8H
	DB	0eeH
	DB	0aH
	DB	059H
	DB	0fH
	DB	053H
	DB	05H
	DB	098H
	DB	02bH
	DB	095H
	DB	0b9H
	DB	076H
	DB	0baH
	DB	02bH
	DB	04bH
	DB	0c4H
	DB	0eH
	DB	024H
	DB	06dH
	DB	047H
	DB	068H
	DB	091H
	DB	081H
	DB	0b2H
	DB	02eH
	DB	0b1H
	DB	0fH
	DB	01cH
	DB	02aH
	DB	0c1H
	DB	090H
	DB	013H
	DB	030H
	DB	09bH
	DB	0ebH
	DB	040H
	DB	06eH
	DB	0f1H
	DB	0d8H
	DB	099H
	DB	07H
	DB	012H
	DB	010H
	DB	041H
	DB	0bcH
	DB	0daH
	DB	06H
	DB	04aH
	DB	00H
	DB	073H
	DB	092H
	DB	0e7H
	DB	06H
	DB	093H
	DB	01bH
	DB	0b3H
	DB	0c5H
	DB	02aH
	DB	0cfH
	DB	0efH
	DB	06bH
	DB	0dfH
	DB	083H
	DB	01bH
	DB	07bH
	DB	0eeH
	DB	05bH
	DB	0e9H
	DB	0e0H
	DB	0b3H
	DB	04H
	DB	067H
	DB	045H
	DB	093H
	DB	0a8H
	DB	02H
	DB	0eeH
	DB	02eH
	DB	04dH
	DB	06eH
	DB	0a2H
	DB	05fH
	DB	0d5H
	DB	028H
	DB	0f2H
	DB	0f0H
	DB	05bH
	DB	0b8H
	DB	09aH
	DB	02bH
	DB	029H
	DB	085H
	DB	0bH
	DB	02cH
	DB	0a1H
	DB	07H
	DB	01bH
	DB	0fcH
	DB	070H
	DB	0fcH
	DB	031H
	DB	0f3H
	DB	064H
	DB	076H
	DB	088H
	DB	08dH
	DB	0f8H
	DB	077H
	DB	0bbH
	DB	046H
	DB	065H
	DB	0ddH
	DB	0a5H
	DB	03bH
	DB	085H
	DB	018H
	DB	02dH
	DB	0e0H
	DB	051H
	DB	047H
	DB	08bH
	DB	07aH
	DB	0cdH
	DB	017H
	DB	0a6H
	DB	06fH
	DB	01eH
	DB	0c1H
	DB	06cH
	DB	0eH
	DB	03eH
	DB	01dH
	DB	03H
	DB	023H
	DB	014H
	DB	0bH
	DB	0b0H
	DB	0dH
	DB	02H
	DB	0ebH
	DB	053H
	DB	067H
	DB	0caH
	DB	078H
	DB	0a2H
	DB	050H
	DB	010H
	DB	04fH
	DB	0b1H
	DB	061H
	DB	097H
	DB	03dH
	DB	0dbH
	DB	065H
	DB	054H
	DB	02H
	DB	0d4H
	DB	0f1H
	DB	044H
	DB	0c0H
	DB	080H
	DB	082H
	DB	05eH
	DB	083H
	DB	025H
	DB	072H
	DB	0eH
	DB	0d5H
	DB	07fH
	DB	010H
	DB	0c2H
	DB	052H
	DB	0f6H
	DB	0dH
	DB	0caH
	DB	099H
	DB	05dH
	DB	0daH
	DB	069H
	DB	0fH
	DB	0bcH
	DB	080H
	DB	0ccH
	DB	098H
	DB	0e5H
	DB	021H
	DB	01bH
	DB	03aH
	DB	093H
	DB	05fH
	DB	07aH
	DB	014H
	DB	0e1H
	DB	0d8H
	DB	017H
	DB	08H
	DB	04bH
	DB	025H
	DB	05dH
	DB	04aH
	DB	0b4H
	DB	09fH
	DB	09cH
	DB	0abH
	DB	0acH
	DB	0e6H
	DB	0c4H
	DB	08aH
	DB	042H
	DB	02eH
	DB	019H
	DB	0feH
	DB	0aeH
	DB	0e5H
	DB	017H
	DB	014H
	DB	087H
	DB	032H
	DB	0cdH
	DB	01bH
	DB	091H
	DB	049H
	DB	02fH
	DB	0f3H
	DB	022H
	DB	046H
	DB	07bH
	DB	0edH
	DB	0eaH
	DB	058H
	DB	0b7H
	DB	09fH
	DB	0f8H
	DB	0d4H
	DB	0caH
	DB	025H
	DB	0bbH
	DB	08fH
	DB	0afH
	DB	07dH
	DB	03eH
	DB	0c9H
	DB	0fbH
	DB	0ecH
	DB	02fH
	DB	014H
	DB	081H
	DB	0b6H
	DB	0c5H
	DB	04fH
	DB	0d1H
	DB	0d7H
	DB	098H
	DB	080H
	DB	04bH
	DB	03bH
	DB	046H
	DB	046H
	DB	0a8H
	DB	0b0H
	DB	09eH
	DB	060H
	DB	050H
	DB	097H
	DB	0b4H
	DB	09aH
	DB	0bdH
	DB	0f0H
	DB	02bH
	DB	0ecH
	DB	06eH
	DB	069H
	DB	036H
	DB	0eaH
	DB	0d5H
	DB	066H
	DB	07eH
	DB	0d6H
	DB	01dH
	DB	0c3H
	DB	027H
	DB	06fH
	DB	09bH
	DB	03fH
	DB	06fH
	DB	066H
	DB	07aH
	DB	036H
	DB	0acH
	DB	0a2H
	DB	0e6H
	DB	04cH
	DB	083H
	DB	0b7H
	DB	0e3H
	DB	038H
	DB	052H
	DB	021H
	DB	029H
	DB	0fcH
	DB	0fH
	DB	018H
	DB	0e5H
	DB	045H
	DB	03H
	DB	0bcH
	DB	02bH
	DB	01H
	DB	013H
	DB	0c8H
	DB	0c4H
	DB	03aH
	DB	038H
	DB	061H
	DB	07aH
	DB	027H
	DB	047H
	DB	074H
	DB	05dH
	DB	0f4H
	DB	097H
	DB	045H
	DB	041H
	DB	01bH
	DB	0fcH
	DB	0a4H
	DB	0d2H
	DB	0ceH
	DB	046H
	DB	0fcH
	DB	0ccH
	DB	0d4H
	DB	094H
	DB	0b2H
	DB	01aH
	DB	017H
	DB	0eeH
	DB	046H
	DB	018H
	DB	03H
	DB	0fH
	DB	0dcH
	DB	03dH
	DB	0c6H
	DB	0bdH
	DB	037H
	DB	06dH
	DB	06H
	DB	02cH
	DB	0cbH
	DB	07aH
	DB	0c3H
	DB	090H
	DB	03bH
	DB	0deH
	DB	0dH
	DB	05fH
	DB	0b1H
	DB	0dbH
	DB	0a5H
	DB	02eH
	DB	0a8H
	DB	07aH
	DB	042H
	DB	0dbH
	DB	015H
	DB	059H
	DB	0caH
	DB	05bH
	DB	0f0H
	DB	0cdH
	DB	0e9H
	DB	04eH
	DB	08bH
	DB	030H
	DB	0cH
	DB	042H
	DB	09dH
	DB	091H
	DB	06eH
	DB	0e8H
	DB	08bH
	DB	032H
	DB	0f8H
	DB	0c6H
	DB	090H
	DB	06H
	DB	027H
	DB	0c2H
	DB	062H
	DB	04cH
	DB	0f0H
	DB	08aH
	DB	0c7H
	DB	0b3H
	DB	066H
	DB	0dcH
	DB	0dH
	DB	0b1H
	DB	0b7H
	DB	07eH
	DB	07fH
	DB	021H
	DB	0ccH
	DB	08aH
	DB	0d0H
	DB	058H
	DB	0cdH
	DB	0edH
	DB	06aH
	DB	03cH
	DB	0d7H
	DB	0f5H
	DB	0eeH
	DB	050H
	DB	03dH
	DB	07fH
	DB	057H
	DB	0e3H
	DB	042H
	DB	039H
	DB	030H
	DB	0b3H
	DB	0c3H
	DB	0f7H
	DB	067H
	DB	0aaH
	DB	054H
	DB	0f3H
	DB	05cH
	DB	08bH
	DB	072H
	DB	05bH
	DB	0acH
	DB	0beH
	DB	0e6H
	DB	07dH
	DB	018H
	DB	034H
	DB	06cH
	DB	082H
	DB	0efH
	DB	0c3H
	DB	0f7H
	DB	0deH
	DB	014H
	DB	035H
	DB	05fH
	DB	0eaH
	DB	019H
	DB	0a1H
	DB	024H
	DB	0c9H
	DB	0d4H
	DB	068H
	DB	0c1H
	DB	03cH
	DB	013H
	DB	096H
	DB	031H
	DB	06fH
	DB	022H
	DB	023H
	DB	04aH
	DB	04fH
	DB	0e2H
	DB	0b0H
	DB	0ccH
	DB	07aH
	DB	0e4H
	DB	0b8H
	DB	07cH
	DB	0d5H
	DB	0fbH
	DB	074H
	DB	0b4H
	DB	011H
	DB	02aH
	DB	014H
	DB	07bH
	DB	0c2H
	DB	036H
	DB	020H
	DB	08cH
	DB	0bH
	DB	088H
	DB	0ceH
	DB	0c7H
	DB	09bH
	DB	065H
	DB	078H
	DB	08aH
	DB	07H
	DB	09bH
	DB	0d4H
	DB	056H
	DB	0fdH
	DB	086H
	DB	024H
	DB	078H
	DB	0eaH
	DB	05cH
	DB	074H
	DB	0c0H
	DB	059H
	DB	069H
	DB	0f5H
	DB	0e9H
	DB	013H
	DB	089H
	DB	0e4H
	DB	0d5H
	DB	0bfH
	DB	05H
	DB	0e2H
	DB	04bH
	DB	08dH
	DB	0b1H
	DB	013H
	DB	029H
	DB	096H
	DB	08bH
	DB	033H
	DB	09dH
	DB	0a6H
	DB	09H
	DB	0f4H
	DB	0a5H
	DB	0fH
	DB	098H
	DB	09dH
	DB	0f9H
	DB	0f4H
	DB	092H
	DB	03bH
	DB	0cdH
	DB	0fbH
	DB	031H
	DB	037H
	DB	0fH
	DB	0baH
	DB	01dH
	DB	064H
	DB	0faH
	DB	022H
	DB	047H
	DB	0c5H
	DB	0b0H
	DB	078H
	DB	0d8H
	DB	059H
	DB	08eH
	DB	0e3H
	DB	0dH
	DB	0acH
	DB	0aH
	DB	016H
	DB	0a1H
	DB	02fH
	DB	0a4H
	DB	0b9H
	DB	04dH
	DB	01eH
	DB	02eH
	DB	0dfH
	DB	059H
	DB	0fcH
	DB	0dbH
	DB	0aH
	DB	0b3H
	DB	06aH
	DB	0c5H
	DB	0d0H
	DB	0ceH
	DB	040H
	DB	0f3H
	DB	096H
	DB	06H
	DB	024H
	DB	08eH
	DB	05eH
	DB	0fcH
	DB	01eH
	DB	0c1H
	DB	0aH
	DB	0caH
	DB	0cbH
	DB	09fH
	DB	0ebH
	DB	0fbH
	DB	0c3H
	DB	0a5H
	DB	049H
	DB	0e2H
	DB	053H
	DB	029H
	DB	0bbH
	DB	0cfH
	DB	084H
	DB	0c6H
	DB	084H
	DB	0eeH
	DB	0cH
	DB	055H
	DB	03dH
	DB	04cH
	DB	0c8H
	DB	053H
	DB	052H
	DB	06cH
	DB	0e2H
	DB	030H
	DB	06aH
	DB	080H
	DB	0f1H
	DB	0f3H
	DB	0caH
	DB	0bdH
	DB	094H
	DB	036H
	DB	0b9H
	DB	058H
	DB	05bH
	DB	082H
	DB	0baH
	DB	0aeH
	DB	02bH
	DB	077H
	DB	07fH
	DB	0afH
	DB	03eH
	DB	04H
	DB	01eH
	DB	04aH
	DB	0d8H
	DB	05cH
	DB	016H
	DB	0a2H
	DB	02fH
	DB	068H
	DB	08eH
	DB	091H
	DB	098H
	DB	0f8H
	DB	012H
	DB	0aH
	DB	06dH
	DB	05cH
	DB	0c7H
	DB	02H
	DB	092H
	DB	02H
	DB	0d9H
	DB	0edH
	DB	084H
	DB	095H
	DB	01dH
	DB	0b0H
	DB	08cH
	DB	09cH
	DB	0dfH
	DB	0caH
	DB	020H
	DB	0feH
	DB	094H
	DB	0f8H
	DB	0daH
	DB	0aaH
	DB	01bH
	DB	089H
	DB	092H
	DB	0aaH
	DB	01cH
	DB	0aaH
	DB	023H
	DB	02eH
	DB	0b4H
	DB	090H
	DB	0bH
	DB	0fbH
	DB	012H
	DB	09dH
	DB	0fdH
	DB	0ecH
	DB	0cH
	DB	03H
	DB	02H
	DB	0a8H
	DB	033H
	DB	0eH
	DB	045H
	DB	013H
	DB	0d8H
	DB	0e4H
	DB	091H
	DB	0ecH
	DB	0ddH
	DB	0ebH
	DB	097H
	DB	079H
	DB	076H
	DB	0a9H
	DB	024H
	DB	092H
	DB	054H
	DB	047H
	DB	0c0H
	DB	088H
	DB	0d8H
	DB	04bH
	DB	084H
	DB	0eaH
	DB	069H
	DB	083H
	DB	057H
	DB	075H
	DB	086H
	DB	0d8H
	DB	09dH
	DB	0b9H
	DB	0e6H
	DB	062H
	DB	04cH
	DB	03fH
	DB	047H
	DB	0deH
	DB	0abH
	DB	0a4H
	DB	0caH
	DB	0c2H
	DB	01eH
	DB	041H
	DB	06cH
	DB	042H
	DB	053H
	DB	0c0H
	DB	0aH
	DB	094H
	DB	049H
	DB	062H
	DB	0dfH
	DB	0ceH
	DB	04dH
	DB	049H
	DB	0d1H
	DB	025H
	DB	03eH
	DB	0d7H
	DB	07dH
	DB	0dbH
	DB	011H
	DB	0e4H
	DB	03eH
	DB	05dH
	DB	0a3H
	DB	085H
	DB	0bbH
	DB	050H
	DB	0aaH
	DB	07H
	DB	013H
	DB	0c8H
	DB	0c7H
	DB	080H
	DB	08bH
	DB	01cH
	DB	0c0H
	DB	095H
	DB	0b0H
	DB	08aH
	DB	0f7H
	DB	090H
	DB	0d8H
	DB	0c4H
	DB	0daH
	DB	02aH
	DB	069H
	DB	019H
	DB	02H
	DB	067H
	DB	075H
	DB	013H
	DB	04cH
	DB	0b3H
	DB	0efH
	DB	06fH
	DB	0b9H
	DB	02cH
	DB	0bfH
	DB	064H
	DB	033H
	DB	053H
	DB	02dH
	DB	0faH
	DB	053H
	DB	038H
	DB	017H
	DB	093H
	DB	0cdH
	DB	047H
	DB	01eH
	DB	045H
	DB	0d8H
	DB	076H
	DB	08aH
	DB	033H
	DB	0a0H
	DB	0f3H
	DB	0cbH
	DB	0a2H
	DB	05bH
	DB	041H
	DB	035H
	DB	027H
	DB	0f5H
	DB	0a5H
	DB	097H
	DB	0afH
	DB	0d1H
	DB	0d6H
	DB	093H
	DB	05H
	DB	02aH
	DB	0c0H
	DB	07fH
	DB	0fcH
	DB	079H
	DB	017H
	DB	091H
	DB	047H
	DB	05eH
	DB	0afH
	DB	0dH
	DB	037H
	DB	027H
	DB	097H
	DB	0e9H
	DB	047H
	DB	0bH
	DB	0b6H
	DB	0eaH
	DB	067H
	DB	0f7H
	DB	09fH
	DB	0eH
	DB	06dH
	DB	045H
	DB	025H
	DB	09cH
	DB	017H
	DB	0fcH
	DB	030H
	DB	09bH
	DB	0a6H
	DB	071H
	DB	01cH
	DB	0a4H
	DB	0eaH
	DB	033H
	DB	0b5H
	DB	0b1H
	DB	011H
	DB	065H
	DB	0beH
	DB	0c8H
	DB	0cH
	DB	056H
	DB	0b2H
	DB	0d3H
	DB	062H
	DB	069H
	DB	03eH
	DB	049H
	DB	0e1H
	DB	0ddH
	DB	0d6H
	DB	04fH
	DB	0a3H
	DB	0fcH
	DB	06cH
	DB	0baH
	DB	0f9H
	DB	09cH
	DB	0d6H
	DB	020H
	DB	08dH
	DB	0f2H
	DB	044H
	DB	078H
	DB	0a5H
	DB	0f9H
	DB	02bH
	DB	0b6H
	DB	060H
	DB	069H
	DB	07fH
	DB	0ebH
	DB	040H
	DB	033H
	DB	03fH
	DB	022H
	DB	01cH
	DB	07dH
	DB	06bH
	DB	07dH
	DB	05cH
	DB	0c1H
	DB	04dH
	DB	00H
	DB	0beH
	DB	0b9H
	DB	03aH
	DB	038H
	DB	0d5H
	DB	011H
	DB	059H
	DB	064H
	DB	083H
	DB	09dH
	DB	0dcH
	DB	029H
	DB	098H
	DB	087H
	DB	060H
	DB	078H
	DB	071H
	DB	0dfH
	DB	0e3H
	DB	0b1H
	DB	092H
	DB	024H
	DB	0d3H
	DB	02fH
	DB	0a1H
	DB	0beH
	DB	02cH
	DB	0fdH
	DB	080H
	DB	079H
	DB	07dH
	DB	040H
	DB	0b2H
	DB	0b8H
	DB	078H
	DB	089H
	DB	049H
	DB	051H
	DB	0edH
	DB	0cdH
	DB	0efH
	DB	04aH
	DB	076H
	DB	088H
	DB	052H
	DB	0d6H
	DB	080H
	DB	0c3H
	DB	037H
	DB	064H
	DB	075H
	DB	0c9H
	DB	088H
	DB	0c8H
	DB	078H
	DB	02bH
	DB	087H
	DB	0a5H
	DB	0a8H
	DB	087H
	DB	09eH
	DB	0a6H
	DB	047H
	DB	052H
	DB	05fH
	DB	040H
	DB	05bH
	DB	028H
	DB	091H
	DB	049H
	DB	0f5H
	DB	01H
	DB	013H
	DB	06dH
	DB	09H
	DB	0e4H
	DB	044H
	DB	089H
	DB	0a8H
	DB	0faH
	DB	0eeH
	DB	09dH
	DB	0c5H
	DB	0f6H
	DB	066H
	DB	0bdH
	DB	0a1H
	DB	06dH
	DB	063H
	DB	0caH
	DB	075H
	DB	082H
	DB	071H
	DB	0bcH
	DB	0d4H
	DB	050H
	DB	0fcH
	DB	030H
	DB	078H
	DB	0fH
	DB	0f8H
	DB	0eeH
	DB	010H
	DB	08bH
	DB	05cH
	DB	01aH
	DB	071H
	DB	020H
	DB	023H
	DB	099H
	DB	01cH
	DB	012H
	DB	0b7H
	DB	061H
	DB	089H
	DB	01eH
	DB	09eH
	DB	0aaH
	DB	0cH
	DB	082H
	DB	075H
	DB	081H
	DB	05H
	DB	066H
	DB	0bdH
	DB	0d9H
	DB	0b6H
	DB	03bH
	DB	0aH
	DB	0afH
	DB	04aH
	DB	082H
	DB	09eH
	DB	0d9H
	DB	0eH
	DB	07aH
	DB	073H
	DB	0feH
	DB	01aH
	DB	097H
	DB	099H
	DB	0b5H
	DB	029H
	DB	051H
	DB	017H
	DB	0b2H
	DB	0eeH
	DB	036H
	DB	0ddH
	DB	07aH
	DB	0b8H
	DB	053H
	DB	07bH
	DB	0bdH
	DB	0baH
	DB	03aH
	DB	097H
	DB	0f0H
	DB	075H
	DB	021H
	DB	0a0H
	DB	03fH
	DB	0a3H
	DB	03fH
	DB	098H
	DB	031H
	DB	0b9H
	DB	0dH
	DB	031H
	DB	054H
	DB	0a4H
	DB	04aH
	DB	0aH
	DB	0cdH
	DB	09bH
	DB	0a1H
	DB	01H
	DB	0aH
	DB	0d7H
	DB	0deH
	DB	085H
	DB	090H
	DB	0b1H
	DB	01H
	DB	04eH
	DB	06cH
	DB	0baH
	DB	065H
	DB	05eH
	DB	030H
	DB	086H
	DB	07eH
	DB	0eeH
	DB	0a9H
	DB	0beH
	DB	088H
	DB	05aH
	DB	0f7H
	DB	095H
	DB	08bH
	DB	04cH
	DB	0b9H
	DB	055H
	DB	0d6H
	DB	07H
	DB	0f0H
	DB	078H
	DB	08H
	DB	0fbH
	DB	050H
	DB	066H
	DB	01H
	DB	0e0H
	DB	019H
	DB	02H
	DB	0aeH
	DB	05H
	DB	03dH
	DB	014H
	DB	0e2H
	DB	0ecH
	DB	01aH
	DB	062H
	DB	0dcH
	DB	043H
	DB	0a0H
	DB	0e4H
	DB	01dH
	DB	018H
	DB	0f9H
	DB	029H
	DB	0e4H
	DB	0b3H
	DB	07eH
	DB	0bbH
	DB	0baH
	DB	070H
	DB	034H
	DB	043H
	DB	0ebH
	DB	084H
	DB	0a9H
	DB	06cH
	DB	0e4H
	DB	042H
	DB	0edH
	DB	013H
	DB	0c7H
	DB	02bH
	DB	0a6H
	DB	0aaH
	DB	019H
	DB	040H
	DB	08cH
	DB	0f5H
	DB	03H
	DB	0acH
	DB	05aH
	DB	020H
	DB	0c5H
	DB	054H
	DB	049H
	DB	0aaH
	DB	08H
	DB	0c8H
	DB	0e5H
	DB	0c2H
	DB	0b8H
	DB	01aH
	DB	06H
	DB	024H
	DB	01eH
	DB	030H
	DB	090H
	DB	082H
	DB	072H
	DB	07eH
	DB	095H
	DB	03aH
	DB	0aaH
	DB	0bbH
	DB	065H
	DB	0c3H
	DB	0fbH
	DB	071H
	DB	039H
	DB	0feH
	DB	01fH
	DB	093H
	DB	01fH
	DB	0e4H
	DB	0e7H
	DB	0e8H
	DB	0fH
	DB	0efH
	DB	0b1H
	DB	0f4H
	DB	032H
	DB	06aH
	DB	08eH
	DB	0b8H
	DB	0eH
	DB	0acH
	DB	068H
	DB	09eH
	DB	0aeH
	DB	0daH
	DB	01dH
	DB	044H
	DB	095H
	DB	0c7H
	DB	07fH
	DB	07aH
	DB	0bH
	DB	07bH
	DB	0ebH
	DB	044H
	DB	07aH
	DB	0bH
	DB	057H
	DB	019H
	DB	06fH
	DB	03fH
	DB	02H
	DB	0fdH
	DB	0aeH
	DB	033H
	DB	072H
	DB	0e1H
	DB	01dH
	DB	01H
	DB	01aH
	DB	02bH
	DB	02dH
	DB	082H
	DB	0c9H
	DB	0dbH
	DB	0dcH
	DB	0e7H
	DB	09fH
	DB	0f1H
	DB	02fH
	DB	01fH
	DB	06cH
	DB	03bH
	DB	09aH
	DB	0d8H
	DB	0feH
	DB	094H
	DB	063H
	DB	057H
	DB	02eH
	DB	0d3H
	DB	016H
	DB	030H
	DB	051H
	DB	0c5H
	DB	064H
	DB	0c4H
	DB	027H
	DB	081H
	DB	0c5H
	DB	041H
	DB	02dH
	DB	0f3H
	DB	043H
	DB	0f6H
	DB	04fH
	DB	020H
	DB	05eH
	DB	0efH
	DB	092H
	DB	08eH
	DB	0fH
	DB	07eH
	DB	049H
	DB	02aH
	DB	057H
	DB	0c7H
	DB	0beH
	DB	03bH
	DB	01fH
	DB	06cH
	DB	08eH
	DB	0b5H
	DB	09dH
	DB	0dfH
	DB	07bH
	DB	081H
	DB	0a4H
	DB	022H
	DB	082H
	DB	06bH
	DB	0e2H
	DB	0afH
	DB	0deH
	DB	026H
	DB	0a7H
	DB	02eH
	DB	0c5H
	DB	085H
	DB	09dH
	DB	058H
	DB	014H
	DB	0adH
	DB	0d7H
	DB	0dcH
	DB	057H
	DB	0aeH
	DB	0a5H
	DB	095H
	DB	0e9H
	DB	044H
	DB	03H
	DB	078H
	DB	0f9H
	DB	0a0H
	DB	059H
	DB	0f4H
	DB	0a1H
	DB	07dH
	DB	017H
	DB	0a3H
	DB	068H
	DB	0f9H
	DB	054H
	DB	047H
	DB	09fH
	DB	07bH
	DB	0f5H
	DB	066H
	DB	01H
	DB	093H
	DB	03eH
	DB	095H
	DB	0c0H
	DB	095H
	DB	0f1H
	DB	097H
	DB	045H
	DB	017H
	DB	02eH
	DB	0aeH
	DB	05cH
	DB	031H
	DB	028H
	DB	0d5H
	DB	051H
	DB	01H
	DB	04bH
	DB	072H
	DB	07eH
	DB	0e1H
	DB	016H
	DB	0e7H
	DB	0dcH
	DB	06aH
	DB	0aeH
	DB	0fbH
	DB	065H
	DB	024H
	DB	0e1H
	DB	0e6H
	DB	038H
	DB	021H
	DB	07cH
	DB	0f8H
	DB	0b6H
	DB	06eH
	DB	011H
	DB	0fbH
	DB	086H
	DB	03fH
	DB	0abH
	DB	062H
	DB	0efH
	DB	053H
	DB	0b7H
	DB	0c0H
	DB	054H
	DB	03H
	DB	033H
	DB	052H
	DB	0e5H
	DB	049H
	DB	0b9H
	DB	042H
	DB	034H
	DB	069H
	DB	0bdH
	DB	019H
	DB	08dH
	DB	0a0H
	DB	00H
	DB	0c5H
	DB	0c1H
	DB	07cH
	DB	03fH
	DB	078H
	DB	06bH
	DB	050H
	DB	0f4H
	DB	071H
	DB	0fH
	DB	020H
	DB	053H
	DB	0feH
	DB	073H
	DB	0bH
	DB	0bfH
	DB	047H
	DB	08eH
	DB	0f2H
	DB	099H
	DB	0f3H
	DB	0bbH
	DB	054H
	DB	0b5H
	DB	06fH
	DB	03dH
	DB	073H
	DB	089H
	DB	0caH
	DB	014H
	DB	089H
	DB	011H
	DB	055H
	DB	086H
	DB	050H
	DB	0ceH
	DB	071H
	DB	020H
	DB	043H
	DB	062H
	DB	02fH
	DB	063H
	DB	0b5H
	DB	02eH
	DB	056H
	DB	040H
	DB	06dH
	DB	09dH
	DB	0ceH
	DB	060H
	DB	0b6H
	DB	042H
	DB	09bH
	DB	0bH
	DB	0f7H
	DB	0cH
	DB	0c7H
	DB	0ebH
	DB	015H
	DB	093H
	DB	00H
	DB	09eH
	DB	024H
	DB	0d5H
	DB	0a4H
	DB	0f3H
	DB	0a4H
	DB	095H
	DB	014H
	DB	067H
	DB	0f7H
	DB	0c2H
	DB	0caH
	DB	0adH
	DB	070H
	DB	0a0H
	DB	06eH
	DB	0ddH
	DB	03eH
	DB	03dH
	DB	0bdH
	DB	0f4H
	DB	00H
	DB	059H
	DB	080H
	DB	0f7H
	DB	0e4H
	DB	048H
	DB	063H
	DB	0f9H
	DB	05bH
	DB	064H
	DB	019H
	DB	07fH
	DB	0b9H
	DB	03dH
	DB	0f2H
	DB	0ddH
	DB	0d3H
	DB	07H
	DB	045H
	DB	0cbH
	DB	049H
	DB	08fH
	DB	0f9H
	DB	0b9H
	DB	030H
	DB	068H
	DB	097H
	DB	0edH
	DB	025H
	DB	055H
	DB	0e2H
	DB	0a4H
	DB	02fH
	DB	0e2H
	DB	09dH
	DB	014H
	DB	0abH
	DB	01H
	DB	08eH
	DB	07H
	DB	0e4H
	DB	027H
	DB	07H
	DB	09eH
	DB	064H
	DB	0f9H
	DB	07cH
	DB	0b7H
	DB	081H
	DB	041H
	DB	04H
	DB	0caH
	DB	0d0H
	DB	0fdH
	DB	085H
	DB	080H
	DB	0e5H
	DB	09cH
	DB	06eH
	DB	08aH
	DB	0f2H
	DB	0d1H
	DB	030H
	DB	022H
	DB	0b4H
	DB	04dH
	DB	0b5H
	DB	060H
	DB	0cdH
	DB	0c3H
	DB	0e7H
	DB	033H
	DB	0eaH
	DB	06eH
	DB	051H
	DB	050H
	DB	068H
	DB	04eH
	DB	08H
	DB	069H
	DB	08fH
	DB	0cH
	DB	0b4H
	DB	0e0H
	DB	089H
	DB	03aH
	DB	061H
	DB	0eeH
	DB	0d6H
	DB	0d0H
	DB	0f9H
	DB	049H
	DB	0a2H
	DB	0a9H
	DB	0eaH
	DB	0d6H
	DB	0f6H
	DB	021H
	DB	038H
	DB	044H
	DB	0e4H
	DB	09fH
	DB	077H
	DB	0d0H
	DB	0eH
	DB	049H
	DB	021H
	DB	0f5H
	DB	097H
	DB	0a8H
	DB	060H
	DB	0a6H
	DB	035H
	DB	094H
	DB	07H
	DB	03eH
	DB	0ceH
	DB	069H
	DB	0adH
	DB	025H
	DB	0b9H
	DB	0a7H
	DB	0eeH
	DB	05cH
	DB	051H
	DB	0d9H
	DB	033H
	DB	0c7H
	DB	0faH
	DB	0eaH
	DB	0cH
	DB	0e0H
	DB	0aH
	DB	04H
	DB	031H
	DB	018H
	DB	0ccH
	DB	0d1H
	DB	08eH
	DB	0e3H
	DB	07aH
	DB	06eH
	DB	08aH
	DB	02fH
	DB	03H
	DB	012H
	DB	0edH
	DB	051H
	DB	07bH
	DB	09bH
	DB	0f5H
	DB	035H
	DB	043H
	DB	0e4H
	DB	011H
	DB	014H
	DB	03fH
	DB	044H
	DB	0dbH
	DB	0b9H
	DB	0afH
	DB	067H
	DB	01aH
	DB	0b9H
	DB	0eaH
	DB	04bH
	DB	052H
	DB	0b7H
	DB	01dH
	DB	0e0H
	DB	09bH
	DB	018H
	DB	0ceH
	DB	0a6H
	DB	047H
	DB	0d1H
	DB	0b8H
	DB	0b4H
	DB	0a2H
	DB	0b3H
	DB	050H
	DB	098H
	DB	068H
	DB	013H
	DB	07eH
	DB	079H
	DB	027H
	DB	0bdH
	DB	03dH
	DB	082H
	DB	0f6H
	DB	06cH
	DB	0eaH
	DB	012H
	DB	027H
	DB	055H
	DB	05dH
	DB	0f8H
	DB	0eH
	DB	07bH
	DB	059H
	DB	029H
	DB	013H
	DB	028H
	DB	04fH
	DB	05aH
	DB	079H
	DB	087H
	DB	010H
	DB	01cH
	DB	0baH
	DB	0dfH
	DB	0b4H
	DB	023H
	DB	0f3H
	DB	0b2H
	DB	09cH
	DB	01bH
	DB	0efH
	DB	05aH
	DB	01eH
	DB	0e7H
	DB	0c6H
	DB	088H
	DB	0f9H
	DB	06dH
	DB	0ddH
	DB	057H
	DB	066H
	DB	06bH
	DB	052H
	DB	0bfH
	DB	095H
	DB	065H
	DB	067H
	DB	064H
	DB	040H
	DB	0e0H
	DB	06cH
	DB	0cfH
	DB	07cH
	DB	027H
	DB	0afH
	DB	0b1H
	DB	04bH
	DB	023H
	DB	064H
	DB	067H
	DB	0beH
	DB	0d4H
	DB	0c1H
	DB	0dcH
	DB	0bcH
	DB	089H
	DB	065H
	DB	036H
	DB	0f6H
	DB	043H
	DB	0dH
	DB	0ddH
	DB	0afH
	DB	060H
	DB	01dH
	DB	0c4H
	DB	045H
	DB	085H
	DB	0a8H
	DB	05H
	DB	0e5H
	DB	015H
	DB	0d4H
	DB	063H
	DB	03dH
	DB	05H
	DB	094H
	DB	088H
	DB	028H
	DB	078H
	DB	0efH
	DB	0e6H
	DB	04dH
	DB	032H
	DB	043H
	DB	089H
	DB	03bH
	DB	0a8H
	DB	0bfH
	DB	0b1H
	DB	06cH
	DB	0cdH
	DB	08fH
	DB	01cH
	DB	0adH
	DB	0adH
	DB	060H
	DB	0f2H
	DB	0b2H
	DB	09H
	DB	0f8H
	DB	098H
	DB	09eH
	DB	04dH
	DB	07bH
	DB	0dbH
	DB	052H
	DB	08fH
	DB	0e3H
	DB	0faH
	DB	09H
	DB	053H
	DB	061H
	DB	056H
	DB	085H
	DB	0a5H
	DB	0e0H
	DB	040H
	DB	04eH
	DB	0a0H
	DB	0f2H
	DB	0baH
	DB	0edH
	DB	02H
	DB	056H
	DB	09bH
	DB	02fH
	DB	036H
	DB	0fH
	DB	0e1H
	DB	0bfH
	DB	087H
	DB	0faH
	DB	05eH
	DB	054H
	DB	0f5H
	DB	03aH
	DB	027H
	DB	086H
	DB	09dH
	DB	0a1H
	DB	08fH
	DB	0f0H
	DB	03H
	DB	0e5H
	DB	0f6H
	DB	0a8H
	DB	046H
	DB	0b6H
	DB	077H
	DB	067H
	DB	0a9H
	DB	032H
	DB	055H
	DB	02cH
	DB	09H
	DB	071H
	DB	05bH
	DB	03fH
	DB	00H
	DB	0bdH
	DB	0feH
	DB	07H
	DB	0b8H
	DB	0dcH
	DB	0daH
	DB	0aeH
	DB	096H
	DB	02H
	DB	0b4H
	DB	034H
	DB	0a3H
	DB	044H
	DB	0a5H
	DB	0a7H
	DB	0aaH
	DB	09cH
	DB	0cfH
	DB	070H
	DB	053H
	DB	047H
	DB	0d7H
	DB	07dH
	DB	0f9H
	DB	0adH
	DB	0a9H
	DB	082H
	DB	09eH
	DB	084H
	DB	0c1H
	DB	09eH
	DB	042H
	DB	041H
	DB	025H
	DB	0faH
	DB	01eH
	DB	00H
	DB	02aH
	DB	0b5H
	DB	082H
	DB	0deH
	DB	069H
	DB	026H
	DB	024H
	DB	0fH
	DB	04dH
	DB	04eH
	DB	02bH
	DB	09dH
	DB	0beH
	DB	0feH
	DB	064H
	DB	097H
	DB	0fbH
	DB	0ddH
	DB	0c4H
	DB	0a5H
	DB	060H
	DB	063H
	DB	0a9H
	DB	0a2H
	DB	081H
	DB	0ecH
	DB	0e3H
	DB	0a6H
	DB	0e7H
	DB	081H
	DB	026H
	DB	091H
	DB	0b6H
	DB	0a8H
	DB	071H
	DB	021H
	DB	04fH
	DB	015H
	DB	030H
	DB	01cH
	DB	063H
	DB	0dbH
	DB	0b9H
	DB	0a1H
	DB	0daH
	DB	09eH
	DB	0b8H
	DB	0d6H
	DB	07cH
	DB	07dH
	DB	0fbH
	DB	0ddH
	DB	060H
	DB	0a5H
	DB	080H
	DB	0e1H
	DB	092H
	DB	0e3H
	DB	08H
	DB	0faH
	DB	0e4H
	DB	0aeH
	DB	08cH
	DB	09cH
	DB	057H
	DB	07dH
	DB	03dH
	DB	026H
	DB	092H
	DB	0ecH
	DB	0c2H
	DB	075H
	DB	0c8H
	DB	0fbH
	DB	018H
	DB	023H
	DB	09aH
	DB	050H
	DB	079H
	DB	018H
	DB	04eH
	DB	0f4H
	DB	0f5H
	DB	0aeH
	DB	01bH
	DB	0f5H
	DB	091H
	DB	02dH
	DB	059H
	DB	019H
	DB	028H
	DB	03eH
	DB	0c7H
	DB	035H
	DB	05aH
	DB	09fH
	DB	0b2H
	DB	097H
	DB	045H
	DB	0c5H
	DB	085H
	DB	08H
	DB	03bH
	DB	0cdH
	DB	05H
	DB	0d2H
	DB	0f1H
	DB	09fH
	DB	024H
	DB	0eaH
	DB	0b7H
	DB	0f1H
	DB	0e0H
	DB	02dH
	DB	0a0H
	DB	0fbH
	DB	0a2H
	DB	0b1H
	DB	029H
	DB	0fbH
	DB	0cbH
	DB	0d1H
	DB	0baH
	DB	013H
	DB	086H
	DB	015H
	DB	0b2H
	DB	039H
	DB	0adH
	DB	078H
	DB	07eH
	DB	0b2H
	DB	080H
	DB	0baH
	DB	080H
	DB	05H
	DB	0dH
	DB	0f1H
	DB	0a5H
	DB	0b0H
	DB	0ddH
	DB	0dcH
	DB	0a2H
	DB	03eH
	DB	08aH
	DB	044H
	DB	0b9H
	DB	02dH
	DB	075H
	DB	0e2H
	DB	02aH
	DB	041H
	DB	034H
	DB	0e4H
	DB	0d4H
	DB	0baH
	DB	079H
	DB	07H
	DB	074H
	DB	0a6H
	DB	07fH
	DB	0f2H
	DB	059H
	DB	080H
	DB	02dH
	DB	05aH
	DB	085H
	DB	0baH
	DB	0cbH
	DB	0aaH
	DB	0eaH
	DB	029H
	DB	08H
	DB	08eH
	DB	067H
	DB	092H
	DB	052H
	DB	0a0H
	DB	0bfH
	DB	0c7H
	DB	04H
	DB	069H
	DB	089H
	DB	038H
	DB	0cdH
	DB	05eH
	DB	073H
	DB	048H
	DB	0e4H
	DB	067H
	DB	0eeH
	DB	065H
	DB	05aH
	DB	0c8H
	DB	065H
	DB	08H
	DB	0a2H
	DB	0eaH
	DB	042H
	DB	06eH
	DB	016H
	DB	02dH
	DB	018H
	DB	01eH
	DB	03bH
	DB	0feH
	DB	0b0H
	DB	08dH
	DB	0a0H
	DB	0efH
	DB	0d5H
	DB	0a4H
	DB	05aH
	DB	0deH
	DB	05cH
	DB	028H
	DB	0bcH
	DB	0cfH
	DB	0efH
	DB	0a1H
	DB	037H
	DB	05fH
	DB	086H
	DB	012H
	DB	028H
	DB	0ebH
	DB	099H
	DB	0caH
	DB	0d7H
	DB	0dbH
	DB	0b8H
	DB	0edH
	DB	088H
	DB	0d0H
	DB	08bH
	DB	0c4H
	DB	050H
	DB	03cH
	DB	052H
	DB	0f0H
	DB	02cH
	DB	0a7H
	DB	015H
	DB	06H
	DB	086H
	DB	071H
	DB	02fH
	DB	043H
	DB	0c1H
	DB	09eH
	DB	065H
	DB	0f8H
	DB	0fdH
	DB	0ebH
	DB	08aH
	DB	026H
	DB	0d8H
	DB	024H
	DB	070H
	DB	030H
	DB	07fH
	DB	0a9H
	DB	09dH
	DB	088H
	DB	0f9H
	DB	029H
	DB	04dH
	DB	04aH
	DB	0e4H
	DB	01fH
	DB	0baH
	DB	090H
	DB	0c7H
	DB	0cfH
	DB	097H
	DB	0cdH
	DB	042H
	DB	046H
	DB	091H
	DB	04H
	DB	0e4H
	DB	0f6H
	DB	07cH
	DB	0e3H
	DB	062H
	DB	08H
	DB	089H
	DB	0baH
	DB	0abH
	DB	07aH
	DB	06aH
	DB	0abH
	DB	024H
	DB	087H
	DB	034H
	DB	01eH
	DB	030H
	DB	01H
	DB	0e8H
	DB	015H
	DB	020H
	DB	0a3H
	DB	0a6H
	DB	067H
	DB	074H
	DB	0bdH
	DB	036H
	DB	036H
	DB	04H
	DB	047H
	DB	0b9H
	DB	068H
	DB	03eH
	DB	036H
	DB	04cH
	DB	020H
	DB	0bdH
	DB	056H
	DB	0dbH
	DB	0e9H
	DB	0d0H
	DB	0c5H
	DB	015H
	DB	0f4H
	DB	04eH
	DB	0c8H
	DB	092H
	DB	07eH
	DB	0c9H
	DB	07bH
	DB	094H
	DB	0e9H
	DB	09fH
	DB	0baH
	DB	052H
	DB	014H
	DB	078H
	DB	08H
	DB	0c9H
	DB	0fbH
	DB	04fH
	DB	083H
	DB	064H
	DB	0dH
	DB	039H
	DB	031H
	DB	02dH
	DB	077H
	DB	07H
	DB	088H
	DB	0e0H
	DB	0d7H
	DB	04fH
	DB	0f5H
	DB	04cH
	DB	09dH
	DB	03eH
	DB	05eH
	DB	09bH
	DB	08H
	DB	0daH
	DB	030H
	DB	0f1H
	DB	0f9H
	DB	06aH
	DB	0c3H
	DB	0eH
	DB	062H
	DB	0cbH
	DB	057H
	DB	0ddH
	DB	09aH
	DB	05aH
	DB	043H
	DB	0a7H
	DB	093H
	DB	0f3H
	DB	055H
	DB	08aH
	DB	0faH
	DB	05dH
	DB	0eaH
	DB	052H
	DB	02cH
	DB	0e0H
	DB	09eH
	DB	0c9H
	DB	01fH
	DB	0fcH
	DB	0e5H
	DB	0a6H
	DB	057H
	DB	016H
	DB	019H
	DB	051H
	DB	01H
	DB	0dcH
	DB	0deH
	DB	063H
	DB	029H
	DB	036H
	DB	042H
	DB	0c3H
	DB	010H
	DB	05H
	DB	0ebH
	DB	024H
	DB	078H
	DB	041H
	DB	0aeH
	DB	073H
	DB	01eH
	DB	09aH
	DB	0c5H
	DB	04bH
	DB	0faH
	DB	0e3H
	DB	094H
	DB	09aH
	DB	0e0H
	DB	07aH
	DB	041H
	DB	0b8H
	DB	011H
	DB	05aH
	DB	0aH
	DB	012H
	DB	0b7H
	DB	069H
	DB	0f4H
	DB	0e0H
	DB	01fH
	DB	0b6H
	DB	024H
	DB	030H
	DB	03bH
	DB	010H
	DB	054H
	DB	0b3H
	DB	0d0H
	DB	082H
	DB	027H
	DB	06fH
	DB	09cH
	DB	06cH
	DB	0baH
	DB	098H
	DB	050H
	DB	04fH
	DB	0b2H
	DB	0b1H
	DB	04aH
	DB	073H
	DB	06aH
	DB	05bH
	DB	04eH
	DB	0f3H
	DB	0ecH
	DB	06H
	DB	05dH
	DB	0e1H
	DB	066H
	DB	07dH
	DB	019H
	DB	0aH
	DB	02dH
	DB	054H
	DB	09aH
	DB	01H
	DB	09H
	DB	06bH
	DB	083H
	DB	0afH
	DB	0daH
	DB	021H
	DB	09cH
	DB	015H
	DB	039H
	DB	0ecH
	DB	0e4H
	DB	06bH
	DB	01eH
	DB	02fH
	DB	05eH
	DB	088H
	DB	08aH
	DB	0acH
	DB	07dH
	DB	077H
	DB	032H
	DB	05aH
	DB	0d8H
	DB	018H
	DB	057H
	DB	0f1H
	DB	023H
	DB	084H
	DB	047H
	DB	0bdH
	DB	05H
	DB	0cfH
	DB	0a8H
	DB	089H
	DB	07fH
	DB	04H
	DB	02aH
	DB	01cH
	DB	019H
	DB	0e2H
	DB	089H
	DB	0fdH
	DB	04eH
	DB	0a7H
	DB	02dH
	DB	02cH
	DB	0b0H
	DB	037H
	DB	0d9H
	DB	0adH
	DB	0aeH
	DB	08bH
	DB	08H
	DB	088H
	DB	0a4H
	DB	0dfH
	DB	07aH
	DB	047H
	DB	0e3H
	DB	041H
	DB	05H
	DB	0e9H
	DB	011H
	DB	02dH
	DB	0f2H
	DB	011H
	DB	0b0H
	DB	01dH
	DB	0acH
	DB	0caH
	DB	07fH
	DB	036H
	DB	048H
	DB	04dH
	DB	05eH
	DB	0f5H
	DB	079H
	DB	0fH
	DB	0acH
	DB	053H
	DB	0bcH
	DB	0dbH
	DB	05fH
	DB	044H
	DB	0e3H
	DB	04H
	DB	024H
	DB	0ddH
	DB	0caH
	DB	088H
	DB	020H
	DB	04fH
	DB	072H
	DB	031H
	DB	07cH
	DB	065H
	DB	0c1H
	DB	02eH
	DB	02H
	DB	06fH
	DB	078H
	DB	081H
	DB	0a5H
	DB	040H
	DB	0ceH
	DB	083H
	DB	0b5H
	DB	0c7H
	DB	092H
	DB	063H
	DB	09bH
	DB	0ceH
	DB	03fH
	DB	0faH
	DB	014H
	DB	023H
	DB	07eH
	DB	0b7H
	DB	01H
	DB	049H
	DB	0bfH
	DB	0a0H
	DB	098H
	DB	032H
	DB	0d2H
	DB	015H
	DB	017H
	DB	014H
	DB	0c2H
	DB	098H
	DB	083H
	DB	0baH
	DB	099H
	DB	0a9H
	DB	0fbH
	DB	0e7H
	DB	02dH
	DB	0b1H
	DB	0b0H
	DB	0c0H
	DB	094H
	DB	04cH
	DB	08fH
	DB	053H
	DB	047H
	DB	023H
	DB	076H
	DB	045H
	DB	05bH
	DB	0f7H
	DB	08eH
	DB	01bH
	DB	098H
	DB	027H
	DB	0cdH
	DB	0eaH
	DB	0bbH
	DB	064H
	DB	00H
	DB	07fH
	DB	0fdH
	DB	083H
	DB	03aH
	DB	017H
	DB	02dH
	DB	0b5H
	DB	00H
	DB	05bH
	DB	0e7H
	DB	0b0H
	DB	09bH
	DB	07cH
	DB	07cH
	DB	0aaH
	DB	0d0H
	DB	043H
	DB	04eH
	DB	0c6H
	DB	088H
	DB	0a9H
	DB	03eH
	DB	017H
	DB	044H
	DB	0d7H
	DB	0bdH
	DB	091H
	DB	0c2H
	DB	079H
	DB	0f6H
	DB	042H
	DB	0f8H
	DB	074H
	DB	046H
	DB	0b3H
	DB	0bH
	DB	073H
	DB	069H
	DB	0bH
	DB	04eH
	DB	0d0H
	DB	03bH
	DB	069H
	DB	0cdH
	DB	037H
	DB	015H
	DB	01eH
	DB	07aH
	DB	063H
	DB	0e4H
	DB	082H
	DB	08cH
	DB	024H
	DB	019H
	DB	050H
	DB	07bH
	DB	0d6H
	DB	0e2H
	DB	0bdH
	DB	051H
	DB	059H
	DB	01H
	DB	04aH
	DB	04dH
	DB	047H
	DB	07dH
	DB	058H
	DB	03aH
	DB	067H
	DB	0e3H
	DB	09H
	DB	038H
	DB	01fH
	DB	072H
	DB	06H
	DB	057H
	DB	087H
	DB	024H
	DB	051H
	DB	06aH
	DB	089H
	DB	054H
	DB	076H
	DB	02dH
	DB	06dH
	DB	047H
	DB	0a8H
	DB	045H
	DB	0a9H
	DB	066H
	DB	096H
	DB	03H
	DB	067H
	DB	060H
	DB	0cfH
	DB	02eH
	DB	0deH
	DB	0a7H
	DB	069H
	DB	046H
	DB	08bH
	DB	0f1H
	DB	0fdH
	DB	02bH
	DB	064H
	DB	084H
	DB	02H
	DB	06cH
	DB	0a8H
	DB	053H
	DB	056H
	DB	0b1H
	DB	0a7H
	DB	0cdH
	DB	0deH
	DB	016H
	DB	015H
	DB	087H
	DB	0daH
	DB	0beH
	DB	06eH
	DB	071H
	DB	041H
	DB	0d5H
	DB	0d1H
	DB	090H
	DB	084H
	DB	030H
	DB	038H
	DB	0edH
	DB	076H
	DB	0c4H
	DB	0dfH
	DB	0f4H
	DB	06fH
	DB	0c3H
	DB	079H
	DB	071H
	DB	030H
	DB	0a1H
	DB	044H
	DB	087H
	DB	054H
	DB	0ecH
	DB	0d4H
	DB	033H
	DB	082H
	DB	069H
	DB	03bH
	DB	05dH
	DB	0a7H
	DB	0a9H
	DB	04eH
	DB	068H
	DB	0feH
	DB	020H
	DB	0f8H
	DB	083H
	DB	051H
	DB	0b0H
	DB	0f0H
	DB	047H
	DB	0f4H
	DB	050H
	DB	03cH
	DB	064H
	DB	015H
	DB	035H
	DB	0d5H
	DB	0c4H
	DB	0d7H
	DB	01bH
	DB	0cbH
	DB	02cH
	DB	087H
	DB	0a0H
	DB	0deH
	DB	089H
	DB	089H
	DB	01aH
	DB	0e6H
	DB	031H
	DB	043H
	DB	0b4H
	DB	099H
	DB	043H
	DB	0d4H
	DB	012H
	DB	0c6H
	DB	0a5H
	DB	0c3H
	DB	038H
	DB	06dH
	DB	0b8H
	DB	088H
	DB	029H
	DB	01eH
	DB	09dH
	DB	05fH
	DB	073H
	DB	0e2H
	DB	037H
	DB	08eH
	DB	0aeH
	DB	0e2H
	DB	095H
	DB	050H
	DB	0c1H
	DB	01fH
	DB	0d9H
	DB	05cH
	DB	085H
	DB	08bH
	DB	09fH
	DB	03aH
	DB	0a4H
	DB	0e2H
	DB	010H
	DB	0b7H
	DB	02aH
	DB	035H
	DB	07bH
	DB	062H
	DB	0a2H
	DB	0b3H
	DB	06aH
	DB	0ccH
	DB	0d1H
	DB	088H
	DB	02cH
	DB	0c5H
	DB	06bH
	DB	0e2H
	DB	054H
	DB	01aH
	DB	0c5H
	DB	0eaH
	DB	0e9H
	DB	087H
	DB	0aH
	DB	044H
	DB	0e3H
	DB	010H
	DB	0cfH
	DB	084H
	DB	04aH
	DB	074H
	DB	0e6H
	DB	0d9H
	DB	0abH
	DB	011H
	DB	010H
	DB	027H
	DB	0f2H
	DB	032H
	DB	05bH
	DB	05eH
	DB	0feH
	DB	0acH
	DB	0e6H
	DB	0aaH
	DB	072H
	DB	052H
	DB	0dH
	DB	0c7H
	DB	0ebH
	DB	0d2H
	DB	032H
	DB	0d6H
	DB	0daH
	DB	0bbH
	DB	01bH
	DB	0beH
	DB	0cbH
	DB	06aH
	DB	0c2H
	DB	096H
	DB	05eH
	DB	02aH
	DB	070H
	DB	0bH
	DB	0baH
	DB	00H
	DB	0b1H
	DB	0aeH
	DB	033H
	DB	0dH
	DB	08cH
	DB	0b1H
	DB	0baH
	DB	0f2H
	DB	05dH
	DB	0acH
	DB	0c4H
	DB	06aH
	DB	0f3H
	DB	0b0H
	DB	0bdH
	DB	026H
	DB	07H
	DB	098H
	DB	062H
	DB	022H
	DB	0d6H
	DB	0adH
	DB	0cH
	DB	01aH
	DB	044H
	DB	06bH
	DB	044H
	DB	035H
	DB	0f5H
	DB	07eH
	DB	035H
	DB	0a7H
	DB	0acH
	DB	068H
	DB	035H
	DB	039H
	DB	01bH
	DB	06fH
	DB	02cH
	DB	0f7H
	DB	01cH
	DB	070H
	DB	0e1H
	DB	011H
	DB	022H
	DB	09fH
	DB	0b6H
	DB	029H
	DB	0b7H
	DB	098H
	DB	0cbH
	DB	08fH
	DB	047H
	DB	0d7H
	DB	029H
	DB	0bH
	DB	0c2H
	DB	06dH
	DB	040H
	DB	0b8H
	DB	06bH
	DB	076H
	DB	0e0H
	DB	019H
	DB	05eH
	DB	016H
	DB	052H
	DB	0f8H
	DB	085H
	DB	0feH
	DB	0f0H
	DB	021H
	DB	06fH
	DB	053H
	DB	032H
	DB	011H
	DB	072H
	DB	069H
	DB	03bH
	DB	02bH
	DB	02H
	DB	07H
	DB	03aH
	DB	049H
	DB	05eH
	DB	063H
	DB	055H
	DB	0a1H
	DB	050H
	DB	015H
	DB	05aH
	DB	0bbH
	DB	08bH
	DB	03bH
	DB	0d4H
	DB	06aH
	DB	0d0H
	DB	0a7H
	DB	063H
	DB	0d5H
	DB	026H
	DB	0d4H
	DB	0f7H
	DB	015H
	DB	028H
	DB	02aH
	DB	027H
	DB	09aH
	DB	093H
	DB	0e1H
	DB	045H
	DB	016H
	DB	068H
	DB	0feH
	DB	05fH
	DB	046H
	DB	062H
	DB	034H
	DB	0e7H
	DB	032H
	DB	04aH
	DB	0c2H
	DB	0eeH
	DB	055H
	DB	0fdH
	DB	043H
	DB	0bfH
	DB	04fH
	DB	06aH
	DB	024H
	DB	025H
	DB	010H
	DB	0f8H
	DB	01dH
	DB	026H
	DB	0a0H
	DB	0c7H
	DB	0ccH
	DB	0baH
	DB	0daH
	DB	02eH
	DB	01H
	DB	0f0H
	DB	096H
	DB	00H
	DB	051H
	DB	05cH
	DB	0e2H
	DB	05H
	DB	045H
	DB	015H
	DB	04fH
	DB	08H
	DB	083H
	DB	0a5H
	DB	085H
	DB	047H
	DB	0e4H
	DB	0d4H
	DB	0b1H
	DB	09H
	DB	0faH
	DB	0c2H
	DB	081H
	DB	097H
	DB	068H
	DB	022H
	DB	05fH
	DB	0b4H
	DB	05dH
	DB	03bH
	DB	0e2H
	DB	0ddH
	DB	02cH
	DB	0f8H
	DB	05dH
	DB	0fcH
	DB	055H
	DB	040H
	DB	03H
	DB	09aH
	DB	0d5H
	DB	0d1H
	DB	022H
	DB	0d8H
	DB	0f6H
	DB	0a8H
	DB	020H
	DB	0dcH
	DB	0fcH
	DB	052H
	DB	065H
	DB	077H
	DB	015H
	DB	0e7H
	DB	010H
	DB	0fcH
	DB	089H
	DB	06fH
	DB	0b1H
	DB	0e6H
	DB	0aaH
	DB	094H
	DB	0c4H
	DB	057H
	DB	08dH
	DB	023H
	DB	0d3H
	DB	062H
	DB	0e2H
	DB	056H
	DB	0fdH
	DB	0b8H
	DB	029H
	DB	09fH
	DB	012H
	DB	09fH
	DB	0c7H
	DB	032H
	DB	07cH
	DB	0c5H
	DB	084H
	DB	0e2H
	DB	03dH
	DB	019H
	DB	04aH
	DB	04dH
	DB	016H
	DB	0d3H
	DB	0bdH
	DB	047H
	DB	0bbH
	DB	0e7H
	DB	0dbH
	DB	00H
	DB	0beH
	DB	0e8H
	DB	0a2H
	DB	093H
	DB	0cbH
	DB	086H
	DB	069H
	DB	049H
	DB	0beH
	DB	092H
	DB	0e8H
	DB	0d0H
	DB	033H
	DB	0b1H
	DB	083H
	DB	02fH
	DB	077H
	DB	087H
	DB	091H
	DB	034H
	DB	0a1H
	DB	0dbH
	DB	082H
	DB	037H
	DB	0b0H
	DB	0bfH
	DB	0feH
	DB	0ebH
	DB	027H
	DB	05aH
	DB	06bH
	DB	0e6H
	DB	044H
	DB	0fH
	DB	0f9H
	DB	010H
	DB	015H
	DB	063H
	DB	059H
	DB	0d3H
	DB	076H
	DB	0c1H
	DB	025H
	DB	029H
	DB	073H
	DB	0a8H
	DB	0d7H
	DB	06aH
	DB	030H
	DB	06aH
	DB	09fH
	DB	051H
	DB	046H
	DB	0a1H
	DB	09H
	DB	076H
	DB	061H
	DB	08H
	DB	0e1H
	DB	088H
	DB	062H
	DB	04eH
	DB	0eeH
	DB	026H
	DB	0dcH
	DB	068H
	DB	0b5H
	DB	0f1H
	DB	0ccH
	DB	08eH
	DB	045H
	DB	0c2H
	DB	051H
	DB	0e9H
	DB	0ebH
	DB	0c4H
	DB	092H
	DB	0c3H
	DB	0afH
	DB	043H
	DB	0adH
	DB	04fH
	DB	014H
	DB	0f4H
	DB	0f0H
	DB	09cH
	DB	0eaH
	DB	0d1H
	DB	0a4H
	DB	04dH
	DB	0d9H
	DB	087H
	DB	01bH
	DB	0c9H
	DB	0adH
	DB	0f7H
	DB	032H
	DB	064H
	DB	069H
	DB	07eH
	DB	0f2H
	DB	02eH
	DB	041H
	DB	0c3H
	DB	019H
	DB	02dH
	DB	09H
	DB	02bH
	DB	071H
	DB	0b8H
	DB	0edH
	DB	01fH
	DB	087H
	DB	03H
	DB	093H
	DB	0f7H
	DB	09fH
	DB	0feH
	DB	0c9H
	DB	0c4H
	DB	04cH
	DB	0a3H
	DB	04cH
	DB	067H
	DB	06dH
	DB	0f9H
	DB	0deH
	DB	020H
	DB	0ddH
	DB	048H
	DB	09eH
	DB	051H
	DB	0f5H
	DB	0e0H
	DB	015H
	DB	0fH
	DB	08dH
	DB	01eH
	DB	03bH
	DB	07eH
	DB	056H
	DB	029H
	DB	01eH
	DB	0ddH
	DB	0abH
	DB	0b1H
	DB	0d5H
	DB	04cH
	DB	0b0H
	DB	01fH
	DB	090H
	DB	07cH
	DB	0c3H
	DB	0dcH
	DB	0e3H
	DB	0b0H
	DB	056H
	DB	042H
	DB	050H
	DB	0b4H
	DB	0aH
	DB	0efH
	DB	06H
	DB	01H
	DB	050H
	DB	09aH
	DB	010H
	DB	05dH
	DB	0b9H
	DB	0caH
	DB	0dcH
	DB	010H
	DB	0f4H
	DB	0faH
	DB	06eH
	DB	0a0H
	DB	02cH
	DB	0c3H
	DB	06cH
	DB	05dH
	DB	0e3H
	DB	07cH
	DB	0d9H
	DB	0a7H
	DB	059H
	DB	03eH
	DB	0d7H
	DB	030H
	DB	080H
	DB	029H
	DB	064H
	DB	08bH
	DB	098H
	DB	06aH
	DB	0cH
	DB	068H
	DB	084H
	DB	01cH
	DB	0c5H
	DB	0bdH
	DB	067H
	DB	022H
	DB	04eH
	DB	05cH
	DB	09cH
	DB	0bcH
	DB	07cH
	DB	0c9H
	DB	080H
	DB	069H
	DB	0a6H
	DB	064H
	DB	0e5H
	DB	080H
	DB	08bH
	DB	0bfH
	DB	03eH
	DB	0e3H
	DB	06fH
	DB	0bfH
	DB	08cH
	DB	0d3H
	DB	0caH
	DB	025H
	DB	0bdH
	DB	0d6H
	DB	0dH
	DB	042H
	DB	072H
	DB	0d2H
	DB	080H
	DB	0d9H
	DB	075H
	DB	0ceH
	DB	0b5H
	DB	012H
	DB	0bH
	DB	0b2H
	DB	05bH
	DB	08bH
	DB	09bH
	DB	02H
	DB	070H
	DB	081H
	DB	03H
	DB	07bH
	DB	0c0H
	DB	041H
	DB	05fH
	DB	0afH
	DB	080H
	DB	06bH
	DB	083H
	DB	0caH
	DB	090H
	DB	0c0H
	DB	021H
	DB	01dH
	DB	083H
	DB	014H
	DB	0f0H
	DB	04H
	DB	06dH
	DB	0e5H
	DB	052H
	DB	024H
	DB	0f7H
	DB	05dH
	DB	056H
	DB	054H
	DB	068H
	DB	0f1H
	DB	0d5H
	DB	0d8H
	DB	0f2H
	DB	0d8H
	DB	0d4H
	DB	034H
	DB	09aH
	DB	034H
	DB	0e3H
	DB	09aH
	DB	0a0H
	DB	0e7H
	DB	066H
	DB	0b0H
	DB	0a8H
	DB	07H
	DB	04eH
	DB	0abH
	DB	01bH
	DB	03fH
	DB	0afH
	DB	089H
	DB	025H
	DB	02H
	DB	02dH
	DB	09cH
	DB	0deH
	DB	083H
	DB	070H
	DB	048H
	DB	0f4H
	DB	047H
	DB	021H
	DB	0e7H
	DB	09fH
	DB	0f5H
	DB	01cH
	DB	0b9H
	DB	0aaH
	DB	01H
	DB	055H
	DB	0caH
	DB	068H
	DB	03bH
	DB	0faH
	DB	011H
	DB	042H
	DB	049H
	DB	0bdH
	DB	05eH
	DB	08H
	DB	0ecH
	DB	0e7H
	DB	0acH
	DB	06fH
	DB	015H
	DB	04aH
	DB	04eH
	DB	018H
	DB	0baH
	DB	096H
	DB	0dH
	DB	081H
	DB	038H
	DB	0f4H
	DB	0a1H
	DB	0adH
	DB	091H
	DB	05bH
	DB	058H
	DB	012H
	DB	0b0H
	DB	0a2H
	DB	07aH
	DB	0ebH
	DB	09eH
	DB	08bH
	DB	0aeH
	DB	067H
	DB	0c8H
	DB	0dH
	DB	070H
	DB	036H
	DB	074H
	DB	01dH
	DB	0a5H
	DB	089H
	DB	0e6H
	DB	073H
	DB	0a1H
	DB	0a2H
	DB	0bH
	DB	02eH
	DB	0a3H
	DB	0c2H
	DB	023H
	DB	045H
	DB	070H
	DB	034H
	DB	0a1H
	DB	0c9H
	DB	046H
	DB	0d1H
	DB	0ebH
	DB	0c0H
	DB	03eH
	DB	08aH
	DB	0ccH
	DB	0ecH
	DB	072H
	DB	015H
	DB	079H
	DB	0e2H
	DB	04bH
	DB	0edH
	DB	07fH
	DB	070H
	DB	077H
	DB	067H
	DB	0e4H
	DB	098H
	DB	089H
	DB	06fH
	DB	046H
	DB	02dH
	DB	032H
	DB	069H
	DB	0f2H
	DB	0a2H
	DB	09eH
	DB	014H
	DB	0ebH
	DB	0e4H
	DB	0e5H
	DB	0d8H
	DB	026H
	DB	024H
	DB	0e2H
	DB	0f2H
	DB	090H
	DB	055H
	DB	08H
	DB	0aH
	DB	038H
	DB	0d3H
	DB	0f7H
	DB	038H
	DB	044H
	DB	0eeH
	DB	09fH
	DB	029H
	DB	07H
	DB	0a8H
	DB	018H
	DB	04dH
	DB	055H
	DB	04aH
	DB	037H
	DB	048H
	DB	0edH
	DB	055H
	DB	05cH
	DB	0d9H
	DB	0b9H
	DB	0c2H
	DB	032H
	DB	0dfH
	DB	0e6H
	DB	016H
	DB	052H
	DB	0f7H
	DB	06bH
	DB	0daH
	DB	02H
	DB	024H
	DB	0aeH
	DB	07aH
	DB	0dbH
	DB	0f2H
	DB	0e8H
	DB	07bH
	DB	09cH
	DB	0f0H
	DB	0a3H
	DB	0b4H
	DB	0bdH
	DB	0f8H
	DB	07fH
	DB	0f4H
	DB	042H
	DB	06dH
	DB	0c9H
	DB	01eH
	DB	0c6H
	DB	084H
	DB	0e0H
	DB	0f9H
	DB	0e3H
	DB	048H
	DB	08fH
	DB	037H
	DB	040H
	DB	07aH
	DB	012H
	DB	0c1H
	DB	01eH
	DB	040H
	DB	0bbH
	DB	0f9H
	DB	0b2H
	DB	0a5H
	DB	0f4H
	DB	04fH
	DB	016H
	DB	098H
	DB	084H
	DB	0d3H
	DB	012H
	DB	04H
	DB	049H
	DB	0d3H
	DB	0f0H
	DB	013H
	DB	0f1H
	DB	037H
	DB	097H
	DB	053H
	DB	0b0H
	DB	07cH
	DB	01bH
	DB	040H
	DB	033H
	DB	0daH
	DB	03bH
	DB	045H
	DB	09cH
	DB	059H
	DB	05H
	DB	0d8H
	DB	0d3H
	DB	0b7H
	DB	07eH
	DB	048H
	DB	087H
	DB	094H
	DB	0e1H
	DB	0cH
	DB	0e7H
	DB	073H
	DB	08fH
	DB	031H
	DB	047H
	DB	00H
	DB	0c4H
	DB	0b8H
	DB	0b6H
	DB	05cH
	DB	08bH
	DB	068H
	DB	058H
	DB	0a6H
	DB	028H
	DB	0bH
	DB	081H
	DB	063H
	DB	050H
	DB	09eH
	DB	03dH
	DB	055H
	DB	077H
	DB	011H
	DB	08dH
	DB	075H
	DB	059H
	DB	015H
	DB	089H
	DB	0baH
	DB	0a0H
	DB	071H
	DB	0adH
	DB	0afH
	DB	023H
	DB	0f4H
	DB	0afH
	DB	0e7H
	DB	02eH
	DB	066H
	DB	0c3H
	DB	0b9H
	DB	04eH
	DB	09cH
	DB	061H
	DB	077H
	DB	0a7H
	DB	062H
	DB	0daH
	DB	078H
	DB	01H
	DB	097H
	DB	04dH
	DB	0f7H
	DB	0a8H
	DB	0daH
	DB	06dH
	DB	082H
	DB	0efH
	DB	0f6H
	DB	0bcH
	DB	090H
	DB	0e8H
	DB	06bH
	DB	040H
	DB	08bH
	DB	060H
	DB	06fH
	DB	073H
	DB	0eH
	DB	056H
	DB	0b6H
	DB	0c8H
	DB	0a4H
	DB	053H
	DB	0a9H
	DB	09bH
	DB	0fbH
	DB	0cH
	DB	0f6H
	DB	074H
	DB	08dH
	DB	08eH
	DB	0c1H
	DB	085H
	DB	038H
	DB	01dH
	DB	073H
	DB	03aH
	DB	0dH
	DB	0e9H
	DB	0f6H
	DB	01eH
	DB	0d2H
	DB	062H
	DB	05eH
	DB	05eH
	DB	043H
	DB	04eH
	DB	051H
	DB	051H
	DB	0a4H
	DB	09H
	DB	099H
	DB	0c8H
	DB	05cH
	DB	043H
	DB	065H
	DB	0d7H
	DB	0cfH
	DB	05cH
	DB	0cbH
	DB	0dcH
	DB	0eaH
	DB	0eH
	DB	062H
	DB	0a2H
	DB	02bH
	DB	0d5H
	DB	0dcH
	DB	038H
	DB	0c0H
	DB	054H
	DB	0d5H
	DB	013H
	DB	0b6H
	DB	035H
	DB	0f1H
	DB	0f9H
	DB	03H
	DB	043H
	DB	0cbH
	DB	0a7H
	DB	0cbH
	DB	065H
	DB	0efH
	DB	0a8H
	DB	029H
	DB	0d4H
	DB	080H
	DB	078H
	DB	031H
	DB	0ccH
	DB	055H
	DB	09cH
	DB	0daH
	DB	0b7H
	DB	0beH
	DB	06H
	DB	0eH
	DB	01cH
	DB	0bdH
	DB	04eH
	DB	070H
	DB	094H
	DB	0e0H
	DB	0a6H
	DB	049H
	DB	0d2H
	DB	021H
	DB	04cH
	DB	096H
	DB	0ecH
	DB	073H
	DB	062H
	DB	052H
	DB	063H
	DB	08aH
	DB	0faH
	DB	0b8H
	DB	0cH
	DB	073H
	DB	0e9H
	DB	0d8H
	DB	0c8H
	DB	06H
	DB	033H
	DB	01H
	DB	0c5H
	DB	039H
	DB	08eH
	DB	061H
	DB	076H
	DB	05cH
	DB	0d1H
	DB	08aH
	DB	03dH
	DB	078H
	DB	0d3H
	DB	090H
	DB	099H
	DB	09fH
	DB	0a6H
	DB	06H
	DB	013H
	DB	09H
	DB	0d8H
	DB	0f6H
	DB	014H
	DB	0d3H
	DB	0afH
	DB	09fH
	DB	048H
	DB	019H
	DB	0f7H
	DB	090H
	DB	09fH
	DB	02bH
	DB	011H
	DB	0e4H
	DB	0e3H
	DB	09fH
	DB	046H
	DB	05aH
	DB	0fbH
	DB	097H
	DB	065H
	DB	0b9H
	DB	010H
	DB	039H
	DB	0c9H
	DB	02aH
	DB	0d9H
	DB	070H
	DB	030H
	DB	06cH
	DB	0f8H
	DB	088H
	DB	0e2H
	DB	0dH
	DB	05dH
	DB	092H
	DB	0acH
	DB	025H
	DB	02cH
	DB	0a4H
	DB	035H
	DB	0cbH
	DB	0cfH
	DB	047H
	DB	0b0H
	DB	0b3H
	DB	066H
	DB	0f6H
	DB	08eH
	DB	063H
	DB	08eH
	DB	0f3H
	DB	09cH
	DB	01eH
	DB	0acH
	DB	066H
	DB	0c7H
	DB	06H
	DB	0d6H
	DB	078H
	DB	073H
	DB	0cfH
	DB	01H
	DB	056H
	DB	05dH
	DB	0ddH
	DB	069H
	DB	0aH
	DB	03H
	DB	095H
	DB	0afH
	DB	0b8H
	DB	0e0H
	DB	0feH
	DB	00H
	DB	091H
	DB	033H
	DB	066H
	DB	08H
	DB	0c1H
	DB	049H
	DB	016H
	DB	035H
	DB	065H
	DB	034H
	DB	061H
	DB	04bH
	DB	07cH
	DB	068H
	DB	022H
	DB	0f4H
	DB	05bH
	DB	072H
	DB	075H
	DB	031H
	DB	04fH
	DB	054H
	DB	01aH
	DB	059H
	DB	0d6H
	DB	0afH
	DB	088H
	DB	08fH
	DB	010H
	DB	088H
	DB	0fH
	DB	0a1H
	DB	0bbH
	DB	0f5H
	DB	029H
	DB	0fcH
	DB	0beH
	DB	03fH
	DB	0b1H
	DB	0a4H
	DB	0f3H
	DB	013H
	DB	0efH
	DB	070H
	DB	07bH
	DB	092H
	DB	0e4H
	DB	056H
	DB	05H
	DB	0d9H
	DB	088H
	DB	054H
	DB	0adH
	DB	0a2H
	DB	02dH
	DB	085H
	DB	0d2H
	DB	0b6H
	DB	094H
	DB	0e2H
	DB	03fH
	DB	024H
	DB	05H
	DB	07aH
	DB	099H
	DB	0adH
	DB	077H
	DB	058H
	DB	0edH
	DB	029H
	DB	0fcH
	DB	061H
	DB	03cH
	DB	0edH
	DB	051H
	DB	038H
	DB	080H
	DB	0b5H
	DB	08eH
	DB	05H
	DB	08fH
	DB	096H
	DB	0d8H
	DB	03eH
	DB	0b9H
	DB	06H
	DB	043H
	DB	08cH
	DB	03cH
	DB	0d7H
	DB	0eeH
	DB	07bH
	DB	07bH
	DB	073H
	DB	075H
	DB	015H
	DB	022H
	DB	0ecH
	DB	06eH
	DB	08fH
	DB	095H
	DB	0eaH
	DB	0f0H
	DB	052H
	DB	058H
	DB	042H
	DB	08aH
	DB	058H
	DB	0f7H
	DB	098H
	DB	05dH
	DB	087H
	DB	030H
	DB	0b5H
	DB	045H
	DB	069H
	DB	03cH
	DB	088H
	DB	0f5H
	DB	078H
	DB	0e0H
	DB	064H
	DB	074H
	DB	05cH
	DB	0d8H
	DB	0e9H
	DB	072H
	DB	07aH
	DB	057H
	DB	060H
	DB	0aH
	DB	0ecH
	DB	0caH
	DB	0faH
	DB	03fH
	DB	024H
	DB	0bcH
	DB	0c9H
	DB	0fbH
	DB	0b4H
	DB	0e2H
	DB	05aH
	DB	0bbH
	DB	092H
	DB	08fH
	DB	081H
	DB	0fbH
	DB	0cbH
	DB	0aH
	DB	071H
	DB	045H
	DB	0eaH
	DB	0d5H
	DB	039H
	DB	048H
	DB	02eH
	DB	023H
	DB	03aH
	DB	028H
	DB	07aH
	DB	01aH
	DB	032H
	DB	068H
	DB	0e4H
	DB	0acH
	DB	027H
	DB	088H
	DB	069H
	DB	0f1H
	DB	085H
	DB	09dH
	DB	054H
	DB	05fH
	DB	0d9H
	DB	0e6H
	DB	0eeH
	DB	05bH
	DB	0e2H
	DB	03bH
	DB	065H
	DB	0d3H
	DB	080H
	DB	0d0H
	DB	0a9H
	DB	039H
	DB	098H
	DB	058H
	DB	05cH
	DB	0d2H
	DB	080H
	DB	057H
	DB	06cH
	DB	033H
	DB	0bfH
	DB	051H
	DB	05fH
	DB	0e6H
	DB	05aH
	DB	049H
	DB	058H
	DB	0dfH
	DB	0e6H
	DB	0acH
	DB	03fH
	DB	040H
	DB	013H
	DB	0adH
	DB	01bH
	DB	075H
	DB	0e8H
	DB	01H
	DB	049H
	DB	0e8H
	DB	0d1H
	DB	0f3H
	DB	022H
	DB	06aH
	DB	0cbH
	DB	0feH
	DB	0bcH
	DB	0cbH
	DB	056H
	DB	0a8H
	DB	07eH
	DB	016H
	DB	0f9H
	DB	0deH
	DB	07cH
	DB	0d3H
	DB	028H
	DB	055H
	DB	0b3H
	DB	08eH
	DB	081H
	DB	072H
	DB	0cfH
	DB	095H
	DB	021H
	DB	06aH
	DB	0bH
	DB	089H
	DB	06bH
	DB	055H
	DB	0f2H
	DB	03dH
	DB	0c8H
	DB	015H
	DB	027H
	DB	094H
	DB	014H
	DB	063H
	DB	0dfH
	DB	0e9H
	DB	0cH
	DB	05fH
	DB	07fH
	DB	086H
	DB	03eH
	DB	0fcH
	DB	05aH
	DB	0e5H
	DB	0d1H
	DB	0fH
	DB	074H
	DB	053H
	DB	01H
	DB	0c3H
	DB	068H
	DB	0a1H
	DB	02fH
	DB	074H
	DB	02cH
	DB	09aH
	DB	049H
	DB	01fH
	DB	058H
	DB	012H
	DB	0b3H
	DB	07fH
	DB	026H
	DB	048H
	DB	063H
	DB	085H
	DB	032H
	DB	06fH
	DB	0e4H
	DB	0b2H
	DB	0f5H
	DB	0a2H
	DB	02fH
	DB	0d0H
	DB	088H
	DB	01H
	DB	0dfH
	DB	07dH
	DB	0d3H
	DB	060H
	DB	041H
	DB	03dH
	DB	03H
	DB	0efH
	DB	0b1H
	DB	02fH
	DB	08bH
	DB	07aH
	DB	0cdH
	DB	063H
	DB	08cH
	DB	01H
	DB	0e2H
	DB	032H
	DB	049H
	DB	046H
	DB	0b7H
	DB	07cH
	DB	036H
	DB	09dH
	DB	0aeH
	DB	02cH
	DB	0bfH
	DB	05dH
	DB	07cH
	DB	049H
	DB	05eH
	DB	0dbH
	DB	0c6H
	DB	0b1H
	DB	03dH
	DB	087H
	DB	0eeH
	DB	040H
	DB	078H
	DB	020H
	DB	0eeH
	DB	083H
	DB	09aH
	DB	03cH
	DB	0e6H
	DB	0a6H
	DB	03dH
	DB	0c9H
	DB	0d8H
	DB	087H
	DB	090H
	DB	011H
	DB	083H
	DB	0c6H
	DB	02eH
	DB	0b1H
	DB	072H
	DB	0edH
	DB	0fH
	DB	0efH
	DB	037H
	DB	0ecH
	DB	0cbH
	DB	07dH
	DB	09eH
	DB	088H
	DB	06H
	DB	08eH
	DB	0c8H
	DB	07eH
	DB	0aeH
	DB	037H
	DB	02H
	DB	0c9H
	DB	073H
	DB	0e8H
	DB	070H
	DB	031H
	DB	032H
	DB	0c9H
	DB	0b8H
	DB	042H
	DB	0daH
	DB	0bbH
	DB	088H
	DB	09H
	DB	06dH
	DB	07bH
	DB	0f6H
	DB	07cH
	DB	0eaH
	DB	0aeH
	DB	069H
	DB	036H
	DB	02cH
	DB	08H
	DB	0bfH
	DB	032H
	DB	016H
	DB	08H
	DB	0b0H
	DB	045H
	DB	040H
	DB	032H
	DB	0fH
	DB	033H
	DB	09aH
	DB	0feH
	DB	064H
	DB	0cdH
	DB	048H
	DB	09cH
	DB	08fH
	DB	023H
	DB	058H
	DB	019H
	DB	0abH
	DB	045H
	DB	014H
	DB	023H
	DB	0c1H
	DB	0feH
	DB	0d1H
	DB	0aaH
	DB	035H
	DB	07dH
	DB	033H
	DB	074H
	DB	0b0H
	DB	0c8H
	DB	07dH
	DB	0e0H
	DB	0eH
	DB	03dH
	DB	093H
	DB	09cH
	DB	070H
	DB	02eH
	DB	01cH
	DB	055H
	DB	07bH
	DB	064H
	DB	0f1H
	DB	0cH
	DB	08H
	DB	0caH
	DB	0a4H
	DB	0b3H
	DB	010H
	DB	0b8H
	DB	056H
	DB	052H
	DB	037H
	DB	0a7H
	DB	0fcH
	DB	0ebH
	DB	026H
	DB	0afH
	DB	061H
	DB	056H
	DB	079H
	DB	05eH
	DB	0b6H
	DB	07H
	DB	09bH
	DB	04aH
	DB	0a4H
	DB	08bH
	DB	079H
	DB	0c0H
	DB	0e0H
	DB	0f4H
	DB	0a4H
	DB	053H
	DB	080H
	DB	0acH
	DB	01eH
	DB	025H
	DB	0e0H
	DB	02eH
	DB	05dH
	DB	037H
	DB	00H
	DB	014H
	DB	0dfH
	DB	07dH
	DB	01H
	DB	085H
	DB	02dH
	DB	0e1H
	DB	0dbH
	DB	026H
	DB	040H
	DB	092H
	DB	02eH
	DB	05bH
	DB	05dH
	DB	0d2H
	DB	0e6H
	DB	0d6H
	DB	013H
	DB	048H
	DB	04bH
	DB	0b7H
	DB	01bH
	DB	0ccH
	DB	065H
	DB	039H
	DB	071H
	DB	046H
	DB	0e6H
	DB	04fH
	DB	0fcH
	DB	0e7H
	DB	063H
	DB	0dcH
	DB	065H
	DB	0e3H
	DB	062H
	DB	092H
	DB	0c5H
	DB	0bdH
	DB	039H
	DB	085H
	DB	051H
	DB	067H
	DB	0e0H
	DB	0aeH
	DB	0b9H
	DB	048H
	DB	05H
	DB	0ccH
	DB	010H
	DB	0cfH
	DB	04H
	DB	02bH
	DB	09cH
	DB	069H
	DB	064H
	DB	08eH
	DB	02fH
	DB	0caH
	DB	05dH
	DB	02dH
	DB	0b2H
	DB	040H
	DB	089H
	DB	018H
	DB	025H
	DB	06cH
	DB	02bH
	DB	06aH
	DB	02aH
	DB	064H
	DB	0f0H
	DB	0faH
	DB	04bH
	DB	051H
	DB	029H
	DB	05H
	DB	019H
	DB	0adH
	DB	0d1H
	DB	029H
	DB	07eH
	DB	0d5H
	DB	0d3H
	DB	09aH
	DB	0bfH
	DB	0b7H
	DB	029H
	DB	06eH
	DB	083H
	DB	06H
	DB	01bH
	DB	036H
	DB	047H
	DB	025H
	DB	0ceH
	DB	0ebH
	DB	091H
	DB	079H
	DB	056H
	DB	0bbH
	DB	05dH
	DB	0c6H
	DB	037H
	DB	0a8H
	DB	098H
	DB	060H
	DB	0adH
	DB	0b1H
	DB	0fH
	DB	0feH
	DB	05bH
	DB	08dH
	DB	054H
	DB	02fH
	DB	0a7H
	DB	093H
	DB	0e7H
	DB	0d1H
	DB	03H
	DB	06bH
	DB	0d7H
	DB	09dH
	DB	021H
	DB	09eH
	DB	0c2H
	DB	06fH
	DB	08aH
	DB	054H
	DB	068H
	DB	0e1H
	DB	090H
	DB	0c5H
	DB	028H
	DB	047H
	DB	0edH
	DB	0c0H
	DB	027H
	DB	01bH
	DB	073H
	DB	0b5H
	DB	01aH
	DB	04eH
	DB	0c2H
	DB	0eeH
	DB	07dH
	DB	06bH
	DB	082H
	DB	0e4H
	DB	03dH
	DB	05H
	DB	0cfH
	DB	094H
	DB	0a3H
	DB	071H
	DB	034H
	DB	0e5H
	DB	0e0H
	DB	03eH
	DB	03bH
	DB	0c9H
	DB	020H
	DB	04bH
	DB	0fH
	DB	0c8H
	DB	012H
	DB	0fdH
	DB	089H
	DB	039H
	DB	019H
	DB	07cH
	DB	0efH
	DB	0b3H
	DB	04aH
	DB	0b2H
	DB	0a2H
	DB	0c8H
	DB	01eH
	DB	025H
	DB	02dH
	DB	0daH
	DB	02bH
	DB	0fdH
	DB	070H
	DB	04eH
	DB	06fH
	DB	024H
	DB	034H
	DB	0cfH
	DB	062H
	DB	0eeH
	DB	099H
	DB	03H
	DB	0b9H
	DB	029H
	DB	0cbH
	DB	0cbH
	DB	027H
	DB	0d4H
	DB	06H
	DB	0bfH
	DB	0d1H
	DB	0f5H
	DB	073H
	DB	01cH
	DB	028H
	DB	095H
	DB	064H
	DB	047H
	DB	03bH
	DB	092H
	DB	022H
	DB	066H
	DB	090H
	DB	092H
	DB	034H
	DB	07fH
	DB	036H
	DB	068H
	DB	04fH
	DB	099H
	DB	0d7H
	DB	069H
	DB	01cH
	DB	091H
	DB	092H
	DB	067H
	DB	05eH
	DB	039H
	DB	0bbH
	DB	0e3H
	DB	0f8H
	DB	08dH
	DB	059H
	DB	0ecH
	DB	02aH
	DB	081H
	DB	082H
	DB	08eH
	DB	0c8H
	DB	0bdH
	DB	021H
	DB	0ebH
	DB	0a3H
	DB	031H
	DB	0fdH
	DB	0d7H
	DB	0b0H
	DB	0b4H
	DB	0c0H
	DB	01H
	DB	0cdH
	DB	098H
	DB	0e9H
	DB	0e9H
	DB	0a9H
	DB	0fbH
	DB	051H
	DB	08H
	DB	035H
	DB	08cH
	DB	0ebH
	DB	02eH
	DB	01bH
	DB	0c4H
	DB	09aH
	DB	045H
	DB	047H
	DB	09dH
	DB	0d3H
	DB	010H
	DB	05bH
	DB	075H
	DB	07bH
	DB	07fH
	DB	0a6H
	DB	07aH
	DB	0d6H
	DB	058H
	DB	0aeH
	DB	017H
	DB	0d8H
	DB	07cH
	DB	0afH
	DB	042H
	DB	066H
	DB	05aH
	DB	03eH
	DB	037H
	DB	0e1H
	DB	073H
	DB	0c3H
	DB	04eH
	DB	021H
	DB	05eH
	DB	013H
	DB	0bcH
	DB	0a3H
	DB	05aH
	DB	05aH
	DB	0f7H
	DB	0eaH
	DB	035H
	DB	06dH
	DB	066H
	DB	034H
	DB	093H
	DB	060H
	DB	0cH
	DB	0ebH
	DB	0fH
	DB	023H
	DB	044H
	DB	08bH
	DB	053H
	DB	086H
	DB	071H
	DB	02dH
	DB	0c4H
	DB	0a8H
	DB	0fH
	DB	0b7H
	DB	0ecH
	DB	0dcH
	DB	0d9H
	DB	04bH
	DB	0f0H
	DB	016H
	DB	0efH
	DB	0caH
	DB	0efH
	DB	067H
	DB	0b5H
	DB	0a4H
	DB	0d4H
	DB	09cH
	DB	0d9H
	DB	068H
	DB	0fcH
	DB	065H
	DB	0d4H
	DB	0dH
	DB	08H
	DB	019H
	DB	018H
	DB	05bH
	DB	020H
	DB	08aH
	DB	088H
	DB	0e4H
	DB	0b2H
	DB	018H
	DB	09dH
	DB	09fH
	DB	074H
	DB	0f6H
	DB	0ebH
	DB	0e4H
	DB	0dH
	DB	05bH
	DB	0b0H
	DB	07cH
	DB	0c2H
	DB	0e5H
	DB	021H
	DB	017H
	DB	082H
	DB	0faH
	DB	0feH
	DB	00H
	DB	060H
	DB	0d3H
	DB	08cH
	DB	069H
	DB	06dH
	DB	0a4H
	DB	044H
	DB	08dH
	DB	02fH
	DB	04dH
	DB	0f1H
	DB	0e2H
	DB	0e4H
	DB	0fH
	DB	02H
	DB	059H
	DB	06H
	DB	0edH
	DB	03fH
	DB	092H
	DB	049H
	DB	06fH
	DB	0fH
	DB	08bH
	DB	055H
	DB	031H
	DB	0a2H
	DB	058H
	DB	0abH
	DB	022H
	DB	058H
	DB	0dH
	DB	0f5H
	DB	0e4H
	DB	0f5H
	DB	0e2H
	DB	089H
	DB	03aH
	DB	0efH
	DB	039H
	DB	07H
	DB	0e2H
	DB	09bH
	DB	0ebH
	DB	071H
	DB	09dH
	DB	046H
	DB	078H
	DB	0cH
	DB	05H
	DB	08aH
	DB	0d4H
	DB	074H
	DB	09aH
	DB	061H
	DB	0c9H
	DB	0cbH
	DB	083H
	DB	022H
	DB	077H
	DB	0a5H
	DB	07aH
	DB	04H
	DB	01cH
	DB	05fH
	DB	079H
	DB	0feH
	DB	069H
	DB	034H
	DB	06fH
	DB	022H
	DB	03bH
	DB	052H
	DB	0bdH
	DB	028H
	DB	043H
	DB	0daH
	DB	0edH
	DB	0bbH
	DB	0e6H
	DB	0f2H
	DB	047H
	DB	0bcH
	DB	067H
	DB	061H
	DB	09dH
	DB	0b0H
	DB	02dH
	DB	021H
	DB	0d3H
	DB	024H
	DB	0c7H
	DB	0cdH
	DB	0a8H
	DB	063H
	DB	0adH
	DB	022H
	DB	062H
	DB	017H
	DB	056H
	DB	051H
	DB	0b8H
	DB	012H
	DB	023H
	DB	076H
	DB	0b9H
	DB	067H
	DB	051H
	DB	0a7H
	DB	023H
	DB	0b8H
	DB	01aH
	DB	0e9H
	DB	0f4H
	DB	01H
	DB	04bH
	DB	092H
	DB	0b1H
	DB	0f7H
	DB	033H
	DB	05H
	DB	09cH
	DB	07aH
	DB	053H
	DB	045H
	DB	0ddH
	DB	01H
	DB	0e6H
	DB	0c0H
	DB	097H
	DB	03eH
	DB	012H
	DB	050H
	DB	0cfH
	DB	036H
	DB	046H
	DB	089H
	DB	09dH
	DB	017H
	DB	0b0H
	DB	040H
	DB	0cfH
	DB	0caH
	DB	0aaH
	DB	044H
	DB	04bH
	DB	0f5H
	DB	0d6H
	DB	0fcH
	DB	06eH
	DB	08aH
	DB	082H
	DB	0bH
	DB	05H
	DB	0d5H
	DB	050H
	DB	063H
	DB	0d6H
	DB	037H
	DB	024H
	DB	0edH
	DB	0f4H
	DB	0b5H
	DB	03eH
	DB	044H
	DB	06bH
	DB	084H
	DB	0cdH
	DB	09H
	DB	09bH
	DB	0fdH
	DB	0c9H
	DB	0ebH
	DB	048H
	DB	074H
	DB	030H
	DB	093H
	DB	0e9H
	DB	087H
	DB	091H
	DB	058H
	DB	012H
	DB	093H
	DB	0e2H
	DB	096H
	DB	069H
	DB	0b2H
	DB	0f9H
	DB	0bfH
	DB	06aH
	DB	09dH
	DB	0adH
	DB	0deH
	DB	054H
	DB	0ebH
	DB	024H
	DB	03fH
	DB	0efH
	DB	0f1H
	DB	049H
	DB	0bH
	DB	0f0H
	DB	092H
	DB	0f6H
	DB	039H
	DB	07H
	DB	028H
	DB	04dH
	DB	070H
	DB	02fH
	DB	05eH
	DB	049H
	DB	0c0H
	DB	0f1H
	DB	02cH
	DB	057H
	DB	05bH
	DB	0dfH
	DB	0d1H
	DB	01bH
	DB	04aH
	DB	0eeH
	DB	0c8H
	DB	029H
	DB	0c2H
	DB	034H
	DB	0ccH
	DB	03H
	DB	0a3H
	DB	0bfH
	DB	04cH
	DB	0aeH
	DB	030H
	DB	05eH
	DB	0a6H
	DB	0e8H
	DB	0e4H
	DB	04eH
	DB	036H
	DB	055H
	DB	0fcH
	DB	094H
	DB	09eH
	DB	0bdH
	DB	086H
	DB	0cbH
	DB	015H
	DB	061H
	DB	02bH
	DB	066H
	DB	07cH
	DB	0f4H
	DB	056H
	DB	0c4H
	DB	09dH
	DB	019H
	DB	078H
	DB	06bH
	DB	01cH
	DB	01cH
	DB	0aaH
	DB	0e7H
	DB	0cbH
	DB	0daH
	DB	046H
	DB	0f1H
	DB	043H
	DB	02bH
	DB	040H
	DB	0f9H
	DB	01H
	DB	03dH
	DB	08eH
	DB	01fH
	DB	07aH
	DB	095H
	DB	06aH
	DB	08fH
	DB	0f6H
	DB	095H
	DB	076H
	DB	0f3H
	DB	0aH
	DB	0ccH
	DB	038H
	DB	0a8H
	DB	065H
	DB	0b1H
	DB	014H
	DB	082H
	DB	0cdH
	DB	03eH
	DB	0e9H
	DB	019H
	DB	019H
	DB	0b0H
	DB	0bH
	DB	0dbH
	DB	05bH
	DB	0caH
	DB	0d5H
	DB	05cH
	DB	087H
	DB	0e4H
	DB	07cH
	DB	02H
	DB	07aH
	DB	066H
	DB	012H
	DB	0f0H
	DB	0fcH
	DB	088H
	DB	0e4H
	DB	07H
	DB	0d4H
	DB	01eH
	DB	02fH
	DB	03aH
	DB	04fH
	DB	0c2H
	DB	03cH
	DB	09cH
	DB	01H
	DB	0a6H
	DB	0b6H
	DB	099H
	DB	057H
	DB	0c1H
	DB	076H
	DB	032H
	DB	0dH
	DB	0cbH
	DB	0fH
	DB	094H
	DB	0b0H
	DB	0bH
	DB	017H
	DB	02bH
	DB	071H
	DB	0a8H
	DB	01dH
	DB	06eH
	DB	031H
	DB	081H
	DB	0f5H
	DB	085H
	DB	01fH
	DB	0a4H
	DB	03fH
	DB	06eH
	DB	068H
	DB	0fbH
	DB	0cH
	DB	069H
	DB	0a2H
	DB	0c2H
	DB	083H
	DB	079H
	DB	04H
	DB	0f9H
	DB	0abH
	DB	090H
	DB	045H
	DB	0baH
	DB	0a5H
	DB	0f6H
	DB	045H
	DB	0bcH
	DB	022H
	DB	0b7H
	DB	065H
	DB	0beH
	DB	026H
	DB	016H
	DB	0c0H
	DB	09bH
	DB	01bH
	DB	0dfH
	DB	041H
	DB	05aH
	DB	04fH
	DB	029H
	DB	056H
	DB	0daH
	DB	092H
	DB	078H
	DB	09dH
	DB	095H
	DB	071H
	DB	021H
	DB	08fH
	DB	09dH
	DB	0b2H
	DB	055H
	DB	0d7H
	DB	0d7H
	DB	04cH
	DB	01eH
	DB	014H
	DB	0edH
	DB	0d5H
	DB	079H
	DB	02dH
	DB	07bH
	DB	0fH
	DB	0edH
	DB	018H
	DB	02aH
	DB	0cdH
	DB	0d8H
	DB	04H
	DB	01dH
	DB	02H
	DB	0daH
	DB	0f7H
	DB	014H
	DB	053H
	DB	015H
	DB	0aaH
	DB	045H
	DB	0b6H
	DB	0b9H
	DB	0e2H
	DB	0e8H
	DB	0fH
	DB	03aH
	DB	0c0H
	DB	05bH
	DB	058H
	DB	0d4H
	DB	0c9H
	DB	02eH
	DB	0cdH
	DB	0f6H
	DB	0aaH
	DB	05cH
	DB	0e4H
	DB	042H
	DB	06H
	DB	0b2H
	DB	09aH
	DB	0aH
	DB	050H
	DB	09cH
	DB	0e4H
	DB	0c7H
	DB	0b0H
	DB	0b8H
	DB	05dH
	DB	05bH
	DB	07dH
	DB	014H
	DB	095H
	DB	060H
	DB	0fcH
	DB	0a4H
	DB	09aH
	DB	03dH
	DB	080H
	DB	073H
	DB	091H
	DB	04aH
	DB	0a1H
	DB	0deH
	DB	041H
	DB	0cbH
	DB	03bH
	DB	026H
	DB	08dH
	DB	0c0H
	DB	0d8H
	DB	028H
	DB	0caH
	DB	0a8H
	DB	044H
	DB	030H
	DB	071H
	DB	0f5H
	DB	068H
	DB	0ceH
	DB	0d0H
	DB	0e5H
	DB	062H
	DB	066H
	DB	0c5H
	DB	0deH
	DB	08bH
	DB	0dfH
	DB	01cH
	DB	0cH
	DB	053H
	DB	02dH
	DB	056H
	DB	075H
	DB	0cH
	DB	097H
	DB	0c0H
	DB	0c6H
	DB	03dH
	DB	04fH
	DB	087H
	DB	016H
	DB	0f6H
	DB	0d1H
	DB	03fH
	DB	03cH
	DB	02H
	DB	0b0H
	DB	032H
	DB	06aH
	DB	0feH
	DB	082H
	DB	0cfH
	DB	061H
	DB	069H
	DB	095H
	DB	040H
	DB	0f4H
	DB	076H
	DB	0dbH
	DB	01H
	DB	049H
	DB	09H
	DB	057H
	DB	0beH
	DB	094H
	DB	06eH
	DB	080H
	DB	05bH
	DB	0abH
	DB	0cfH
	DB	062H
	DB	041H
	DB	046H
	DB	034H
	DB	080H
	DB	082H
	DB	0b6H
	DB	0b0H
	DB	0b4H
	DB	0a0H
	DB	0afH
	DB	0b7H
	DB	071H
	DB	090H
	DB	021H
	DB	086H
	DB	050H
	DB	016H
	DB	0fcH
	DB	02cH
	DB	096H
	DB	047H
	DB	035H
	DB	06dH
	DB	085H
	DB	049H
	DB	0dbH
	DB	06H
	DB	0a4H
	DB	07H
	DB	055H
	DB	086H
	DB	048H
	DB	09cH
	DB	0bbH
	DB	049H
	DB	01fH
	DB	072H
	DB	0f9H
	DB	054H
	DB	013H
	DB	02aH
	DB	0cH
	DB	04H
	DB	0baH
	DB	0acH
	DB	08bH
	DB	08bH
	DB	042H
	DB	08H
	DB	0b7H
	DB	0d8H
	DB	0ceH
	DB	06dH
	DB	046H
	DB	055H
	DB	0b6H
	DB	0a1H
	DB	0daH
	DB	0dbH
	DB	0a8H
	DB	031H
	DB	062H
	DB	070H
	DB	04dH
	DB	09dH
	DB	0b9H
	DB	0ebH
	DB	010H
	DB	034H
	DB	040H
	DB	0a3H
	DB	05eH
	DB	0cbH
	DB	027H
	DB	098H
	DB	0f7H
	DB	0b2H
	DB	024H
	DB	03aH
	DB	0bbH
	DB	05cH
	DB	092H
	DB	08aH
	DB	0c9H
	DB	058H
	DB	05fH
	DB	00H
	DB	0f9H
	DB	03bH
	DB	0dbH
	DB	022H
	DB	06cH
	DB	0beH
	DB	093H
	DB	039H
	DB	05cH
	DB	0ccH
	DB	025H
	DB	0ecH
	DB	01H
	DB	0e5H
	DB	090H
	DB	0deH
	DB	031H
	DB	037H
	DB	0f7H
	DB	02aH
	DB	0eaH
	DB	09bH
	DB	0e3H
	DB	026H
	DB	0f7H
	DB	0f6H
	DB	0b0H
	DB	041H
	DB	04fH
	DB	011H
	DB	0c1H
	DB	04aH
	DB	0cbH
	DB	09dH
	DB	0ebH
	DB	038H
	DB	0dbH
	DB	0feH
	DB	0f0H
	DB	039H
	DB	04cH
	DB	016H
	DB	026H
	DB	04dH
	DB	07bH
	DB	036H
	DB	0acH
	DB	02dH
	DB	06dH
	DB	024H
	DB	0d6H
	DB	0d7H
	DB	03fH
	DB	0baH
	DB	0fdH
	DB	0b7H
	DB	0b1H
	DB	02fH
	DB	0f8H
	DB	081H
	DB	0bfH
	DB	0baH
	DB	04bH
	DB	08bH
	DB	0d8H
	DB	037H
	DB	043H
	DB	0b4H
	DB	037H
	DB	034H
	DB	06dH
	DB	083H
	DB	0c9H
	DB	093H
	DB	050H
	DB	046H
	DB	049H
	DB	07cH
	DB	073H
	DB	0b7H
	DB	020H
	DB	04aH
	DB	08fH
	DB	060H
	DB	084H
	DB	0eH
	DB	018H
	DB	0b6H
	DB	03dH
	DB	011H
	DB	038H
	DB	0fcH
	DB	04cH
	DB	083H
	DB	08H
	DB	0a4H
	DB	03aH
	DB	04bH
	DB	0d8H
	DB	0f0H
	DB	07fH
	DB	047H
	DB	0f3H
	DB	0c8H
	DB	0daH
	DB	045H
	DB	08eH
	DB	025H
	DB	041H
	DB	081H
	DB	05cH
	DB	062H
	DB	04bH
	DB	06bH
	DB	0c2H
	DB	0d0H
	DB	079H
	DB	0daH
	DB	07H
	DB	036H
	DB	06bH
	DB	03fH
	DB	0b2H
	DB	037H
	DB	042H
	DB	0baH
	DB	05bH
	DB	07cH
	DB	085H
	DB	035H
	DB	06eH
	DB	084H
	DB	07cH
	DB	062H
	DB	04eH
	DB	0d6H
	DB	027H
	DB	0dcH
	DB	07bH
	DB	069H
	DB	05fH
	DB	0d7H
	DB	04bH
	DB	0aaH
	DB	0c3H
	DB	08dH
	DB	0faH
	DB	0bcH
	DB	0e7H
	DB	02H
	DB	0f3H
	DB	0d2H
	DB	0c0H
	DB	026H
	DB	0bH
	DB	03H
	DB	061H
	DB	066H
	DB	080H
	DB	0e6H
	DB	01bH
	DB	0eeH
	DB	06cH
	DB	097H
	DB	0d0H
	DB	0baH
	DB	06fH
	DB	0f8H
	DB	017H
	DB	06aH
	DB	0e1H
	DB	0f5H
	DB	043H
	DB	02dH
	DB	0a1H
	DB	07H
	DB	03aH
	DB	01cH
	DB	043H
	DB	022H
	DB	01fH
	DB	037H
	DB	0f4H
	DB	05fH
	DB	0ddH
	DB	07fH
	DB	063H
	DB	03fH
	DB	066H
	DB	0e3H
	DB	026H
	DB	081H
	DB	052H
	DB	092H
	DB	099H
	DB	023H
	DB	0ccH
	DB	088H
	DB	09bH
	DB	0e4H
	DB	0f2H
	DB	07dH
	DB	0daH
	DB	0b5H
	DB	02aH
	DB	0fbH
	DB	0bcH
	DB	064H
	DB	019H
	DB	080H
	DB	06H
	DB	0b7H
	DB	0b7H
	DB	0fbH
	DB	017H
	DB	015H
	DB	0faH
	DB	07aH
	DB	054H
	DB	0e0H
	DB	0ddH
	DB	07bH
	DB	063H
	DB	0afH
	DB	08dH
	DB	07cH
	DB	053H
	DB	05bH
	DB	05H
	DB	0eeH
	DB	040H
	DB	0f7H
	DB	0ecH
	DB	09aH
	DB	0aeH
	DB	017H
	DB	017H
	DB	0eaH
	DB	0fbH
	DB	030H
	DB	06bH
	DB	02H
	DB	067H
	DB	0a3H
	DB	07dH
	DB	07eH
	DB	038H
	DB	079H
	DB	079H
	DB	08dH
	DB	05aH
	DB	0d6H
	DB	09H
	DB	03dH
	DB	07H
	DB	096H
	DB	0b9H
	DB	0d9H
	DB	071H
	DB	03eH
	DB	048H
	DB	031H
	DB	0b6H
	DB	035H
	DB	04cH
	DB	065H
	DB	0ccH
	DB	063H
	DB	0cfH
	DB	0c8H
	DB	093H
	DB	0bbH
	DB	04aH
	DB	0faH
	DB	0deH
	DB	0c8H
	DB	0f8H
	DB	017H
	DB	0c1H
	DB	0f1H
	DB	024H
	DB	09bH
	DB	049H
	DB	02dH
	DB	059H
	DB	050H
	DB	044H
	DB	092H
	DB	02aH
	DB	035H
	DB	0d1H
	DB	072H
	DB	067H
	DB	088H
	DB	028H
	DB	0b3H
	DB	06dH
	DB	074H
	DB	017H
	DB	0bcH
	DB	0bcH
	DB	02aH
	DB	0f7H
	DB	07H
	DB	0a4H
	DB	056H
	DB	04fH
	DB	01dH
	DB	06eH
	DB	090H
	DB	010H
	DB	012H
	DB	0acH
	DB	059H
	DB	0bfH
	DB	06H
	DB	0a9H
	DB	083H
	DB	098H
	DB	053H
	DB	0b8H
	DB	0e9H
	DB	045H
	DB	09fH
	DB	072H
	DB	06dH
	DB	053H
	DB	05fH
	DB	0e1H
	DB	0e9H
	DB	09cH
	DB	01eH
	DB	093H
	DB	094H
	DB	026H
	DB	038H
	DB	0ebH
	DB	0f4H
	DB	056H
	DB	0d9H
	DB	086H
	DB	0e5H
	DB	0ebH
	DB	033H
	DB	03fH
	DB	0abH
	DB	0b8H
	DB	068H
	DB	02fH
	DB	0d0H
	DB	0bbH
	DB	0e8H
	DB	0bbH
	DB	080H
	DB	088H
	DB	0adH
	DB	06eH
	DB	05cH
	DB	0eH
	DB	050H
	DB	0c5H
	DB	02aH
	DB	0eeH
	DB	05aH
	DB	0beH
	DB	015H
	DB	012H
	DB	0aaH
	DB	0aH
	DB	0e7H
	DB	04H
	DB	010H
	DB	0cdH
	DB	0f0H
	DB	0c2H
	DB	0dH
	DB	01cH
	DB	07bH
	DB	075H
	DB	04cH
	DB	04dH
	DB	0b0H
	DB	0b4H
	DB	088H
	DB	032H
	DB	0bcH
	DB	036H
	DB	0a0H
	DB	019H
	DB	0c3H
	DB	070H
	DB	05fH
	DB	0edH
	DB	05fH
	DB	039H
	DB	02dH
	DB	0f3H
	DB	04bH
	DB	0d7H
	DB	07eH
	DB	034H
	DB	05cH
	DB	0eH
	DB	02H
	DB	04dH
	DB	0d1H
	DB	010H
	DB	069H
	DB	0ccH
	DB	05H
	DB	035H
	DB	099H
	DB	036H
	DB	0e9H
	DB	0a1H
	DB	0e7H
	DB	0a7H
	DB	0d8H
	DB	08H
	DB	040H
	DB	01cH
	DB	078H
	DB	09fH
	DB	0bH
	DB	058H
	DB	0d8H
	DB	038H
	DB	0cbH
	DB	0a4H
	DB	08fH
	DB	04aH
	DB	0d8H
	DB	06bH
	DB	0d8H
	DB	0daH
	DB	0b8H
	DB	0aaH
	DB	06aH
	DB	0a2H
	DB	0f6H
	DB	0efH
	DB	057H
	DB	011H
	DB	0a5H
	DB	042H
	DB	0b2H
	DB	08dH
	DB	069H
	DB	08bH
	DB	095H
	DB	0a9H
	DB	028H
	DB	08dH
	DB	0c9H
	DB	0b2H
	DB	065H
	DB	022H
	DB	06aH
	DB	032H
	DB	0c6H
	DB	079H
	DB	0fbH
	DB	01fH
	DB	0e5H
	DB	0d4H
	DB	07aH
	DB	01eH
	DB	0feH
	DB	0e4H
	DB	0c0H
	DB	076H
	DB	054H
	DB	019H
	DB	087H
	DB	0f9H
	DB	0daH
	DB	03aH
	DB	087H
	DB	044H
	DB	046H
	DB	09cH
	DB	06dH
	DB	0edH
	DB	02bH
	DB	037H
	DB	0a0H
	DB	090H
	DB	0d9H
	DB	0bH
	DB	042H
	DB	020H
	DB	084H
	DB	03fH
	DB	040H
	DB	06aH
	DB	093H
	DB	0baH
	DB	089H
	DB	093H
	DB	01fH
	DB	0c9H
	DB	0aH
	DB	074H
	DB	062H
	DB	011H
	DB	0edH
	DB	0bcH
	DB	0caH
	DB	0f5H
	DB	01H
	DB	090H
	DB	092H
	DB	0eeH
	DB	07eH
	DB	03dH
	DB	0a5H
	DB	01fH
	DB	0ceH
	DB	07fH
	DB	02aH
	DB	011H
	DB	0a0H
	DB	02fH
	DB	0cfH
	DB	0e0H
	DB	019H
	DB	064H
	DB	01bH
	DB	0a2H
	DB	0f7H
	DB	03aH
	DB	0ecH
	DB	081H
	DB	0aeH
	DB	0ceH
	DB	092H
	DB	01dH
	DB	08cH
	DB	0dcH
	DB	013H
	DB	0dH
	DB	06eH
	DB	025H
	DB	0fbH
	DB	0ecH
	DB	063H
	DB	0a2H
	DB	0dH
	DB	0b1H
	DB	0a1H
	DB	0b6H
	DB	0c2H
	DB	042H
	DB	065H
	DB	093H
	DB	0a2H
	DB	07fH
	DB	077H
	DB	0bdH
	DB	0a1H
	DB	06fH
	DB	078H
	DB	0eH
	DB	070H
	DB	0a6H
	DB	0ddH
	DB	082H
	DB	0c3H
	DB	06aH
	DB	05fH
	DB	056H
	DB	077H
	DB	0cdH
	DB	07cH
	DB	0f3H
	DB	03bH
	DB	0dfH
	DB	096H
	DB	0c7H
	DB	091H
	DB	038H
	DB	07eH
	DB	0d3H
	DB	0faH
	DB	064H
	DB	0e6H
	DB	01dH
	DB	0e3H
	DB	05eH
	DB	05bH
	DB	085H
	DB	04dH
	DB	0d3H
	DB	094H
	DB	03dH
	DB	07aH
	DB	0f1H
	DB	0bfH
	DB	0beH
	DB	05cH
	DB	09fH
	DB	015H
	DB	053H
	DB	0ecH
	DB	011H
	DB	047H
	DB	028H
	DB	0f0H
	DB	05dH
	DB	06fH
	DB	02H
	DB	096H
	DB	0eeH
	DB	056H
	DB	011H
	DB	0d2H
	DB	0bcH
	DB	0adH
	DB	0b6H
	DB	09bH
	DB	088H
	DB	0bbH
	DB	0e8H
	DB	05cH
	DB	0cfH
	DB	0a6H
	DB	057H
	DB	0c1H
	DB	0e5H
	DB	095H
	DB	09dH
	DB	085H
	DB	0aaH
	DB	0f1H
	DB	0f2H
	DB	0bcH
	DB	0b8H
	DB	09aH
	DB	02dH
	DB	017H
	DB	0bH
	DB	0afH
	DB	02dH
	DB	079H
	DB	085H
	DB	0bdH
	DB	04cH
	DB	042H
	DB	06bH
	DB	082H
	DB	0ddH
	DB	0f4H
	DB	03eH
	DB	047H
	DB	0d0H
	DB	08eH
	DB	0edH
	DB	0a7H
	DB	050H
	DB	0d3H
	DB	03dH
	DB	06eH
	DB	0d9H
	DB	0e8H
	DB	0dfH
	DB	0ccH
	DB	025H
	DB	098H
	DB	0e6H
	DB	0d1H
	DB	0afH
	DB	0f1H
	DB	01H
	DB	05cH
	DB	06bH
	DB	06H
	DB	01aH
	DB	037H
	DB	049H
	DB	086H
	DB	0b9H
	DB	0a6H
	DB	0faH
	DB	0f8H
	DB	06dH
	DB	0cbH
	DB	087H
	DB	05bH
	DB	074H
	DB	057H
	DB	0afH
	DB	0b1H
	DB	0c5H
	DB	09H
	DB	01aH
	DB	0a5H
	DB	0d5H
	DB	0beH
	DB	0beH
	DB	0bcH
	DB	011H
	DB	06eH
	DB	02fH
	DB	091H
	DB	04bH
	DB	09aH
	DB	098H
	DB	065H
	DB	0d2H
	DB	061H
	DB	06bH
	DB	08cH
	DB	08H
	DB	066H
	DB	05H
	DB	076H
	DB	0b2H
	DB	0cH
	DB	051H
	DB	0a6H
	DB	064H
	DB	080H
	DB	058H
	DB	0a9H
	DB	089H
	DB	0f2H
	DB	0cfH
	DB	0deH
	DB	031H
	DB	08eH
	DB	09cH
	DB	0c1H
	DB	07cH
	DB	04bH
	DB	054H
	DB	0c7H
	DB	065H
	DB	06cH
	DB	02eH
	DB	0b7H
	DB	0cdH
	DB	019H
	DB	045H
	DB	055H
	DB	080H
	DB	0c9H
	DB	0cbH
	DB	0b2H
	DB	0d6H
	DB	09dH
	DB	059H
	DB	0baH
	DB	01eH
	DB	031H
	DB	064H
	DB	0a8H
	DB	0a3H
	DB	034H
	DB	087H
	DB	0d5H
	DB	042H
	DB	0a3H
	DB	017H
	DB	0bfH
	DB	0eeH
	DB	06bH
	DB	07H
	DB	055H
	DB	057H
	DB	0b4H
	DB	0dH
	DB	025H
	DB	0ceH
	DB	0d1H
	DB	07bH
	DB	04fH
	DB	01cH
	DB	0c6H
	DB	081H
	DB	0f2H
	DB	064H
	DB	0daH
	DB	02dH
	DB	03H
	DB	0cH
	DB	091H
	DB	0abH
	DB	0b0H
	DB	046H
	DB	033H
	DB	06H
	DB	08H
	DB	057H
	DB	01dH
	DB	047H
	DB	046H
	DB	09H
	DB	04fH
	DB	01bH
	DB	060H
	DB	04H
	DB	0a8H
	DB	086H
	DB	0d2H
	DB	0f9H
	DB	081H
	DB	0a1H
	DB	016H
	DB	0c7H
	DB	023H
	DB	09H
	DB	0acH
	DB	0fdH
	DB	0b5H
	DB	0afH
	DB	08aH
	DB	0c7H
	DB	05bH
	DB	03bH
	DB	08dH
	DB	0eH
	DB	041H
	DB	095H
	DB	0e4H
	DB	0ddH
	DB	0ddH
	DB	02cH
	DB	0e6H
	DB	02dH
	DB	0c6H
	DB	048H
	DB	0b0H
	DB	0eeH
	DB	04eH
	DB	04H
	DB	0e9H
	DB	04fH
	DB	0a5H
	DB	00H
	DB	017H
	DB	049H
	DB	089H
	DB	0c3H
	DB	0c6H
	DB	03fH
	DB	0f2H
	DB	051H
	DB	07H
	DB	0cdH
	DB	0cH
	DB	094H
	DB	0dcH
	DB	0ccH
	DB	0aaH
	DB	041H
	DB	0abH
	DB	088H
	DB	0ecH
	DB	092H
	DB	035H
	DB	0b4H
	DB	0daH
	DB	065H
	DB	0a3H
	DB	0a8H
	DB	069H
	DB	08dH
	DB	0f7H
	DB	08fH
	DB	0eH
	DB	010H
	DB	0d8H
	DB	097H
	DB	053H
	DB	01fH
	DB	0d6H
	DB	047H
	DB	071H
	DB	05eH
	DB	015H
	DB	0fcH
	DB	072H
	DB	071H
	DB	04aH
	DB	01dH
	DB	033H
	DB	0f5H
	DB	0a5H
	DB	020H
	DB	08H
	DB	05aH
	DB	0d4H
	DB	063H
	DB	0c0H
	DB	0f8H
	DB	0cH
	DB	0a9H
	DB	06H
	DB	05H
	DB	039H
	DB	014H
	DB	094H
	DB	012H
	DB	0abH
	DB	067H
	DB	032H
	DB	03H
	DB	0aeH
	DB	023H
	DB	061H
	DB	044H
	DB	09fH
	DB	0d3H
	DB	035H
	DB	0e9H
	DB	071H
	DB	068H
	DB	05fH
	DB	017H
	DB	089H
	DB	0e7H
	DB	0f1H
	DB	0ddH
	DB	04bH
	DB	032H
	DB	056H
	DB	0d6H
	DB	0dbH
	DB	05dH
	DB	0dbH
	DB	016H
	DB	071H
	DB	0efH
	DB	0a7H
	DB	09dH
	DB	058H
	DB	059H
	DB	0a0H
	DB	086H
	DB	0fbH
	DB	081H
	DB	04aH
	DB	09cH
	DB	055H
	DB	00H
	DB	06H
	DB	046H
	DB	0e7H
	DB	0e5H
	DB	05eH
	DB	0f0H
	DB	0cdH
	DB	0cfH
	DB	0cfH
	DB	019H
	DB	081H
	DB	026H
	DB	0efH
	DB	05dH
	DB	083H
	DB	04cH
	DB	0f2H
	DB	075H
	DB	0bbH
	DB	09bH
	DB	013H
	DB	014H
	DB	074H
	DB	0b3H
	DB	01bH
	DB	071H
	DB	0b4H
	DB	065H
	DB	08dH
	DB	089H
	DB	0e4H
	DB	013H
	DB	0d0H
	DB	0cdH
	DB	0f8H
	DB	0aeH
	DB	0beH
	DB	0c6H
	DB	07eH
	DB	08eH
	DB	05fH
	DB	00H
	DB	035H
	DB	0cfH
	DB	0dcH
	DB	038H
	DB	09bH
	DB	0d0H
	DB	02dH
	DB	057H
	DB	0ebH
	DB	040H
	DB	0ebH
	DB	060H
	DB	073H
	DB	07H
	DB	0d1H
	DB	028H
	DB	0ebH
	DB	0deH
	DB	0b2H
	DB	0d1H
	DB	0f2H
	DB	083H
	DB	09fH
	DB	0ebH
	DB	0b1H
	DB	0ddH
	DB	033H
	DB	030H
	DB	0ecH
	DB	092H
	DB	0afH
	DB	022H
	DB	0e1H
	DB	08cH
	DB	0d9H
	DB	07dH
	DB	0dcH
	DB	08H
	DB	0d5H
	DB	0c8H
	DB	0c7H
	DB	0c1H
	DB	0a9H
	DB	0bbH
	DB	048H
	DB	07bH
	DB	0e3H
	DB	034H
	DB	0daH
	DB	016H
	DB	085H
	DB	0cdH
	DB	019H
	DB	0a4H
	DB	039H
	DB	0caH
	DB	083H
	DB	06cH
	DB	07aH
	DB	070H
	DB	07fH
	DB	02aH
	DB	012H
	DB	061H
	DB	037H
	DB	0ebH
	DB	0dfH
	DB	014H
	DB	073H
	DB	035H
	DB	05dH
	DB	03cH
	DB	0f6H
	DB	07H
	DB	0f7H
	DB	0beH
	DB	02H
	DB	05bH
	DB	072H
	DB	0dcH
	DB	0f1H
	DB	0f8H
	DB	02aH
	DB	0bH
	DB	01dH
	DB	064H
	DB	0d6H
	DB	0a0H
	DB	0d0H
	DB	0d0H
	DB	011H
	DB	050H
	DB	0fbH
	DB	023H
	DB	032H
	DB	0b2H
	DB	08fH
	DB	012H
	DB	046H
	DB	03H
	DB	047H
	DB	0a3H
	DB	0beH
	DB	0bdH
	DB	02aH
	DB	036H
	DB	07cH
	DB	02dH
	DB	012H
	DB	06eH
	DB	089H
	DB	04H
	DB	0e6H
	DB	0b4H
	DB	0fH
	DB	05H
	DB	098H
	DB	065H
	DB	0a5H
	DB	069H
	DB	037H
	DB	037H
	DB	03aH
	DB	0b2H
	DB	0d9H
	DB	06cH
	DB	065H
	DB	0e8H
	DB	0fdH
	DB	0abH
	DB	0ecH
	DB	0c4H
	DB	0cfH
	DB	02bH
	DB	082H
	DB	0f9H
	DB	0e1H
	DB	07eH
	DB	0a6H
	DB	0f3H
	DB	06cH
	DB	0b0H
	DB	0f7H
	DB	054H
	DB	0e4H
	DB	07H
	DB	059H
	DB	07dH
	DB	0ecH
	DB	07eH
	DB	066H
	DB	024H
	DB	035H
	DB	0a0H
	DB	056H
	DB	010H
	DB	08cH
	DB	03bH
	DB	0f8H
	DB	0aH
	DB	066H
	DB	065H
	DB	0ceH
	DB	036H
	DB	011H
	DB	0d0H
	DB	0b0H
	DB	0f2H
	DB	0ceH
	DB	0d6H
	DB	0e6H
	DB	03cH
	DB	087H
	DB	0deH
	DB	010H
	DB	06cH
	DB	065H
	DB	069H
	DB	069H
	DB	052H
	DB	067H
	DB	0d0H
	DB	0f5H
	DB	09dH
	DB	0f0H
	DB	0cbH
	DB	0adH
	DB	07eH
	DB	07H
	DB	026H
	DB	08H
	DB	06eH
	DB	08cH
	DB	057H
	DB	0a4H
	DB	09dH
	DB	0a7H
	DB	0d4H
	DB	010H
	DB	077H
	DB	02cH
	DB	0f6H
	DB	033H
	DB	0b3H
	DB	055H
	DB	043H
	DB	0a0H
	DB	0baH
	DB	02cH
	DB	089H
	DB	08dH
	DB	093H
	DB	05aH
	DB	083H
	DB	031H
	DB	04cH
	DB	0cfH
	DB	05eH
	DB	04aH
	DB	0d6H
	DB	085H
	DB	052H
	DB	045H
	DB	091H
	DB	029H
	DB	06aH
	DB	0aeH
	DB	0d1H
	DB	03fH
	DB	0beH
	DB	049H
	DB	0eaH
	DB	0b5H
	DB	0fbH
	DB	09fH
	DB	0bH
	DB	03fH
	DB	0bfH
	DB	045H
	DB	06bH
	DB	049H
	DB	0d2H
	DB	07eH
	DB	024H
	DB	0d6H
	DB	030H
	DB	070H
	DB	0a6H
	DB	08eH
	DB	03aH
	DB	07dH
	DB	093H
	DB	08cH
	DB	043H
	DB	0a4H
	DB	0b6H
	DB	0adH
	DB	053H
	DB	088H
	DB	06cH
	DB	012H
	DB	051H
	DB	058H
	DB	047H
	DB	04dH
	DB	077H
	DB	0d1H
	DB	0cH
	DB	0b6H
	DB	018H
	DB	0f6H
	DB	07fH
	DB	0eaH
	DB	075H
	DB	0a3H
	DB	041H
	DB	0a5H
	DB	093H
	DB	0e7H
	DB	0b4H
	DB	0cdH
	DB	0e5H
	DB	048H
	DB	0daH
	DB	029H
	DB	0edH
	DB	091H
	DB	056H
	DB	0c0H
	DB	099H
	DB	042H
	DB	0d3H
	DB	06aH
	DB	09aH
	DB	09aH
	DB	0b7H
	DB	091H
	DB	06dH
	DB	043H
	DB	048H
	DB	085H
	DB	03aH
	DB	0c8H
	DB	0efH
	DB	02fH
	DB	0ebH
	DB	0b1H
	DB	0d5H
	DB	080H
	DB	019H
	DB	0aH
	DB	04eH
	DB	07eH
	DB	0d1H
	DB	029H
	DB	027H
	DB	03fH
	DB	03aH
	DB	07dH
	DB	01H
	DB	053H
	DB	0c0H
	DB	054H
	DB	0bdH
	DB	0daH
	DB	0eeH
	DB	0f4H
	DB	06dH
	DB	0dbH
	DB	038H
	DB	035H
	DB	0e0H
	DB	0f1H
	DB	07dH
	DB	051H
	DB	022H
	DB	06aH
	DB	03H
	DB	077H
	DB	06aH
	DB	01cH
	DB	01H
	DB	038H
	DB	09bH
	DB	0d2H
	DB	062H
	DB	0c2H
	DB	013H
	DB	01cH
	DB	0c0H
	DB	093H
	DB	070H
	DB	01H
	DB	0e7H
	DB	0adH
	DB	0dbH
	DB	056H
	DB	0a3H
	DB	0c8H
	DB	033H
	DB	05bH
	DB	07eH
	DB	014H
	DB	0cdH
	DB	0fbH
	DB	0e4H
	DB	0efH
	DB	0e5H
	DB	0e7H
	DB	0e6H
	DB	050H
	DB	084H
	DB	0e7H
	DB	089H
	DB	09fH
	DB	0baH
	DB	06bH
	DB	0e1H
	DB	04dH
	DB	087H
	DB	0a2H
	DB	0e0H
	DB	077H
	DB	0a3H
	DB	048H
	DB	026H
	DB	00H
	DB	09fH
	DB	049H
	DB	048H
	DB	052H
	DB	024H
	DB	0c6H
	DB	066H
	DB	0f1H
	DB	0c3H
	DB	0cbH
	DB	061H
	DB	0a9H
	DB	0b3H
	DB	048H
	DB	07aH
	DB	0b7H
	DB	0afH
	DB	04H
	DB	057H
	DB	06bH
	DB	06fH
	DB	03aH
	DB	038H
	DB	076H
	DB	05cH
	DB	01aH
	DB	0eeH
	DB	080H
	DB	062H
	DB	094H
	DB	080H
	DB	081H
	DB	0ddH
	DB	0c8H
	DB	0d3H
	DB	081H
	DB	010H
	DB	0baH
	DB	074H
	DB	053H
	DB	086H
	DB	0d5H
	DB	0fcH
	DB	03aH
	DB	09eH
	DB	0f6H
	DB	072H
	DB	04eH
	DB	0faH
	DB	0c9H
	DB	039H
	DB	0e9H
	DB	083H
	DB	0f1H
	DB	061H
	DB	0e0H
	DB	08bH
	DB	0cfH
	DB	061H
	DB	0edH
	DB	064H
	DB	0e1H
	DB	0efH
	DB	0c1H
	DB	02aH
	DB	0c3H
	DB	043H
	DB	0b9H
	DB	0fdH
	DB	037H
	DB	0dH
	DB	084H
	DB	08dH
	DB	0bH
	DB	03fH
	DB	02cH
	DB	02H
	DB	0b1H
	DB	0f9H
	DB	07dH
	DB	07bH
	DB	0b3H
	DB	067H
	DB	07fH
	DB	0a5H
	DB	048H
	DB	060H
	DB	031H
	DB	018H
	DB	0c1H
	DB	09eH
	DB	0fbH
	DB	023H
	DB	08eH
	DB	0bdH
	DB	0ccH
	DB	0d2H
	DB	081H
	DB	087H
	DB	0d0H
	DB	0b8H
	DB	094H
	DB	056H
	DB	046H
	DB	01fH
	DB	095H
	DB	072H
	DB	0a1H
	DB	0c6H
	DB	0ecH
	DB	01fH
	DB	0c1H
	DB	0a0H
	DB	06H
	DB	041H
	DB	046H
	DB	04fH
	DB	0a1H
	DB	077H
	DB	0e6H
	DB	0e2H
	DB	016H
	DB	0e3H
	DB	06H
	DB	025H
	DB	0a1H
	DB	0d3H
	DB	0f7H
	DB	023H
	DB	0daH
	DB	048H
	DB	0dcH
	DB	06fH
	DB	09eH
	DB	0a2H
	DB	0fH
	DB	0b3H
	DB	016H
	DB	0b0H
	DB	0f9H
	DB	082H
	DB	04fH
	DB	0bcH
	DB	023H
	DB	055H
	DB	0fdH
	DB	069H
	DB	024H
	DB	020H
	DB	060H
	DB	0cH
	DB	03H
	DB	0f5H
	DB	06fH
	DB	089H
	DB	01bH
	DB	011H
	DB	0dcH
	DB	092H
	DB	0b4H
	DB	0b7H
	DB	0dbH
	DB	011H
	DB	0a6H
	DB	0f9H
	DB	0b3H
	DB	0b5H
	DB	0aeH
	DB	049H
	DB	066H
	DB	0a8H
	DB	0cbH
	DB	0b5H
	DB	0e4H
	DB	0eeH
	DB	08bH
	DB	0e3H
	DB	0d7H
	DB	0afH
	DB	083H
	DB	038H
	DB	03bH
	DB	086H
	DB	0aeH
	DB	0aaH
	DB	08fH
	DB	0c9H
	DB	03cH
	DB	06cH
	DB	0dcH
	DB	070H
	DB	024H
	DB	0b8H
	DB	081H
	DB	0cbH
	DB	0b2H
	DB	0b4H
	DB	01H
	DB	0e0H
	DB	0feH
	DB	068H
	DB	08aH
	DB	04aH
	DB	09dH
	DB	0eeH
	DB	0b9H
	DB	0a8H
	DB	0d2H
	DB	091H
	DB	0d8H
	DB	0d5H
	DB	04aH
	DB	014H
	DB	0dcH
	DB	0f8H
	DB	03fH
	DB	06cH
	DB	042H
	DB	07bH
	DB	0d9H
	DB	01fH
	DB	06bH
	DB	07dH
	DB	0d7H
	DB	0ecH
	DB	0c8H
	DB	0bH
	DB	021H
	DB	0caH
	DB	0ebH
	DB	020H
	DB	0b2H
	DB	0f5H
	DB	0eaH
	DB	0cfH
	DB	0e5H
	DB	0a4H
	DB	079H
	DB	038H
	DB	0b5H
	DB	052H
	DB	0fH
	DB	07fH
	DB	0e5H
	DB	06bH
	DB	0f7H
	DB	025H
	DB	0d7H
	DB	03bH
	DB	020H
	DB	031H
	DB	0d9H
	DB	08bH
	DB	0afH
	DB	032H
	DB	0f7H
	DB	0f7H
	DB	03dH
	DB	01aH
	DB	042H
	DB	0a8H
	DB	0b9H
	DB	0f4H
	DB	09fH
	DB	0a4H
	DB	045H
	DB	05H
	DB	0c8H
	DB	0beH
	DB	03dH
	DB	0feH
	DB	090H
	DB	0cbH
	DB	07eH
	DB	076H
	DB	037H
	DB	0f6H
	DB	01cH
	DB	08fH
	DB	0b1H
	DB	03cH
	DB	0c0H
	DB	08bH
	DB	048H
	DB	070H
	DB	0bdH
	DB	0bfH
	DB	0e8H
	DB	07aH
	DB	0d9H
	DB	02bH
	DB	024H
	DB	094H
	DB	0a0H
	DB	043H
	DB	0b8H
	DB	0e5H
	DB	048H
	DB	02H
	DB	0a4H
	DB	05H
	DB	01H
	DB	0b4H
	DB	051H
	DB	0feH
	DB	02bH
	DB	08H
	DB	0f5H
	DB	047H
	DB	097H
	DB	0a7H
	DB	04H
	DB	059H
	DB	0b3H
	DB	0cbH
	DB	049H
	DB	0f0H
	DB	08bH
	DB	032H
	DB	06cH
	DB	066H
	DB	0ddH
	DB	010H
	DB	07aH
	DB	07eH
	DB	0d2H
	DB	0b2H
	DB	064H
	DB	09aH
	DB	0b4H
	DB	088H
	DB	09fH
	DB	035H
	DB	03dH
	DB	070H
	DB	0b4H
	DB	0e7H
	DB	079H
	DB	0aaH
	DB	030H
	DB	090H
	DB	0d2H
	DB	0b3H
	DB	0e9H
	DB	06H
	DB	0feH
	DB	0b3H
	DB	0f6H
	DB	08aH
	DB	065H
	DB	0e2H
	DB	070H
	DB	043H
	DB	0f2H
	DB	06aH
	DB	0c1H
	DB	0c5H
	DB	01eH
	DB	0a5H
	DB	060H
	DB	052H
	DB	02eH
	DB	080H
	DB	08H
	DB	0eaH
	DB	070H
	DB	0bcH
	DB	0d3H
	DB	069H
	DB	0e6H
	DB	083H
	DB	0faH
	DB	039H
	DB	0b6H
	DB	064H
	DB	03fH
	DB	0b5H
	DB	018H
	DB	037H
	DB	040H
	DB	07eH
	DB	01aH
	DB	031H
	DB	041H
	DB	08dH
	DB	09bH
	DB	04H
	DB	053H
	DB	039H
	DB	029H
	DB	034H
	DB	08cH
	DB	0d7H
	DB	034H
	DB	014H
	DB	0c2H
	DB	024H
	DB	0d0H
	DB	096H
	DB	08eH
	DB	0b7H
	DB	099H
	DB	089H
	DB	071H
	DB	050H
	DB	0edH
	DB	0b0H
	DB	06H
	DB	086H
	DB	0e7H
	DB	0c6H
	DB	084H
	DB	082H
	DB	0f7H
	DB	0c5H
	DB	010H
	DB	013H
	DB	049H
	DB	0e2H
	DB	04dH
	DB	073H
	DB	017H
	DB	059H
	DB	04bH
	DB	0caH
	DB	06dH
	DB	0eH
	DB	0efH
	DB	0bdH
	DB	025H
	DB	07eH
	DB	0f4H
	DB	03eH
	DB	087H
	DB	066H
	DB	08fH
	DB	0f4H
	DB	018H
	DB	015H
	DB	07bH
	DB	07fH
	DB	05bH
	DB	00H
	DB	02H
	DB	0d2H
	DB	0c6H
	DB	012H
	DB	0e6H
	DB	08fH
	DB	075H
	DB	0b3H
	DB	03H
	DB	0cH
	DB	0dH
	DB	04eH
	DB	0d7H
	DB	0f9H
	DB	0dcH
	DB	047H
	DB	0b7H
	DB	081H
	DB	045H
	DB	0acH
	DB	0bfH
	DB	0ccH
	DB	093H
	DB	0ceH
	DB	041H
	DB	0abH
	DB	064H
	DB	0bdH
	DB	02bH
	DB	03fH
	DB	03dH
	DB	0adH
	DB	013H
	DB	083H
	DB	03fH
	DB	079H
	DB	014H
	DB	0b4H
	DB	02dH
	DB	017H
	DB	0c1H
	DB	03aH
	DB	0e5H
	DB	019H
	DB	0b3H
	DB	042H
	DB	060H
	DB	0eaH
	DB	043H
	DB	0a5H
	DB	017H
	DB	082H
	DB	0f1H
	DB	0aaH
	DB	0d1H
	DB	033H
	DB	0d5H
	DB	036H
	DB	070H
	DB	02H
	DB	075H
	DB	02eH
	DB	02fH
	DB	08H
	DB	0b1H
	DB	06eH
	DB	081H
	DB	045H
	DB	0a3H
	DB	0aeH
	DB	0dcH
	DB	065H
	DB	068H
	DB	0c2H
	DB	07eH
	DB	09bH
	DB	084H
	DB	05eH
	DB	086H
	DB	0c7H
	DB	04H
	DB	09eH
	DB	04aH
	DB	075H
	DB	049H
	DB	01cH
	DB	0a8H
	DB	020H
	DB	0d1H
	DB	099H
	DB	0a1H
	DB	0c7H
	DB	0c7H
	DB	0d0H
	DB	0cfH
	DB	0f8H
	DB	0beH
	DB	0d1H
	DB	03fH
	DB	062H
	DB	00H
	DB	01cH
	DB	047H
	DB	069H
	DB	05eH
	DB	0c5H
	DB	05H
	DB	062H
	DB	024H
	DB	08cH
	DB	02aH
	DB	0a7H
	DB	0aaH
	DB	0f3H
	DB	09cH
	DB	0f3H
	DB	090H
	DB	0c5H
	DB	093H
	DB	062H
	DB	05fH
	DB	0b4H
	DB	02aH
	DB	0a6H
	DB	05H
	DB	07aH
	DB	09fH
	DB	0c4H
	DB	0cbH
	DB	0deH
	DB	0a6H
	DB	0cbH
	DB	07aH
	DB	0eeH
	DB	035H
	DB	058H
	DB	034H
	DB	0baH
	DB	0baH
	DB	0d8H
	DB	0c6H
	DB	0e4H
	DB	00H
	DB	071H
	DB	059H
	DB	09dH
	DB	0e4H
	DB	0e9H
	DB	063H
	DB	0f8H
	DB	04cH
	DB	0c2H
	DB	0adH
	DB	0f6H
	DB	069H
	DB	033H
	DB	0f0H
	DB	088H
	DB	077H
	DB	0bcH
	DB	068H
	DB	01eH
	DB	088H
	DB	062H
	DB	08cH
	DB	03eH
	DB	0bbH
	DB	0c1H
	DB	0f8H
	DB	076H
	DB	01aH
	DB	0bfH
	DB	0dbH
	DB	01aH
	DB	0b0H
	DB	035H
	DB	0b7H
	DB	015H
	DB	01fH
	DB	01bH
	DB	0eH
	DB	0eaH
	DB	05dH
	DB	03cH
	DB	061H
	DB	0c6H
	DB	06fH
	DB	052H
	DB	050H
	DB	0e6H
	DB	0fH
	DB	038H
	DB	05H
	DB	018H
	DB	09aH
	DB	012H
	DB	056H
	DB	056H
	DB	0d3H
	DB	04fH
	DB	04dH
	DB	0edH
	DB	08eH
	DB	029H
	DB	087H
	DB	03fH
	DB	0ddH
	DB	040H
	DB	0d3H
	DB	07cH
	DB	05bH
	DB	0e2H
	DB	067H
	DB	0b9H
	DB	09eH
	DB	049H
	DB	00H
	DB	0eH
	DB	09bH
	DB	0cfH
	DB	0f4H
	DB	02bH
	DB	08H
	DB	079H
	DB	043H
	DB	023H
	DB	08bH
	DB	099H
	DB	0f8H
	DB	0deH
	DB	0e8H
	DB	0c5H
	DB	04cH
	DB	0f6H
	DB	0eeH
	DB	0d4H
	DB	0b5H
	DB	04cH
	DB	094H
	DB	089H
	DB	0c8H
	DB	0efH
	DB	0ebH
	DB	0b0H
	DB	029H
	DB	08aH
	DB	0f9H
	DB	0a9H
	DB	098H
	DB	015H
	DB	079H
	DB	0dH
	DB	040H
	DB	02H
	DB	087H
	DB	03H
	DB	0a4H
	DB	092H
	DB	09cH
	DB	09dH
	DB	0f1H
	DB	05H
	DB	064H
	DB	03eH
	DB	0fbH
	DB	0d2H
	DB	092H
	DB	0b1H
	DB	020H
	DB	027H
	DB	0bbH
	DB	068H
	DB	097H
	DB	0a7H
	DB	098H
	DB	0c0H
	DB	033H
	DB	092H
	DB	0e9H
	DB	04bH
	DB	028H
	DB	064H
	DB	059H
	DB	068H
	DB	0e5H
	DB	060H
	DB	0ebH
	DB	08aH
	DB	0f2H
	DB	088H
	DB	0a7H
	DB	0e4H
	DB	08eH
	DB	0cH
	DB	0a3H
	DB	0aH
	DB	05fH
	DB	0b5H
	DB	03cH
	DB	0feH
	DB	0ddH
	DB	0f7H
	DB	0e6H
	DB	075H
	DB	01fH
	DB	080H
	DB	0b5H
	DB	0d1H
	DB	013H
	DB	0a0H
	DB	01eH
	DB	0baH
	DB	084H
	DB	077H
	DB	0a3H
	DB	06aH
	DB	0d7H
	DB	08fH
	DB	0f4H
	DB	04aH
	DB	018H
	DB	09cH
	DB	030H
	DB	026H
	DB	029H
	DB	053H
	DB	0b0H
	DB	08H
	DB	09H
	DB	0ecH
	DB	086H
	DB	066H
	DB	064H
	DB	06dH
	DB	0dbH
	DB	03H
	DB	0edH
	DB	012H
	DB	0d5H
	DB	081H
	DB	032H
	DB	0f3H
	DB	03cH
	DB	0b6H
	DB	0eaH
	DB	0dfH
	DB	0a0H
	DB	0c2H
	DB	06fH
	DB	095H
	DB	08cH
	DB	08H
	DB	0b1H
	DB	03cH
	DB	02eH
	DB	05aH
	DB	08fH
	DB	05eH
	DB	0e1H
	DB	099H
	DB	0caH
	DB	068H
	DB	07fH
	DB	02fH
	DB	0d6H
	DB	0dbH
	DB	033H
	DB	0c4H
	DB	0edH
	DB	09H
	DB	046H
	DB	09fH
	DB	07cH
	DB	083H
	DB	056H
	DB	067H
	DB	063H
	DB	076H
	DB	0a9H
	DB	053H
	DB	0cH
	DB	036H
	DB	05bH
	DB	03dH
	DB	073H
	DB	09H
	DB	018H
	DB	03H
	DB	068H
	DB	0f9H
	DB	01cH
	DB	033H
	DB	0e2H
	DB	09cH
	DB	0e2H
	DB	0b9H
	DB	078H
	DB	095H
	DB	07eH
	DB	0e5H
	DB	01eH
	DB	045H
	DB	085H
	DB	09aH
	DB	048H
	DB	05bH
	DB	02H
	DB	0abH
	DB	0d1H
	DB	0abH
	DB	07eH
	DB	05dH
	DB	061H
	DB	0d9H
	DB	01aH
	DB	0d4H
	DB	0e3H
	DB	032H
	DB	058H
	DB	0cbH
	DB	0acH
	DB	074H
	DB	0feH
	DB	08fH
	DB	090H
	DB	0e1H
	DB	049H
	DB	088H
	DB	0f6H
	DB	047H
	DB	06eH
	DB	015H
	DB	08cH
	DB	073H
	DB	0afH
	DB	0d4H
	DB	0ceH
	DB	031H
	DB	01H
	DB	0a0H
	DB	05cH
	DB	07fH
	DB	07dH
	DB	0beH
	DB	0d9H
	DB	098H
	DB	093H
	DB	03dH
	DB	04aH
	DB	0ebH
	DB	09H
	DB	0f6H
	DB	0e0H
	DB	087H
	DB	086H
	DB	0f0H
	DB	0e9H
	DB	04fH
	DB	07aH
	DB	0e0H
	DB	017H
	DB	068H
	DB	0f6H
	DB	023H
	DB	0dcH
	DB	0a6H
	DB	0f8H
	DB	0abH
	DB	058H
	DB	079H
	DB	0ccH
	DB	0b4H
	DB	078H
	DB	0c9H
	DB	073H
	DB	0d1H
	DB	062H
	DB	087H
	DB	0fH
	DB	0adH
	DB	0f2H
	DB	097H
	DB	024H
	DB	053H
	DB	020H
	DB	0abH
	DB	045H
	DB	0aH
	DB	07aH
	DB	0bfH
	DB	0eaH
	DB	091H
	DB	0a7H
	DB	061H
	DB	0b5H
	DB	084H
	DB	088H
	DB	02eH
	DB	0b0H
	DB	0e0H
	DB	027H
	DB	07dH
	DB	095H
	DB	01fH
	DB	047H
	DB	089H
	DB	0f1H
	DB	02aH
	DB	090H
	DB	01H
	DB	057H
	DB	083H
	DB	099H
	DB	07bH
	DB	057H
	DB	039H
	DB	0a6H
	DB	09cH
	DB	043H
	DB	022H
	DB	0dbH
	DB	0adH
	DB	033H
	DB	083H
	DB	010H
	DB	0e8H
	DB	088H
	DB	098H
	DB	096H
	DB	039H
	DB	0f8H
	DB	03dH
	DB	036H
	DB	08eH
	DB	05dH
	DB	07dH
	DB	097H
	DB	04fH
	DB	027H
	DB	028H
	DB	0cfH
	DB	07eH
	DB	02cH
	DB	0e8H
	DB	0faH
	DB	083H
	DB	022H
	DB	0a1H
	DB	09fH
	DB	065H
	DB	043H
	DB	0faH
	DB	093H
	DB	077H
	DB	0fdH
	DB	023H
	DB	0dfH
	DB	086H
	DB	03bH
	DB	0f6H
	DB	0bfH
	DB	034H
	DB	034H
	DB	0f5H
	DB	0c2H
	DB	091H
	DB	0f3H
	DB	05bH
	DB	060H
	DB	09aH
	DB	03H
	DB	031H
	DB	01aH
	DB	02fH
	DB	01aH
	DB	094H
	DB	032H
	DB	03dH
	DB	036H
	DB	051H
	DB	022H
	DB	0f9H
	DB	04cH
	DB	035H
	DB	071H
	DB	0caH
	DB	058H
	DB	0d0H
	DB	051H
	DB	093H
	DB	0c7H
	DB	091H
	DB	0c7H
	DB	0fcH
	DB	07H
	DB	0bH
	DB	0eH
	DB	07aH
	DB	0e5H
	DB	06fH
	DB	016H
	DB	068H
	DB	0a0H
	DB	030H
	DB	018H
	DB	03aH
	DB	0c4H
	DB	04aH
	DB	0f6H
	DB	07aH
	DB	01cH
	DB	01aH
	DB	074H
	DB	0e7H
	DB	0ceH
	DB	065H
	DB	0b2H
	DB	028H
	DB	037H
	DB	084H
	DB	03bH
	DB	07eH
	DB	095H
	DB	083H
	DB	0faH
	DB	09cH
	DB	08eH
	DB	0aH
	DB	018H
	DB	0f3H
	DB	079H
	DB	0adH
	DB	05cH
	DB	099H
	DB	05dH
	DB	074H
	DB	0d3H
	DB	022H
	DB	03fH
	DB	0cbH
	DB	01cH
	DB	05bH
	DB	065H
	DB	011H
	DB	043H
	DB	034H
	DB	0f5H
	DB	076H
	DB	05cH
	DB	0acH
	DB	0faH
	DB	018H
	DB	02cH
	DB	090H
	DB	09bH
	DB	027H
	DB	0acH
	DB	0a9H
	DB	0b0H
	DB	044H
	DB	01dH
	DB	02aH
	DB	0f1H
	DB	0f8H
	DB	0c3H
	DB	04fH
	DB	06eH
	DB	098H
	DB	0f0H
	DB	02dH
	DB	0e3H
	DB	08dH
	DB	08H
	DB	049H
	DB	09eH
	DB	04bH
	DB	07dH
	DB	094H
	DB	041H
	DB	05aH
	DB	0c1H
	DB	03cH
	DB	072H
	DB	0edH
	DB	04cH
	DB	0eH
	DB	094H
	DB	0f9H
	DB	037H
	DB	046H
	DB	03eH
	DB	054H
	DB	070H
	DB	0b0H
	DB	04dH
	DB	0b4H
	DB	07fH
	DB	03bH
	DB	0ccH
	DB	071H
	DB	0e7H
	DB	0b0H
	DB	0feH
	DB	0efH
	DB	0f9H
	DB	01dH
	DB	0bbH
	DB	077H
	DB	031H
	DB	0fcH
	DB	0d1H
	DB	0f2H
	DB	0b9H
	DB	0c3H
	DB	060H
	DB	06H
	DB	051H
	DB	0f5H
	DB	07fH
	DB	088H
	DB	0bbH
	DB	03eH
	DB	05cH
	DB	0abH
	DB	0eeH
	DB	02aH
	DB	060H
	DB	06eH
	DB	0e4H
	DB	0acH
	DB	05fH
	DB	0cdH
	DB	05dH
	DB	0ddH
	DB	03dH
	DB	057H
	DB	07aH
	DB	078H
	DB	04fH
	DB	0acH
	DB	076H
	DB	0a0H
	DB	01fH
	DB	030H
	DB	065H
	DB	00H
	DB	0b5H
	DB	0b6H
	DB	075H
	DB	036H
	DB	0bfH
	DB	031H
	DB	074H
	DB	01cH
	DB	0dcH
	DB	063H
	DB	0c5H
	DB	0bdH
	DB	051H
	DB	0abH
	DB	06aH
	DB	0b1H
	DB	0f8H
	DB	048H
	DB	0fH
	DB	0b5H
	DB	09fH
	DB	08aH
	DB	02fH
	DB	06eH
	DB	0b6H
	DB	0a5H
	DB	010H
	DB	055H
	DB	055H
	DB	075H
	DB	055H
	DB	0bH
	DB	0abH
	DB	0caH
	DB	0c0H
	DB	06bH
	DB	07bH
	DB	035H
	DB	08H
	DB	0d8H
	DB	018H
	DB	04dH
	DB	096H
	DB	06aH
	DB	0f8H
	DB	080H
	DB	09bH
	DB	071H
	DB	0c8H
	DB	0aaH
	DB	028H
	DB	0e8H
	DB	0b4H
	DB	0d6H
	DB	057H
	DB	0eaH
	DB	0fbH
	DB	0e6H
	DB	041H
	DB	051H
	DB	0dbH
	DB	016H
	DB	0dbH
	DB	088H
	DB	061H
	DB	09dH
	DB	073H
	DB	0dcH
	DB	052H
	DB	07bH
	DB	035H
	DB	06bH
	DB	0c9H
	DB	04bH
	DB	0d5H
	DB	042H
	DB	0ccH
	DB	0f0H
	DB	034H
	DB	015H
	DB	01bH
	DB	0dbH
	DB	0fdH
	DB	0d0H
	DB	0b2H
	DB	0d5H
	DB	03bH
	DB	0aeH
	DB	0bcH
	DB	07cH
	DB	00H
	DB	019H
	DB	013H
	DB	05bH
	DB	0a1H
	DB	074H
	DB	078H
	DB	015H
	DB	0d0H
	DB	0cbH
	DB	011H
	DB	07H
	DB	037H
	DB	05aH
	DB	052H
	DB	08cH
	DB	01cH
	DB	09eH
	DB	07dH
	DB	050H
	DB	0b4H
	DB	098H
	DB	02cH
	DB	032H
	DB	0e8H
	DB	0deH
	DB	087H
	DB	025H
	DB	08dH
	DB	0c4H
	DB	021H
	DB	0dH
	DB	0ddH
	DB	0b3H
	DB	0e8H
	DB	07fH
	DB	028H
	DB	061H
	DB	014H
	DB	079H
	DB	0acH
	DB	0a4H
	DB	080H
	DB	063H
	DB	07eH
	DB	052H
	DB	0efH
	DB	09bH
	DB	0f1H
	DB	0ecH
	DB	0ebH
	DB	026H
	DB	086H
	DB	098H
	DB	058H
	DB	0eeH
	DB	0f6H
	DB	0e0H
	DB	093H
	DB	05H
	DB	025H
	DB	0b5H
	DB	012H
	DB	03H
	DB	069H
	DB	07aH
	DB	02H
	DB	012H
	DB	05cH
	DB	016H
	DB	08bH
	DB	09H
	DB	03bH
	DB	08bH
	DB	06dH
	DB	0b9H
	DB	0ddH
	DB	0dcH
	DB	055H
	DB	04fH
	DB	0caH
	DB	0c1H
	DB	075H
	DB	051H
	DB	05aH
	DB	04eH
	DB	0bfH
	DB	0d0H
	DB	0aeH
	DB	054H
	DB	0d5H
	DB	0d3H
	DB	089H
	DB	068H
	DB	0d6H
	DB	0f2H
	DB	0e2H
	DB	0d8H
	DB	084H
	DB	03fH
	DB	06eH
	DB	08fH
	DB	049H
	DB	0a9H
	DB	01bH
	DB	036H
	DB	064H
	DB	079H
	DB	013H
	DB	039H
	DB	048H
	DB	0ddH
	DB	0faH
	DB	0beH
	DB	0aeH
	DB	0d4H
	DB	08cH
	DB	06fH
	DB	0a6H
	DB	03bH
	DB	0c3H
	DB	07cH
	DB	0fH
	DB	04dH
	DB	0e4H
	DB	065H
	DB	0bfH
	DB	048H
	DB	0bdH
	DB	0c4H
	DB	087H
	DB	02cH
	DB	054H
	DB	050H
	DB	056H
	DB	0efH
	DB	086H
	DB	0baH
	DB	0e8H
	DB	09aH
	DB	0f3H
	DB	031H
	DB	0f7H
	DB	06fH
	DB	06fH
	DB	0a7H
	DB	044H
	DB	0fbH
	DB	017H
	DB	06aH
	DB	0b6H
	DB	0daH
	DB	067H
	DB	0c5H
	DB	0a7H
	DB	0cbH
	DB	0aaH
	DB	067H
	DB	014H
	DB	068H
	DB	0abH
	DB	09cH
	DB	095H
	DB	01H
	DB	06cH
	DB	0ebH
	DB	0f0H
	DB	0f3H
	DB	026H
	DB	059H
	DB	0eH
	DB	099H
	DB	08aH
	DB	06H
	DB	09H
	DB	07aH
	DB	0adH
	DB	0cdH
	DB	076H
	DB	0c4H
	DB	0b7H
	DB	02eH
	DB	01fH
	DB	09eH
	DB	073H
	DB	046H
	DB	06bH
	DB	01fH
	DB	02eH
	DB	0feH
	DB	07H
	DB	0d9H
	DB	01bH
	DB	01cH
	DB	0daH
	DB	088H
	DB	087H
	DB	04bH
	DB	07cH
	DB	0adH
	DB	024H
	DB	08aH
	DB	0c7H
	DB	0afH
	DB	090H
	DB	050H
	DB	02aH
	DB	0beH
	DB	01eH
	DB	020H
	DB	03H
	DB	056H
	DB	0cdH
	DB	023H
	DB	0f4H
	DB	042H
	DB	0e8H
	DB	0dfH
	DB	0e0H
	DB	017H
	DB	0dfH
	DB	067H
	DB	071H
	DB	07aH
	DB	084H
	DB	0cbH
	DB	03H
	DB	0cH
	DB	018H
	DB	0feH
	DB	03aH
	DB	03cH
	DB	089H
	DB	02H
	DB	06bH
	DB	09aH
	DB	052H
	DB	015H
	DB	059H
	DB	0f0H
	DB	036H
	DB	0dbH
	DB	0c6H
	DB	04H
	DB	0feH
	DB	0bbH
	DB	0c5H
	DB	068H
	DB	01cH
	DB	026H
	DB	0feH
	DB	07bH
	DB	08eH
	DB	070H
	DB	0f5H
	DB	013H
	DB	03dH
	DB	0f9H
	DB	01fH
	DB	0d4H
	DB	0f8H
	DB	0d8H
	DB	090H
	DB	03H
	DB	0daH
	DB	0fcH
	DB	01dH
	DB	0adH
	DB	012H
	DB	0f5H
	DB	09eH
	DB	0c7H
	DB	0d1H
	DB	065H
	DB	0ccH
	DB	051H
	DB	0a0H
	DB	012H
	DB	0b9H
	DB	0bcH
	DB	039H
	DB	0b8H
	DB	0b7H
	DB	0c7H
	DB	02aH
	DB	0aeH
	DB	0daH
	DB	0e6H
	DB	028H
	DB	079H
	DB	0bbH
	DB	0a0H
	DB	053H
	DB	04cH
	DB	0a3H
	DB	0adH
	DB	049H
	DB	040H
	DB	05bH
	DB	0dbH
	DB	036H
	DB	079H
	DB	0a3H
	DB	088H
	DB	0deH
	DB	0efH
	DB	0d9H
	DB	00H
	DB	03H
	DB	013H
	DB	03cH
	DB	0bbH
	DB	0cbH
	DB	0f4H
	DB	083H
	DB	075H
	DB	023H
	DB	0ddH
	DB	05cH
	DB	04bH
	DB	057H
	DB	018H
	DB	0ebH
	DB	02aH
	DB	0e4H
	DB	010H
	DB	058H
	DB	02eH
	DB	050H
	DB	0b3H
	DB	089H
	DB	07H
	DB	02eH
	DB	0adH
	DB	08fH
	DB	08cH
	DB	01dH
	DB	0e8H
	DB	0cH
	DB	09fH
	DB	0fbH
	DB	049H
	DB	05bH
	DB	047H
	DB	0bdH
	DB	0deH
	DB	0bdH
	DB	0e0H
	DB	0bcH
	DB	099H
	DB	02cH
	DB	094H
	DB	032H
	DB	097H
	DB	03eH
	DB	017H
	DB	0a7H
	DB	096H
	DB	0c4H
	DB	078H
	DB	0caH
	DB	04fH
	DB	0feH
	DB	078H
	DB	07cH
	DB	0eH
	DB	084H
	DB	099H
	DB	0f6H
	DB	091H
	DB	03aH
	DB	0f2H
	DB	05aH
	DB	095H
	DB	0b9H
	DB	018H
	DB	0f4H
	DB	077H
	DB	0f8H
	DB	0b1H
	DB	091H
	DB	0a4H
	DB	0c5H
	DB	0c3H
	DB	03cH
	DB	084H
	DB	05aH
	DB	064H
	DB	01bH
	DB	01fH
	DB	05cH
	DB	065H
	DB	0edH
	DB	0daH
	DB	0ddH
	DB	0e9H
	DB	0e8H
	DB	063H
	DB	084H
	DB	05fH
	DB	074H
	DB	0beH
	DB	0d1H
	DB	0ceH
	DB	0d3H
	DB	08bH
	DB	0e6H
	DB	0c8H
	DB	04H
	DB	05fH
	DB	0faH
	DB	015H
	DB	04H
	DB	040H
	DB	058H
	DB	0bfH
	DB	0c4H
	DB	0b2H
	DB	0a3H
	DB	0e0H
	DB	051H
	DB	00H
	DB	0c5H
	DB	0bfH
	DB	0daH
	DB	0a4H
	DB	0a9H
	DB	043H
	DB	087H
	DB	02eH
	DB	0a2H
	DB	0fbH
	DB	06cH
	DB	074H
	DB	0caH
	DB	0c0H
	DB	01H
	DB	031H
	DB	089H
	DB	084H
	DB	090H
	DB	04H
	DB	099H
	DB	014H
	DB	045H
	DB	0f1H
	DB	053H
	DB	089H
	DB	024H
	DB	0f7H
	DB	0e9H
	DB	075H
	DB	0f7H
	DB	0b0H
	DB	035H
	DB	053H
	DB	055H
	DB	0dfH
	DB	096H
	DB	05cH
	DB	08dH
	DB	03aH
	DB	058H
	DB	0faH
	DB	02eH
	DB	0a2H
	DB	0bbH
	DB	02fH
	DB	053H
	DB	0c4H
	DB	0b3H
	DB	063H
	DB	049H
	DB	0ccH
	DB	077H
	DB	0eH
	DB	03eH
	DB	0caH
	DB	097H
	DB	062H
	DB	0c2H
	DB	082H
	DB	0d8H
	DB	03bH
	DB	033H
	DB	0eH
	DB	0eH
	DB	08H
	DB	06dH
	DB	0a4H
	DB	064H
	DB	0fbH
	DB	05eH
	DB	03cH
	DB	076H
	DB	0dH
	DB	05eH
	DB	0b1H
	DB	03cH
	DB	0b1H
	DB	0f5H
	DB	070H
	DB	015H
	DB	03fH
	DB	03dH
	DB	0cH
	DB	04dH
	DB	0fbH
	DB	056H
	DB	0e5H
	DB	05eH
	DB	099H
	DB	068H
	DB	037H
	DB	0d4H
	DB	01bH
	DB	0c5H
	DB	0e2H
	DB	0a2H
	DB	0b2H
	DB	07H
	DB	07H
	DB	02eH
	DB	0e5H
	DB	0c2H
	DB	0a4H
	DB	0f2H
	DB	021H
	DB	0d5H
	DB	0aeH
	DB	0d2H
	DB	0ccH
	DB	01fH
	DB	067H
	DB	08bH
	DB	0dcH
	DB	073H
	DB	0d9H
	DB	0d8H
	DB	0c9H
	DB	03fH
	DB	037H
	DB	063H
	DB	0a7H
	DB	0eeH
	DB	0b7H
	DB	042H
	DB	034H
	DB	01aH
	DB	0e4H
	DB	0e6H
	DB	0a1H
	DB	06bH
	DB	016H
	DB	087H
	DB	02eH
	DB	03aH
	DB	0f9H
	DB	04fH
	DB	090H
	DB	0a8H
	DB	0a1H
	DB	0dcH
	DB	0c8H
	DB	09H
	DB	068H
	DB	025H
	DB	0fbH
	DB	042H
	DB	0fdH
	DB	0c5H
	DB	081H
	DB	0b4H
	DB	0a9H
	DB	0a8H
	DB	023H
	DB	0e0H
	DB	06aH
	DB	057H
	DB	0fbH
	DB	0ceH
	DB	0beH
	DB	01dH
	DB	03aH
	DB	054H
	DB	0a4H
	DB	0e7H
	DB	0eH
	DB	09eH
	DB	037H
	DB	09eH
	DB	047H
	DB	058H
	DB	07bH
	DB	08fH
	DB	0e0H
	DB	0e4H
	DB	0b4H
	DB	0dcH
	DB	0a6H
	DB	032H
	DB	023H
	DB	0a8H
	DB	067H
	DB	0ccH
	DB	0d0H
	DB	08aH
	DB	02dH
	DB	03cH
	DB	062H
	DB	0a8H
	DB	0bH
	DB	021H
	DB	0c5H
	DB	0c5H
	DB	075H
	DB	0e9H
	DB	0adH
	DB	083H
	DB	088H
	DB	065H
	DB	023H
	DB	050H
	DB	0bdH
	DB	01eH
	DB	05fH
	DB	09fH
	DB	082H
	DB	015H
	DB	07cH
	DB	0a9H
	DB	0c6H
	DB	01fH
	DB	052H
	DB	02eH
	DB	06bH
	DB	023H
	DB	039H
	DB	099H
	DB	0deH
	DB	09bH
	DB	042H
	DB	0eaH
	DB	03cH
	DB	088H
	DB	0b0H
	DB	0b1H
	DB	072H
	DB	05eH
	DB	0b4H
	DB	07bH
	DB	043H
	DB	057H
	DB	0cbH
	DB	02H
	DB	076H
	DB	02bH
	DB	021H
	DB	078H
	DB	0bfH
	DB	01dH
	DB	022H
	DB	07H
	DB	03dH
	DB	074H
	DB	0b4H
	DB	0a8H
	DB	018H
	DB	0edH
	DB	042H
	DB	0f6H
	DB	09H
	DB	05H
	DB	0e1H
	DB	045H
	DB	08dH
	DB	012H
	DB	0f6H
	DB	00H
	DB	0f0H
	DB	0acH
	DB	07bH
	DB	034H
	DB	04H
	DB	0c6H
	DB	0b5H
	DB	0f9H
	DB	072H
	DB	0d6H
	DB	073H
	DB	0b1H
	DB	0f4H
	DB	095H
	DB	0b8H
	DB	032H
	DB	08aH
	DB	06eH
	DB	05aH
	DB	0a2H
	DB	0dbH
	DB	01dH
	DB	019H
	DB	0e5H
	DB	0a1H
	DB	07bH
	DB	02bH
	DB	02fH
	DB	08dH
	DB	0a2H
	DB	0aeH
	DB	07eH
	DB	04fH
	DB	0aaH
	DB	033H
	DB	0d2H
	DB	0f0H
	DB	0e8H
	DB	04dH
	DB	063H
	DB	0c0H
	DB	0c0H
	DB	095H
	DB	035H
	DB	0d5H
	DB	04eH
	DB	0e6H
	DB	0dfH
	DB	03cH
	DB	041H
	DB	02H
	DB	019H
	DB	0ddH
	DB	01cH
	DB	0feH
	DB	07fH
	DB	097H
	DB	0a9H
	DB	0aeH
	DB	025H
	DB	04cH
	DB	0ddH
	DB	024H
	DB	01bH
	DB	08H
	DB	0d6H
	DB	0eeH
	DB	0f8H
	DB	0bfH
	DB	0bbH
	DB	0dcH
	DB	00H
	DB	0fbH
	DB	072H
	DB	035H
	DB	051H
	DB	040H
	DB	09bH
	DB	032H
	DB	07dH
	DB	0ddH
	DB	034H
	DB	016H
	DB	0bbH
	DB	050H
	DB	094H
	DB	0bbH
	DB	067H
	DB	03eH
	DB	0e9H
	DB	0dH
	DB	08bH
	DB	0c7H
	DB	031H
	DB	0a6H
	DB	04fH
	DB	087H
	DB	015H
	DB	0c8H
	DB	047H
	DB	050H
	DB	025H
	DB	0c7H
	DB	04cH
	DB	017H
	DB	07cH
	DB	09eH
	DB	057H
	DB	019H
	DB	0d0H
	DB	054H
	DB	076H
	DB	084H
	DB	0e9H
	DB	0b1H
	DB	055H
	DB	07eH
	DB	06dH
	DB	0bcH
	DB	0bdH
	DB	058H
	DB	0c9H
	DB	0c8H
	DB	09fH
	DB	07aH
	DB	06fH
	DB	0efH
	DB	02H
	DB	05H
	DB	0b8H
	DB	0c9H
	DB	055H
	DB	0ddH
	DB	091H
	DB	0a2H
	DB	0f4H
	DB	0eH
	DB	0c0H
	DB	0cbH
	DB	0a6H
	DB	011H
	DB	0a0H
	DB	01dH
	DB	095H
	DB	08aH
	DB	0cfH
	DB	0eaH
	DB	0aH
	DB	03dH
	DB	028H
	DB	0c7H
	DB	015H
	DB	0f1H
	DB	010H
	DB	0b5H
	DB	06dH
	DB	0feH
	DB	0a5H
	DB	0eeH
	DB	04H
	DB	0ddH
	DB	0b8H
	DB	0d9H
	DB	03bH
	DB	0c9H
	DB	0fbH
	DB	030H
	DB	058H
	DB	0bcH
	DB	07bH
	DB	0feH
	DB	0cdH
	DB	01cH
	DB	09cH
	DB	0e2H
	DB	0a7H
	DB	06cH
	DB	0ceH
	DB	0b1H
	DB	029H
	DB	0f6H
	DB	0f8H
	DB	03fH
	DB	068H
	DB	09H
	DB	074H
	DB	055H
	DB	087H
	DB	01aH
	DB	045H
	DB	08cH
	DB	077H
	DB	07dH
	DB	0e5H
	DB	0b2H
	DB	0c7H
	DB	0e1H
	DB	062H
	DB	09fH
	DB	01eH
	DB	0ddH
	DB	09eH
	DB	0ebH
	DB	0faH
	DB	0baH
	DB	04eH
	DB	022H
	DB	027H
	DB	01dH
	DB	053H
	DB	0d0H
	DB	093H
	DB	0cbH
	DB	010H
	DB	07cH
	DB	054H
	DB	04H
	DB	0d1H
	DB	0dbH
	DB	01eH
	DB	096H
	DB	068H
	DB	015H
	DB	015H
	DB	0cdH
	DB	0c7H
	DB	05cH
	DB	0afH
	DB	0a9H
	DB	0fbH
	DB	04dH
	DB	087H
	DB	01aH
	DB	0b8H
	DB	02H
	DB	0d5H
	DB	08H
	DB	0a3H
	DB	07cH
	DB	025H
	DB	0f6H
	DB	04dH
	DB	039H
	DB	0c2H
	DB	0dcH
	DB	0b5H
	DB	017H
	DB	0e0H
	DB	07H
	DB	0f3H
	DB	07eH
	DB	09eH
	DB	0dbH
	DB	093H
	DB	033H
	DB	0aaH
	DB	0daH
	DB	08fH
	DB	0d9H
	DB	084H
	DB	0bH
	DB	028H
	DB	08cH
	DB	025H
	DB	0e0H
	DB	08eH
	DB	0faH
	DB	0e8H
	DB	0b2H
	DB	078H
	DB	08eH
	DB	0a9H
	DB	045H
	DB	047H
	DB	0ecH
	DB	023H
	DB	0fcH
	DB	04H
	DB	083H
	DB	083H
	DB	077H
	DB	03H
	DB	022H
	DB	054H
	DB	096H
	DB	055H
	DB	07eH
	DB	0f1H
	DB	064H
	DB	058H
	DB	076H
	DB	06fH
	DB	00H
	DB	03H
	DB	095H
	DB	0e1H
	DB	012H
	DB	010H
	DB	04aH
	DB	0c4H
	DB	08H
	DB	0d8H
	DB	06eH
	DB	04eH
	DB	020H
	DB	05bH
	DB	071H
	DB	09cH
	DB	0dfH
	DB	074H
	DB	021H
	DB	057H
	DB	077H
	DB	0c2H
	DB	02bH
	DB	08eH
	DB	019H
	DB	0a9H
	DB	080H
	DB	0fcH
	DB	082H
	DB	0f6H
	DB	06dH
	DB	082H
	DB	0faH
	DB	082H
	DB	0e3H
	DB	0dH
	DB	092H
	DB	02fH
	DB	051H
	DB	09bH
	DB	087H
	DB	0bfH
	DB	069H
	DB	0a8H
	DB	09bH
	DB	05aH
	DB	0c4H
	DB	07bH
	DB	0ceH
	DB	065H
	DB	052H
	DB	047H
	DB	029H
	DB	07eH
	DB	0d5H
	DB	0c1H
	DB	0a7H
	DB	056H
	DB	0beH
	DB	0a9H
	DB	0ccH
	DB	0abH
	DB	02dH
	DB	047H
	DB	02eH
	DB	090H
	DB	0d3H
	DB	041H
	DB	0bfH
	DB	025H
	DB	05cH
	DB	048H
	DB	065H
	DB	0c5H
	DB	070H
	DB	01H
	DB	020H
	DB	0b4H
	DB	0fbH
	DB	0eeH
	DB	01bH
	DB	0cdH
	DB	036H
	DB	0c3H
	DB	04cH
	DB	08bH
	DB	085H
	DB	074H
	DB	061H
	DB	0c3H
	DB	01eH
	DB	02fH
	DB	070H
	DB	0caH
	DB	0f5H
	DB	01eH
	DB	05cH
	DB	0caH
	DB	05fH
	DB	09bH
	DB	06fH
	DB	0bbH
	DB	063H
	DB	0d4H
	DB	081H
	DB	0d3H
	DB	055H
	DB	0a1H
	DB	09H
	DB	051H
	DB	011H
	DB	024H
	DB	020H
	DB	047H
	DB	0e7H
	DB	0ebH
	DB	053H
	DB	0ecH
	DB	0dfH
	DB	0b4H
	DB	030H
	DB	0feH
	DB	063H
	DB	0a0H
	DB	049H
	DB	05aH
	DB	03fH
	DB	0a5H
	DB	025H
	DB	09eH
	DB	0c1H
	DB	094H
	DB	0daH
	DB	025H
	DB	0e9H
	DB	0dbH
	DB	079H
	DB	03fH
	DB	0fdH
	DB	082H
	DB	011H
	DB	0fH
	DB	0a6H
	DB	0b0H
	DB	0d5H
	DB	0eH
	DB	09cH
	DB	029H
	DB	07aH
	DB	0fcH
	DB	0deH
	DB	0aaH
	DB	0fbH
	DB	0c1H
	DB	0cbH
	DB	0c4H
	DB	01cH
	DB	0bH
	DB	06bH
	DB	0c0H
	DB	0a9H
	DB	0acH
	DB	0d5H
	DB	04H
	DB	0d1H
	DB	0bfH
	DB	0e0H
	DB	04bH
	DB	07eH
	DB	0deH
	DB	04dH
	DB	08fH
	DB	06dH
	DB	0f3H
	DB	040H
	DB	043H
	DB	081H
	DB	05dH
	DB	0ecH
	DB	07bH
	DB	05aH
	DB	0cbH
	DB	027H
	DB	0d5H
	DB	0dH
	DB	0f2H
	DB	09aH
	DB	02aH
	DB	07dH
	DB	085H
	DB	06aH
	DB	0a6H
	DB	032H
	DB	0bfH
	DB	0abH
	DB	084H
	DB	0feH
	DB	0cH
	DB	04fH
	DB	07eH
	DB	06aH
	DB	09dH
	DB	08dH
	DB	0d7H
	DB	011H
	DB	0ceH
	DB	09aH
	DB	013H
	DB	0abH
	DB	087H
	DB	08eH
	DB	06H
	DB	0d2H
	DB	035H
	DB	05bH
	DB	0e0H
	DB	028H
	DB	0f5H
	DB	08aH
	DB	025H
	DB	0fbH
	DB	0f4H
	DB	0ccH
	DB	02eH
	DB	0b5H
	DB	078H
	DB	032H
	DB	0b4H
	DB	084H
	DB	082H
	DB	0b2H
	DB	06eH
	DB	020H
	DB	041H
	DB	046H
	DB	031H
	DB	08fH
	DB	0e0H
	DB	0c3H
	DB	03bH
	DB	069H
	DB	053H
	DB	0c0H
	DB	03cH
	DB	088H
	DB	01cH
	DB	01dH
	DB	031H
	DB	091H
	DB	0a7H
	DB	056H
	DB	08dH
	DB	01dH
	DB	023H
	DB	03cH
	DB	052H
	DB	01bH
	DB	06eH
	DB	07H
	DB	01fH
	DB	070H
	DB	03aH
	DB	08dH
	DB	010H
	DB	07bH
	DB	053H
	DB	042H
	DB	0bH
	DB	035H
	DB	06H
	DB	0c5H
	DB	01eH
	DB	0d8H
	DB	086H
	DB	0d9H
	DB	062H
	DB	022H
	DB	0f7H
	DB	013H
	DB	033H
	DB	01fH
	DB	069H
	DB	041H
	DB	0bbH
	DB	0dH
	DB	07dH
	DB	0eH
	DB	028H
	DB	06bH
	DB	095H
	DB	0c7H
	DB	05cH
	DB	0cfH
	DB	055H
	DB	06cH
	DB	04bH
	DB	0a9H
	DB	02eH
	DB	0d5H
	DB	05eH
	DB	0b4H
	DB	09bH
	DB	07cH
	DB	08dH
	DB	0a1H
	DB	056H
	DB	06fH
	DB	0c3H
	DB	0cdH
	DB	082H
	DB	076H
	DB	06dH
	DB	0ecH
	DB	0b7H
	DB	0a8H
	DB	079H
	DB	0b4H
	DB	0b7H
	DB	021H
	DB	0a0H
	DB	04dH
	DB	0e8H
	DB	0fcH
	DB	09cH
	DB	0beH
	DB	069H
	DB	067H
	DB	0e7H
	DB	098H
	DB	03dH
	DB	046H
	DB	04dH
	DB	058H
	DB	042H
	DB	0daH
	DB	0f9H
	DB	018H
	DB	0caH
	DB	03dH
	DB	066H
	DB	04dH
	DB	033H
	DB	053H
	DB	0b9H
	DB	0ebH
	DB	0fbH
	DB	033H
	DB	0a0H
	DB	0b3H
	DB	055H
	DB	0c0H
	DB	080H
	DB	0bdH
	DB	0bdH
	DB	01dH
	DB	07cH
	DB	028H
	DB	04H
	DB	0e3H
	DB	040H
	DB	041H
	DB	02aH
	DB	0dH
	DB	019H
	DB	0ebH
	DB	067H
	DB	092H
	DB	084H
	DB	032H
	DB	0cfH
	DB	0eaH
	DB	080H
	DB	04H
	DB	03eH
	DB	0b9H
	DB	06fH
	DB	03aH
	DB	0edH
	DB	08fH
	DB	06eH
	DB	0c2H
	DB	051H
	DB	06eH
	DB	00H
	DB	08eH
	DB	08cH
	DB	07dH
	DB	036H
	DB	010H
	DB	0e0H
	DB	076H
	DB	0d1H
	DB	0cH
	DB	083H
	DB	0eaH
	DB	077H
	DB	0ebH
	DB	07eH
	DB	0fbH
	DB	01eH
	DB	0cdH
	DB	066H
	DB	01eH
	DB	051H
	DB	024H
	DB	0d8H
	DB	0c0H
	DB	0deH
	DB	046H
	DB	051H
	DB	04dH
	DB	088H
	DB	022H
	DB	0bbH
	DB	088H
	DB	0b0H
	DB	0c7H
	DB	085H
	DB	0e7H
	DB	0d8H
	DB	067H
	DB	05eH
	DB	02aH
	DB	0f2H
	DB	062H
	DB	015H
	DB	06aH
	DB	0cdH
	DB	013H
	DB	0e6H
	DB	06bH
	DB	0e1H
	DB	0ccH
	DB	08aH
	DB	033H
	DB	0f1H
	DB	0e2H
	DB	074H
	DB	0d0H
	DB	0a8H
	DB	0c5H
	DB	09dH
	DB	031H
	DB	067H
	DB	059H
	DB	039H
	DB	018H
	DB	0a1H
	DB	0bfH
	DB	00H
	DB	0f9H
	DB	0a6H
	DB	0deH
	DB	024H
	DB	099H
	DB	041H
	DB	0b8H
	DB	083H
	DB	08eH
	DB	0ccH
	DB	0e9H
	DB	0f9H
	DB	0aeH
	DB	0b7H
	DB	084H
	DB	061H
	DB	029H
	DB	0e6H
	DB	0d5H
	DB	0f9H
	DB	08fH
	DB	01bH
	DB	097H
	DB	040H
	DB	082H
	DB	070H
	DB	07aH
	DB	01bH
	DB	091H
	DB	0b9H
	DB	01bH
	DB	08bH
	DB	060H
	DB	079H
	DB	0afH
	DB	0f9H
	DB	0baH
	DB	069H
	DB	0fcH
	DB	049H
	DB	0b5H
	DB	0e7H
	DB	0c3H
	DB	064H
	DB	01fH
	DB	0c7H
	DB	045H
	DB	048H
	DB	0afH
	DB	09bH
	DB	042H
	DB	0beH
	DB	0b6H
	DB	059H
	DB	00H
	DB	0b9H
	DB	049H
	DB	0f9H
	DB	0d4H
	DB	0dbH
	DB	0b3H
	DB	06fH
	DB	067H
	DB	014H
	DB	0e9H
	DB	097H
	DB	08dH
	DB	024H
	DB	080H
	DB	08aH
	DB	0edH
	DB	036H
	DB	0f1H
	DB	0b1H
	DB	01aH
	DB	011H
	DB	079H
	DB	05fH
	DB	059H
	DB	0a8H
	DB	0faH
	DB	01bH
	DB	068H
	DB	032H
	DB	074H
	DB	0e7H
	DB	06bH
	DB	0beH
	DB	061H
	DB	040H
	DB	09aH
	DB	015H
	DB	02fH
	DB	081H
	DB	0a8H
	DB	019H
	DB	019H
	DB	036H
	DB	0bdH
	DB	099H
	DB	0c0H
	DB	0abH
	DB	0cfH
	DB	033H
	DB	0dcH
	DB	0e9H
	DB	044H
	DB	056H
	DB	0c9H
	DB	09eH
	DB	07fH
	DB	044H
	DB	0b9H
	DB	067H
	DB	076H
	DB	0aeH
	DB	0ceH
	DB	061H
	DB	06dH
	DB	030H
	DB	021H
	DB	087H
	DB	045H
	DB	051H
	DB	088H
	DB	0edH
	DB	0e9H
	DB	0a2H
	DB	0a3H
	DB	0a7H
	DB	0bbH
	DB	0e3H
	DB	0d2H
	DB	0cH
	DB	017H
	DB	0afH
	DB	075H
	DB	05cH
	DB	086H
	DB	03fH
	DB	0faH
	DB	085H
	DB	04H
	DB	034H
	DB	0ecH
	DB	0f9H
	DB	0e2H
	DB	0bbH
	DB	05cH
	DB	0cfH
	DB	06bH
	DB	07dH
	DB	0d6H
	DB	0b0H
	DB	04eH
	DB	060H
	DB	01eH
	DB	039H
	DB	082H
	DB	041H
	DB	060H
	DB	0bdH
	DB	025H
	DB	034H
	DB	0c9H
	DB	03dH
	DB	063H
	DB	040H
	DB	099H
	DB	0e9H
	DB	0feH
	DB	014H
	DB	0eeH
	DB	03H
	DB	0c7H
	DB	0dbH
	DB	07dH
	DB	02bH
	DB	017H
	DB	0d9H
	DB	0faH
	DB	082H
	DB	0d6H
	DB	052H
	DB	0b2H
	DB	026H
	DB	032H
	DB	050H
	DB	0deH
	DB	034H
	DB	091H
	DB	03fH
	DB	0f1H
	DB	0b7H
	DB	0f2H
	DB	03cH
	DB	0f4H
	DB	057H
	DB	0fbH
	DB	0eH
	DB	0c0H
	DB	0faH
	DB	022H
	DB	0b0H
	DB	07eH
	DB	069H
	DB	0cH
	DB	0fbH
	DB	094H
	DB	024H
	DB	055H
	DB	010H
	DB	026H
	DB	02cH
	DB	062H
	DB	0d9H
	DB	052H
	DB	014H
	DB	0a9H
	DB	031H
	DB	048H
	DB	03cH
	DB	0f0H
	DB	0b9H
	DB	0f3H
	DB	0e3H
	DB	0f5H
	DB	068H
	DB	0baH
	DB	0f1H
	DB	076H
	DB	0fbH
	DB	06dH
	DB	018H
	DB	0acH
	DB	06bH
	DB	081H
	DB	038H
	DB	0e6H
	DB	096H
	DB	0dbH
	DB	03cH
	DB	0a6H
	DB	03H
	DB	068H
	DB	088H
	DB	05cH
	DB	03bH
	DB	09cH
	DB	06H
	DB	0ebH
	DB	064H
	DB	042H
	DB	0dcH
	DB	09dH
	DB	0b5H
	DB	041H
	DB	094H
	DB	01eH
	DB	0fbH
	DB	06H
	DB	014H
	DB	0f7H
	DB	0f2H
	DB	0abH
	DB	024H
	DB	05eH
	DB	0adH
	DB	05dH
	DB	0c4H
	DB	044H
	DB	039H
	DB	01H
	DB	06aH
	DB	0bbH
	DB	0e9H
	DB	0f2H
	DB	018H
	DB	0a4H
	DB	0fH
	DB	01fH
	DB	090H
	DB	0f2H
	DB	0e0H
	DB	0edH
	DB	090H
	DB	097H
	DB	02fH
	DB	0a4H
	DB	035H
	DB	02bH
	DB	02bH
	DB	0c9H
	DB	0a3H
	DB	01eH
	DB	075H
	DB	047H
	DB	0fcH
	DB	0a2H
	DB	024H
	DB	041H
	DB	066H
	DB	05eH
	DB	0c2H
	DB	0d0H
	DB	099H
	DB	0acH
	DB	0c3H
	DB	0b2H
	DB	0d0H
	DB	052H
	DB	051H
	DB	061H
	DB	045H
	DB	032H
	DB	0ceH
	DB	056H
	DB	049H
	DB	0fdH
	DB	07aH
	DB	07fH
	DB	0a9H
	DB	0a5H
	DB	0c8H
	DB	04dH
	DB	044H
	DB	0bdH
	DB	014H
	DB	0c0H
	DB	061H
	DB	039H
	DB	081H
	DB	0c7H
	DB	017H
	DB	044H
	DB	099H
	DB	0b0H
	DB	070H
	DB	0dcH
	DB	0e2H
	DB	041H
	DB	0afH
	DB	034H
	DB	023H
	DB	0f4H
	DB	0e6H
	DB	0f1H
	DB	0caH
	DB	030H
	DB	070H
	DB	046H
	DB	02fH
	DB	01aH
	DB	06bH
	DB	0f7H
	DB	0e6H
	DB	02fH
	DB	0b6H
	DB	0faH
	DB	06fH
	DB	018H
	DB	034H
	DB	0f1H
	DB	05fH
	DB	04bH
	DB	036H
	DB	078H
	DB	0fcH
	DB	0a7H
	DB	0d5H
	DB	0dfH
	DB	068H
	DB	085H
	DB	094H
	DB	08bH
	DB	0f9H
	DB	07bH
	DB	0fdH
	DB	0c5H
	DB	02bH
	DB	06eH
	DB	08bH
	DB	05bH
	DB	08H
	DB	076H
	DB	0d2H
	DB	0eeH
	DB	026H
	DB	089H
	DB	069H
	DB	095H
	DB	021H
	DB	09eH
	DB	07H
	DB	01H
	DB	069H
	DB	0bdH
	DB	079H
	DB	0e5H
	DB	065H
	DB	04fH
	DB	046H
	DB	04dH
	DB	054H
	DB	0daH
	DB	059H
	DB	04fH
	DB	0d5H
	DB	057H
	DB	094H
	DB	01H
	DB	045H
	DB	09fH
	DB	0dbH
	DB	04dH
	DB	016H
	DB	0afH
	DB	0bbH
	DB	03cH
	DB	0b8H
	DB	025H
	DB	052H
	DB	0daH
	DB	0c3H
	DB	0d8H
	DB	05bH
	DB	02eH
	DB	096H
	DB	054H
	DB	014H
	DB	07bH
	DB	0a4H
	DB	05aH
	DB	0c9H
	DB	078H
	DB	0b4H
	DB	023H
	DB	0c7H
	DB	08aH
	DB	0f9H
	DB	0dbH
	DB	0cH
	DB	03fH
	DB	07bH
	DB	0e7H
	DB	0cH
	DB	012H
	DB	097H
	DB	0c7H
	DB	0cdH
	DB	0d0H
	DB	0ecH
	DB	020H
	DB	02bH
	DB	031H
	DB	0f9H
	DB	086H
	DB	05fH
	DB	090H
	DB	0daH
	DB	0f2H
	DB	08cH
	DB	0feH
	DB	0cdH
	DB	056H
	DB	078H
	DB	082H
	DB	0f8H
	DB	0bfH
	DB	08dH
	DB	0f2H
	DB	09cH
	DB	099H
	DB	0b1H
	DB	097H
	DB	081H
	DB	0bdH
	DB	0a9H
	DB	099H
	DB	05H
	DB	078H
	DB	06aH
	DB	0f1H
	DB	018H
	DB	095H
	DB	023H
	DB	012H
	DB	09bH
	DB	02H
	DB	023H
	DB	076H
	DB	0f5H
	DB	0afH
	DB	076H
	DB	043H
	DB	085H
	DB	06eH
	DB	0c5H
	DB	07eH
	DB	02eH
	DB	053H
	DB	0f0H
	DB	04aH
	DB	0ecH
	DB	0a2H
	DB	0e2H
	DB	0eeH
	DB	0dfH
	DB	0cH
	DB	08H
	DB	0e4H
	DB	084H
	DB	072H
	DB	056H
	DB	09dH
	DB	087H
	DB	0f9H
	DB	02fH
	DB	023H
	DB	0fbH
	DB	0d1H
	DB	099H
	DB	071H
	DB	01H
	DB	08fH
	DB	0b4H
	DB	086H
	DB	0fdH
	DB	0faH
	DB	084H
	DB	0acH
	DB	04eH
	DB	075H
	DB	076H
	DB	0bbH
	DB	097H
	DB	059H
	DB	02aH
	DB	077H
	DB	0e5H
	DB	032H
	DB	0dbH
	DB	06aH
	DB	0a4H
	DB	0b2H
	DB	087H
	DB	0abH
	DB	0acH
	DB	037H
	DB	0ceH
	DB	0a8H
	DB	088H
	DB	0e7H
	DB	09aH
	DB	08aH
	DB	078H
	DB	04fH
	DB	090H
	DB	0f5H
	DB	04aH
	DB	016H
	DB	0a2H
	DB	019H
	DB	0bH
	DB	01aH
	DB	054H
	DB	0a3H
	DB	0f2H
	DB	07eH
	DB	09aH
	DB	0d8H
	DB	0b0H
	DB	0f6H
	DB	0c3H
	DB	055H
	DB	0a9H
	DB	04bH
	DB	01H
	DB	056H
	DB	02H
	DB	04fH
	DB	07eH
	DB	08bH
	DB	037H
	DB	019H
	DB	016H
	DB	0afH
	DB	0e8H
	DB	026H
	DB	026H
	DB	0b2H
	DB	0bbH
	DB	0c8H
	DB	0cbH
	DB	0c7H
	DB	062H
	DB	020H
	DB	0eaH
	DB	056H
	DB	01eH
	DB	05H
	DB	0aeH
	DB	0ceH
	DB	0fbH
	DB	072H
	DB	024H
	DB	025H
	DB	03eH
	DB	0a4H
	DB	0faH
	DB	040H
	DB	073H
	DB	07aH
	DB	04bH
	DB	0abH
	DB	013H
	DB	0e0H
	DB	0daH
	DB	07bH
	DB	08H
	DB	01H
	DB	02fH
	DB	0c3H
	DB	04aH
	DB	07aH
	DB	08bH
	DB	0acH
	DB	01bH
	DB	0f5H
	DB	03H
	DB	039H
	DB	0fbH
	DB	032H
	DB	09H
	DB	0f7H
	DB	0a4H
	DB	0acH
	DB	01eH
	DB	062H
	DB	0d1H
	DB	098H
	DB	023H
	DB	045H
	DB	013H
	DB	06eH
	DB	070H
	DB	0a6H
	DB	050H
	DB	04cH
	DB	022H
	DB	0d7H
	DB	04dH
	DB	0d0H
	DB	09bH
	DB	097H
	DB	04cH
	DB	0a7H
	DB	0c4H
	DB	0e6H
	DB	09dH
	DB	047H
	DB	020H
	DB	019H
	DB	079H
	DB	0a8H
	DB	012H
	DB	01fH
	DB	0d5H
	DB	0afH
	DB	01H
	DB	0a7H
	DB	048H
	DB	024H
	DB	06cH
	DB	0dbH
	DB	093H
	DB	0ddH
	DB	02H
	DB	063H
	DB	02aH
	DB	024H
	DB	03bH
	DB	0f6H
	DB	0f5H
	DB	056H
	DB	0fH
	DB	0c1H
	DB	0fdH
	DB	0d3H
	DB	0a8H
	DB	01cH
	DB	01bH
	DB	048H
	DB	035H
	DB	015H
	DB	071H
	DB	0c6H
	DB	034H
	DB	047H
	DB	0f5H
	DB	0b4H
	DB	06eH
	DB	0beH
	DB	0d9H
	DB	0daH
	DB	09aH
	DB	0ecH
	DB	038H
	DB	09cH
	DB	0cfH
	DB	0e1H
	DB	040H
	DB	0bH
	DB	0d9H
	DB	0b5H
	DB	0e0H
	DB	068H
	DB	0f6H
	DB	0dfH
	DB	0bbH
	DB	09fH
	DB	07bH
	DB	056H
	DB	068H
	DB	0b0H
	DB	06bH
	DB	0d9H
	DB	0f7H
	DB	01fH
	DB	0a0H
	DB	0edH
	DB	0d4H
	DB	0fH
	DB	0acH
	DB	02eH
	DB	0e9H
	DB	0c6H
	DB	01bH
	DB	0a2H
	DB	0e2H
	DB	0eaH
	DB	084H
	DB	024H
	DB	075H
	DB	0ddH
	DB	059H
	DB	056H
	DB	046H
	DB	051H
	DB	0b5H
	DB	081H
	DB	070H
	DB	031H
	DB	058H
	DB	0d8H
	DB	062H
	DB	0c3H
	DB	032H
	DB	0d9H
	DB	063H
	DB	0d2H
	DB	0c7H
	DB	038H
	DB	0e1H
	DB	0f4H
	DB	0e5H
	DB	04cH
	DB	03bH
	DB	01H
	DB	0eeH
	DB	01fH
	DB	06bH
	DB	073H
	DB	0c2H
	DB	060H
	DB	0d1H
	DB	01cH
	DB	0b6H
	DB	097H
	DB	06dH
	DB	0ecH
	DB	01aH
	DB	05eH
	DB	01eH
	DB	072H
	DB	037H
	DB	00H
	DB	0b5H
	DB	0e9H
	DB	0d9H
	DB	019H
	DB	0bcH
	DB	022H
	DB	0d0H
	DB	01fH
	DB	096H
	DB	036H
	DB	0eaH
	DB	0d1H
	DB	037H
	DB	0d9H
	DB	0f0H
	DB	022H
	DB	0ccH
	DB	033H
	DB	082H
	DB	09eH
	DB	050H
	DB	0b9H
	DB	0b6H
	DB	03dH
	DB	0a6H
	DB	0d0H
	DB	09bH
	DB	044H
	DB	0c2H
	DB	053H
	DB	045H
	DB	0f7H
	DB	03dH
	DB	09eH
	DB	091H
	DB	079H
	DB	040H
	DB	0e1H
	DB	098H
	DB	0d6H
	DB	019H
	DB	083H
	DB	029H
	DB	050H
	DB	0dcH
	DB	099H
	DB	0f2H
	DB	02aH
	DB	0cdH
	DB	075H
	DB	048H
	DB	09dH
	DB	02fH
	DB	0feH
	DB	0daH
	DB	0d5H
	DB	04fH
	DB	0f6H
	DB	09aH
	DB	091H
	DB	0c9H
	DB	05fH
	DB	08aH
	DB	086H
	DB	0fdH
	DB	01cH
	DB	00H
	DB	0beH
	DB	0fdH
	DB	019H
	DB	015H
	DB	017H
	DB	09cH
	DB	03eH
	DB	0e7H
	DB	0f9H
	DB	0d8H
	DB	05aH
	DB	024H
	DB	0a6H
	DB	04fH
	DB	0ebH
	DB	044H
	DB	07fH
	DB	0ebH
	DB	09eH
	DB	0d4H
	DB	03bH
	DB	015H
	DB	06fH
	DB	0cdH
	DB	0deH
	DB	0ceH
	DB	0d7H
	DB	065H
	DB	04dH
	DB	0f3H
	DB	0e5H
	DB	08bH
	DB	071H
	DB	0feH
	DB	020H
	DB	09H
	DB	01bH
	DB	05fH
	DB	070H
	DB	094H
	DB	0b7H
	DB	0caH
	DB	0b8H
	DB	0ddH
	DB	099H
	DB	0a5H
	DB	0a1H
	DB	019H
	DB	011H
	DB	0bfH
	DB	06eH
	DB	0cbH
	DB	0d5H
	DB	05dH
	DB	099H
	DB	034H
	DB	0acH
	DB	0f0H
	DB	01aH
	DB	079H
	DB	064H
	DB	00H
	DB	084H
	DB	0d6H
	DB	07eH
	DB	0a4H
	DB	05fH
	DB	099H
	DB	04H
	DB	04fH
	DB	02fH
	DB	03bH
	DB	099H
	DB	067H
	DB	098H
	DB	033H
	DB	08cH
	DB	03aH
	DB	0ccH
	DB	09dH
	DB	0faH
	DB	03bH
	DB	0e9H
	DB	050H
	DB	018H
	DB	083H
	DB	084H
	DB	044H
	DB	0f4H
	DB	09eH
	DB	0bdH
	DB	059H
	DB	01eH
	DB	042H
	DB	030H
	DB	09cH
	DB	0e7H
	DB	0fH
	DB	037H
	DB	06bH
	DB	05eH
	DB	0e5H
	DB	027H
	DB	0f7H
	DB	0ccH
	DB	0bfH
	DB	0abH
	DB	05aH
	DB	0faH
	DB	078H
	DB	077H
	DB	075H
	DB	033H
	DB	061H
	DB	0c5H
	DB	04bH
	DB	065H
	DB	0c9H
	DB	090H
	DB	05aH
	DB	0e8H
	DB	0cdH
	DB	0b3H
	DB	07H
	DB	090H
	DB	064H
	DB	0a4H
	DB	0f7H
	DB	0f2H
	DB	05bH
	DB	0e2H
	DB	052H
	DB	0c0H
	DB	0aH
	DB	0c9H
	DB	08dH
	DB	0caH
	DB	075H
	DB	067H
	DB	045H
	DB	0edH
	DB	05fH
	DB	03aH
	DB	021H
	DB	040H
	DB	07fH
	DB	0ecH
	DB	025H
	DB	049H
	DB	0fcH
	DB	0feH
	DB	0b1H
	DB	0caH
	DB	033H
	DB	0b9H
	DB	05bH
	DB	097H
	DB	0ddH
	DB	0d2H
	DB	0aH
	DB	039H
	DB	0b6H
	DB	0dbH
	DB	0f9H
	DB	0c0H
	DB	0a6H
	DB	07H
	DB	0bH
	DB	09bH
	DB	06fH
	DB	0cfH
	DB	0aH
	DB	04eH
	DB	089H
	DB	0aaH
	DB	08eH
	DB	09H
	DB	097H
	DB	0b4H
	DB	0d2H
	DB	014H
	DB	0b3H
	DB	084H
	DB	0dfH
	DB	066H
	DB	03eH
	DB	0baH
	DB	0fdH
	DB	09bH
	DB	08eH
	DB	088H
	DB	0d4H
	DB	045H
	DB	064H
	DB	04eH
	DB	085H
	DB	0bH
	DB	056H
	DB	011H
	DB	027H
	DB	045H
	DB	060H
	DB	031H
	DB	013H
	DB	0eaH
	DB	0dbH
	DB	0a1H
	DB	0f3H
	DB	0f3H
	DB	0d5H
	DB	046H
	DB	08H
	DB	0aH
	DB	0cbH
	DB	067H
	DB	070H
	DB	089H
	DB	0a2H
	DB	0eeH
	DB	026H
	DB	031H
	DB	077H
	DB	07aH
	DB	0f5H
	DB	0dbH
	DB	0c9H
	DB	0faH
	DB	067H
	DB	09fH
	DB	08bH
	DB	08eH
	DB	064H
	DB	0ecH
	DB	03fH
	DB	077H
	DB	0d7H
	DB	09aH
	DB	019H
	DB	04bH
	DB	0eH
	DB	06fH
	DB	092H
	DB	096H
	DB	079H
	DB	0ddH
	DB	0fdH
	DB	069H
	DB	0e6H
	DB	020H
	DB	058H
	DB	08cH
	DB	051H
	DB	04fH
	DB	08H
	DB	0c6H
	DB	02cH
	DB	051H
	DB	042H
	DB	013H
	DB	070H
	DB	0cdH
	DB	0a1H
	DB	0d4H
	DB	0baH
	DB	060H
	DB	0cbH
	DB	012H
	DB	0faH
	DB	064H
	DB	05eH
	DB	0aH
	DB	0d3H
	DB	070H
	DB	0a0H
	DB	0ccH
	DB	0cdH
	DB	01eH
	DB	037H
	DB	0b4H
	DB	03fH
	DB	0fH
	DB	0c1H
	DB	010H
	DB	05fH
	DB	049H
	DB	057H
	DB	0bH
	DB	01aH
	DB	099H
	DB	01eH
	DB	08aH
	DB	0e6H
	DB	03fH
	DB	0deH
	DB	022H
	DB	09fH
	DB	0aaH
	DB	034H
	DB	09aH
	DB	0fH
	DB	012H
	DB	024H
	DB	063H
	DB	082H
	DB	0c4H
	DB	030H
	DB	0cfH
	DB	063H
	DB	0e6H
	DB	05H
	DB	0a2H
	DB	076H
	DB	0c6H
	DB	0b2H
	DB	0d5H
	DB	010H
	DB	0aH
	DB	060H
	DB	02aH
	DB	023H
	DB	0fdH
	DB	034H
	DB	0bH
	DB	03dH
	DB	013H
	DB	02dH
	DB	05cH
	DB	0bdH
	DB	061H
	DB	076H
	DB	04cH
	DB	0f3H
	DB	09bH
	DB	0afH
	DB	0f5H
	DB	0dfH
	DB	060H
	DB	0c6H
	DB	043H
	DB	047H
	DB	0cbH
	DB	0e5H
	DB	03dH
	DB	092H
	DB	099H
	DB	013H
	DB	022H
	DB	023H
	DB	0f2H
	DB	04cH
	DB	047H
	DB	0f0H
	DB	080H
	DB	0d1H
	DB	0adH
	DB	013H
	DB	0feH
	DB	0aH
	DB	0d0H
	DB	0dfH
	DB	081H
	DB	09cH
	DB	0d3H
	DB	01dH
	DB	04dH
	DB	0caH
	DB	0fcH
	DB	0adH
	DB	011H
	DB	0c0H
	DB	074H
	DB	0dcH
	DB	0a6H
	DB	0b2H
	DB	0eeH
	DB	0bfH
	DB	045H
	DB	011H
	DB	0e3H
	DB	0b8H
	DB	0dcH
	DB	0aaH
	DB	0a9H
	DB	0dcH
	DB	07cH
	DB	058H
	DB	0efH
	DB	0faH
	DB	0e1H
	DB	040H
	DB	0daH
	DB	063H
	DB	0dcH
	DB	02fH
	DB	00H
	DB	0a9H
	DB	079H
	DB	07dH
	DB	0d6H
	DB	08aH
	DB	03eH
	DB	0cbH
	DB	0e6H
	DB	0e4H
	DB	07eH
	DB	0d5H
	DB	025H
	DB	043H
	DB	066H
	DB	088H
	DB	0fbH
	DB	043H
	DB	033H
	DB	026H
	DB	020H
	DB	02fH
	DB	0fdH
	DB	08fH
	DB	0a9H
	DB	0dfH
	DB	0cfH
	DB	04H
	DB	044H
	DB	02cH
	DB	033H
	DB	044H
	DB	0d6H
	DB	02cH
	DB	0c1H
	DB	02dH
	DB	036H
	DB	07fH
	DB	0f8H
	DB	01dH
	DB	0e4H
	DB	0f6H
	DB	072H
	DB	0aH
	DB	03bH
	DB	0d8H
	DB	092H
	DB	0b6H
	DB	09bH
	DB	045H
	DB	0dcH
	DB	03bH
	DB	0f3H
	DB	0daH
	DB	0caH
	DB	09dH
	DB	0bbH
	DB	01aH
	DB	0a1H
	DB	07fH
	DB	0c6H
	DB	055H
	DB	043H
	DB	09dH
	DB	01H
	DB	085H
	DB	04aH
	DB	038H
	DB	05H
	DB	044H
	DB	0d4H
	DB	0e9H
	DB	03bH
	DB	048H
	DB	073H
	DB	0f5H
	DB	0a0H
	DB	06H
	DB	0adH
	DB	03dH
	DB	0caH
	DB	08aH
	DB	0f7H
	DB	0beH
	DB	0e5H
	DB	0c3H
	DB	0dbH
	DB	021H
	DB	05dH
	DB	0fdH
	DB	0a0H
	DB	024H
	DB	0d2H
	DB	0e3H
	DB	041H
	DB	0d3H
	DB	069H
	DB	08cH
	DB	08bH
	DB	0eeH
	DB	050H
	DB	061H
	DB	0d8H
	DB	08bH
	DB	029H
	DB	04dH
	DB	082H
	DB	0c9H
	DB	0d2H
	DB	030H
	DB	086H
	DB	09eH
	DB	03aH
	DB	07fH
	DB	0dcH
	DB	09fH
	DB	0c2H
	DB	039H
	DB	0c0H
	DB	09fH
	DB	037H
	DB	0e0H
	DB	044H
	DB	0aH
	DB	0c5H
	DB	085H
	DB	05dH
	DB	0aeH
	DB	091H
	DB	0e9H
	DB	09dH
	DB	0e1H
	DB	04bH
	DB	0f6H
	DB	06eH
	DB	0f3H
	DB	0c3H
	DB	070H
	DB	0bdH
	DB	096H
	DB	020H
	DB	0c4H
	DB	0b4H
	DB	05aH
	DB	0c3H
	DB	012H
	DB	07aH
	DB	06H
	DB	04bH
	DB	03bH
	DB	0a5H
	DB	02H
	DB	01dH
	DB	0e9H
	DB	08bH
	DB	062H
	DB	0efH
	DB	0e8H
	DB	011H
	DB	081H
	DB	0d2H
	DB	02fH
	DB	0e3H
	DB	09dH
	DB	026H
	DB	0d1H
	DB	091H
	DB	0e9H
	DB	042H
	DB	0cfH
	DB	00H
	DB	062H
	DB	094H
	DB	0b5H
	DB	03cH
	DB	0d7H
	DB	047H
	DB	0b6H
	DB	0ddH
	DB	092H
	DB	072H
	DB	03H
	DB	014H
	DB	08fH
	DB	0edH
	DB	09fH
	DB	071H
	DB	05dH
	DB	088H
	DB	02H
	DB	05eH
	DB	0dbH
	DB	031H
	DB	042H
	DB	079H
	DB	0d6H
	DB	014H
	DB	0cH
	DB	040H
	DB	0d5H
	DB	0dbH
	DB	041H
	DB	0b7H
	DB	0efH
	DB	076H
	DB	0f4H
	DB	0c7H
	DB	0bdH
	DB	02bH
	DB	025H
	DB	0cfH
	DB	09dH
	DB	028H
	DB	0e3H
	DB	0acH
	DB	095H
	DB	03H
	DB	01eH
	DB	0f2H
	DB	08bH
	DB	021H
	DB	052H
	DB	067H
	DB	0d1H
	DB	094H
	DB	061H
	DB	029H
	DB	029H
	DB	06dH
	DB	069H
	DB	0feH
	DB	0c8H
	DB	02aH
	DB	0b7H
	DB	038H
	DB	020H
	DB	02cH
	DB	07fH
	DB	05dH
	DB	057H
	DB	0a4H
	DB	0acH
	DB	0f5H
	DB	0ccH
	DB	090H
	DB	022H
	DB	063H
	DB	093H
	DB	041H
	DB	056H
	DB	09fH
	DB	062H
	DB	028H
	DB	086H
	DB	0b3H
	DB	0bdH
	DB	0e7H
	DB	0dcH
	DB	066H
	DB	0d4H
	DB	047H
	DB	0e4H
	DB	09dH
	DB	0f0H
	DB	01cH
	DB	0d5H
	DB	012H
	DB	048H
	DB	055H
	DB	0eeH
	DB	020H
	DB	079H
	DB	09cH
	DB	016H
	DB	047H
	DB	0acH
	DB	0b7H
	DB	02aH
	DB	0c0H
	DB	0f8H
	DB	00H
	DB	060H
	DB	0daH
	DB	029H
	DB	066H
	DB	08fH
	DB	066H
	DB	04fH
	DB	06cH
	DB	04cH
	DB	024H
	DB	033H
	DB	031H
	DB	0c2H
	DB	0a4H
	DB	04eH
	DB	018H
	DB	036H
	DB	096H
	DB	0edH
	DB	025H
	DB	0b6H
	DB	0e6H
	DB	0c1H
	DB	04cH
	DB	0adH
	DB	06fH
	DB	05H
	DB	0d7H
	DB	030H
	DB	07dH
	DB	058H
	DB	010H
	DB	059H
	DB	01H
	DB	076H
	DB	068H
	DB	0e6H
	DB	0c5H
	DB	054H
	DB	033H
	DB	06aH
	DB	08H
	DB	064H
	DB	0acH
	DB	0acH
	DB	032H
	DB	044H
	DB	0e2H
	DB	049H
	DB	032H
	DB	087H
	DB	07fH
	DB	099H
	DB	04aH
	DB	04cH
	DB	047H
	DB	039H
	DB	0d0H
	DB	09fH
	DB	0e8H
	DB	04eH
	DB	0f7H
	DB	0f8H
	DB	027H
	DB	0f8H
	DB	0eeH
	DB	08fH
	DB	05fH
	DB	035H
	DB	064H
	DB	092H
	DB	09fH
	DB	06cH
	DB	076H
	DB	04cH
	DB	098H
	DB	029H
	DB	010H
	DB	0faH
	DB	072H
	DB	0c2H
	DB	082H
	DB	0f1H
	DB	05cH
	DB	0ccH
	DB	03eH
	DB	0a3H
	DB	085H
	DB	08eH
	DB	043H
	DB	06eH
	DB	0ddH
	DB	0baH
	DB	0e6H
	DB	084H
	DB	0b3H
	DB	0d6H
	DB	015H
	DB	092H
	DB	08bH
	DB	0f8H
	DB	0a4H
	DB	02bH
	DB	065H
	DB	01cH
	DB	0f6H
	DB	07dH
	DB	045H
	DB	07H
	DB	078H
	DB	037H
	DB	049H
	DB	0faH
	DB	029H
	DB	0a5H
	DB	048H
	DB	0e7H
	DB	04aH
	DB	0cdH
	DB	076H
	DB	0dH
	DB	0bcH
	DB	0d3H
	DB	0c8H
	DB	0a3H
	DB	059H
	DB	0fbH
	DB	0f9H
	DB	0edH
	DB	08fH
	DB	085H
	DB	0e6H
	DB	034H
	DB	030H
	DB	0cbH
	DB	0cfH
	DB	0a6H
	DB	049H
	DB	094H
	DB	02eH
	DB	041H
	DB	0cbH
	DB	077H
	DB	03cH
	DB	075H
	DB	09dH
	DB	04H
	DB	05dH
	DB	0e7H
	DB	052H
	DB	053H
	DB	074H
	DB	0fH
	DB	028H
	DB	03dH
	DB	032H
	DB	01H
	DB	03aH
	DB	0acH
	DB	0eeH
	DB	049H
	DB	0b1H
	DB	0d5H
	DB	0fcH
	DB	0e2H
	DB	021H
	DB	0cdH
	DB	09H
	DB	06aH
	DB	062H
	DB	0b6H
	DB	02bH
	DB	02fH
	DB	0aeH
	DB	0e6H
	DB	024H
	DB	04cH
	DB	0ebH
	DB	081H
	DB	0b3H
	DB	03eH
	DB	054H
	DB	028H
	DB	0ccH
	DB	0fbH
	DB	0e5H
	DB	0feH
	DB	0fcH
	DB	09fH
	DB	0abH
	DB	0ebH
	DB	0e8H
	DB	0ddH
	DB	041H
	DB	0e5H
	DB	0c0H
	DB	062H
	DB	0b3H
	DB	049H
	DB	04cH
	DB	096H
	DB	080H
	DB	077H
	DB	045H
	DB	02fH
	DB	05fH
	DB	069H
	DB	07bH
	DB	0caH
	DB	06aH
	DB	0aeH
	DB	09H
	DB	0beH
	DB	0d6H
	DB	055H
	DB	0bbH
	DB	0bcH
	DB	0d3H
	DB	038H
	DB	0dbH
	DB	00H
	DB	025H
	DB	0c4H
	DB	0ddH
	DB	066H
	DB	02bH
	DB	01eH
	DB	049H
	DB	05eH
	DB	067H
	DB	095H
	DB	0f4H
	DB	0e7H
	DB	08dH
	DB	0b9H
	DB	017H
	DB	0ecH
	DB	023H
	DB	012H
	DB	0b7H
	DB	08dH
	DB	0c0H
	DB	040H
	DB	0ccH
	DB	018H
	DB	095H
	DB	08H
	DB	054H
	DB	069H
	DB	040H
	DB	031H
	DB	069H
	DB	065H
	DB	075H
	DB	047H
	DB	04cH
	DB	0a0H
	DB	065H
	DB	095H
	DB	00H
	DB	04dH
	DB	0aaH
	DB	074H
	DB	0b4H
	DB	038H
	DB	02fH
	DB	04cH
	DB	0a4H
	DB	052H
	DB	05eH
	DB	05cH
	DB	060H
	DB	09fH
	DB	01cH
	DB	0acH
	DB	037H
	DB	031H
	DB	0b4H
	DB	08bH
	DB	09bH
	DB	0f4H
	DB	03cH
	DB	084H
	DB	0daH
	DB	0b2H
	DB	04cH
	DB	0a6H
	DB	053H
	DB	031H
	DB	0bbH
	DB	053H
	DB	07eH
	DB	066H
	DB	048H
	DB	0b3H
	DB	01fH
	DB	077H
	DB	00H
	DB	0c3H
	DB	049H
	DB	0ddH
	DB	0a0H
	DB	0a9H
	DB	0fcH
	DB	0bcH
	DB	056H
	DB	034H
	DB	0eeH
	DB	08aH
	DB	040H
	DB	0aH
	DB	00H
	DB	07cH
	DB	0eH
	DB	0daH
	DB	02fH
	DB	05aH
	DB	01H
	DB	083H
	DB	08cH
	DB	0bcH
	DB	056H
	DB	08aH
	DB	0a2H
	DB	09eH
	DB	03eH
	DB	0c1H
	DB	095H
	DB	0bdH
	DB	086H
	DB	0dfH
	DB	09cH
	DB	0a6H
	DB	09H
	DB	019H
	DB	0e2H
	DB	0dfH
	DB	04eH
	DB	051H
	DB	06aH
	DB	08eH
	DB	05bH
	DB	06aH
	DB	0bH
	DB	0e9H
	DB	0c4H
	DB	03bH
	DB	044H
	DB	0c5H
	DB	03eH
	DB	050H
	DB	082H
	DB	094H
	DB	05bH
	DB	026H
	DB	0b3H
	DB	099H
	DB	067H
	DB	049H
	DB	0d7H
	DB	06dH
	DB	0a8H
	DB	074H
	DB	014H
	DB	0b2H
	DB	0dH
	DB	077H
	DB	092H
	DB	05bH
	DB	0c8H
	DB	0fcH
	DB	069H
	DB	0a4H
	DB	0e7H
	DB	075H
	DB	08eH
	DB	0acH
	DB	030H
	DB	0d2H
	DB	073H
	DB	06eH
	DB	0a3H
	DB	075H
	DB	082H
	DB	0feH
	DB	01bH
	DB	036H
	DB	098H
	DB	083H
	DB	00H
	DB	0efH
	DB	070H
	DB	0a8H
	DB	0e3H
	DB	085H
	DB	05bH
	DB	0f1H
	DB	0fcH
	DB	06dH
	DB	04dH
	DB	045H
	DB	0eaH
	DB	0b7H
	DB	0e9H
	DB	0d2H
	DB	0acH
	DB	078H
	DB	07fH
	DB	0dcH
	DB	0cbH
	DB	072H
	DB	0caH
	DB	06fH
	DB	068H
	DB	0ccH
	DB	06eH
	DB	083H
	DB	04H
	DB	086H
	DB	086H
	DB	083H
	DB	077H
	DB	0f7H
	DB	02cH
	DB	05bH
	DB	0fcH
	DB	08H
	DB	04dH
	DB	079H
	DB	075H
	DB	09bH
	DB	0beH
	DB	060H
	DB	0d2H
	DB	029H
	DB	0b2H
	DB	07fH
	DB	0a1H
	DB	0b2H
	DB	0dbH
	DB	06dH
	DB	025H
	DB	0a6H
	DB	0dcH
	DB	08dH
	DB	073H
	DB	0caH
	DB	091H
	DB	0f6H
	DB	052H
	DB	097H
	DB	0f9H
	DB	0c9H
	DB	0fH
	DB	0a6H
	DB	025H
	DB	08bH
	DB	02eH
	DB	073H
	DB	05H
	DB	023H
	DB	08eH
	DB	044H
	DB	04H
	DB	061H
	DB	0ecH
	DB	0b6H
	DB	060H
	DB	08eH
	DB	069H
	DB	0bbH
	DB	07cH
	DB	0fH
	DB	062H
	DB	0d8H
	DB	09cH
	DB	055H
	DB	0a4H
	DB	0adH
	DB	0ccH
	DB	0f6H
	DB	0c5H
	DB	046H
	DB	0c0H
	DB	0d4H
	DB	0ecH
	DB	0e5H
	DB	061H
	DB	01bH
	DB	0d8H
	DB	0e5H
	DB	03fH
	DB	067H
	DB	02aH
	DB	043H
	DB	048H
	DB	017H
	DB	079H
	DB	0a8H
	DB	026H
	DB	0e3H
	DB	064H
	DB	022H
	DB	0f2H
	DB	046H
	DB	0faH
	DB	0fH
	DB	01cH
	DB	01fH
	DB	03dH
	DB	068H
	DB	016H
	DB	03H
	DB	0aeH
	DB	0d6H
	DB	0d7H
	DB	01cH
	DB	03dH
	DB	039H
	DB	0b6H
	DB	016H
	DB	020H
	DB	0f5H
	DB	0fdH
	DB	0c9H
	DB	0b8H
	DB	046H
	DB	061H
	DB	033H
	DB	06fH
	DB	07H
	DB	017H
	DB	053H
	DB	029H
	DB	089H
	DB	01aH
	DB	0a3H
	DB	098H
	DB	036H
	DB	0c3H
	DB	0d5H
	DB	01eH
	DB	0d9H
	DB	0d8H
	DB	04cH
	DB	031H
	DB	031H
	DB	068H
	DB	0edH
	DB	06aH
	DB	020H
	DB	083H
	DB	0aH
	DB	095H
	DB	081H
	DB	054H
	DB	04fH
	DB	048H
	DB	035H
	DB	02H
	DB	0b7H
	DB	03cH
	DB	019H
	DB	08aH
	DB	0e4H
	DB	022H
	DB	0a4H
	DB	088H
	DB	0baH
	DB	05aH
	DB	0cbH
	DB	011H
	DB	078H
	DB	0a6H
	DB	069H
	DB	0c5H
	DB	057H
	DB	09aH
	DB	0adH
	DB	0c4H
	DB	085H
	DB	0cdH
	DB	048H
	DB	0fH
	DB	0e3H
	DB	04aH
	DB	063H
	DB	033H
	DB	092H
	DB	018H
	DB	035H
	DB	0c9H
	DB	054H
	DB	0cdH
	DB	054H
	DB	0b8H
	DB	0efH
	DB	079H
	DB	042H
	DB	02aH
	DB	0d3H
	DB	0eH
	DB	03bH
	DB	04dH
	DB	034H
	DB	025H
	DB	013H
	DB	0bH
	DB	0bfH
	DB	040H
	DB	0cfH
	DB	0c4H
	DB	0fH
	DB	019H
	DB	0d4H
	DB	0f2H
	DB	063H
	DB	0b7H
	DB	0a5H
	DB	075H
	DB	0d0H
	DB	05aH
	DB	0beH
	DB	0a4H
	DB	028H
	DB	013H
	DB	05eH
	DB	097H
	DB	08cH
	DB	0a0H
	DB	0c1H
	DB	061H
	DB	02eH
	DB	07dH
	DB	02eH
	DB	0e2H
	DB	0a2H
	DB	0c0H
	DB	0edH
	DB	062H
	DB	01H
	DB	03eH
	DB	0a7H
	DB	08fH
	DB	0d6H
	DB	07cH
	DB	082H
	DB	03aH
	DB	0b3H
	DB	0a7H
	DB	02fH
	DB	084H
	DB	02H
	DB	0edH
	DB	02aH
	DB	02aH
	DB	080H
	DB	088H
	DB	041H
	DB	08dH
	DB	0a8H
	DB	04H
	DB	06eH
	DB	056H
	DB	081H
	DB	09cH
	DB	0b8H
	DB	024H
	DB	0dcH
	DB	027H
	DB	06H
	DB	0ddH
	DB	065H
	DB	0adH
	DB	06eH
	DB	03cH
	DB	0a9H
	DB	070H
	DB	0f5H
	DB	05eH
	DB	019H
	DB	0a4H
	DB	0e2H
	DB	09aH
	DB	092H
	DB	08cH
	DB	045H
	DB	092H
	DB	094H
	DB	086H
	DB	020H
	DB	03dH
	DB	08aH
	DB	0eH
	DB	014H
	DB	0cH
	DB	0aaH
	DB	0ccH
	DB	0afH
	DB	087H
	DB	0f3H
	DB	0b6H
	DB	0e5H
	DB	059H
	DB	0e3H
	DB	0d3H
	DB	015H
	DB	08eH
	DB	044H
	DB	0bH
	DB	06cH
	DB	0dcH
	DB	02fH
	DB	0ceH
	DB	078H
	DB	0c1H
	DB	05cH
	DB	0bdH
	DB	055H
	DB	0f0H
	DB	044H
	DB	0f4H
	DB	0aeH
	DB	04fH
	DB	04H
	DB	0c2H
	DB	0daH
	DB	02eH
	DB	08fH
	DB	08bH
	DB	036H
	DB	04H
	DB	0c1H
	DB	01cH
	DB	0dcH
	DB	0a5H
	DB	0efH
	DB	0f2H
	DB	0b3H
	DB	0b3H
	DB	07dH
	DB	020H
	DB	091H
	DB	0adH
	DB	0efH
	DB	089H
	DB	0eeH
	DB	0cbH
	DB	047H
	DB	0c3H
	DB	0bcH
	DB	0bH
	DB	0b9H
	DB	06bH
	DB	0d9H
	DB	03dH
	DB	0adH
	DB	0b5H
	DB	06bH
	DB	03eH
	DB	0c0H
	DB	0a1H
	DB	0c1H
	DB	082H
	DB	03dH
	DB	09eH
	DB	0a7H
	DB	0acH
	DB	091H
	DB	0dbH
	DB	0e0H
	DB	08fH
	DB	07bH
	DB	072H
	DB	03dH
	DB	0eaH
	DB	07bH
	DB	0abH
	DB	0b6H
	DB	042H
	DB	070H
	DB	0f3H
	DB	04dH
	DB	02aH
	DB	05fH
	DB	028H
	DB	067H
	DB	08dH
	DB	05dH
	DB	052H
	DB	04bH
	DB	01eH
	DB	074H
	DB	0dH
	DB	0a0H
	DB	0b1H
	DB	0abH
	DB	0c7H
	DB	0deH
	DB	0bdH
	DB	0a3H
	DB	0bfH
	DB	04dH
	DB	020H
	DB	0b1H
	DB	0aH
	DB	0bH
	DB	0acH
	DB	0b5H
	DB	042H
	DB	0eeH
	DB	026H
	DB	036H
	DB	0bbH
	DB	050H
	DB	015H
	DB	0e3H
	DB	037H
	DB	0a2H
	DB	0c0H
	DB	08aH
	DB	0edH
	DB	0deH
	DB	0feH
	DB	0faH
	DB	07fH
	DB	030H
	DB	0a7H
	DB	0c7H
	DB	08eH
	DB	065H
	DB	06bH
	DB	0cdH
	DB	032H
	DB	0bH
	DB	0feH
	DB	03cH
	DB	096H
	DB	0abH
	DB	0f1H
	DB	0d8H
	DB	09aH
	DB	019H
	DB	0fH
	DB	057H
	DB	0e8H
	DB	024H
	DB	0baH
	DB	021H
	DB	047H
	DB	07cH
	DB	02bH
	DB	035H
	DB	05bH
	DB	0a9H
	DB	0b0H
	DB	05bH
	DB	0d9H
	DB	0d7H
	DB	023H
	DB	0e8H
	DB	03dH
	DB	0eH
	DB	0b6H
	DB	0eeH
	DB	01aH
	DB	0b6H
	DB	02bH
	DB	0b0H
	DB	062H
	DB	01dH
	DB	09H
	DB	07dH
	DB	0b5H
	DB	018H
	DB	0d4H
	DB	01fH
	DB	0bbH
	DB	0fH
	DB	0bfH
	DB	082H
	DB	0bH
	DB	0eaH
	DB	0b8H
	DB	067H
	DB	094H
	DB	0e8H
	DB	042H
	DB	0edH
	DB	0c0H
	DB	0e4H
	DB	0d6H
	DB	07dH
	DB	0f2H
	DB	08eH
	DB	06cH
	DB	08cH
	DB	0c4H
	DB	097H
	DB	0bcH
	DB	0a6H
	DB	034H
	DB	0c5H
	DB	024H
	DB	06aH
	DB	05dH
	DB	078H
	DB	089H
	DB	099H
	DB	088H
	DB	049H
	DB	01cH
	DB	093H
	DB	0b3H
	DB	054H
	DB	07aH
	DB	048H
	DB	03dH
	DB	03cH
	DB	0b5H
	DB	0fdH
	DB	021H
	DB	0dH
	DB	07bH
	DB	094H
	DB	01bH
	DB	067H
	DB	021H
	DB	0dfH
	DB	07eH
	DB	05eH
	DB	086H
	DB	0b3H
	DB	024H
	DB	0abH
	DB	09dH
	DB	082H
	DB	0a3H
	DB	027H
	DB	09bH
	DB	02cH
	DB	0efH
	DB	0b7H
	DB	040H
	DB	0a3H
	DB	0dH
	DB	03aH
	DB	0ebH
	DB	0c9H
	DB	0f6H
	DB	021H
	DB	0c8H
	DB	018H
	DB	02eH
	DB	0c3H
	DB	02cH
	DB	049H
	DB	0abH
	DB	0cdH
	DB	029H
	DB	02aH
	DB	02cH
	DB	030H
	DB	05dH
	DB	050H
	DB	0dbH
	DB	0faH
	DB	052H
	DB	0feH
	DB	022H
	DB	0edH
	DB	02cH
	DB	012H
	DB	026H
	DB	0ebH
	DB	0b5H
	DB	033H
	DB	0a5H
	DB	021H
	DB	0fcH
	DB	09cH
	DB	0c2H
	DB	045H
	DB	035H
	DB	0f0H
	DB	089H
	DB	061H
	DB	03bH
	DB	035H
	DB	02fH
	DB	0e3H
	DB	0deH
	DB	05bH
	DB	014H
	DB	03dH
	DB	02cH
	DB	06fH
	DB	038H
	DB	0fdH
	DB	06fH
	DB	0daH
	DB	0ecH
	DB	01bH
	DB	06cH
	DB	013H
	DB	086H
	DB	0a2H
	DB	0c5H
	DB	0abH
	DB	043H
	DB	042H
	DB	0c8H
	DB	06H
	DB	08H
	DB	0fdH
	DB	077H
	DB	091H
	DB	0deH
	DB	032H
	DB	046H
	DB	08eH
	DB	016H
	DB	025H
	DB	0e9H
	DB	0aaH
	DB	0e1H
	DB	095H
	DB	099H
	DB	01bH
	DB	094H
	DB	088H
	DB	075H
	DB	081H
	DB	023H
	DB	0e1H
	DB	014H
	DB	029H
	DB	04H
	DB	059H
	DB	0d5H
	DB	048H
	DB	09bH
	DB	09eH
	DB	04eH
	DB	023H
	DB	01cH
	DB	0c5H
	DB	0b4H
	DB	0faH
	DB	0f7H
	DB	07aH
	DB	089H
	DB	08eH
	DB	020H
	DB	0f3H
	DB	0b8H
	DB	02H
	DB	089H
	DB	052H
	DB	09cH
	DB	09dH
	DB	05bH
	DB	012H
	DB	09eH
	DB	07eH
	DB	074H
	DB	0b2H
	DB	028H
	DB	078H
	DB	08bH
	DB	0fdH
	DB	040H
	DB	028H
	DB	01cH
	DB	08fH
	DB	04bH
	DB	0b7H
	DB	0d4H
	DB	080H
	DB	0b2H
	DB	04dH
	DB	07aH
	DB	0bcH
	DB	05bH
	DB	09aH
	DB	030H
	DB	014H
	DB	01dH
	DB	0b9H
	DB	0e5H
	DB	0b9H
	DB	0d7H
	DB	041H
	DB	04cH
	DB	076H
	DB	040H
	DB	040H
	DB	02aH
	DB	068H
	DB	038H
	DB	0b5H
	DB	0e5H
	DB	079H
	DB	05dH
	DB	081H
	DB	088H
	DB	029H
	DB	039H
	DB	0dcH
	DB	029H
	DB	06bH
	DB	02aH
	DB	0a3H
	DB	028H
	DB	05H
	DB	0beH
	DB	058H
	DB	098H
	DB	0dbH
	DB	092H
	DB	07fH
	DB	015H
	DB	06aH
	DB	040H
	DB	0e0H
	DB	0e0H
	DB	080H
	DB	021H
	DB	08aH
	DB	068H
	DB	0d9H
	DB	0c0H
	DB	0cdH
	DB	053H
	DB	09dH
	DB	04fH
	DB	0dbH
	DB	0c6H
	DB	088H
	DB	0b8H
	DB	0efH
	DB	0f4H
	DB	063H
	DB	014H
	DB	09cH
	DB	068H
	DB	0d2H
	DB	0f5H
	DB	02H
	DB	02eH
	DB	08H
	DB	01H
	DB	0c2H
	DB	0f1H
	DB	041H
	DB	0a4H
	DB	0d2H
	DB	042H
	DB	045H
	DB	0ddH
	DB	02aH
	DB	01fH
	DB	09eH
	DB	0f8H
	DB	0f1H
	DB	03cH
	DB	048H
	DB	0cdH
	DB	083H
	DB	051H
	DB	07H
	DB	0f2H
	DB	046H
	DB	0e9H
	DB	086H
	DB	0e2H
	DB	052H
	DB	059H
	DB	058H
	DB	0d3H
	DB	07H
	DB	060H
	DB	054H
	DB	0caH
	DB	052H
	DB	016H
	DB	0eeH
	DB	0a5H
	DB	058H
	DB	0b3H
	DB	083H
	DB	02H
	DB	053H
	DB	0a1H
	DB	0faH
	DB	045H
	DB	05dH
	DB	0c3H
	DB	093H
	DB	060H
	DB	015H
	DB	09aH
	DB	054H
	DB	05bH
	DB	04H
	DB	0daH
	DB	0bdH
	DB	056H
	DB	0b4H
	DB	017H
	DB	0aaH
	DB	03bH
	DB	077H
	DB	07eH
	DB	06H
	DB	04aH
	DB	094H
	DB	074H
	DB	06fH
	DB	06cH
	DB	0a8H
	DB	0f2H
	DB	06fH
	DB	0fbH
	DB	014H
	DB	06aH
	DB	0c0H
	DB	0f0H
	DB	0adH
	DB	054H
	DB	052H
	DB	0c2H
	DB	06eH
	DB	026H
	DB	01eH
	DB	072H
	DB	080H
	DB	0dcH
	DB	049H
	DB	035H
	DB	073H
	DB	073H
	DB	0f0H
	DB	06aH
	DB	0f1H
	DB	0f6H
	DB	0b4H
	DB	087H
	DB	0ebH
	DB	024H
	DB	073H
	DB	094H
	DB	096H
	DB	0e2H
	DB	010H
	DB	02aH
	DB	0cdH
	DB	0d0H
	DB	01cH
	DB	07bH
	DB	026H
	DB	0edH
	DB	03fH
	DB	014H
	DB	014H
	DB	0dcH
	DB	087H
	DB	094H
	DB	039H
	DB	0d0H
	DB	04aH
	DB	0acH
	DB	0c3H
	DB	03bH
	DB	097H
	DB	0b5H
	DB	0b1H
	DB	04cH
	DB	0bcH
	DB	01dH
	DB	0f0H
	DB	031H
	DB	0b1H
	DB	087H
	DB	093H
	DB	0c1H
	DB	032H
	DB	061H
	DB	013H
	DB	04eH
	DB	05dH
	DB	039H
	DB	03cH
	DB	01cH
	DB	04dH
	DB	0cfH
	DB	0f8H
	DB	054H
	DB	064H
	DB	0b2H
	DB	0a4H
	DB	02eH
	DB	0deH
	DB	068H
	DB	069H
	DB	076H
	DB	09eH
	DB	09bH
	DB	0c3H
	DB	05bH
	DB	0b8H
	DB	034H
	DB	0cH
	DB	0eaH
	DB	03bH
	DB	0a0H
	DB	02cH
	DB	06dH
	DB	081H
	DB	03fH
	DB	03bH
	DB	0deH
	DB	0f7H
	DB	077H
	DB	07aH
	DB	0c5H
	DB	047H
	DB	074H
	DB	01aH
	DB	02cH
	DB	027H
	DB	0bfH
	DB	0d9H
	DB	085H
	DB	0a7H
	DB	044H
	DB	0fcH
	DB	046H
	DB	05fH
	DB	040H
	DB	022H
	DB	097H
	DB	074H
	DB	0adH
	DB	082H
	DB	0afH
	DB	0cdH
	DB	02fH
	DB	09dH
	DB	050H
	DB	0edH
	DB	0d8H
	DB	0aeH
	DB	0e6H
	DB	051H
	DB	02aH
	DB	0acH
	DB	018H
	DB	01eH
	DB	0c6H
	DB	0c3H
	DB	0c4H
	DB	06H
	DB	09eH
	DB	04aH
	DB	02eH
	DB	062H
	DB	047H
	DB	074H
	DB	0c1H
	DB	087H
	DB	016H
	DB	0d8H
	DB	07bH
	DB	0c4H
	DB	0dbH
	DB	02cH
	DB	012H
	DB	0bH
	DB	049H
	DB	062H
	DB	0f8H
	DB	022H
	DB	091H
	DB	05fH
	DB	0f2H
	DB	03bH
	DB	0cH
	DB	0cH
	DB	0d8H
	DB	053H
	DB	04fH
	DB	09dH
	DB	0d8H
	DB	0edH
	DB	067H
	DB	07H
	DB	0cfH
	DB	0afH
	DB	0fbH
	DB	011H
	DB	0b6H
	DB	012H
	DB	0eaH
	DB	033H
	DB	056H
	DB	0c6H
	DB	0deH
	DB	069H
	DB	051H
	DB	028H
	DB	04bH
	DB	0c9H
	DB	0c9H
	DB	05cH
	DB	02aH
	DB	0bdH
	DB	017H
	DB	0b5H
	DB	049H
	DB	0efH
	DB	09H
	DB	098H
	DB	08dH
	DB	062H
	DB	07H
	DB	0f5H
	DB	069H
	DB	056H
	DB	025H
	DB	0e4H
	DB	068H
	DB	05bH
	DB	077H
	DB	0d2H
	DB	0eH
	DB	0cdH
	DB	099H
	DB	0ecH
	DB	0b6H
	DB	06aH
	DB	094H
	DB	082H
	DB	034H
	DB	0deH
	DB	05eH
	DB	0ddH
	DB	09cH
	DB	076H
	DB	094H
	DB	0e5H
	DB	066H
	DB	01dH
	DB	0fdH
	DB	0f4H
	DB	07fH
	DB	084H
	DB	06aH
	DB	0e9H
	DB	0dbH
	DB	0fH
	DB	0ceH
	DB	044H
	DB	06aH
	DB	046H
	DB	017H
	DB	079H
	DB	094H
	DB	030H
	DB	0e5H
	DB	0caH
	DB	01aH
	DB	0faH
	DB	04dH
	DB	0cdH
	DB	0d9H
	DB	0acH
	DB	0acH
	DB	076H
	DB	0a2H
	DB	041H
	DB	0dbH
	DB	09H
	DB	05eH
	DB	059H
	DB	07dH
	DB	0deH
	DB	0deH
	DB	067H
	DB	048H
	DB	0baH
	DB	076H
	DB	096H
	DB	07eH
	DB	0e1H
	DB	0ddH
	DB	015H
	DB	05bH
	DB	0f1H
	DB	045H
	DB	0c0H
	DB	0bcH
	DB	0deH
	DB	0bbH
	DB	08aH
	DB	0acH
	DB	015H
	DB	0b6H
	DB	059H
	DB	0bH
	DB	059H
	DB	01aH
	DB	0e6H
	DB	062H
	DB	079H
	DB	041H
	DB	060H
	DB	0d7H
	DB	09fH
	DB	0c7H
	DB	020H
	DB	0d9H
	DB	03fH
	DB	0b6H
	DB	058H
	DB	0a0H
	DB	014H
	DB	06dH
	DB	07bH
	DB	06H
	DB	032H
	DB	03cH
	DB	043H
	DB	011H
	DB	078H
	DB	0cdH
	DB	03dH
	DB	08dH
	DB	04H
	DB	097H
	DB	099H
	DB	05dH
	DB	0b1H
	DB	00H
	DB	03fH
	DB	0aaH
	DB	041H
	DB	09fH
	DB	082H
	DB	060H
	DB	068H
	DB	022H
	DB	03aH
	DB	027H
	DB	059H
	DB	092H
	DB	0c7H
	DB	06dH
	DB	07fH
	DB	043H
	DB	0f3H
	DB	031H
	DB	0feH
	DB	0b6H
	DB	0c1H
	DB	077H
	DB	04H
	DB	00H
	DB	06H
	DB	08H
	DB	097H
	DB	09fH
	DB	0e4H
	DB	0c8H
	DB	09fH
	DB	024H
	DB	0f3H
	DB	061H
	DB	044H
	DB	0f5H
	DB	041H
	DB	02cH
	DB	019H
	DB	07cH
	DB	0d2H
	DB	0f1H
	DB	08eH
	DB	09aH
	DB	0deH
	DB	08eH
	DB	05dH
	DB	0d2H
	DB	0bfH
	DB	05cH
	DB	09H
	DB	082H
	DB	0d4H
	DB	0dH
	DB	082H
	DB	05aH
	DB	094H
	DB	099H
	DB	079H
	DB	079H
	DB	0e1H
	DB	019H
	DB	01eH
	DB	0d5H
	DB	0f9H
	DB	0e1H
	DB	0ccH
	DB	03cH
	DB	0eH
	DB	065H
	DB	0b8H
	DB	0e0H
	DB	057H
	DB	0c6H
	DB	0faH
	DB	036H
	DB	055H
	DB	0d7H
	DB	089H
	DB	016H
	DB	034H
	DB	012H
	DB	018H
	DB	088H
	DB	020H
	DB	01aH
	DB	062H
	DB	034H
	DB	0b3H
	DB	0dbH
	DB	02eH
	DB	015H
	DB	0f5H
	DB	04cH
	DB	06bH
	DB	06fH
	DB	0adH
	DB	038H
	DB	0abH
	DB	0bbH
	DB	01dH
	DB	0e3H
	DB	01cH
	DB	0f3H
	DB	0abH
	DB	096H
	DB	0a9H
	DB	01H
	DB	06eH
	DB	033H
	DB	096H
	DB	022H
	DB	0c5H
	DB	0aeH
	DB	02bH
	DB	065H
	DB	0c8H
	DB	08dH
	DB	099H
	DB	0fbH
	DB	06aH
	DB	0c7H
	DB	012H
	DB	0dfH
	DB	093H
	DB	0fcH
	DB	04fH
	DB	041H
	DB	035H
	DB	0fbH
	DB	07cH
	DB	0d1H
	DB	05fH
	DB	018H
	DB	0c5H
	DB	0bH
	DB	0aeH
	DB	06fH
	DB	08cH
	DB	09cH
	DB	023H
	DB	0a2H
	DB	0bfH
	DB	0e8H
	DB	052H
	DB	06aH
	DB	04eH
	DB	09aH
	DB	0f7H
	DB	067H
	DB	097H
	DB	0e1H
	DB	030H
	DB	029H
	DB	0c1H
	DB	043H
	DB	026H
	DB	012H
	DB	085H
	DB	0daH
	DB	08dH
	DB	02H
	DB	0acH
	DB	0ecH
	DB	01bH
	DB	0f1H
	DB	078H
	DB	049H
	DB	0e0H
	DB	084H
	DB	0e6H
	DB	04H
	DB	027H
	DB	026H
	DB	06cH
	DB	079H
	DB	090H
	DB	03aH
	DB	015H
	DB	08H
	DB	0a2H
	DB	02cH
	DB	0eaH
	DB	052H
	DB	055H
	DB	0acH
	DB	095H
	DB	0faH
	DB	03eH
	DB	09aH
	DB	0d5H
	DB	0cbH
	DB	09dH
	DB	02H
	DB	039H
	DB	038H
	DB	073H
	DB	031H
	DB	01H
	DB	054H
	DB	0b5H
	DB	0e7H
	DB	0d8H
	DB	0dcH
	DB	08dH
	DB	0c4H
	DB	0d6H
	DB	09dH
	DB	00H
	DB	06bH
	DB	026H
	DB	022H
	DB	097H
	DB	011H
	DB	074H
	DB	06cH
	DB	03dH
	DB	0aH
	DB	067H
	DB	0fbH
	DB	0a5H
	DB	0bcH
	DB	047H
	DB	0c2H
	DB	0beH
	DB	080H
	DB	07aH
	DB	0b1H
	DB	0b1H
	DB	07bH
	DB	06H
	DB	067H
	DB	0e3H
	DB	0deH
	DB	0c4H
	DB	071H
	DB	0a4H
	DB	09bH
	DB	08fH
	DB	024H
	DB	07H
	DB	0b5H
	DB	046H
	DB	01eH
	DB	046H
	DB	0baH
	DB	08aH
	DB	083H
	DB	044H
	DB	071H
	DB	07fH
	DB	069H
	DB	02eH
	DB	0c7H
	DB	0abH
	DB	06cH
	DB	0c7H
	DB	026H
	DB	01eH
	DB	0f9H
	DB	022H
	DB	024H
	DB	0e0H
	DB	06H
	DB	083H
	DB	0a5H
	DB	077H
	DB	0a7H
	DB	0c0H
	DB	07H
	DB	0cbH
	DB	0c7H
	DB	03cH
	DB	091H
	DB	0e5H
	DB	082H
	DB	0cbH
	DB	0efH
	DB	07H
	DB	010H
	DB	061H
	DB	06H
	DB	0f9H
	DB	08fH
	DB	04dH
	DB	0a5H
	DB	0fbH
	DB	095H
	DB	04cH
	DB	099H
	DB	08fH
	DB	06eH
	DB	0beH
	DB	070H
	DB	074H
	DB	0c1H
	DB	017H
	DB	06bH
	DB	069H
	DB	0d7H
	DB	0f2H
	DB	0b4H
	DB	020H
	DB	02fH
	DB	0c5H
	DB	085H
	DB	0b2H
	DB	091H
	DB	076H
	DB	039H
	DB	0a1H
	DB	0d7H
	DB	0beH
	DB	01bH
	DB	0e7H
	DB	08cH
	DB	041H
	DB	063H
	DB	022H
	DB	08dH
	DB	0fdH
	DB	0b1H
	DB	07bH
	DB	03cH
	DB	022H
	DB	0efH
	DB	0fdH
	DB	0b8H
	DB	0daH
	DB	0e6H
	DB	011H
	DB	0cdH
	DB	01bH
	DB	031H
	DB	0fdH
	DB	0e0H
	DB	0b6H
	DB	030H
	DB	072H
	DB	0acH
	DB	0e8H
	DB	093H
	DB	05H
	DB	0a7H
	DB	02fH
	DB	0ecH
	DB	034H
	DB	070H
	DB	0cfH
	DB	056H
	DB	0fdH
	DB	0cdH
	DB	087H
	DB	079H
	DB	089H
	DB	02aH
	DB	0e8H
	DB	07H
	DB	0e2H
	DB	0c3H
	DB	0edH
	DB	0f3H
	DB	012H
	DB	088H
	DB	0a4H
	DB	010H
	DB	069H
	DB	0dbH
	DB	0bfH
	DB	05bH
	DB	088H
	DB	0a8H
	DB	06fH
	DB	08dH
	DB	0cfH
	DB	09eH
	DB	0f9H
	DB	05H
	DB	0fH
	DB	0caH
	DB	0daH
	DB	08cH
	DB	018H
	DB	0e2H
	DB	085H
	DB	0a2H
	DB	0dH
	DB	06eH
	DB	0a9H
	DB	0efH
	DB	0b1H
	DB	018H
	DB	064H
	DB	0c3H
	DB	0a0H
	DB	088H
	DB	053H
	DB	08aH
	DB	064H
	DB	013H
	DB	065H
	DB	0edH
	DB	03bH
	DB	0d4H
	DB	0faH
	DB	0cH
	DB	073H
	DB	0f5H
	DB	090H
	DB	02H
	DB	040H
	DB	0eaH
	DB	08eH
	DB	058H
	DB	0cdH
	DB	014H
	DB	07aH
	DB	0daH
	DB	02H
	DB	0a4H
	DB	04bH
	DB	0b4H
	DB	0bcH
	DB	02fH
	DB	078H
	DB	0dcH
	DB	0b7H
	DB	0ccH
	DB	067H
	DB	01dH
	DB	05fH
	DB	04dH
	DB	08aH
	DB	09bH
	DB	022H
	DB	05H
	DB	027H
	DB	016H
	DB	07aH
	DB	0b7H
	DB	018H
	DB	0baH
	DB	022H
	DB	0a7H
	DB	093H
	DB	0f0H
	DB	03bH
	DB	08dH
	DB	04bH
	DB	03eH
	DB	032H
	DB	096H
	DB	0f2H
	DB	0eeH
	DB	045H
	DB	06bH
	DB	0ccH
	DB	0fdH
	DB	0b7H
	DB	0b3H
	DB	09aH
	DB	018H
	DB	01H
	DB	025H
	DB	033H
	DB	0a3H
	DB	02aH
	DB	05aH
	DB	0b9H
	DB	0a5H
	DB	091H
	DB	0d1H
	DB	0dfH
	DB	0b3H
	DB	0f8H
	DB	0f2H
	DB	024H
	DB	035H
	DB	081H
	DB	070H
	DB	0f2H
	DB	0b3H
	DB	086H
	DB	0e5H
	DB	0a3H
	DB	0ccH
	DB	0d0H
	DB	0efH
	DB	0caH
	DB	089H
	DB	023H
	DB	065H
	DB	021H
	DB	0a4H
	DB	0aH
	DB	0d3H
	DB	048H
	DB	0b3H
	DB	0adH
	DB	02H
	DB	0d8H
	DB	0beH
	DB	053H
	DB	0b9H
	DB	072H
	DB	0ccH
	DB	0acH
	DB	017H
	DB	02H
	DB	0adH
	DB	087H
	DB	0f4H
	DB	062H
	DB	0eH
	DB	05aH
	DB	085H
	DB	0daH
	DB	02bH
	DB	0f4H
	DB	025H
	DB	034H
	DB	018H
	DB	0aH
	DB	0d4H
	DB	0bcH
	DB	014H
	DB	0a8H
	DB	084H
	DB	0c8H
	DB	0d5H
	DB	086H
	DB	0a1H
	DB	094H
	DB	05aH
	DB	0daH
	DB	087H
	DB	027H
	DB	08H
	DB	09eH
	DB	0a8H
	DB	0b5H
	DB	0a5H
	DB	01dH
	DB	018H
	DB	0b3H
	DB	0f6H
	DB	01dH
	DB	0fH
	DB	022H
	DB	012H
	DB	034H
	DB	0d6H
	DB	0aaH
	DB	03fH
	DB	0abH
	DB	0e6H
	DB	0d2H
	DB	0d4H
	DB	06cH
	DB	01bH
	DB	02aH
	DB	072H
	DB	0bdH
	DB	0bfH
	DB	0ccH
	DB	018H
	DB	0c6H
	DB	073H
	DB	020H
	DB	0e4H
	DB	09bH
	DB	0d6H
	DB	08aH
	DB	0b8H
	DB	06eH
	DB	0bdH
	DB	0afH
	DB	0cH
	DB	0ccH
	DB	052H
	DB	01eH
	DB	081H
	DB	0a8H
	DB	0c8H
	DB	040H
	DB	054H
	DB	0b0H
	DB	013H
	DB	0a8H
	DB	09cH
	DB	0aeH
	DB	053H
	DB	0fH
	DB	06cH
	DB	092H
	DB	05cH
	DB	084H
	DB	059H
	DB	0cfH
	DB	025H
	DB	03eH
	DB	06cH
	DB	07bH
	DB	0c8H
	DB	0a4H
	DB	0e9H
	DB	086H
	DB	0d4H
	DB	0f5H
	DB	0d3H
	DB	027H
	DB	094H
	DB	0d4H
	DB	0cfH
	DB	0dcH
	DB	015H
	DB	0a3H
	DB	0dH
	DB	0a7H
	DB	0ccH
	DB	0a9H
	DB	056H
	DB	020H
	DB	0b9H
	DB	042H
	DB	032H
	DB	016H
	DB	047H
	DB	08bH
	DB	065H
	DB	06cH
	DB	0c9H
	DB	0d1H
	DB	0e7H
	DB	012H
	DB	0f6H
	DB	051H
	DB	018H
	DB	0cbH
	DB	0c7H
	DB	06bH
	DB	072H
	DB	0dbH
	DB	040H
	DB	0c1H
	DB	0b8H
	DB	0d4H
	DB	0e4H
	DB	0c6H
	DB	0fcH
	DB	0b1H
	DB	070H
	DB	053H
	DB	051H
	DB	0a9H
	DB	016H
	DB	083H
	DB	03fH
	DB	0dcH
	DB	08eH
	DB	0a5H
	DB	049H
	DB	0d7H
	DB	0f6H
	DB	0b0H
	DB	0e9H
	DB	0edH
	DB	081H
	DB	082H
	DB	039H
	DB	0c8H
	DB	0edH
	DB	0abH
	DB	0a4H
	DB	0aeH
	DB	0ecH
	DB	05eH
	DB	083H
	DB	0d2H
	DB	0a4H
	DB	080H
	DB	04H
	DB	015H
	DB	054H
	DB	0d5H
	DB	03fH
	DB	06aH
	DB	0d8H
	DB	07eH
	DB	0c6H
	DB	068H
	DB	0a3H
	DB	010H
	DB	0bfH
	DB	09bH
	DB	040H
	DB	02aH
	DB	09H
	DB	041H
	DB	0acH
	DB	043H
	DB	0bH
	DB	01aH
	DB	06eH
	DB	0afH
	DB	0c8H
	DB	05cH
	DB	08dH
	DB	04dH
	DB	0aeH
	DB	032H
	DB	04dH
	DB	0b2H
	DB	0c7H
	DB	0a1H
	DB	08H
	DB	07H
	DB	08bH
	DB	0e1H
	DB	05H
	DB	052H
	DB	0c9H
	DB	0a9H
	DB	0e1H
	DB	089H
	DB	045H
	DB	0a1H
	DB	0b3H
	DB	0cdH
	DB	0e3H
	DB	0dfH
	DB	011H
	DB	06eH
	DB	0faH
	DB	00H
	DB	09dH
	DB	0c3H
	DB	05cH
	DB	02cH
	DB	090H
	DB	0bH
	DB	05eH
	DB	0deH
	DB	03dH
	DB	0a5H
	DB	00H
	DB	046H
	DB	0acH
	DB	08cH
	DB	0a7H
	DB	032H
	DB	05eH
	DB	071H
	DB	0dbH
	DB	0c0H
	DB	0faH
	DB	0a0H
	DB	062H
	DB	02fH
	DB	0edH
	DB	0c5H
	DB	0fH
	DB	00H
	DB	034H
	DB	0aH
	DB	00H
	DB	0d2H
	DB	04eH
	DB	0dbH
	DB	07eH
	DB	05eH
	DB	066H
	DB	0dcH
	DB	03dH
	DB	0a3H
	DB	03H
	DB	0bdH
	DB	069H
	DB	02fH
	DB	04aH
	DB	011H
	DB	061H
	DB	028H
	DB	082H
	DB	0bcH
	DB	0e8H
	DB	0fdH
	DB	0dcH
	DB	0cbH
	DB	02dH
	DB	0cbH
	DB	091H
	DB	0bbH
	DB	04bH
	DB	046H
	DB	0c6H
	DB	04bH
	DB	098H
	DB	094H
	DB	0a6H
	DB	017H
	DB	0f2H
	DB	0dH
	DB	073H
	DB	031H
	DB	030H
	DB	076H
	DB	0eeH
	DB	01aH
	DB	0a6H
	DB	0b8H
	DB	02bH
	DB	08H
	DB	060H
	DB	02eH
	DB	045H
	DB	04aH
	DB	0abH
	DB	022H
	DB	095H
	DB	058H
	DB	0edH
	DB	027H
	DB	014H
	DB	039H
	DB	06dH
	DB	05aH
	DB	04H
	DB	085H
	DB	0eeH
	DB	0aaH
	DB	09cH
	DB	0e2H
	DB	037H
	DB	011H
	DB	093H
	DB	0e7H
	DB	087H
	DB	02H
	DB	02H
	DB	02eH
	DB	03aH
	DB	0acH
	DB	0b6H
	DB	09aH
	DB	05aH
	DB	0fbH
	DB	064H
	DB	085H
	DB	09dH
	DB	0f9H
	DB	0ddH
	DB	08cH
	DB	0a1H
	DB	0f2H
	DB	045H
	DB	08eH
	DB	0ccH
	DB	0c9H
	DB	015H
	DB	0bcH
	DB	0f3H
	DB	0b1H
	DB	01fH
	DB	02cH
	DB	042H
	DB	0b2H
	DB	093H
	DB	0caH
	DB	034H
	DB	095H
	DB	078H
	DB	06eH
	DB	0c1H
	DB	0aeH
	DB	088H
	DB	01dH
	DB	02aH
	DB	06dH
	DB	022H
	DB	0c8H
	DB	0e6H
	DB	01H
	DB	0d4H
	DB	088H
	DB	073H
	DB	099H
	DB	097H
	DB	040H
	DB	063H
	DB	02cH
	DB	07cH
	DB	058H
	DB	05dH
	DB	09bH
	DB	04H
	DB	0a0H
	DB	04eH
	DB	097H
	DB	0eaH
	DB	082H
	DB	0acH
	DB	0e2H
	DB	070H
	DB	06eH
	DB	092H
	DB	079H
	DB	0bH
	DB	0bcH
	DB	0e6H
	DB	02eH
	DB	085H
	DB	0cdH
	DB	0aeH
	DB	0d9H
	DB	0d6H
	DB	022H
	DB	074H
	DB	0edH
	DB	0e1H
	DB	0d7H
	DB	01aH
	DB	05fH
	DB	0afH
	DB	077H
	DB	0faH
	DB	0b3H
	DB	097H
	DB	0c9H
	DB	0caH
	DB	02H
	DB	0cbH
	DB	077H
	DB	0e5H
	DB	0bcH
	DB	066H
	DB	078H
	DB	036H
	DB	071H
	DB	0b4H
	DB	01dH
	DB	01fH
	DB	0baH
	DB	0eaH
	DB	04dH
	DB	094H
	DB	041H
	DB	0eeH
	DB	088H
	DB	02fH
	DB	0d1H
	DB	061H
	DB	0c8H
	DB	0b0H
	DB	090H
	DB	0c0H
	DB	02bH
	DB	045H
	DB	058H
	DB	0f4H
	DB	08fH
	DB	05bH
	DB	041H
	DB	08H
	DB	0c0H
	DB	0fdH
	DB	06eH
	DB	039H
	DB	034H
	DB	05fH
	DB	06dH
	DB	051H
	DB	0feH
	DB	028H
	DB	0bbH
	DB	04cH
	DB	03dH
	DB	07dH
	DB	03cH
	DB	0c5H
	DB	0acH
	DB	0eH
	DB	0a6H
	DB	0f5H
	DB	0beH
	DB	038H
	DB	0b6H
	DB	069H
	DB	0fcH
	DB	08eH
	DB	05fH
	DB	08cH
	DB	0e9H
	DB	0a0H
	DB	014H
	DB	02aH
	DB	01eH
	DB	082H
	DB	063H
	DB	052H
	DB	062H
	DB	051H
	DB	023H
	DB	061H
	DB	079H
	DB	05eH
	DB	0adH
	DB	036H
	DB	05bH
	DB	0e9H
	DB	0fcH
	DB	09H
	DB	077H
	DB	023H
	DB	07eH
	DB	0b5H
	DB	05bH
	DB	035H
	DB	020H
	DB	0d7H
	DB	0c3H
	DB	07fH
	DB	065H
	DB	02eH
	DB	09fH
	DB	079H
	DB	058H
	DB	03dH
	DB	07cH
	DB	03cH
	DB	0fH
	DB	0deH
	DB	08dH
	DB	032H
	DB	040H
	DB	086H
	DB	010H
	DB	06dH
	DB	0bdH
	DB	06cH
	DB	058H
	DB	03aH
	DB	0f4H
	DB	0cfH
	DB	05dH
	DB	073H
	DB	06H
	DB	0b9H
	DB	028H
	DB	026H
	DB	091H
	DB	0ebH
	DB	025H
	DB	076H
	DB	01aH
	DB	044H
	DB	070H
	DB	073H
	DB	081H
	DB	0ecH
	DB	0afH
	DB	090H
	DB	04bH
	DB	0bcH
	DB	042H
	DB	0bH
	DB	043H
	DB	0d1H
	DB	078H
	DB	01H
	DB	0bdH
	DB	0d0H
	DB	03bH
	DB	032H
	DB	021H
	DB	019H
	DB	0a5H
	DB	027H
	DB	0d2H
	DB	0cdH
	DB	0ccH
	DB	0e3H
	DB	03aH
	DB	0f1H
	DB	0daH
	DB	054H
	DB	036H
	DB	04bH
	DB	047H
	DB	037H
	DB	0b7H
	DB	076H
	DB	0c7H
	DB	03H
	DB	033H
	DB	089H
	DB	08dH
	DB	0f6H
	DB	05bH
	DB	06H
	DB	077H
	DB	099H
	DB	057H
	DB	033H
	DB	0cbH
	DB	0f7H
	DB	04cH
	DB	072H
	DB	01fH
	DB	09eH
	DB	0bfH
	DB	06bH
	DB	02H
	DB	079H
	DB	05dH
	DB	0dcH
	DB	04eH
	DB	013H
	DB	0a7H
	DB	095H
	DB	04aH
	DB	05fH
	DB	08cH
	DB	091H
	DB	0e1H
	DB	03fH
	DB	09aH
	DB	06fH
	DB	036H
	DB	0f5H
	DB	0f5H
	DB	0aeH
	DB	0fH
	DB	04dH
	DB	0e1H
	DB	0dbH
	DB	045H
	DB	02eH
	DB	0cdH
	DB	0e3H
	DB	04cH
	DB	08dH
	DB	04fH
	DB	04eH
	DB	087H
	DB	02cH
	DB	02cH
	DB	0d5H
	DB	03fH
	DB	0d3H
	DB	0eaH
	DB	09H
	DB	0b3H
	DB	077H
	DB	09aH
	DB	015H
	DB	0b7H
	DB	035H
	DB	05H
	DB	06dH
	DB	0aaH
	DB	0faH
	DB	09bH
	DB	0baH
	DB	048H
	DB	07dH
	DB	096H
	DB	08dH
	DB	02bH
	DB	0e3H
	DB	0f0H
	DB	077H
	DB	071H
	DB	040H
	DB	0c6H
	DB	078H
	DB	06cH
	DB	072H
	DB	04eH
	DB	02bH
	DB	0c5H
	DB	03aH
	DB	034H
	DB	0f8H
	DB	031H
	DB	0ceH
	DB	0fH
	DB	068H
	DB	083H
	DB	014H
	DB	0d6H
	DB	0adH
	DB	08eH
	DB	072H
	DB	0e7H
	DB	0d6H
	DB	070H
	DB	0fdH
	DB	0e3H
	DB	09bH
	DB	0e1H
	DB	0d4H
	DB	093H
	DB	0d3H
	DB	094H
	DB	0d9H
	DB	04cH
	DB	01H
	DB	04cH
	DB	09bH
	DB	0abH
	DB	091H
	DB	055H
	DB	0dfH
	DB	08bH
	DB	06H
	DB	02eH
	DB	09aH
	DB	06fH
	DB	0b1H
	DB	02eH
	DB	046H
	DB	0deH
	DB	0bcH
	DB	038H
	DB	0c7H
	DB	013H
	DB	028H
	DB	0c5H
	DB	076H
	DB	044H
	DB	028H
	DB	04bH
	DB	0d7H
	DB	0fbH
	DB	05fH
	DB	031H
	DB	048H
	DB	0dfH
	DB	07dH
	DB	063H
	DB	08bH
	DB	0fH
	DB	038H
	DB	06bH
	DB	01aH
	DB	03fH
	DB	099H
	DB	034H
	DB	0aeH
	DB	0caH
	DB	062H
	DB	074H
	DB	0a9H
	DB	09eH
	DB	02cH
	DB	0f0H
	DB	031H
	DB	055H
	DB	0b7H
	DB	0a7H
	DB	099H
	DB	0dfH
	DB	0f2H
	DB	0f0H
	DB	05bH
	DB	0d1H
	DB	022H
	DB	023H
	DB	0b1H
	DB	09fH
	DB	087H
	DB	03dH
	DB	02eH
	DB	03fH
	DB	0a8H
	DB	049H
	DB	07eH
	DB	042H
	DB	0fcH
	DB	0acH
	DB	08cH
	DB	060H
	DB	0a0H
	DB	037H
	DB	07eH
	DB	0cdH
	DB	028H
	DB	0b0H
	DB	023H
	DB	05fH
	DB	058H
	DB	03cH
	DB	0beH
	DB	0cbH
	DB	02dH
	DB	01aH
	DB	09dH
	DB	04fH
	DB	03eH
	DB	050H
	DB	06eH
	DB	045H
	DB	08dH
	DB	09cH
	DB	084H
	DB	0b6H
	DB	065H
	DB	083H
	DB	078H
	DB	063H
	DB	030H
	DB	06H
	DB	043H
	DB	051H
	DB	03dH
	DB	041H
	DB	01fH
	DB	0e4H
	DB	0f1H
	DB	0c1H
	DB	045H
	DB	0caH
	DB	0fdH
	DB	083H
	DB	096H
	DB	02bH
	DB	09eH
	DB	0b3H
	DB	07aH
	DB	05cH
	DB	083H
	DB	0e8H
	DB	021H
	DB	091H
	DB	05H
	DB	0a5H
	DB	048H
	DB	0eaH
	DB	0a8H
	DB	040H
	DB	04eH
	DB	059H
	DB	046H
	DB	011H
	DB	0aaH
	DB	03H
	DB	052H
	DB	049H
	DB	0e8H
	DB	0c4H
	DB	0bH
	DB	0adH
	DB	08fH
	DB	09H
	DB	031H
	DB	0a5H
	DB	034H
	DB	04fH
	DB	0d8H
	DB	02eH
	DB	0abH
	DB	05dH
	DB	096H
	DB	0ccH
	DB	06eH
	DB	09bH
	DB	0f2H
	DB	0b6H
	DB	086H
	DB	01bH
	DB	076H
	DB	054H
	DB	074H
	DB	0bdH
	DB	0e4H
	DB	09eH
	DB	0c0H
	DB	0b7H
	DB	0e7H
	DB	029H
	DB	07cH
	DB	0f2H
	DB	0d6H
	DB	08bH
	DB	0fbH
	DB	09H
	DB	031H
	DB	0afH
	DB	0d7H
	DB	089H
	DB	0ddH
	DB	084H
	DB	0e6H
	DB	0f3H
	DB	0d0H
	DB	0d4H
	DB	090H
	DB	043H
	DB	0bH
	DB	096H
	DB	05fH
	DB	082H
	DB	06bH
	DB	0d3H
	DB	040H
	DB	050H
	DB	0f2H
	DB	080H
	DB	08H
	DB	0daH
	DB	02aH
	DB	084H
	DB	0ceH
	DB	01H
	DB	08fH
	DB	04aH
	DB	089H
	DB	0c0H
	DB	07aH
	DB	062H
	DB	0caH
	DB	0d7H
	DB	066H
	DB	031H
	DB	0ccH
	DB	037H
	DB	07H
	DB	05dH
	DB	0faH
	DB	012H
	DB	073H
	DB	05aH
	DB	094H
	DB	0deH
	DB	0adH
	DB	054H
	DB	030H
	DB	0a0H
	DB	055H
	DB	0b7H
	DB	07cH
	DB	07fH
	DB	03dH
	DB	0caH
	DB	00H
	DB	0ccH
	DB	094H
	DB	08aH
	DB	0eH
	DB	0fH
	DB	06cH
	DB	0d8H
	DB	0e7H
	DB	052H
	DB	089H
	DB	0b4H
	DB	09H
	DB	090H
	DB	091H
	DB	04H
	DB	0a3H
	DB	05H
	DB	05eH
	DB	0b7H
	DB	0e4H
	DB	0dH
	DB	0dH
	DB	094H
	DB	02dH
	DB	0e1H
	DB	04cH
	DB	0a9H
	DB	061H
	DB	09H
	DB	0f3H
	DB	061H
	DB	056H
	DB	089H
	DB	06bH
	DB	0e3H
	DB	018H
	DB	0d7H
	DB	03cH
	DB	00H
	DB	0a9H
	DB	0c5H
	DB	034H
	DB	0b3H
	DB	057H
	DB	0c5H
	DB	0b7H
	DB	07aH
	DB	04bH
	DB	096H
	DB	032H
	DB	0afH
	DB	0a3H
	DB	0beH
	DB	0c3H
	DB	0d0H
	DB	0a0H
	DB	010H
	DB	0faH
	DB	081H
	DB	099H
	DB	06eH
	DB	0e3H
	DB	0efH
	DB	077H
	DB	0ceH
	DB	0d3H
	DB	090H
	DB	027H
	DB	010H
	DB	090H
	DB	0d0H
	DB	055H
	DB	0c5H
	DB	084H
	DB	02cH
	DB	0bH
	DB	0bcH
	DB	0a6H
	DB	0d5H
	DB	053H
	DB	059H
	DB	085H
	DB	0f6H
	DB	097H
	DB	049H
	DB	047H
	DB	0b8H
	DB	0d9H
	DB	0c1H
	DB	03aH
	DB	073H
	DB	0b0H
	DB	09dH
	DB	063H
	DB	028H
	DB	06dH
	DB	0b6H
	DB	0b8H
	DB	094H
	DB	046H
	DB	0c9H
	DB	065H
	DB	09bH
	DB	08fH
	DB	06aH
	DB	0c8H
	DB	01aH
	DB	027H
	DB	0eeH
	DB	0f0H
	DB	07aH
	DB	0c7H
	DB	0f5H
	DB	0f0H
	DB	060H
	DB	0bfH
	DB	038H
	DB	019H
	DB	099H
	DB	07aH
	DB	0d2H
	DB	0dH
	DB	0aaH
	DB	071H
	DB	0efH
	DB	0d2H
	DB	05eH
	DB	026H
	DB	08cH
	DB	0f2H
	DB	06cH
	DB	056H
	DB	0d7H
	DB	087H
	DB	065H
	DB	042H
	DB	0cfH
	DB	0feH
	DB	069H
	DB	0bfH
	DB	06fH
	DB	0e3H
	DB	087H
	DB	066H
	DB	0d4H
	DB	067H
	DB	026H
	DB	08dH
	DB	00H
	DB	03fH
	DB	087H
	DB	0d3H
	DB	04cH
	DB	032H
	DB	0c4H
	DB	0bbH
	DB	05H
	DB	023H
	DB	0e1H
	DB	011H
	DB	016H
	DB	04eH
	DB	0e6H
	DB	06dH
	DB	055H
	DB	0cbH
	DB	0b0H
	DB	026H
	DB	0cbH
	DB	01aH
	DB	065H
	DB	03bH
	DB	07eH
	DB	06cH
	DB	021H
	DB	0d2H
	DB	0d4H
	DB	0c6H
	DB	060H
	DB	0d4H
	DB	06H
	DB	067H
	DB	028H
	DB	0d1H
	DB	099H
	DB	0ecH
	DB	08dH
	DB	01fH
	DB	010H
	DB	06fH
	DB	0afH
	DB	0a5H
	DB	03dH
	DB	097H
	DB	014H
	DB	093H
	DB	063H
	DB	0c4H
	DB	039H
	DB	0aeH
	DB	05eH
	DB	09eH
	DB	06aH
	DB	0dcH
	DB	08aH
	DB	08bH
	DB	0b0H
	DB	0deH
	DB	0d2H
	DB	090H
	DB	0b4H
	DB	0d8H
	DB	0f8H
	DB	0dcH
	DB	0abH
	DB	012H
	DB	0caH
	DB	039H
	DB	0b0H
	DB	0daH
	DB	029H
	DB	061H
	DB	081H
	DB	066H
	DB	0f8H
	DB	015H
	DB	079H
	DB	05cH
	DB	0d9H
	DB	032H
	DB	08bH
	DB	0b7H
	DB	050H
	DB	0f5H
	DB	015H
	DB	0dbH
	DB	081H
	DB	045H
	DB	0baH
	DB	054H
	DB	0d5H
	DB	0eeH
	DB	0adH
	DB	04eH
	DB	0ccH
	DB	059H
	DB	0e0H
	DB	017H
	DB	012H
	DB	091H
	DB	071H
	DB	0baH
	DB	0f2H
	DB	072H
	DB	0a1H
	DB	0ebH
	DB	087H
	DB	01bH
	DB	0c8H
	DB	0e0H
	DB	0cdH
	DB	054H
	DB	099H
	DB	01eH
	DB	04aH
	DB	0aeH
	DB	0f9H
	DB	04bH
	DB	0f3H
	DB	035H
	DB	020H
	DB	049H
	DB	024H
	DB	0cdH
	DB	098H
	DB	070H
	DB	0a6H
	DB	0f8H
	DB	087H
	DB	038H
	DB	08aH
	DB	079H
	DB	0f3H
	DB	07eH
	DB	0ebH
	DB	095H
	DB	0e9H
	DB	0f3H
	DB	030H
	DB	032H
	DB	0d4H
	DB	0fdH
	DB	06H
	DB	0edH
	DB	09cH
	DB	050H
	DB	09cH
	DB	096H
	DB	01cH
	DB	010H
	DB	0cbH
	DB	0bbH
	DB	05aH
	DB	0f0H
	DB	09H
	DB	072H
	DB	0e0H
	DB	0afH
	DB	0eaH
	DB	069H
	DB	0e7H
	DB	075H
	DB	0e2H
	DB	05bH
	DB	073H
	DB	04eH
	DB	070H
	DB	05eH
	DB	042H
	DB	0a1H
	DB	090H
	DB	097H
	DB	01fH
	DB	097H
	DB	085H
	DB	0bbH
	DB	067H
	DB	0a2H
	DB	0d2H
	DB	03H
	DB	0b2H
	DB	01eH
	DB	0beH
	DB	08cH
	DB	08eH
	DB	047H
	DB	07eH
	DB	070H
	DB	0f6H
	DB	069H
	DB	0d9H
	DB	05fH
	DB	05fH
	DB	03cH
	DB	03aH
	DB	0d2H
	DB	08aH
	DB	0abH
	DB	0b0H
	DB	04dH
	DB	0ccH
	DB	042H
	DB	0e4H
	DB	0ebH
	DB	059H
	DB	06aH
	DB	028H
	DB	040H
	DB	0dH
	DB	0faH
	DB	0c3H
	DB	040H
	DB	019H
	DB	02H
	DB	0ccH
	DB	028H
	DB	04aH
	DB	0cbH
	DB	098H
	DB	0c0H
	DB	035H
	DB	072H
	DB	020H
	DB	094H
	DB	02eH
	DB	0daH
	DB	0e7H
	DB	0b8H
	DB	086H
	DB	098H
	DB	085H
	DB	053H
	DB	05aH
	DB	06aH
	DB	0beH
	DB	0b3H
	DB	0d5H
	DB	066H
	DB	074H
	DB	062H
	DB	0e0H
	DB	0b7H
	DB	0a2H
	DB	07aH
	DB	0b9H
	DB	0efH
	DB	0a2H
	DB	083H
	DB	0bbH
	DB	03bH
	DB	045H
	DB	070H
	DB	02dH
	DB	0e4H
	DB	085H
	DB	05bH
	DB	0bfH
	DB	06dH
	DB	093H
	DB	0c5H
	DB	06H
	DB	01aH
	DB	019H
	DB	061H
	DB	084H
	DB	058H
	DB	094H
	DB	0d9H
	DB	0beH
	DB	088H
	DB	0bcH
	DB	0a0H
	DB	040H
	DB	05fH
	DB	01bH
	DB	07aH
	DB	0ceH
	DB	0bdH
	DB	0fdH
	DB	0aH
	DB	078H
	DB	043H
	DB	0faH
	DB	0a5H
	DB	0a8H
	DB	080H
	DB	080H
	DB	068H
	DB	06dH
	DB	014H
	DB	02fH
	DB	0f2H
	DB	0adH
	DB	0c7H
	DB	0d3H
	DB	033H
	DB	09fH
	DB	0e8H
	DB	08cH
	DB	05fH
	DB	071H
	DB	049H
	DB	07fH
	DB	032H
	DB	029H
	DB	01aH
	DB	02cH
	DB	0f7H
	DB	057H
	DB	02aH
	DB	082H
	DB	0cfH
	DB	0edH
	DB	07dH
	DB	0f4H
	DB	096H
	DB	07dH
	DB	075H
	DB	07eH
	DB	0eaH
	DB	09H
	DB	02dH
	DB	05dH
	DB	0b7H
	DB	075H
	DB	032H
	DB	06aH
	DB	015H
	DB	01bH
	DB	0f6H
	DB	0f3H
	DB	0cH
	DB	0c0H
	DB	0f2H
	DB	0bdH
	DB	0e9H
	DB	08cH
	DB	0e9H
	DB	061H
	DB	0e3H
	DB	015H
	DB	063H
	DB	033H
	DB	082H
	DB	0e0H
	DB	0a7H
	DB	098H
	DB	05eH
	DB	01dH
	DB	096H
	DB	0c8H
	DB	027H
	DB	0c4H
	DB	027H
	DB	05eH
	DB	0b9H
	DB	059H
	DB	0c8H
	DB	04eH
	DB	0f3H
	DB	03fH
	DB	043H
	DB	07fH
	DB	00H
	DB	0b5H
	DB	03eH
	DB	069H
	DB	043H
	DB	028H
	DB	0cbH
	DB	0a6H
	DB	0bcH
	DB	0aeH
	DB	0daH
	DB	03fH
	DB	090H
	DB	082H
	DB	0d7H
	DB	06eH
	DB	020H
	DB	0eeH
	DB	038H
	DB	0c6H
	DB	0b3H
	DB	0deH
	DB	025H
	DB	0ecH
	DB	0b7H
	DB	0edH
	DB	03bH
	DB	0abH
	DB	02dH
	DB	0fdH
	DB	02bH
	DB	0adH
	DB	0b4H
	DB	069H
	DB	017H
	DB	077H
	DB	012H
	DB	062H
	DB	01eH
	DB	0ceH
	DB	012H
	DB	078H
	DB	08eH
	DB	022H
	DB	0fbH
	DB	0e5H
	DB	090H
	DB	09bH
	DB	0d4H
	DB	048H
	DB	062H
	DB	088H
	DB	027H
	DB	087H
	DB	0f4H
	DB	0deH
	DB	0f4H
	DB	031H
	DB	0aH
	DB	0a1H
	DB	02fH
	DB	036H
	DB	04fH
	DB	063H
	DB	01fH
	DB	067H
	DB	0daH
	DB	031H
	DB	049H
	DB	0f9H
	DB	080H
	DB	0daH
	DB	072H
	DB	0fH
	DB	0fcH
	DB	0edH
	DB	0f4H
	DB	08eH
	DB	089H
	DB	0caH
	DB	0d6H
	DB	0ebH
	DB	0d2H
	DB	0feH
	DB	0f2H
	DB	0c8H
	DB	05dH
	DB	0e7H
	DB	079H
	DB	068H
	DB	08aH
	DB	0a8H
	DB	09eH
	DB	0d9H
	DB	0dH
	DB	03dH
	DB	0c0H
	DB	0e7H
	DB	0eeH
	DB	08aH
	DB	061H
	DB	06fH
	DB	065H
	DB	0d4H
	DB	0fdH
	DB	063H
	DB	042H
	DB	0f2H
	DB	0f1H
	DB	0ccH
	DB	03dH
	DB	048H
	DB	038H
	DB	090H
	DB	0c6H
	DB	02cH
	DB	0d8H
	DB	025H
	DB	014H
	DB	052H
	DB	08dH
	DB	01eH
	DB	07aH
	DB	0abH
	DB	078H
	DB	07H
	DB	0e8H
	DB	039H
	DB	06fH
	DB	057H
	DB	0c3H
	DB	0d0H
	DB	046H
	DB	0a9H
	DB	025H
	DB	044H
	DB	0dH
	DB	068H
	DB	0b7H
	DB	07eH
	DB	0b4H
	DB	0f4H
	DB	0c6H
	DB	0ecH
	DB	05H
	DB	08eH
	DB	019H
	DB	0ddH
	DB	033H
	DB	0adH
	DB	0afH
	DB	0c0H
	DB	0cbH
	DB	02bH
	DB	06cH
	DB	044H
	DB	032H
	DB	0d4H
	DB	0fdH
	DB	0a1H
	DB	02dH
	DB	041H
	DB	0f2H
	DB	073H
	DB	0eaH
	DB	018H
	DB	038H
	DB	0f7H
	DB	00H
	DB	0efH
	DB	076H
	DB	0b4H
	DB	064H
	DB	0bdH
	DB	0a2H
	DB	06aH
	DB	0cbH
	DB	0bbH
	DB	0c7H
	DB	0feH
	DB	0e8H
	DB	078H
	DB	0bfH
	DB	0b5H
	DB	0a3H
	DB	0abH
	DB	079H
	DB	055H
	DB	00H
	DB	077H
	DB	077H
	DB	02dH
	DB	0b9H
	DB	06aH
	DB	021H
	DB	0a4H
	DB	02H
	DB	0d8H
	DB	01dH
	DB	03H
	DB	0c8H
	DB	013H
	DB	0b7H
	DB	02dH
	DB	050H
	DB	05aH
	DB	017H
	DB	01cH
	DB	096H
	DB	0dfH
	DB	01bH
	DB	07fH
	DB	0d7H
	DB	05aH
	DB	0b4H
	DB	0faH
	DB	085H
	DB	02fH
	DB	050H
	DB	086H
	DB	026H
	DB	0c7H
	DB	033H
	DB	0dfH
	DB	0b1H
	DB	054H
	DB	05H
	DB	0b4H
	DB	02dH
	DB	0a1H
	DB	0b7H
	DB	075H
	DB	0b4H
	DB	0eeH
	DB	023H
	DB	06H
	DB	0c9H
	DB	0b9H
	DB	0a1H
	DB	060H
	DB	019H
	DB	03dH
	DB	05fH
	DB	0f0H
	DB	097H
	DB	094H
	DB	0ebH
	DB	01eH
	DB	043H
	DB	0bcH
	DB	0a4H
	DB	069H
	DB	04H
	DB	0d7H
	DB	0c9H
	DB	0b6H
	DB	0acH
	DB	0ceH
	DB	0eaH
	DB	059H
	DB	0efH
	DB	0a2H
	DB	04fH
	DB	024H
	DB	091H
	DB	072H
	DB	02aH
	DB	0daH
	DB	02cH
	DB	04cH
	DB	0baH
	DB	046H
	DB	089H
	DB	01bH
	DB	0b6H
	DB	0a0H
	DB	02fH
	DB	0a3H
	DB	0beH
	DB	072H
	DB	0dfH
	DB	0e2H
	DB	0dbH
	DB	0e3H
	DB	03bH
	DB	025H
	DB	01aH
	DB	067H
	DB	073H
	DB	05H
	DB	0c0H
	DB	063H
	DB	027H
	DB	010H
	DB	088H
	DB	039H
	DB	02H
	DB	032H
	DB	014H
	DB	02fH
	DB	07eH
	DB	0cfH
	DB	0f4H
	DB	087H
	DB	06aH
	DB	0abH
	DB	029H
	DB	099H
	DB	0ceH
	DB	067H
	DB	08bH
	DB	02eH
	DB	04bH
	DB	0e6H
	DB	092H
	DB	06H
	DB	0dH
	DB	0acH
	DB	06dH
	DB	080H
	DB	032H
	DB	02eH
	DB	0e4H
	DB	0d8H
	DB	0beH
	DB	0ecH
	DB	012H
	DB	040H
	DB	01fH
	DB	027H
	DB	06fH
	DB	01eH
	DB	076H
	DB	0e3H
	DB	0a5H
	DB	0e0H
	DB	010H
	DB	04eH
	DB	0f9H
	DB	05eH
	DB	0b6H
	DB	085H
	DB	08dH
	DB	02H
	DB	06cH
	DB	020H
	DB	087H
	DB	079H
	DB	04cH
	DB	0f4H
	DB	07aH
	DB	0fdH
	DB	0a2H
	DB	0deH
	DB	0d7H
	DB	061H
	DB	0cbH
	DB	0e9H
	DB	0a2H
	DB	06aH
	DB	090H
	DB	091H
	DB	08H
	DB	07H
	DB	0f5H
	DB	02eH
	DB	067H
	DB	06H
	DB	07cH
	DB	0e0H
	DB	064H
	DB	033H
	DB	066H
	DB	071H
	DB	0b4H
	DB	053H
	DB	091H
	DB	03cH
	DB	04cH
	DB	05eH
	DB	031H
	DB	0c6H
	DB	05cH
	DB	0d4H
	DB	0a5H
	DB	034H
	DB	0b5H
	DB	0f0H
	DB	01fH
	DB	0d7H
	DB	05cH
	DB	02fH
	DB	0e9H
	DB	064H
	DB	0b6H
	DB	0dfH
	DB	092H
	DB	01eH
	DB	065H
	DB	010H
	DB	00H
	DB	049H
	DB	0c2H
	DB	0e5H
	DB	0bbH
	DB	078H
	DB	039H
	DB	0ccH
	DB	034H
	DB	086H
	DB	02bH
	DB	0e5H
	DB	0ccH
	DB	088H
	DB	03aH
	DB	073H
	DB	0bcH
	DB	06fH
	DB	064H
	DB	05bH
	DB	048H
	DB	040H
	DB	08bH
	DB	0b1H
	DB	0a5H
	DB	042H
	DB	011H
	DB	0b7H
	DB	0dfH
	DB	0f5H
	DB	047H
	DB	05fH
	DB	03fH
	DB	0bH
	DB	0c5H
	DB	07aH
	DB	03H
	DB	0feH
	DB	048H
	DB	0b6H
	DB	05H
	DB	0f2H
	DB	09cH
	DB	052H
	DB	07bH
	DB	0d6H
	DB	0c5H
	DB	0b8H
	DB	047H
	DB	0a9H
	DB	014H
	DB	0fH
	DB	06aH
	DB	01fH
	DB	040H
	DB	08fH
	DB	0e0H
	DB	051H
	DB	047H
	DB	0c1H
	DB	047H
	DB	0fH
	DB	0a0H
	DB	06H
	DB	099H
	DB	066H
	DB	081H
	DB	09cH
	DB	0e5H
	DB	0c9H
	DB	0d2H
	DB	06aH
	DB	0bcH
	DB	070H
	DB	0bcH
	DB	0b8H
	DB	0c6H
	DB	02H
	DB	071H
	DB	08dH
	DB	02cH
	DB	05H
	DB	01cH
	DB	096H
	DB	025H
	DB	05cH
	DB	026H
	DB	06H
	DB	0adH
	DB	0ecH
	DB	047H
	DB	074H
	DB	0fbH
	DB	0e8H
	DB	07bH
	DB	095H
	DB	0ceH
	DB	0fcH
	DB	0b1H
	DB	034H
	DB	046H
	DB	05H
	DB	09fH
	DB	082H
	DB	075H
	DB	0dbH
	DB	0baH
	DB	0bbH
	DB	0deH
	DB	02cH
	DB	0c9H
	DB	08aH
	DB	0b1H
	DB	0e5H
	DB	021H
	DB	0d6H
	DB	0c2H
	DB	0c6H
	DB	05cH
	DB	0efH
	DB	033H
	DB	0a4H
	DB	065H
	DB	0afH
	DB	0dH
	DB	060H
	DB	0c4H
	DB	05bH
	DB	05dH
	DB	0f6H
	DB	090H
	DB	023H
	DB	0fbH
	DB	030H
	DB	025H
	DB	0f0H
	DB	0cH
	DB	0e0H
	DB	0acH
	DB	06aH
	DB	08cH
	DB	0f5H
	DB	0f4H
	DB	03eH
	DB	05cH
	DB	016H
	DB	094H
	DB	01fH
	DB	05cH
	DB	0f1H
	DB	0fH
	DB	090H
	DB	016H
	DB	0f3H
	DB	0bfH
	DB	0a2H
	DB	054H
	DB	084H
	DB	0fdH
	DB	031H
	DB	07bH
	DB	08eH
	DB	0d3H
	DB	077H
	DB	03eH
	DB	0f9H
	DB	068H
	DB	04bH
	DB	05aH
	DB	095H
	DB	0b5H
	DB	066H
	DB	08bH
	DB	02bH
	DB	025H
	DB	067H
	DB	0c0H
	DB	0b9H
	DB	086H
	DB	01eH
	DB	02bH
	DB	016H
	DB	02eH
	DB	0c0H
	DB	0aH
	DB	0edH
	DB	063H
	DB	0deH
	DB	072H
	DB	0e1H
	DB	08fH
	DB	06eH
	DB	070H
	DB	064H
	DB	0e5H
	DB	0afH
	DB	0ddH
	DB	0ceH
	DB	07aH
	DB	038H
	DB	0e3H
	DB	0afH
	DB	01eH
	DB	0eeH
	DB	0daH
	DB	043H
	DB	057H
	DB	09cH
	DB	07dH
	DB	0ddH
	DB	03aH
	DB	0a8H
	DB	073H
	DB	0e7H
	DB	0e9H
	DB	0fdH
	DB	0d5H
	DB	04dH
	DB	05cH
	DB	0c7H
	DB	0aeH
	DB	0ebH
	DB	036H
	DB	020H
	DB	050H
	DB	09cH
	DB	04fH
	DB	02eH
	DB	0eaH
	DB	049H
	DB	0e5H
	DB	0ceH
	DB	0f8H
	DB	05H
	DB	0bdH
	DB	054H
	DB	0c7H
	DB	015H
	DB	070H
	DB	045H
	DB	073H
	DB	02aH
	DB	06eH
	DB	066H
	DB	012H
	DB	058H
	DB	064H
	DB	0e7H
	DB	025H
	DB	0c0H
	DB	02fH
	DB	0d4H
	DB	02dH
	DB	0e5H
	DB	0f4H
	DB	07dH
	DB	02H
	DB	0c3H
	DB	02cH
	DB	0ecH
	DB	0dH
	DB	091H
	DB	03bH
	DB	085H
	DB	016H
	DB	0f8H
	DB	059H
	DB	0deH
	DB	08eH
	DB	049H
	DB	024H
	DB	081H
_DATA	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Fill_n@std@@YAPAEPAEIE@Z			; std::_Fill_n
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??1NameValuePairs@CryptoPP@@UAE@XZ		; CryptoPP::NameValuePairs::~NameValuePairs
PUBLIC	??0NameValuePairs@CryptoPP@@QAE@XZ		; CryptoPP::NameValuePairs::NameValuePairs
PUBLIC	??_GNameValuePairs@CryptoPP@@UAEPAXI@Z		; CryptoPP::NameValuePairs::`scalar deleting destructor'
PUBLIC	??0NullNameValuePairs@CryptoPP@@QAE@XZ		; CryptoPP::NullNameValuePairs::NullNameValuePairs
PUBLIC	?GetVoidValue@NullNameValuePairs@CryptoPP@@UBE_NPBDABVtype_info@@PAX@Z ; CryptoPP::NullNameValuePairs::GetVoidValue
PUBLIC	??1NullNameValuePairs@CryptoPP@@UAE@XZ		; CryptoPP::NullNameValuePairs::~NullNameValuePairs
PUBLIC	??_GNullNameValuePairs@CryptoPP@@UAEPAXI@Z	; CryptoPP::NullNameValuePairs::`scalar deleting destructor'
PUBLIC	?Encrypt@Cipher@@QAEXPAXI@Z			; Cipher::Encrypt
PUBLIC	?Decrypt@Cipher@@QAEXPAXI@Z			; Cipher::Decrypt
PUBLIC	?activated@Cipher@@QBE_NXZ			; Cipher::activated
PUBLIC	?set_activated@Cipher@@QAEX_N@Z			; Cipher::set_activated
PUBLIC	??0CNetworkStream@@QAE@XZ			; CNetworkStream::CNetworkStream
PUBLIC	??1CNetworkStream@@UAE@XZ			; CNetworkStream::~CNetworkStream
PUBLIC	?SetRecvBufferSize@CNetworkStream@@QAEXH@Z	; CNetworkStream::SetRecvBufferSize
PUBLIC	?SetSendBufferSize@CNetworkStream@@QAEXH@Z	; CNetworkStream::SetSendBufferSize
PUBLIC	?IsSecurityMode@CNetworkStream@@QAE_NXZ		; CNetworkStream::IsSecurityMode
PUBLIC	?GetRecvBufferSize@CNetworkStream@@QAEHXZ	; CNetworkStream::GetRecvBufferSize
PUBLIC	?Clear@CNetworkStream@@QAEXXZ			; CNetworkStream::Clear
PUBLIC	?ClearRecvBuffer@CNetworkStream@@QAEXXZ		; CNetworkStream::ClearRecvBuffer
PUBLIC	?Process@CNetworkStream@@QAEXXZ			; CNetworkStream::Process
PUBLIC	?Connect@CNetworkStream@@QAE_NABVCNetworkAddress@@H@Z ; CNetworkStream::Connect
PUBLIC	?Connect@CNetworkStream@@QAE_NPBDHH@Z		; CNetworkStream::Connect
PUBLIC	?Connect@CNetworkStream@@QAE_NKHH@Z		; CNetworkStream::Connect
PUBLIC	?Disconnect@CNetworkStream@@QAEXXZ		; CNetworkStream::Disconnect
PUBLIC	?Peek@CNetworkStream@@QAE_NH@Z			; CNetworkStream::Peek
PUBLIC	?Peek@CNetworkStream@@QAE_NHPAD@Z		; CNetworkStream::Peek
PUBLIC	?Recv@CNetworkStream@@QAE_NH@Z			; CNetworkStream::Recv
PUBLIC	?Recv@CNetworkStream@@QAE_NHPAD@Z		; CNetworkStream::Recv
PUBLIC	?Send@CNetworkStream@@QAE_NHPBD@Z		; CNetworkStream::Send
PUBLIC	?Peek@CNetworkStream@@QAE_NHPAX@Z		; CNetworkStream::Peek
PUBLIC	?Recv@CNetworkStream@@QAE_NHPAX@Z		; CNetworkStream::Recv
PUBLIC	?Send@CNetworkStream@@QAE_NHPBX@Z		; CNetworkStream::Send
PUBLIC	?SendFlush@CNetworkStream@@QAE_NHPBX@Z		; CNetworkStream::SendFlush
PUBLIC	?IsOnline@CNetworkStream@@QAE_NXZ		; CNetworkStream::IsOnline
PUBLIC	?SetPacketSequenceMode@CNetworkStream@@QAEX_N@Z	; CNetworkStream::SetPacketSequenceMode
PUBLIC	?SendSequence@CNetworkStream@@QAE_NXZ		; CNetworkStream::SendSequence
PUBLIC	?OnConnectSuccess@CNetworkStream@@MAEXXZ	; CNetworkStream::OnConnectSuccess
PUBLIC	?OnConnectFailure@CNetworkStream@@MAEXXZ	; CNetworkStream::OnConnectFailure
PUBLIC	?OnRemoteDisconnect@CNetworkStream@@MAEXXZ	; CNetworkStream::OnRemoteDisconnect
PUBLIC	?OnDisconnect@CNetworkStream@@MAEXXZ		; CNetworkStream::OnDisconnect
PUBLIC	?OnProcess@CNetworkStream@@MAE_NXZ		; CNetworkStream::OnProcess
PUBLIC	?__SendInternalBuffer@CNetworkStream@@IAE_NXZ	; CNetworkStream::__SendInternalBuffer
PUBLIC	?__RecvInternalBuffer@CNetworkStream@@IAE_NXZ	; CNetworkStream::__RecvInternalBuffer
PUBLIC	?__PopSendBuffer@CNetworkStream@@IAEXXZ		; CNetworkStream::__PopSendBuffer
PUBLIC	?__GetSendBufferSize@CNetworkStream@@IAEHXZ	; CNetworkStream::__GetSendBufferSize
PUBLIC	?Prepare@CNetworkStream@@IAEIPAXPAI@Z		; CNetworkStream::Prepare
PUBLIC	?Activate@CNetworkStream@@IAE_NIPBXI@Z		; CNetworkStream::Activate
PUBLIC	?ActivateCipher@CNetworkStream@@IAEXXZ		; CNetworkStream::ActivateCipher
PUBLIC	??0?$allocator@E@std@@QAE@XZ			; std::allocator<unsigned char>::allocator<unsigned char>
PUBLIC	?deallocate@?$allocator@E@std@@QAEXPAEI@Z	; std::allocator<unsigned char>::deallocate
PUBLIC	?allocate@?$allocator@E@std@@QAEPAEI@Z		; std::allocator<unsigned char>::allocate
PUBLIC	?max_size@?$allocator@E@std@@QBEIXZ		; std::allocator<unsigned char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z ; std::allocator_traits<std::allocator<unsigned char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<unsigned char> >::_Wrap_alloc<std::allocator<unsigned char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z ; std::_Wrap_alloc<std::allocator<unsigned char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z ; std::_Wrap_alloc<std::allocator<unsigned char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<unsigned char> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal
PUBLIC	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
PUBLIC	?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Unused_capacity
PUBLIC	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
PUBLIC	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
PUBLIC	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
PUBLIC	??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
PUBLIC	?_Pop_back_n@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Pop_back_n
PUBLIC	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
PUBLIC	?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Grow_to
PUBLIC	?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate
PUBLIC	?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve
PUBLIC	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
PUBLIC	?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
PUBLIC	??_GCNetworkStream@@UAEPAXI@Z			; CNetworkStream::`scalar deleting destructor'
PUBLIC	??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ; std::_Uninitialized_default_fill_n<unsigned char *,unsigned int,std::_Wrap_alloc<std::allocator<unsigned char> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >
PUBLIC	??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>
PUBLIC	??$_Allocate@E@std@@YAPAEIPAE@Z			; std::_Allocate<unsigned char>
PUBLIC	??$_Val_type@PAE@std@@YAPAEPAE@Z		; std::_Val_type<unsigned char *>
PUBLIC	??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z ; std::_Ptr_cat<unsigned char,unsigned char>
PUBLIC	??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<unsigned char,unsigned int,unsigned char>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >
PUBLIC	??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >
PUBLIC	??$_Unchecked@PAE@std@@YAPAEPAE@Z		; std::_Unchecked<unsigned char *>
PUBLIC	??$_Uninit_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ; std::_Uninit_move<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >
PUBLIC	??$_Rechecked@PAEPAE@std@@YAAAPAEAAPAEPAE@Z	; std::_Rechecked<unsigned char *,unsigned char *>
PUBLIC	??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned char,unsigned char,unsigned char>
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_7NameValuePairs@CryptoPP@@6B@		; CryptoPP::NameValuePairs::`vftable'
PUBLIC	??_7NullNameValuePairs@CryptoPP@@6B@		; CryptoPP::NullNameValuePairs::`vftable'
PUBLIC	??_C@_03BIFOHCEN@AAD?$AA@			; `string'
PUBLIC	??_7CNetworkStream@@6B@				; CNetworkStream::`vftable'
PUBLIC	??_C@_0BI@PDGCBBPG@error?5?$CB?$DN?5WSAEWOULDBLOCK?$AA@ ; `string'
PUBLIC	??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BE@IJKILDIH@Succeed?5connecting?4?$AA@	; `string'
PUBLIC	??_C@_0BD@CIONHGBI@Failed?5to?5connect?4?$AA@	; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4NameValuePairs@CryptoPP@@6B@		; CryptoPP::NameValuePairs::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNameValuePairs@CryptoPP@@@8		; CryptoPP::NameValuePairs `RTTI Type Descriptor'
PUBLIC	??_R3NameValuePairs@CryptoPP@@8			; CryptoPP::NameValuePairs::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NameValuePairs@CryptoPP@@8			; CryptoPP::NameValuePairs::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8	; CryptoPP::NameValuePairs::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4NullNameValuePairs@CryptoPP@@6B@		; CryptoPP::NullNameValuePairs::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNullNameValuePairs@CryptoPP@@@8		; CryptoPP::NullNameValuePairs `RTTI Type Descriptor'
PUBLIC	??_R3NullNameValuePairs@CryptoPP@@8		; CryptoPP::NullNameValuePairs::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NullNameValuePairs@CryptoPP@@8		; CryptoPP::NullNameValuePairs::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NullNameValuePairs@CryptoPP@@8	; CryptoPP::NullNameValuePairs::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CNetworkStream@@6B@			; CNetworkStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCNetworkStream@@@8			; CNetworkStream `RTTI Type Descriptor'
PUBLIC	??_R3CNetworkStream@@8				; CNetworkStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CNetworkStream@@8				; CNetworkStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CNetworkStream@@8			; CNetworkStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memmove:PROC
EXTRN	_sprintf:PROC
EXTRN	__time64:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Tracen@@YAXPBD@Z:PROC				; Tracen
EXTRN	___WSAFDIsSet@8:PROC
EXTRN	_closesocket@4:PROC
EXTRN	_connect@12:PROC
EXTRN	_ioctlsocket@12:PROC
EXTRN	_recv@16:PROC
EXTRN	_select@20:PROC
EXTRN	_send@16:PROC
EXTRN	_socket@12:PROC
EXTRN	_WSAGetLastError@0:PROC
EXTRN	??_ENameValuePairs@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::NameValuePairs::`vector deleting destructor'
EXTRN	??_ENullNameValuePairs@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::NullNameValuePairs::`vector deleting destructor'
EXTRN	??0Cipher@@QAE@XZ:PROC				; Cipher::Cipher
EXTRN	??1Cipher@@QAE@XZ:PROC				; Cipher::~Cipher
EXTRN	?CleanUp@Cipher@@QAEXXZ:PROC			; Cipher::CleanUp
EXTRN	?Prepare@Cipher@@QAEIPAXPAI@Z:PROC		; Cipher::Prepare
EXTRN	?Activate@Cipher@@QAE_N_NIPBXI@Z:PROC		; Cipher::Activate
EXTRN	??0CNetworkAddress@@QAE@XZ:PROC			; CNetworkAddress::CNetworkAddress
EXTRN	??1CNetworkAddress@@QAE@XZ:PROC			; CNetworkAddress::~CNetworkAddress
EXTRN	?Set@CNetworkAddress@@QAE_NPBDH@Z:PROC		; CNetworkAddress::Set
EXTRN	?GetSize@CNetworkAddress@@QAEHXZ:PROC		; CNetworkAddress::GetSize
EXTRN	??_ECNetworkStream@@UAEPAXI@Z:PROC		; CNetworkStream::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
CRT$XCU	SEGMENT
_s_nullNameValuePairs$initializer$ DD FLAT:??__Es_nullNameValuePairs@CryptoPP@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CNetworkStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CNetworkStream@@8 DD FLAT:??_R0?AVCNetworkStream@@@8 ; CNetworkStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CNetworkStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CNetworkStream@@8
rdata$r	SEGMENT
??_R2CNetworkStream@@8 DD FLAT:??_R1A@?0A@EA@CNetworkStream@@8 ; CNetworkStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CNetworkStream@@8
rdata$r	SEGMENT
??_R3CNetworkStream@@8 DD 00H				; CNetworkStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CNetworkStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCNetworkStream@@@8
data$r	SEGMENT
??_R0?AVCNetworkStream@@@8 DD FLAT:??_7type_info@@6B@	; CNetworkStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCNetworkStream@@', 00H
data$r	ENDS
;	COMDAT ??_R4CNetworkStream@@6B@
rdata$r	SEGMENT
??_R4CNetworkStream@@6B@ DD 00H				; CNetworkStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCNetworkStream@@@8
	DD	FLAT:??_R3CNetworkStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NullNameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NullNameValuePairs@CryptoPP@@8 DD FLAT:??_R0?AVNullNameValuePairs@CryptoPP@@@8 ; CryptoPP::NullNameValuePairs::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NullNameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2NullNameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R2NullNameValuePairs@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@NullNameValuePairs@CryptoPP@@8 ; CryptoPP::NullNameValuePairs::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3NullNameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R3NullNameValuePairs@CryptoPP@@8 DD 00H		; CryptoPP::NullNameValuePairs::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2NullNameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNullNameValuePairs@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVNullNameValuePairs@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NullNameValuePairs `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNullNameValuePairs@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4NullNameValuePairs@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4NullNameValuePairs@CryptoPP@@6B@ DD 00H		; CryptoPP::NullNameValuePairs::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNullNameValuePairs@CryptoPP@@@8
	DD	FLAT:??_R3NullNameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8 DD FLAT:??_R0?AVNameValuePairs@CryptoPP@@@8 ; CryptoPP::NameValuePairs::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R2NameValuePairs@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R3NameValuePairs@CryptoPP@@8 DD 00H			; CryptoPP::NameValuePairs::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNameValuePairs@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVNameValuePairs@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NameValuePairs `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNameValuePairs@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_R4NameValuePairs@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4NameValuePairs@CryptoPP@@6B@ DD 00H		; CryptoPP::NameValuePairs::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNameValuePairs@CryptoPP@@@8
	DD	FLAT:??_R3NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CIONHGBI@Failed?5to?5connect?4?$AA@
CONST	SEGMENT
??_C@_0BD@CIONHGBI@Failed?5to?5connect?4?$AA@ DB 'Failed to connect.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IJKILDIH@Succeed?5connecting?4?$AA@
CONST	SEGMENT
??_C@_0BE@IJKILDIH@Succeed?5connecting?4?$AA@ DB 'Succeed connecting.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@ DB '%d.%d.%d.%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PDGCBBPG@error?5?$CB?$DN?5WSAEWOULDBLOCK?$AA@
CONST	SEGMENT
??_C@_0BI@PDGCBBPG@error?5?$CB?$DN?5WSAEWOULDBLOCK?$AA@ DB 'error != WSAE'
	DB	'WOULDBLOCK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CNetworkStream@@6B@
CONST	SEGMENT
??_7CNetworkStream@@6B@ DD FLAT:??_R4CNetworkStream@@6B@ ; CNetworkStream::`vftable'
	DD	FLAT:??_ECNetworkStream@@UAEPAXI@Z
	DD	FLAT:?OnConnectSuccess@CNetworkStream@@MAEXXZ
	DD	FLAT:?OnConnectFailure@CNetworkStream@@MAEXXZ
	DD	FLAT:?OnRemoteDisconnect@CNetworkStream@@MAEXXZ
	DD	FLAT:?OnDisconnect@CNetworkStream@@MAEXXZ
	DD	FLAT:?OnProcess@CNetworkStream@@MAE_NXZ
CONST	ENDS
;	COMDAT ??_C@_03BIFOHCEN@AAD?$AA@
CONST	SEGMENT
??_C@_03BIFOHCEN@AAD?$AA@ DB 'AAD', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_s_nullNameValuePairs DD FLAT:??_7NullNameValuePairs@CryptoPP@@6B@
_DEFAULT_CHANNEL DB 00H
	DB	15 DUP(00H)
	DD	00H
	DD	0fH
_AAD_CHANNEL DB	00H
	DB	15 DUP(00H)
	DD	00H
	DD	0fH
_DATA	ENDS
;	COMDAT ??_7NullNameValuePairs@CryptoPP@@6B@
CONST	SEGMENT
??_7NullNameValuePairs@CryptoPP@@6B@ DD FLAT:??_R4NullNameValuePairs@CryptoPP@@6B@ ; CryptoPP::NullNameValuePairs::`vftable'
	DD	FLAT:??_ENullNameValuePairs@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?GetVoidValue@NullNameValuePairs@CryptoPP@@UBE_NPBDABVtype_info@@PAX@Z
CONST	ENDS
;	COMDAT ??_7NameValuePairs@CryptoPP@@6B@
CONST	SEGMENT
??_7NameValuePairs@CryptoPP@@6B@ DD FLAT:??_R4NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::`vftable'
	DD	FLAT:??_ENameValuePairs@CryptoPP@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Connect@CNetworkStream@@QAE_NPBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Connect@CNetworkStream@@QAE_NPBDHH@Z$0
__ehfuncinfo$?Connect@CNetworkStream@@QAE_NPBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Connect@CNetworkStream@@QAE_NPBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CNetworkStream@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CNetworkStream@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CNetworkStream@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CNetworkStream@@UAE@XZ$2
__ehfuncinfo$??1CNetworkStream@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CNetworkStream@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CNetworkStream@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNetworkStream@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CNetworkStream@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CNetworkStream@@QAE@XZ$2
__ehfuncinfo$??0CNetworkStream@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CNetworkStream@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_DEFAULT_CHANNEL$initializer$ DD FLAT:??__EDEFAULT_CHANNEL@CryptoPP@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_AAD_CHANNEL$initializer$ DD FLAT:??__EAAD_CHANNEL@CryptoPP@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<unsigned char,unsigned char,unsigned char>, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	_DEBUG_RANGE(_First, _Last);
; 471  : 	_DEBUG_POINTER(_Dest);
; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	2b f0		 sub	 esi, eax

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00011	e8 00 00 00 00	 call	 _memmove
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	03 c6		 add	 eax, esi
  0001b	5e		 pop	 esi

; 475  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<unsigned char,unsigned char,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAEPAE@std@@YAAAPAEAAPAEPAE@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAEPAE@std@@YAAAPAEAAPAEPAE@Z PROC	; std::_Rechecked<unsigned char *,unsigned char *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 	return (_Dest);
; 291  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAEPAE@std@@YAAAPAEAAPAEPAE@Z ENDP	; std::_Rechecked<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC ; std::_Uninit_move<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >, COMDAT

; 482  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	2b f0		 sub	 esi, eax

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00011	e8 00 00 00 00	 call	 _memmove
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	03 c6		 add	 eax, esi
  0001b	5e		 pop	 esi

; 483  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 485  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninit_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ENDP ; std::_Uninit_move<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAE@std@@YAPAEPAE@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAE@std@@YAPAEPAE@Z PROC			; std::_Unchecked<unsigned char *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 282  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAE@std@@YAPAEPAE@Z ENDP			; std::_Unchecked<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >, COMDAT

; 492  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	2b f0		 sub	 esi, eax

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00011	e8 00 00 00 00	 call	 _memmove
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	03 c6		 add	 eax, esi
  0001b	5e		 pop	 esi

; 493  : 	return (_Rechecked(_Dest,
; 494  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 495  : 			_Unchecked(_Dest), _Al)));
; 496  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ENDP ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >, COMDAT

; 90   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<unsigned char,unsigned int,unsigned char>, COMDAT

; 681  : 	{	// copy _Count * _Valty() to raw _First, using _Al, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2653 : 	_CSTD memset(_Dest, _Val, _Count);

  00003	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000b	e8 00 00 00 00	 call	 _memset
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 683  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<unsigned char,unsigned int,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z PROC ; std::_Ptr_cat<unsigned char,unsigned char>, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z ENDP ; std::_Ptr_cat<unsigned char,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAE@std@@YAPAEPAE@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAE@std@@YAPAEPAE@Z PROC			; std::_Val_type<unsigned char *>, COMDAT

; 646  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 647  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAE@std@@YAPAEPAE@Z ENDP			; std::_Val_type<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@E@std@@YAPAEIPAE@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@E@std@@YAPAEIPAE@Z PROC			; std::_Allocate<unsigned char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	77 0f		 ja	 SHORT $LN1@Allocate
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	8b c8		 mov	 ecx, eax
  00019	83 c4 04	 add	 esp, 4
  0001c	85 c9		 test	 ecx, ecx
  0001e	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00020	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  00025	8b c1		 mov	 eax, ecx

; 32   : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Allocate@E@std@@YAPAEIPAE@Z ENDP			; std::_Allocate<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>, COMDAT
; _this$ = ecx

; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	2b f0		 sub	 esi, eax

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00011	e8 00 00 00 00	 call	 _memmove
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	03 c6		 add	 eax, esi
  0001b	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1649 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<unsigned char *,unsigned int,std::_Wrap_alloc<std::allocator<unsigned char> > >, COMDAT

; 690  : 	{	// copy _Count * _Val_type(_First)() to raw _First, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2653 : 	_CSTD memset(_Dest, _Val, _Count);

  00003	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000b	e8 00 00 00 00	 call	 _memset
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 693  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<unsigned char *,unsigned int,std::_Wrap_alloc<std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCNetworkStream@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCNetworkStream@@UAEPAXI@Z PROC			; CNetworkStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CNetworkStream@@UAE@XZ ; CNetworkStream::~CNetworkStream
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCNetworkStream@@UAEPAXI@Z ENDP			; CNetworkStream::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen, COMDAT
; _this$ = ecx

; 1754 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy, COMDAT
; _this$ = ecx

; 1622 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN1@Tidy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Tidy:
  00026	5e		 pop	 esi

; 1632 : 			}
; 1633 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve, COMDAT
; _this$ = ecx

; 1612 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000c	2b c6		 sub	 eax, esi
  0000e	57		 push	 edi

; 1613 : 		if (_Unused_capacity() < _Count)

  0000f	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  00012	3b c7		 cmp	 eax, edi
  00014	73 44		 jae	 SHORT $LN2@Reserve

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00016	53		 push	 ebx
  00017	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00019	8b c3		 mov	 eax, ebx
  0001b	2b c6		 sub	 eax, esi
  0001d	48		 dec	 eax
  0001e	3b c7		 cmp	 eax, edi
  00020	72 3e		 jb	 SHORT $LN43@Reserve

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00022	2b f3		 sub	 esi, ebx

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00024	2b d3		 sub	 edx, ebx

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00026	03 f7		 add	 esi, edi

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00028	83 c8 ff	 or	 eax, -1
  0002b	8b fa		 mov	 edi, edx
  0002d	d1 ef		 shr	 edi, 1
  0002f	2b c7		 sub	 eax, edi
  00031	5b		 pop	 ebx
  00032	3b c2		 cmp	 eax, edx
  00034	73 12		 jae	 SHORT $LN27@Reserve
  00036	33 d2		 xor	 edx, edx

; 1576 : 		if (_Capacity < _Count)

  00038	3b d6		 cmp	 edx, esi
  0003a	5f		 pop	 edi
  0003b	0f 42 d6	 cmovb	 edx, esi
  0003e	5e		 pop	 esi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0003f	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1618 : 			}
; 1619 : 		}

  00042	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00043	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate
$LN27@Reserve:

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00048	03 d7		 add	 edx, edi

; 1576 : 		if (_Capacity < _Count)

  0004a	3b d6		 cmp	 edx, esi
  0004c	5f		 pop	 edi
  0004d	0f 42 d6	 cmovb	 edx, esi
  00050	5e		 pop	 esi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00051	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1618 : 			}
; 1619 : 		}

  00054	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00055	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate
$LN2@Reserve:
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi

; 1618 : 			}
; 1619 : 		}

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN43@Reserve:

; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())
; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);
; 1629 : 			this->_Myfirst = pointer();
; 1630 : 			this->_Mylast = pointer();
; 1631 : 			this->_Myend = pointer();
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 	template<class _Iter>
; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());
; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));
; 1641 : 		}
; 1642 : 
; 1643 : 	template<class _Iter>
; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1645 : 		{	// move initializing [_First, _Last), using allocator
; 1646 : 		_Alty _Alval(this->_Getal());
; 1647 : 		return (_Uninitialized_move(_First, _Last,
; 1648 : 			_Ptr, _Alval));
; 1649 : 		}
; 1650 : 
; 1651 : 	iterator _Insert_n(const_iterator _Where,
; 1652 : 		size_type _Count, const value_type& _Val)
; 1653 : 		{	// insert _Count * _Val at _Where
; 1654 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1655 : 		if (_VICONT(_Where) != this
; 1656 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1657 : 			|| this->_Mylast < _VIPTR(_Where))
; 1658 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1659 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1660 : 
; 1661 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1662 : 		if (_Count == 0)
; 1663 : 			;
; 1664 : 		else if (_Unused_capacity() < _Count)
; 1665 : 			{	// not enough room, reallocate
; 1666 : 			if (max_size() - size() < _Count)
; 1667 : 				_Xlen();	// result too long
; 1668 : 
; 1669 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1670 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1671 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1672 : 			int _Ncopied = 0;
; 1673 : 
; 1674 : 			_TRY_BEGIN
; 1675 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1676 : 				_STD addressof(_Val));	// add new stuff
; 1677 : 			++_Ncopied;
; 1678 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1679 : 				_Newvec);	// copy prefix
; 1680 : 			++_Ncopied;
; 1681 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1682 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1683 : 			_CATCH_ALL
; 1684 : 			if (1 < _Ncopied)
; 1685 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1686 : 			if (0 < _Ncopied)
; 1687 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1688 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1689 : 			_RERAISE;
; 1690 : 			_CATCH_END
; 1691 : 
; 1692 : 			_Count += size();
; 1693 : 			if (this->_Myfirst != pointer())
; 1694 : 				{	// destroy and deallocate old array
; 1695 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1696 : 				this->_Getal().deallocate(this->_Myfirst,
; 1697 : 					this->_Myend - this->_Myfirst);
; 1698 : 				}
; 1699 : 
; 1700 : 			this->_Orphan_all();
; 1701 : 			this->_Myend = _Newvec + _Capacity;
; 1702 : 			this->_Mylast = _Newvec + _Count;
; 1703 : 			this->_Myfirst = _Newvec;
; 1704 : 			}
; 1705 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1706 : 			< _Count)
; 1707 : 			{	// new stuff spills off end
; 1708 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1709 : 
; 1710 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1711 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1712 : 
; 1713 : 			_TRY_BEGIN
; 1714 : 			_Ufill(this->_Mylast,
; 1715 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1716 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1717 : 			_CATCH_ALL
; 1718 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1719 : 				this->_Mylast + _Count);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			this->_Mylast += _Count;
; 1724 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1725 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1726 : 				_Tmp);	// insert up to old end
; 1727 : 			}
; 1728 : 		else
; 1729 : 			{	// new stuff can all be assigned
; 1730 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1731 : 
; 1732 : 			pointer _Oldend = this->_Mylast;
; 1733 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1734 : 				this->_Mylast);	// copy suffix
; 1735 : 
; 1736 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1737 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1738 : 				_Oldend);	// copy hole
; 1739 : 			_STD fill(_VIPTR(_Where),
; 1740 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1741 : 			}
; 1742 : 		return (begin() + _Off);
; 1743 : 		}
; 1744 : 
; 1745 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1746 : 		{	// copy initializing _Count * _Val, using allocator
; 1747 : 		_Alty _Alval(this->_Getal());
; 1748 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1749 : 		return (_Ptr + _Count);
; 1750 : 		}
; 1751 : 
; 1752 : 	__declspec(noreturn) void _Xlen() const
; 1753 : 		{	// report a length_error
; 1754 : 		_Xlength_error("vector<T> too long");

  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00065	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN45@Reserve:
$LN42@Reserve:
  0006a	cc		 int	 3
?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$1$ = 8						; size = 4
__Count$ = 8						; size = 4
?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate, COMDAT
; _this$ = ecx

; 1587 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  00009	33 f6		 xor	 esi, esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1587 : 		{	// move to array of exactly _Count elements

  0000b	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  0000d	85 ff		 test	 edi, edi
  0000f	74 14		 je	 SHORT $LN16@Reallocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00011	83 ff ff	 cmp	 edi, -1
  00014	77 50		 ja	 SHORT $LN61@Reallocate
  00016	57		 push	 edi
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b f0		 mov	 esi, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 f6		 test	 esi, esi
  00023	74 41		 je	 SHORT $LN61@Reallocate
$LN16@Reallocate:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00025	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00027	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0002a	2b c1		 sub	 eax, ecx

; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0002c	50		 push	 eax
  0002d	51		 push	 ecx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00034	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00039	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003c	2b c8		 sub	 ecx, eax
  0003e	89 4d 08	 mov	 DWORD PTR __Size$1$[ebp], ecx

; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())

  00041	85 c0		 test	 eax, eax
  00043	74 0c		 je	 SHORT $LN56@Reallocate
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR __Size$1$[ebp]
  0004e	83 c4 04	 add	 esp, 4
$LN56@Reallocate:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1606 : 		this->_Myend = _Ptr + _Count;

  00051	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]

; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;

  00054	89 33		 mov	 DWORD PTR [ebx], esi
  00056	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00059	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00061	5b		 pop	 ebx

; 1609 : 		}

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
$LN61@Reallocate:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00066	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN63@Reallocate:
$LN60@Reallocate:
  0006b	cc		 int	 3
?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Grow_to, COMDAT
; _this$ = ecx

; 1571 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00006	83 c8 ff	 or	 eax, -1

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00009	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000b	8b ca		 mov	 ecx, edx
  0000d	d1 e9		 shr	 ecx, 1
  0000f	2b c1		 sub	 eax, ecx
  00011	3b c2		 cmp	 eax, edx
  00013	73 0f		 jae	 SHORT $LN4@Grow_to
  00015	33 d2		 xor	 edx, edx

; 1576 : 		if (_Capacity < _Count)

  00017	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  0001a	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  0001e	8b c2		 mov	 eax, edx

; 1579 : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN4@Grow_to:

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00024	03 d1		 add	 edx, ecx

; 1576 : 		if (_Capacity < _Count)

  00026	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00029	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  0002d	8b c2		 mov	 eax, edx

; 1579 : 		}

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy, COMDAT
; _this$ = ecx

; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Pop_back_n@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Pop_back_n@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Pop_back_n, COMDAT
; _this$ = ecx

; 1495 : 		{	// erase _Count elements at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	29 41 04	 sub	 DWORD PTR [ecx+4], eax

; 1504 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Pop_back_n@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Pop_back_n
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[], COMDAT
; _this$ = ecx

; 1197 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	03 45 08	 add	 eax, DWORD PTR __Pos$[ebp]

; 1210 : 		}

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size, COMDAT
; _this$ = ecx

; 1153 : 		return (this->_Getal().max_size());

  00000	83 c8 ff	 or	 eax, -1

; 1154 : 		}

  00003	c3		 ret	 0
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::size, COMDAT
; _this$ = ecx

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1149 : 		}

  00005	c3		 ret	 0
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::resize, COMDAT
; _this$ = ecx

; 1100 : 		{	// determine new length, padding as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1101 : 		if (_Newsize < size())

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]

; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000d	8b ca		 mov	 ecx, edx
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	2b c8		 sub	 ecx, eax

; 1101 : 		if (_Newsize < size())

  00013	3b cf		 cmp	 ecx, edi
  00015	77 25		 ja	 SHORT $LN36@resize

; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)

  00017	73 28		 jae	 SHORT $LN2@resize

; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());

  00019	2b c2		 sub	 eax, edx
  0001b	8b ce		 mov	 ecx, esi
  0001d	03 c7		 add	 eax, edi
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2653 : 	_CSTD memset(_Dest, _Val, _Count);

  00025	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	2b c1		 sub	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1109 : 				_Alval);

  0002c	03 c7		 add	 eax, edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2653 : 	_CSTD memset(_Dest, _Val, _Count);

  0002e	50		 push	 eax
  0002f	6a 00		 push	 0
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _memset
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1114 : 			this->_Mylast += _Newsize - size();

  00037	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2653 : 	_CSTD memset(_Dest, _Val, _Count);

  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN36@resize:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1114 : 			this->_Mylast += _Newsize - size();

  0003c	03 c7		 add	 eax, edi
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN2@resize:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 1115 : 			}
; 1116 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1015 : 		return (this->_Myend - this->_Mylast);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]

; 1016 : 		}

  00006	c3		 ret	 0
?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity, COMDAT
; _this$ = ecx

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1011 : 		}

  00005	c3		 ret	 0
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 944  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);
; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN3@vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@vector:
  00026	5e		 pop	 esi

; 945  : 		_Tidy();
; 946  : 		}

  00027	c3		 ret	 0
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 681  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 681  : 		}

  00016	c3		 ret	 0
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal, COMDAT
; _this$ = ecx

; 641  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 643  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >, COMDAT
; _this$ = ecx

; 481  : 		{	// initialize values
; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 483  : 		_Mylast = pointer();
; 484  : 		_Myend = pointer();
; 485  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<unsigned char> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	83 c8 ff	 or	 eax, -1

; 885  : 		}

  00003	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned char> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned char> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 14		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	77 15		 ja	 SHORT $LN14@allocate
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	8b c8		 mov	 ecx, eax
  00019	83 c4 04	 add	 esp, 4
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00020	8b c1		 mov	 eax, ecx

; 848  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  0002b	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned char> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<unsigned char> >::_Wrap_alloc<std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<unsigned char> >::_Wrap_alloc<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z PROC ; std::allocator_traits<std::allocator<unsigned char> >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	83 c8 ff	 or	 eax, -1

; 736  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z ENDP ; std::allocator_traits<std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@E@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@E@std@@QBEIXZ PROC		; std::allocator<unsigned char>::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	83 c8 ff	 or	 eax, -1

; 613  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@E@std@@QBEIXZ ENDP		; std::allocator<unsigned char>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@E@std@@QAEPAEI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@E@std@@QAEPAEI@Z PROC		; std::allocator<unsigned char>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 14		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	77 15		 ja	 SHORT $LN11@allocate
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	8b c8		 mov	 ecx, eax
  00019	83 c4 04	 add	 esp, 4
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00020	8b c1		 mov	 eax, ecx

; 579  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  0002b	cc		 int	 3
?allocate@?$allocator@E@std@@QAEPAEI@Z ENDP		; std::allocator<unsigned char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@E@std@@QAEXPAEI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@E@std@@QAEXPAEI@Z PROC		; std::allocator<unsigned char>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@E@std@@QAEXPAEI@Z ENDP		; std::allocator<unsigned char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@E@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@E@std@@QAE@XZ PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@E@std@@QAE@XZ ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
; File c:\gamepackages\client\tools\patcher2017\eterbase\cipher.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?ActivateCipher@CNetworkStream@@IAEXXZ
_TEXT	SEGMENT
?ActivateCipher@CNetworkStream@@IAEXXZ PROC		; CNetworkStream::ActivateCipher, COMDAT
; _this$ = ecx
; File c:\gamepackages\client\tools\patcher2017\eterbase\cipher.h

; 48   :   void set_activated(bool value) { activated_ = value; }

  00000	c6 41 4c 01	 mov	 BYTE PTR [ecx+76], 1
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp

; 3010 : }

  00004	c3		 ret	 0
?ActivateCipher@CNetworkStream@@IAEXXZ ENDP		; CNetworkStream::ActivateCipher
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Activate@CNetworkStream@@IAE_NIPBXI@Z
_TEXT	SEGMENT
_agreed_length$ = 8					; size = 4
_buffer$ = 12						; size = 4
_length$ = 16						; size = 4
?Activate@CNetworkStream@@IAE_NIPBXI@Z PROC		; CNetworkStream::Activate, COMDAT
; _this$ = ecx

; 3003 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3004 : 	return m_cipher.Activate(true, agreed_length, buffer, length);

  00003	ff 75 10	 push	 DWORD PTR _length$[ebp]
  00006	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00009	ff 75 0c	 push	 DWORD PTR _buffer$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _agreed_length$[ebp]
  0000f	6a 01		 push	 1
  00011	e8 00 00 00 00	 call	 ?Activate@Cipher@@QAE_N_NIPBXI@Z ; Cipher::Activate

; 3005 : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?Activate@CNetworkStream@@IAE_NIPBXI@Z ENDP		; CNetworkStream::Activate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Prepare@CNetworkStream@@IAEIPAXPAI@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
?Prepare@CNetworkStream@@IAEIPAXPAI@Z PROC		; CNetworkStream::Prepare, COMDAT
; _this$ = ecx

; 2998 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2999 : 	return m_cipher.Prepare(buffer, length);

  00003	83 c1 4c	 add	 ecx, 76			; 0000004cH

; 3000 : }

  00006	5d		 pop	 ebp

; 2999 : 	return m_cipher.Prepare(buffer, length);

  00007	e9 00 00 00 00	 jmp	 ?Prepare@Cipher@@QAEIPAXPAI@Z ; Cipher::Prepare
?Prepare@CNetworkStream@@IAEIPAXPAI@Z ENDP		; CNetworkStream::Prepare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?__GetSendBufferSize@CNetworkStream@@IAEHXZ
_TEXT	SEGMENT
?__GetSendBufferSize@CNetworkStream@@IAEHXZ PROC	; CNetworkStream::__GetSendBufferSize, COMDAT
; _this$ = ecx

; 752  : 	return m_sendBufInputPos-m_sendBufOutputPos;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	2b 41 38	 sub	 eax, DWORD PTR [ecx+56]

; 753  : }

  00006	c3		 ret	 0
?__GetSendBufferSize@CNetworkStream@@IAEHXZ ENDP	; CNetworkStream::__GetSendBufferSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?__PopSendBuffer@CNetworkStream@@IAEXXZ
_TEXT	SEGMENT
?__PopSendBuffer@CNetworkStream@@IAEXXZ PROC		; CNetworkStream::__PopSendBuffer, COMDAT
; _this$ = ecx

; 269  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 270  : 	if (m_sendBufOutputPos<=0)

  00003	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00006	85 c0		 test	 eax, eax
  00008	7e 25		 jle	 SHORT $LN3@PopSendBuf

; 271  : 		return;
; 272  : 		
; 273  : 	int sendBufDataSize = m_sendBufInputPos - m_sendBufOutputPos;

  0000a	57		 push	 edi
  0000b	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0000e	2b f8		 sub	 edi, eax

; 274  : 
; 275  : 	if (sendBufDataSize>0)

  00010	85 ff		 test	 edi, edi
  00012	7e 10		 jle	 SHORT $LN1@PopSendBuf

; 276  : 	{
; 277  : 		memmove(m_sendBuf, m_sendBuf+m_sendBufOutputPos, sendBufDataSize);

  00014	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00017	03 c1		 add	 eax, ecx
  00019	57		 push	 edi
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@PopSendBuf:

; 278  : 	}
; 279  : 
; 280  : 	m_sendBufInputPos = sendBufDataSize;

  00024	89 7e 34	 mov	 DWORD PTR [esi+52], edi

; 281  : 	m_sendBufOutputPos = 0;	

  00027	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  0002e	5f		 pop	 edi
$LN3@PopSendBuf:
  0002f	5e		 pop	 esi

; 282  : }

  00030	c3		 ret	 0
?__PopSendBuffer@CNetworkStream@@IAEXXZ ENDP		; CNetworkStream::__PopSendBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
; File c:\gamepackages\client\tools\patcher2017\eterbase\cipher.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?__RecvInternalBuffer@CNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
?__RecvInternalBuffer@CNetworkStream@@IAE_NXZ PROC	; CNetworkStream::__RecvInternalBuffer, COMDAT
; _this$ = ecx

; 75   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 76   : 	if (m_recvBufOutputPos>0)

  00004	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00007	85 d2		 test	 edx, edx
  00009	7e 27		 jle	 SHORT $LN8@RecvIntern

; 77   : 	{
; 78   : 		int recvBufDataSize = m_recvBufInputPos - m_recvBufOutputPos;

  0000b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000e	2b c2		 sub	 eax, edx

; 79   : 		if (recvBufDataSize>0)

  00010	85 c0		 test	 eax, eax
  00012	7e 11		 jle	 SHORT $LN7@RecvIntern

; 80   : 		{
; 81   : 			memmove(m_recvBuf, m_recvBuf + m_recvBufOutputPos, recvBufDataSize);

  00014	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00017	50		 push	 eax
  00018	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@RecvIntern:

; 82   : 		}
; 83   : 		
; 84   : 		m_recvBufInputPos -= m_recvBufOutputPos;

  00025	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00028	29 46 24	 sub	 DWORD PTR [esi+36], eax

; 85   : 		m_recvBufOutputPos = 0;

  0002b	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
$LN8@RecvIntern:

; 86   : 	}
; 87   : 
; 88   : #ifdef _IMPROVED_PACKET_ENCRYPTION_
; 89   : 	int restSize = m_recvBufSize - m_recvBufInputPos;

  00032	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00035	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00038	2b c1		 sub	 eax, ecx

; 90   : 	if (restSize>0)

  0003a	85 c0		 test	 eax, eax
  0003c	7e 52		 jle	 SHORT $LN6@RecvIntern

; 91   : 	{		
; 92   : 		int recvSize = recv(m_sock, m_recvBuf + m_recvBufInputPos, m_recvBufSize - m_recvBufInputPos, 0);	

  0003e	6a 00		 push	 0
  00040	50		 push	 eax
  00041	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00044	03 c1		 add	 eax, ecx
  00046	50		 push	 eax
  00047	ff 76 5c	 push	 DWORD PTR [esi+92]
  0004a	e8 00 00 00 00	 call	 _recv@16
  0004f	8b f8		 mov	 edi, eax

; 93   : 		//Tracenf("RECV %d %d(%d, %d)", recvSize, restSize, m_recvTEABufSize - m_recvTEABufInputPos, m_recvBufSize - m_recvBufInputPos);
; 94   : 
; 95   : 		if (recvSize < 0)

  00051	85 ff		 test	 edi, edi
  00053	79 11		 jns	 SHORT $LN14@RecvIntern

; 96   : 		{
; 97   : 			int error = WSAGetLastError();

  00055	e8 00 00 00 00	 call	 _WSAGetLastError@0

; 98   : 
; 99   : 			if (error != WSAEWOULDBLOCK)

  0005a	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  0005f	74 07		 je	 SHORT $LN2@RecvIntern
$LN15@RecvIntern:
  00061	5f		 pop	 edi

; 100  : 			{
; 101  : 				return false;

  00062	32 c0		 xor	 al, al
  00064	5e		 pop	 esi

; 201  : }

  00065	c3		 ret	 0
$LN14@RecvIntern:

; 102  : 			}
; 103  : 		}
; 104  : 		else if (recvSize == 0)

  00066	74 f9		 je	 SHORT $LN15@RecvIntern
$LN2@RecvIntern:

; 105  : 		{
; 106  : 			return false;
; 107  : 		}
; 108  : 
; 109  : 		if (IsSecurityMode()) {

  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?IsSecurityMode@CNetworkStream@@QAE_NXZ ; CNetworkStream::IsSecurityMode
  0006f	84 c0		 test	 al, al
  00071	74 1a		 je	 SHORT $LN12@RecvIntern

; 110  : 			m_cipher.Decrypt(m_recvBuf + m_recvBufInputPos, recvSize);

  00073	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00076	03 56 24	 add	 edx, DWORD PTR [esi+36]
; File c:\gamepackages\client\tools\patcher2017\eterbase\cipher.h

; 40   :     if (!activated_) {

  00079	80 7e 4c 00	 cmp	 BYTE PTR [esi+76], 0
  0007d	74 0e		 je	 SHORT $LN12@RecvIntern

; 41   :       return;
; 42   :     }
; 43   :     decoder_->ProcessData((CryptoPP::byte*)buffer, (const CryptoPP::byte*)buffer, length);

  0007f	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00082	83 c1 04	 add	 ecx, 4
  00085	57		 push	 edi
  00086	52		 push	 edx
  00087	52		 push	 edx
  00088	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008a	ff 50 1c	 call	 DWORD PTR [eax+28]
$LN12@RecvIntern:
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp

; 113  : 		m_recvBufInputPos += recvSize;

  0008d	01 7e 24	 add	 DWORD PTR [esi+36], edi
$LN6@RecvIntern:
  00090	5f		 pop	 edi

; 114  : 	}
; 115  : #else
; 116  : 	if (IsSecurityMode())
; 117  : 	{		
; 118  : 		int restSize = min(m_recvTEABufSize - m_recvTEABufInputPos, m_recvBufSize - m_recvBufInputPos);
; 119  :  
; 120  : 		if (restSize > 0)
; 121  : 		{
; 122  : 			int recvSize = recv(m_sock, m_recvTEABuf + m_recvTEABufInputPos, restSize, 0);	
; 123  : 			//Tracenf("RECV %d %d(%d, %d)", recvSize, restSize, m_recvTEABufSize - m_recvTEABufInputPos, m_recvBufSize - m_recvBufInputPos);
; 124  : 
; 125  : 			if (recvSize < 0)
; 126  : 			{
; 127  : 				int error = WSAGetLastError();
; 128  : 
; 129  : 				if (error != WSAEWOULDBLOCK)
; 130  : 				{
; 131  : 					return false;
; 132  : 				}
; 133  : 			}
; 134  : 			else if (recvSize == 0)
; 135  : 			{
; 136  : 				return false;
; 137  : 			}
; 138  : 
; 139  : 			m_recvTEABufInputPos += recvSize;
; 140  : 
; 141  : 			int decodeSize = m_recvTEABufInputPos;
; 142  : 
; 143  : 			if (decodeSize >= 8)
; 144  : 			{
; 145  : 				decodeSize >>= 3;
; 146  : 				decodeSize <<= 3;
; 147  : 
; 148  : 				/*int decodeDstSize = tea_decrypt((DWORD *) (m_recvBuf + m_recvBufInputPos),
; 149  : 												 (DWORD *) m_recvTEABuf,
; 150  : 												 (const DWORD *) m_szDecryptKey,
; 151  : 												 decodeSize);
; 152  : 												 */
; 153  : 				int decodeDstSize = tea_decrypt((DWORD *) (m_recvBuf + m_recvBufInputPos),
; 154  : 												(DWORD *) m_recvTEABuf,
; 155  : 												(const DWORD *) m_szDecryptKey,
; 156  : 												decodeSize);
; 157  : 
; 158  : 				m_recvBufInputPos += decodeDstSize;
; 159  : 
; 160  : 				if (m_recvTEABufInputPos>decodeSize)
; 161  : 					memmove(m_recvTEABuf, m_recvTEABuf+decodeSize, m_recvTEABufInputPos-decodeSize);
; 162  : 
; 163  : 				m_recvTEABufInputPos -= decodeSize;
; 164  : 				
; 165  : 				
; 166  : 				//Tracenf("!!!!!! decrypt decodeSrcSize %d -> decodeDstSize %d (recvOutputPos %d, recvInputPos %d, teaInputPos %d)", 
; 167  : 				//		decodeSize, decodeDstSize, m_recvBufOutputPos, m_recvBufInputPos, m_recvTEABufInputPos);
; 168  : 			}
; 169  : 		}
; 170  : 	}
; 171  : 	else
; 172  : 	{
; 173  : 		int restSize = m_recvBufSize - m_recvBufInputPos;
; 174  : 		if (restSize>0)
; 175  : 		{		
; 176  : 			int recvSize = recv(m_sock, m_recvBuf + m_recvBufInputPos, m_recvBufSize - m_recvBufInputPos, 0);	
; 177  : 			//Tracenf("RECV %d %d(%d, %d)", recvSize, restSize, m_recvTEABufSize - m_recvTEABufInputPos, m_recvBufSize - m_recvBufInputPos);
; 178  : 
; 179  : 			if (recvSize < 0)
; 180  : 			{
; 181  : 				int error = WSAGetLastError();
; 182  : 
; 183  : 				if (error != WSAEWOULDBLOCK)
; 184  : 				{
; 185  : 					return false;
; 186  : 				}
; 187  : 			}
; 188  : 			else if (recvSize == 0)
; 189  : 			{
; 190  : 				return false;
; 191  : 			}
; 192  : 
; 193  : 			m_recvBufInputPos += recvSize;
; 194  : 		}
; 195  : 	}
; 196  : #endif // _IMPROVED_PACKET_ENCRYPTION_
; 197  : 		
; 198  : 	//Tracef("recvSize: %d input pos %d output pos %d\n", recvSize, m_recvBufInputPos, m_recvBufOutputPos);			
; 199  : 
; 200  : 	return true;

  00091	b0 01		 mov	 al, 1
  00093	5e		 pop	 esi

; 201  : }

  00094	c3		 ret	 0
?__RecvInternalBuffer@CNetworkStream@@IAE_NXZ ENDP	; CNetworkStream::__RecvInternalBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
; File c:\gamepackages\client\tools\patcher2017\eterbase\cipher.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?__SendInternalBuffer@CNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
?__SendInternalBuffer@CNetworkStream@@IAE_NXZ PROC	; CNetworkStream::__SendInternalBuffer, COMDAT
; _this$ = ecx

; 205  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 206  : #ifdef _IMPROVED_PACKET_ENCRYPTION_
; 207  : 	int dataSize=__GetSendBufferSize();

  00004	e8 00 00 00 00	 call	 ?__GetSendBufferSize@CNetworkStream@@IAEHXZ ; CNetworkStream::__GetSendBufferSize
  00009	8b f8		 mov	 edi, eax

; 208  : 	if (dataSize<=0)

  0000b	85 ff		 test	 edi, edi
  0000d	7e 4a		 jle	 SHORT $LN9@SendIntern

; 209  : 		return true;
; 210  : 
; 211  : 	if (IsSecurityMode()) {

  0000f	8b ce		 mov	 ecx, esi
  00011	e8 00 00 00 00	 call	 ?IsSecurityMode@CNetworkStream@@QAE_NXZ ; CNetworkStream::IsSecurityMode
  00016	84 c0		 test	 al, al
  00018	74 1a		 je	 SHORT $LN7@SendIntern

; 212  : 		m_cipher.Encrypt(m_sendBuf + m_sendBufOutputPos, dataSize);

  0001a	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0001d	03 56 2c	 add	 edx, DWORD PTR [esi+44]
; File c:\gamepackages\client\tools\patcher2017\eterbase\cipher.h

; 32   :     if (!activated_) {

  00020	80 7e 4c 00	 cmp	 BYTE PTR [esi+76], 0
  00024	74 0e		 je	 SHORT $LN7@SendIntern

; 33   :       return;
; 34   :     }
; 35   :     encoder_->ProcessData((CryptoPP::byte*)buffer, (const CryptoPP::byte*)buffer, length);

  00026	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00029	83 c1 04	 add	 ecx, 4
  0002c	57		 push	 edi
  0002d	52		 push	 edx
  0002e	52		 push	 edx
  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	ff 50 1c	 call	 DWORD PTR [eax+28]
$LN7@SendIntern:
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp

; 215  : 	int sendSize = send(m_sock, m_sendBuf+m_sendBufOutputPos, dataSize, 0);	

  00034	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00037	03 46 38	 add	 eax, DWORD PTR [esi+56]
  0003a	6a 00		 push	 0
  0003c	57		 push	 edi
  0003d	50		 push	 eax
  0003e	ff 76 5c	 push	 DWORD PTR [esi+92]
  00041	e8 00 00 00 00	 call	 _send@16

; 216  : 	if (sendSize < 0)

  00046	85 c0		 test	 eax, eax
  00048	79 05		 jns	 SHORT $LN1@SendIntern

; 217  : 		return false;

  0004a	5f		 pop	 edi
  0004b	32 c0		 xor	 al, al
  0004d	5e		 pop	 esi

; 266  : }

  0004e	c3		 ret	 0
$LN1@SendIntern:

; 218  : 
; 219  : 	m_sendBufOutputPos+=sendSize;

  0004f	01 46 38	 add	 DWORD PTR [esi+56], eax

; 220  : 
; 221  : 	__PopSendBuffer();

  00052	8b ce		 mov	 ecx, esi
  00054	e8 00 00 00 00	 call	 ?__PopSendBuffer@CNetworkStream@@IAEXXZ ; CNetworkStream::__PopSendBuffer
$LN9@SendIntern:

; 222  : #else
; 223  : 	if (IsSecurityMode())
; 224  : 	{
; 225  : 		int encodeSize=__GetSendBufferSize();
; 226  : 		if (encodeSize<=0)
; 227  : 			return true;
; 228  : 
; 229  : 		m_sendTEABufInputPos += tea_encrypt((DWORD *) (m_sendTEABuf + m_sendTEABufInputPos),
; 230  : 												 (DWORD *) (m_sendBuf + m_sendBufOutputPos),
; 231  : 												 (const DWORD *) m_szEncryptKey,
; 232  : 												 encodeSize);
; 233  : 		m_sendBufOutputPos += encodeSize;
; 234  : 
; 235  : 		if (m_sendTEABufInputPos>0)
; 236  : 		{	
; 237  : 			int sendSize = send(m_sock, m_sendTEABuf, m_sendTEABufInputPos, 0);	
; 238  : 			if (sendSize < 0)
; 239  : 				return false;
; 240  : 
; 241  : 			if (m_sendTEABufInputPos>sendSize)
; 242  : 				memmove(m_sendTEABuf, m_sendTEABuf+sendSize, m_sendTEABufInputPos-sendSize);
; 243  : 
; 244  : 			m_sendTEABufInputPos-=sendSize;			
; 245  : 		}
; 246  : 
; 247  : 		__PopSendBuffer();
; 248  : 	}
; 249  : 	else
; 250  : 	{
; 251  : 		int dataSize=__GetSendBufferSize();
; 252  : 		if (dataSize<=0)
; 253  : 			return true;
; 254  : 
; 255  : 		int sendSize = send(m_sock, m_sendBuf+m_sendBufOutputPos, dataSize, 0);	
; 256  : 		if (sendSize < 0)
; 257  : 			return false;
; 258  : 
; 259  : 		m_sendBufOutputPos+=sendSize;
; 260  : 
; 261  : 		__PopSendBuffer();
; 262  : 	}
; 263  : #endif // _IMPROVED_PACKET_ENCRYPTION_
; 264  : 
; 265  : 	return true;

  00059	5f		 pop	 edi
  0005a	b0 01		 mov	 al, 1
  0005c	5e		 pop	 esi

; 266  : }

  0005d	c3		 ret	 0
?__SendInternalBuffer@CNetworkStream@@IAE_NXZ ENDP	; CNetworkStream::__SendInternalBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?OnProcess@CNetworkStream@@MAE_NXZ
_TEXT	SEGMENT
?OnProcess@CNetworkStream@@MAE_NXZ PROC			; CNetworkStream::OnProcess, COMDAT
; _this$ = ecx

; 850  : 	return true;

  00000	b0 01		 mov	 al, 1

; 851  : }

  00002	c3		 ret	 0
?OnProcess@CNetworkStream@@MAE_NXZ ENDP			; CNetworkStream::OnProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?OnDisconnect@CNetworkStream@@MAEXXZ
_TEXT	SEGMENT
?OnDisconnect@CNetworkStream@@MAEXXZ PROC		; CNetworkStream::OnDisconnect, COMDAT
; _this$ = ecx

; 859  : }

  00000	c3		 ret	 0
?OnDisconnect@CNetworkStream@@MAEXXZ ENDP		; CNetworkStream::OnDisconnect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?OnRemoteDisconnect@CNetworkStream@@MAEXXZ
_TEXT	SEGMENT
?OnRemoteDisconnect@CNetworkStream@@MAEXXZ PROC		; CNetworkStream::OnRemoteDisconnect, COMDAT
; _this$ = ecx

; 855  : }

  00000	c3		 ret	 0
?OnRemoteDisconnect@CNetworkStream@@MAEXXZ ENDP		; CNetworkStream::OnRemoteDisconnect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?OnConnectFailure@CNetworkStream@@MAEXXZ
_TEXT	SEGMENT
?OnConnectFailure@CNetworkStream@@MAEXXZ PROC		; CNetworkStream::OnConnectFailure, COMDAT
; _this$ = ecx

; 868  : 	Tracen("Failed to connect.");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CIONHGBI@Failed?5to?5connect?4?$AA@
  00005	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0000a	59		 pop	 ecx

; 869  : }

  0000b	c3		 ret	 0
?OnConnectFailure@CNetworkStream@@MAEXXZ ENDP		; CNetworkStream::OnConnectFailure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?OnConnectSuccess@CNetworkStream@@MAEXXZ
_TEXT	SEGMENT
?OnConnectSuccess@CNetworkStream@@MAEXXZ PROC		; CNetworkStream::OnConnectSuccess, COMDAT
; _this$ = ecx

; 863  : 	Tracen("Succeed connecting.");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IJKILDIH@Succeed?5connecting?4?$AA@
  00005	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0000a	59		 pop	 ecx

; 864  : }

  0000b	c3		 ret	 0
?OnConnectSuccess@CNetworkStream@@MAEXXZ ENDP		; CNetworkStream::OnConnectSuccess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?SendSequence@CNetworkStream@@QAE_NXZ
_TEXT	SEGMENT
_bSeq$ = -1						; size = 1
?SendSequence@CNetworkStream@@QAE_NXZ PROC		; CNetworkStream::SendSequence, COMDAT
; _this$ = ecx

; 835  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 836  : 	if (!m_bUseSequence)

  00007	80 7e 74 00	 cmp	 BYTE PTR [esi+116], 0
  0000b	75 07		 jne	 SHORT $LN2@SendSequen

; 837  : 		return true;

  0000d	b0 01		 mov	 al, 1
  0000f	5e		 pop	 esi

; 844  : 
; 845  : 	return bRet;
; 846  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
$LN2@SendSequen:

; 838  : 
; 839  : 	BYTE bSeq = m_kVec_bSequenceTable[m_iSequence++];

  00014	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  00017	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0001a	89 46 70	 mov	 DWORD PTR [esi+112], eax
  0001d	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00020	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]

; 840  : 
; 841  : 	bool bRet = Send(sizeof(BYTE), &bSeq);

  00023	8b ce		 mov	 ecx, esi
  00025	88 45 ff	 mov	 BYTE PTR _bSeq$[ebp], al
  00028	8d 45 ff	 lea	 eax, DWORD PTR _bSeq$[ebp]
  0002b	50		 push	 eax
  0002c	6a 01		 push	 1
  0002e	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send

; 842  : 	if (m_iSequence == SEQUENCE_TABLE_SIZE)

  00033	81 7e 70 00 80
	00 00		 cmp	 DWORD PTR [esi+112], 32768 ; 00008000H
  0003a	75 07		 jne	 SHORT $LN3@SendSequen

; 843  : 		m_iSequence = 0;

  0003c	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
$LN3@SendSequen:
  00043	5e		 pop	 esi

; 844  : 
; 845  : 	return bRet;
; 846  : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?SendSequence@CNetworkStream@@QAE_NXZ ENDP		; CNetworkStream::SendSequence
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?SetPacketSequenceMode@CNetworkStream@@QAEX_N@Z
_TEXT	SEGMENT
_isOn$ = 8						; size = 1
?SetPacketSequenceMode@CNetworkStream@@QAEX_N@Z PROC	; CNetworkStream::SetPacketSequenceMode, COMDAT
; _this$ = ecx

; 830  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 831  : 	m_bUseSequence = isOn;

  00003	8a 45 08	 mov	 al, BYTE PTR _isOn$[ebp]
  00006	88 41 74	 mov	 BYTE PTR [ecx+116], al

; 832  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetPacketSequenceMode@CNetworkStream@@QAEX_N@Z ENDP	; CNetworkStream::SetPacketSequenceMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?IsOnline@CNetworkStream@@QAE_NXZ
_TEXT	SEGMENT
?IsOnline@CNetworkStream@@QAE_NXZ PROC			; CNetworkStream::IsOnline, COMDAT
; _this$ = ecx

; 826  : 	return m_isOnline;

  00000	8a 41 48	 mov	 al, BYTE PTR [ecx+72]

; 827  : }

  00003	c3		 ret	 0
?IsOnline@CNetworkStream@@QAE_NXZ ENDP			; CNetworkStream::IsOnline
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?SendFlush@CNetworkStream@@QAE_NHPBX@Z
_TEXT	SEGMENT
_len$ = 8						; size = 4
_pSrcBuf$ = 12						; size = 4
?SendFlush@CNetworkStream@@QAE_NHPBX@Z PROC		; CNetworkStream::SendFlush, COMDAT
; _this$ = ecx

; 812  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 813  : 	if (!Send(len, pSrcBuf))

  00004	ff 75 0c	 push	 DWORD PTR _pSrcBuf$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _len$[ebp]
  0000c	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  00011	84 c0		 test	 al, al
  00013	75 05		 jne	 SHORT $LN1@SendFlush
  00015	5e		 pop	 esi

; 817  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN1@SendFlush:

; 814  : 		return false;
; 815  : 
; 816  : 	return __SendInternalBuffer();

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?__SendInternalBuffer@CNetworkStream@@IAE_NXZ ; CNetworkStream::__SendInternalBuffer
  00021	5e		 pop	 esi

; 817  : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?SendFlush@CNetworkStream@@QAE_NHPBX@Z ENDP		; CNetworkStream::SendFlush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Send@CNetworkStream@@QAE_NHPBX@Z
_TEXT	SEGMENT
_len$ = 8						; size = 4
_pSrcBuf$ = 12						; size = 4
?Send@CNetworkStream@@QAE_NHPBX@Z PROC			; CNetworkStream::Send, COMDAT
; _this$ = ecx

; 820  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 822  : }

  00003	5d		 pop	 ebp

; 821  : 	return Send(len, (const char*)pSrcBuf);

  00004	e9 00 00 00 00	 jmp	 ?Send@CNetworkStream@@QAE_NHPBD@Z ; CNetworkStream::Send
?Send@CNetworkStream@@QAE_NHPBX@Z ENDP			; CNetworkStream::Send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Recv@CNetworkStream@@QAE_NHPAX@Z
_TEXT	SEGMENT
_len$ = 8						; size = 4
_pDestBuf$ = 12						; size = 4
?Recv@CNetworkStream@@QAE_NHPAX@Z PROC			; CNetworkStream::Recv, COMDAT
; _this$ = ecx

; 807  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 809  : }

  00003	5d		 pop	 ebp

; 808  : 	return Recv(len, (char*)pDestBuf);

  00004	e9 00 00 00 00	 jmp	 ?Recv@CNetworkStream@@QAE_NHPAD@Z ; CNetworkStream::Recv
?Recv@CNetworkStream@@QAE_NHPAX@Z ENDP			; CNetworkStream::Recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Peek@CNetworkStream@@QAE_NHPAX@Z
_TEXT	SEGMENT
_len$ = 8						; size = 4
_pDestBuf$ = 12						; size = 4
?Peek@CNetworkStream@@QAE_NHPAX@Z PROC			; CNetworkStream::Peek, COMDAT
; _this$ = ecx

; 802  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 804  : }

  00003	5d		 pop	 ebp

; 803  : 	return Peek(len, (char*)pDestBuf);

  00004	e9 00 00 00 00	 jmp	 ?Peek@CNetworkStream@@QAE_NHPAD@Z ; CNetworkStream::Peek
?Peek@CNetworkStream@@QAE_NHPAX@Z ENDP			; CNetworkStream::Peek
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Send@CNetworkStream@@QAE_NHPBD@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_pSrcBuf$ = 12						; size = 4
?Send@CNetworkStream@@QAE_NHPBD@Z PROC			; CNetworkStream::Send, COMDAT
; _this$ = ecx

; 757  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 758  : 	int sendBufRestSize = m_sendBufSize - m_sendBufInputPos;
; 759  : 	if ((size + 1) > sendBufRestSize)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _size$[ebp]
  0000a	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0000d	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00010	2b d1		 sub	 edx, ecx
  00012	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00015	3b c2		 cmp	 eax, edx
  00017	7e 08		 jle	 SHORT $LN1@Send

; 760  : 		return false;

  00019	5f		 pop	 edi
  0001a	32 c0		 xor	 al, al
  0001c	5e		 pop	 esi

; 782  : 	/*
; 783  : 	if (size > 0)
; 784  : 	{
; 785  : 		if (IsSecurityMode())
; 786  : 		{
; 787  : 			m_sendBufInputPos += TEA_Encrypt((DWORD *) (m_sendBuf + m_sendBufInputPos),
; 788  : 											 (DWORD *) (m_sendBuf + m_sendBufInputPos),
; 789  : 											 (const DWORD *) gs_szTeaKey,
; 790  : 											 size);
; 791  : 		}
; 792  : 		else
; 793  : 		{
; 794  : 		}
; 795  : 	}
; 796  : 
; 797  : 	return __SendInternalBuffer();
; 798  : 	*/
; 799  : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
$LN1@Send:

; 761  : 
; 762  : 	memcpy(m_sendBuf + m_sendBufInputPos, pSrcBuf, size);

  00021	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00024	57		 push	 edi
  00025	ff 75 0c	 push	 DWORD PTR _pSrcBuf$[ebp]
  00028	03 c1		 add	 eax, ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _memcpy
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 763  : 	m_sendBufInputPos += size;
; 764  : 
; 765  : #ifdef _PACKETDUMP
; 766  : 	if (*pSrcBuf != 0 )
; 767  : 	{
; 768  : 		TraceError("SEND> %s (%d)", GetSendHeaderName(*pSrcBuf), size);
; 769  : 		string contents;
; 770  : 		char buf[10];
; 771  : 		for(int i = 1; i < size; i++)
; 772  : 		{
; 773  : 			sprintf(buf," %02x", (unsigned char)(pSrcBuf[i]));
; 774  : 			contents.append(buf);
; 775  : 		}
; 776  : 		TraceError(contents.c_str());
; 777  : 
; 778  : 	}
; 779  : #endif
; 780  : 
; 781  : 	return true;

  00033	b0 01		 mov	 al, 1
  00035	01 7e 34	 add	 DWORD PTR [esi+52], edi
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 782  : 	/*
; 783  : 	if (size > 0)
; 784  : 	{
; 785  : 		if (IsSecurityMode())
; 786  : 		{
; 787  : 			m_sendBufInputPos += TEA_Encrypt((DWORD *) (m_sendBuf + m_sendBufInputPos),
; 788  : 											 (DWORD *) (m_sendBuf + m_sendBufInputPos),
; 789  : 											 (const DWORD *) gs_szTeaKey,
; 790  : 											 size);
; 791  : 		}
; 792  : 		else
; 793  : 		{
; 794  : 		}
; 795  : 	}
; 796  : 
; 797  : 	return __SendInternalBuffer();
; 798  : 	*/
; 799  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
?Send@CNetworkStream@@QAE_NHPBD@Z ENDP			; CNetworkStream::Send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Recv@CNetworkStream@@QAE_NHPAD@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_pDestBuf$ = 12						; size = 4
?Recv@CNetworkStream@@QAE_NHPAD@Z PROC			; CNetworkStream::Recv, COMDAT
; _this$ = ecx

; 726  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 727  : 	if (!Peek(size, pDestBuf)) 

  00005	ff 75 0c	 push	 DWORD PTR _pDestBuf$[ebp]
  00008	8b 7d 08	 mov	 edi, DWORD PTR _size$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	e8 00 00 00 00	 call	 ?Peek@CNetworkStream@@QAE_NHPAD@Z ; CNetworkStream::Peek
  00013	84 c0		 test	 al, al
  00015	75 06		 jne	 SHORT $LN1@Recv
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi

; 748  : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
$LN1@Recv:

; 728  : 		return false;
; 729  : 	
; 730  : #ifdef _PACKETDUMP
; 731  : 	if (*pDestBuf != 0 )
; 732  : 	{
; 733  : 		TraceError("RECV< %s (%d)", GetRecvHeaderName(*pDestBuf), size);
; 734  : 		string contents;
; 735  : 		char buf[10];
; 736  : 		for(int i = 1; i < size; i++)
; 737  : 		{
; 738  : 			sprintf(buf," %02x", (unsigned char)(pDestBuf[i]));
; 739  : 			contents.append(buf);
; 740  : 		}
; 741  : 		TraceError(contents.c_str());
; 742  : 	}
; 743  : 		
; 744  : #endif
; 745  : 
; 746  : 	m_recvBufOutputPos += size;

  0001d	01 7e 28	 add	 DWORD PTR [esi+40], edi

; 747  : 	return true;

  00020	b0 01		 mov	 al, 1
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 748  : }

  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?Recv@CNetworkStream@@QAE_NHPAD@Z ENDP			; CNetworkStream::Recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Recv@CNetworkStream@@QAE_NH@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?Recv@CNetworkStream@@QAE_NH@Z PROC			; CNetworkStream::Recv, COMDAT
; _this$ = ecx

; 717  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 718  : 	if (!Peek(size))

  00005	8b 7d 08	 mov	 edi, DWORD PTR _size$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	e8 00 00 00 00	 call	 ?Peek@CNetworkStream@@QAE_NH@Z ; CNetworkStream::Peek
  00010	84 c0		 test	 al, al
  00012	75 06		 jne	 SHORT $LN1@Recv
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi

; 723  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN1@Recv:

; 719  : 		return false;
; 720  : 
; 721  : 	m_recvBufOutputPos += size;

  0001a	01 7e 28	 add	 DWORD PTR [esi+40], edi

; 722  : 	return true;

  0001d	b0 01		 mov	 al, 1
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi

; 723  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?Recv@CNetworkStream@@QAE_NH@Z ENDP			; CNetworkStream::Recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Peek@CNetworkStream@@QAE_NHPAD@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_pDestBuf$ = 12						; size = 4
?Peek@CNetworkStream@@QAE_NHPAD@Z PROC			; CNetworkStream::Peek, COMDAT
; _this$ = ecx

; 479  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 480  : 	if (GetRecvBufferSize() < size)

  00006	e8 00 00 00 00	 call	 ?GetRecvBufferSize@CNetworkStream@@QAEHXZ ; CNetworkStream::GetRecvBufferSize
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  0000e	3b c1		 cmp	 eax, ecx
  00010	7d 07		 jge	 SHORT $LN1@Peek

; 481  : 		return false;

  00012	32 c0		 xor	 al, al
  00014	5e		 pop	 esi

; 485  : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN1@Peek:

; 482  : 
; 483  : 	memcpy(pDestBuf, m_recvBuf + m_recvBufOutputPos, size);

  00019	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0001c	03 46 1c	 add	 eax, DWORD PTR [esi+28]
  0001f	51		 push	 ecx
  00020	50		 push	 eax
  00021	ff 75 0c	 push	 DWORD PTR _pDestBuf$[ebp]
  00024	e8 00 00 00 00	 call	 _memcpy
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 484  : 	return true;

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 485  : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?Peek@CNetworkStream@@QAE_NHPAD@Z ENDP			; CNetworkStream::Peek
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Peek@CNetworkStream@@QAE_NH@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?Peek@CNetworkStream@@QAE_NH@Z PROC			; CNetworkStream::Peek, COMDAT
; _this$ = ecx

; 471  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 	if (GetRecvBufferSize() < size)

  00003	e8 00 00 00 00	 call	 ?GetRecvBufferSize@CNetworkStream@@QAEHXZ ; CNetworkStream::GetRecvBufferSize
  00008	3b 45 08	 cmp	 eax, DWORD PTR _size$[ebp]
  0000b	0f 9d c0	 setge	 al

; 473  : 		return false;
; 474  : 
; 475  : 	return true;
; 476  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?Peek@CNetworkStream@@QAE_NH@Z ENDP			; CNetworkStream::Peek
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Disconnect@CNetworkStream@@QAEXXZ
_TEXT	SEGMENT
?Disconnect@CNetworkStream@@QAEXXZ PROC			; CNetworkStream::Disconnect, COMDAT
; _this$ = ecx

; 359  : 	if (m_sock == INVALID_SOCKET)

  00000	83 79 5c ff	 cmp	 DWORD PTR [ecx+92], -1
  00004	0f 85 00 00 00
	00		 jne	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear

; 360  : 		return;
; 361  : 
; 362  : 	//OnDisconnect();
; 363  : 
; 364  : 	Clear();
; 365  : }

  0000a	c3		 ret	 0
?Disconnect@CNetworkStream@@QAEXXZ ENDP			; CNetworkStream::Disconnect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Connect@CNetworkStream@@QAE_NKHH@Z
_TEXT	SEGMENT
_szAddr$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_dwAddr$ = 8						; size = 4
_port$ = 12						; size = 4
_limitSec$ = 16						; size = 4
?Connect@CNetworkStream@@QAE_NKHH@Z PROC		; CNetworkStream::Connect, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 438  : 	char szAddr[256];
; 439  : 	{
; 440  : 		BYTE ip[4];
; 441  : 		ip[0]=dwAddr&0xff;dwAddr>>=8;

  00013	8b 55 08	 mov	 edx, DWORD PTR _dwAddr$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8a da		 mov	 bl, dl
  0001a	8b f1		 mov	 esi, ecx
  0001c	c1 ea 08	 shr	 edx, 8

; 442  : 		ip[1]=dwAddr&0xff;dwAddr>>=8;

  0001f	8a ca		 mov	 cl, dl
  00021	c1 ea 08	 shr	 edx, 8

; 443  : 		ip[2]=dwAddr&0xff;dwAddr>>=8;

  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 08	 shr	 eax, 8

; 444  : 		ip[3]=dwAddr&0xff;dwAddr>>=8;
; 445  : 
; 446  : 		sprintf(szAddr, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);

  00029	0f b6 c0	 movzx	 eax, al
  0002c	50		 push	 eax
  0002d	0f b6 c2	 movzx	 eax, dl
  00030	50		 push	 eax
  00031	0f b6 c1	 movzx	 eax, cl
  00034	50		 push	 eax
  00035	0f b6 c3	 movzx	 eax, bl
  00038	50		 push	 eax
  00039	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szAddr$[ebp]
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PCENNPGA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _sprintf
  0004a	83 c4 18	 add	 esp, 24			; 00000018H

; 447  : 	}
; 448  : 
; 449  : 	return Connect(szAddr, port, limitSec);

  0004d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szAddr$[ebp]
  00053	8b ce		 mov	 ecx, esi
  00055	ff 75 10	 push	 DWORD PTR _limitSec$[ebp]
  00058	ff 75 0c	 push	 DWORD PTR _port$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?Connect@CNetworkStream@@QAE_NPBDHH@Z ; CNetworkStream::Connect

; 450  : }

  00061	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00064	5e		 pop	 esi
  00065	33 cd		 xor	 ecx, ebp
  00067	5b		 pop	 ebx
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 0c 00	 ret	 12			; 0000000cH
?Connect@CNetworkStream@@QAE_NKHH@Z ENDP		; CNetworkStream::Connect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Connect@CNetworkStream@@QAE_NPBDHH@Z
_TEXT	SEGMENT
_kNetAddr$ = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szAddr$ = 8						; size = 4
_port$ = 12						; size = 4
___formal$ = 16						; size = 4
?Connect@CNetworkStream@@QAE_NPBDHH@Z PROC		; CNetworkStream::Connect, COMDAT
; _this$ = ecx

; 453  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Connect@CNetworkStream@@QAE_NPBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _c_szAddr$[ebp]

; 454  : 	CNetworkAddress kNetAddr;

  00030	8d 4d e0	 lea	 ecx, DWORD PTR _kNetAddr$[ebp]
  00033	e8 00 00 00 00	 call	 ??0CNetworkAddress@@QAE@XZ ; CNetworkAddress::CNetworkAddress

; 455  : 	kNetAddr.Set(c_szAddr, port);

  00038	ff 75 0c	 push	 DWORD PTR _port$[ebp]
  0003b	8d 4d e0	 lea	 ecx, DWORD PTR _kNetAddr$[ebp]
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 ?Set@CNetworkAddress@@QAE_NPBDH@Z ; CNetworkAddress::Set

; 456  : 
; 457  : 	return Connect(kNetAddr);

  0004b	6a 03		 push	 3
  0004d	8d 45 e0	 lea	 eax, DWORD PTR _kNetAddr$[ebp]
  00050	8b cf		 mov	 ecx, edi
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?Connect@CNetworkStream@@QAE_NABVCNetworkAddress@@H@Z ; CNetworkStream::Connect
  00058	8d 4d e0	 lea	 ecx, DWORD PTR _kNetAddr$[ebp]
  0005b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00062	8a d8		 mov	 bl, al
  00064	e8 00 00 00 00	 call	 ??1CNetworkAddress@@QAE@XZ ; CNetworkAddress::~CNetworkAddress
  00069	8a c3		 mov	 al, bl

; 458  : }

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007c	33 cd		 xor	 ecx, ebp
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Connect@CNetworkStream@@QAE_NPBDHH@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _kNetAddr$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CNetworkAddress@@QAE@XZ ; CNetworkAddress::~CNetworkAddress
__ehhandler$?Connect@CNetworkStream@@QAE_NPBDHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Connect@CNetworkStream@@QAE_NPBDHH@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Connect@CNetworkStream@@QAE_NPBDHH@Z ENDP		; CNetworkStream::Connect
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Connect@CNetworkStream@@QAE_NABVCNetworkAddress@@H@Z
_TEXT	SEGMENT
_arg$ = -4						; size = 4
_c_rkNetAddr$ = 8					; size = 4
_limitSec$ = 12						; size = 4
?Connect@CNetworkStream@@QAE_NABVCNetworkAddress@@H@Z PROC ; CNetworkStream::Connect, COMDAT
; _this$ = ecx

; 402  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 403  : 	Clear();

  00008	e8 00 00 00 00	 call	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear

; 404  : 
; 405  : 	m_addr = c_rkNetAddr;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _c_rkNetAddr$[ebp]
  00010	8d 77 60	 lea	 esi, DWORD PTR [edi+96]

; 406  : 	
; 407  : 	m_sock = socket(AF_INET, SOCK_STREAM, 0);

  00013	6a 00		 push	 0
  00015	6a 01		 push	 1
  00017	6a 02		 push	 2
  00019	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  0001d	f3 0f 7f 06	 movdqu	 XMMWORD PTR [esi], xmm0
  00021	e8 00 00 00 00	 call	 _socket@12
  00026	89 47 5c	 mov	 DWORD PTR [edi+92], eax

; 408  : 
; 409  : 	if (m_sock == INVALID_SOCKET) 

  00029	83 f8 ff	 cmp	 eax, -1
  0002c	74 45		 je	 SHORT $LN8@Connect

; 410  : 	{
; 411  : 		Clear();
; 412  : 		OnConnectFailure();
; 413  : 		return false;
; 414  : 	}
; 415  : 
; 416  : 	DWORD arg = 1;
; 417  : 	ioctlsocket(m_sock, FIONBIO, &arg);	// Non-blocking mode

  0002e	8d 4d fc	 lea	 ecx, DWORD PTR _arg$[ebp]
  00031	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _arg$[ebp], 1
  00038	51		 push	 ecx
  00039	68 7e 66 04 80	 push	 -2147195266		; 8004667eH
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _ioctlsocket@12

; 418  : 
; 419  : 	if (connect(m_sock, (PSOCKADDR)&m_addr, m_addr.GetSize()) == SOCKET_ERROR)

  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?GetSize@CNetworkAddress@@QAEHXZ ; CNetworkAddress::GetSize
  0004b	50		 push	 eax
  0004c	56		 push	 esi
  0004d	ff 77 5c	 push	 DWORD PTR [edi+92]
  00050	e8 00 00 00 00	 call	 _connect@12
  00055	83 f8 ff	 cmp	 eax, -1
  00058	75 31		 jne	 SHORT $LN1@Connect

; 420  : 	{
; 421  : 		int error = WSAGetLastError();

  0005a	e8 00 00 00 00	 call	 _WSAGetLastError@0

; 422  : 
; 423  : 		if (error != WSAEWOULDBLOCK)

  0005f	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00064	74 25		 je	 SHORT $LN1@Connect

; 424  : 		{
; 425  : 			Tracen("error != WSAEWOULDBLOCK");

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PDGCBBPG@error?5?$CB?$DN?5WSAEWOULDBLOCK?$AA@
  0006b	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00070	83 c4 04	 add	 esp, 4
$LN8@Connect:

; 426  : 			Clear();

  00073	8b cf		 mov	 ecx, edi
  00075	e8 00 00 00 00	 call	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear

; 427  : 			OnConnectFailure();

  0007a	8b 07		 mov	 eax, DWORD PTR [edi]
  0007c	8b cf		 mov	 ecx, edi
  0007e	ff 50 08	 call	 DWORD PTR [eax+8]
  00081	5f		 pop	 edi

; 428  : 			return false;

  00082	32 c0		 xor	 al, al
  00084	5e		 pop	 esi

; 434  : }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 08 00	 ret	 8
$LN1@Connect:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl

; 133  :     return _time64(_Time);

  0008b	6a 00		 push	 0
  0008d	e8 00 00 00 00	 call	 __time64
  00092	8b c8		 mov	 ecx, eax
  00094	83 c4 04	 add	 esp, 4
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp

; 432  : 	m_connectLimitTime = time(NULL) + limitSec;

  00097	8b 45 0c	 mov	 eax, DWORD PTR _limitSec$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl

; 133  :     return _time64(_Time);

  0009a	8b f2		 mov	 esi, edx
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp

; 432  : 	m_connectLimitTime = time(NULL) + limitSec;

  0009c	99		 cdq
  0009d	03 c8		 add	 ecx, eax

; 433  : 	return true;	

  0009f	b0 01		 mov	 al, 1
  000a1	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  000a4	13 f2		 adc	 esi, edx
  000a6	89 77 0c	 mov	 DWORD PTR [edi+12], esi
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi

; 434  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 08 00	 ret	 8
?Connect@CNetworkStream@@QAE_NABVCNetworkAddress@@H@Z ENDP ; CNetworkStream::Connect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Process@CNetworkStream@@QAEXXZ
_TEXT	SEGMENT
_delay$ = -532						; size = 8
_fdsRecv$ = -524					; size = 260
_fdsSend$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
?Process@CNetworkStream@@QAEXXZ PROC			; CNetworkStream::Process, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 02 00
	00		 sub	 esp, 532		; 00000214H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 288  : 	if (m_sock == INVALID_SOCKET)

  00016	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00019	83 f8 ff	 cmp	 eax, -1
  0001c	0f 84 26 01 00
	00		 je	 $LN1@Process

; 289  : 		return;
; 290  : 
; 291  : 	fd_set fdsRecv;
; 292  : 	fd_set fdsSend;
; 293  : 
; 294  : 	FD_ZERO(&fdsRecv);
; 295  : 	FD_ZERO(&fdsSend);
; 296  : 
; 297  : 	FD_SET(m_sock, &fdsRecv);

  00022	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _fdsRecv$[ebp+4], eax

; 298  : 	FD_SET(m_sock, &fdsSend);

  00028	89 85 fc fe ff
	ff		 mov	 DWORD PTR _fdsSend$[ebp+4], eax

; 299  : 
; 300  : 	TIMEVAL delay;
; 301  : 
; 302  : 	delay.tv_sec = 0;
; 303  : 	delay.tv_usec = 0;
; 304  : 	
; 305  : 	if (select(0, &fdsRecv, &fdsSend, NULL, &delay) == SOCKET_ERROR)

  0002e	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _delay$[ebp]
  00034	50		 push	 eax
  00035	6a 00		 push	 0
  00037	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _fdsSend$[ebp]
  0003d	c7 85 f4 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _fdsRecv$[ebp], 1
  00047	50		 push	 eax
  00048	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _fdsRecv$[ebp]
  0004e	c7 85 f8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _fdsSend$[ebp], 1
  00058	50		 push	 eax
  00059	6a 00		 push	 0
  0005b	c7 85 ec fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _delay$[ebp], 0
  00065	c7 85 f0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _delay$[ebp+4], 0
  0006f	e8 00 00 00 00	 call	 _select@20
  00074	83 f8 ff	 cmp	 eax, -1
  00077	0f 84 cb 00 00
	00		 je	 $LN1@Process

; 306  : 		return;
; 307  : 
; 308  : 	if (!m_isOnline)

  0007d	80 7e 48 00	 cmp	 BYTE PTR [esi+72], 0

; 309  : 	{
; 310  : 		if (FD_ISSET(m_sock, &fdsSend))

  00081	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _fdsSend$[ebp]
  00087	50		 push	 eax
  00088	ff 76 5c	 push	 DWORD PTR [esi+92]
  0008b	75 5a		 jne	 SHORT $LN10@Process
  0008d	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  00092	85 c0		 test	 eax, eax
  00094	74 1a		 je	 SHORT $LN9@Process

; 311  : 		{
; 312  : 			m_isOnline = true;
; 313  : 			OnConnectSuccess();

  00096	8b 06		 mov	 eax, DWORD PTR [esi]
  00098	8b ce		 mov	 ecx, esi
  0009a	c6 46 48 01	 mov	 BYTE PTR [esi+72], 1
  0009e	ff 50 04	 call	 DWORD PTR [eax+4]
  000a1	5e		 pop	 esi

; 353  : 	}
; 354  : }

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	33 cd		 xor	 ecx, ebp
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
$LN9@Process:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl

; 133  :     return _time64(_Time);

  000b0	6a 00		 push	 0
  000b2	e8 00 00 00 00	 call	 __time64
  000b7	83 c4 04	 add	 esp, 4
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp

; 315  : 		else if (time(NULL) > m_connectLimitTime)

  000ba	3b 56 0c	 cmp	 edx, DWORD PTR [esi+12]
  000bd	0f 8c 85 00 00
	00		 jl	 $LN1@Process
  000c3	7f 05		 jg	 SHORT $LN26@Process
  000c5	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  000c8	76 7e		 jbe	 SHORT $LN1@Process
$LN26@Process:

; 316  : 		{
; 317  : 			Clear();

  000ca	8b ce		 mov	 ecx, esi
  000cc	e8 00 00 00 00	 call	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear

; 318  : 			OnConnectFailure();

  000d1	8b 06		 mov	 eax, DWORD PTR [esi]
  000d3	8b ce		 mov	 ecx, esi
  000d5	ff 50 08	 call	 DWORD PTR [eax+8]
  000d8	5e		 pop	 esi

; 353  : 	}
; 354  : }

  000d9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000dc	33 cd		 xor	 ecx, ebp
  000de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
$LN10@Process:

; 319  : 		}
; 320  : 
; 321  : 		return;
; 322  : 	}
; 323  : 
; 324  : 	if (FD_ISSET(m_sock, &fdsSend) && (m_sendBufInputPos > m_sendBufOutputPos))

  000e7	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  000ec	85 c0		 test	 eax, eax
  000ee	74 1f		 je	 SHORT $LN4@Process
  000f0	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  000f3	3b 46 38	 cmp	 eax, DWORD PTR [esi+56]
  000f6	7e 17		 jle	 SHORT $LN4@Process

; 325  : 	{
; 326  : 		if (!__SendInternalBuffer())

  000f8	8b ce		 mov	 ecx, esi
  000fa	e8 00 00 00 00	 call	 ?__SendInternalBuffer@CNetworkStream@@IAE_NXZ ; CNetworkStream::__SendInternalBuffer
  000ff	84 c0		 test	 al, al
  00101	75 0c		 jne	 SHORT $LN4@Process

; 327  : 		{
; 328  : 			int error = WSAGetLastError();

  00103	e8 00 00 00 00	 call	 _WSAGetLastError@0

; 329  : 
; 330  : 			if (error != WSAEWOULDBLOCK)

  00108	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  0010d	75 2b		 jne	 SHORT $LN27@Process
$LN4@Process:

; 331  : 			{
; 332  : 				OnRemoteDisconnect();
; 333  : 				Clear();
; 334  : 				return;
; 335  : 			}
; 336  : 		}
; 337  : 	}
; 338  : 
; 339  : 	if (FD_ISSET(m_sock, &fdsRecv))

  0010f	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _fdsRecv$[ebp]
  00115	50		 push	 eax
  00116	ff 76 5c	 push	 DWORD PTR [esi+92]
  00119	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  0011e	85 c0		 test	 eax, eax
  00120	74 0b		 je	 SHORT $LN2@Process

; 340  : 	{
; 341  : 		if (!__RecvInternalBuffer())

  00122	8b ce		 mov	 ecx, esi
  00124	e8 00 00 00 00	 call	 ?__RecvInternalBuffer@CNetworkStream@@IAE_NXZ ; CNetworkStream::__RecvInternalBuffer
  00129	84 c0		 test	 al, al
  0012b	74 0d		 je	 SHORT $LN27@Process
$LN2@Process:

; 342  : 		{
; 343  : 			OnRemoteDisconnect();
; 344  : 			Clear();
; 345  : 			return;
; 346  : 		}
; 347  : 	}
; 348  : 
; 349  : 	if (!OnProcess())

  0012d	8b 06		 mov	 eax, DWORD PTR [esi]
  0012f	8b ce		 mov	 ecx, esi
  00131	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00134	ff d0		 call	 eax
  00136	84 c0		 test	 al, al
  00138	75 0e		 jne	 SHORT $LN1@Process
$LN27@Process:

; 350  : 	{
; 351  : 		OnRemoteDisconnect();

  0013a	8b 06		 mov	 eax, DWORD PTR [esi]
  0013c	8b ce		 mov	 ecx, esi
  0013e	ff 50 0c	 call	 DWORD PTR [eax+12]

; 352  : 		Clear();

  00141	8b ce		 mov	 ecx, esi
  00143	e8 00 00 00 00	 call	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear
$LN1@Process:

; 353  : 	}
; 354  : }

  00148	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014b	33 cd		 xor	 ecx, ebp
  0014d	5e		 pop	 esi
  0014e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
?Process@CNetworkStream@@QAEXXZ ENDP			; CNetworkStream::Process
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?ClearRecvBuffer@CNetworkStream@@QAEXXZ
_TEXT	SEGMENT
?ClearRecvBuffer@CNetworkStream@@QAEXXZ PROC		; CNetworkStream::ClearRecvBuffer, COMDAT
; _this$ = ecx

; 462  : 	m_recvBufOutputPos = m_recvBufInputPos = 0;	 

  00000	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  00007	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 463  : }

  0000e	c3		 ret	 0
?ClearRecvBuffer@CNetworkStream@@QAEXXZ ENDP		; CNetworkStream::ClearRecvBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?Clear@CNetworkStream@@QAEXXZ
_TEXT	SEGMENT
?Clear@CNetworkStream@@QAEXXZ PROC			; CNetworkStream::Clear, COMDAT
; _this$ = ecx

; 368  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 369  : 	if (m_sock == INVALID_SOCKET)

  00003	83 7e 5c ff	 cmp	 DWORD PTR [esi+92], -1
  00007	74 5a		 je	 SHORT $LN2@Clear

; 370  : 		return;
; 371  : 
; 372  : #ifdef _IMPROVED_PACKET_ENCRYPTION_
; 373  : 	m_cipher.CleanUp();

  00009	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  0000c	e8 00 00 00 00	 call	 ?CleanUp@Cipher@@QAEXXZ	; Cipher::CleanUp

; 374  : #endif
; 375  : 
; 376  : 	closesocket(m_sock);

  00011	ff 76 5c	 push	 DWORD PTR [esi+92]
  00014	e8 00 00 00 00	 call	 _closesocket@4

; 377  : 	m_sock = INVALID_SOCKET;

  00019	c7 46 5c ff ff
	ff ff		 mov	 DWORD PTR [esi+92], -1

; 378  : 
; 379  : #ifndef _IMPROVED_PACKET_ENCRYPTION_
; 380  : 	memset(m_szEncryptKey, 0, sizeof(m_szEncryptKey));
; 381  : 	memset(m_szDecryptKey, 0, sizeof(m_szDecryptKey));
; 382  : 
; 383  : 	m_isSecurityMode = false;
; 384  : #endif
; 385  : 
; 386  : 	m_isOnline = false;

  00020	c6 46 48 00	 mov	 BYTE PTR [esi+72], 0

; 387  : 	m_connectLimitTime = 0;

  00024	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0002b	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 388  : 
; 389  : 	m_recvTEABufInputPos = 0;

  00032	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 390  : 	m_sendTEABufInputPos = 0;

  00039	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 391  : 
; 392  : 	m_recvBufInputPos = 0;	

  00040	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 393  : 	m_recvBufOutputPos = 0;

  00047	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 394  : 	
; 395  : 	m_sendBufInputPos = 0;	

  0004e	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 396  : 	m_sendBufOutputPos = 0;

  00055	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 397  : 
; 398  : 	m_iSequence = 0;

  0005c	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
$LN2@Clear:
  00063	5e		 pop	 esi

; 399  : }

  00064	c3		 ret	 0
?Clear@CNetworkStream@@QAEXXZ ENDP			; CNetworkStream::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?GetRecvBufferSize@CNetworkStream@@QAEHXZ
_TEXT	SEGMENT
?GetRecvBufferSize@CNetworkStream@@QAEHXZ PROC		; CNetworkStream::GetRecvBufferSize, COMDAT
; _this$ = ecx

; 467  : 	return m_recvBufInputPos - m_recvBufOutputPos;

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	2b 41 28	 sub	 eax, DWORD PTR [ecx+40]

; 468  : }

  00006	c3		 ret	 0
?GetRecvBufferSize@CNetworkStream@@QAEHXZ ENDP		; CNetworkStream::GetRecvBufferSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?IsSecurityMode@CNetworkStream@@QAE_NXZ
_TEXT	SEGMENT
?IsSecurityMode@CNetworkStream@@QAE_NXZ PROC		; CNetworkStream::IsSecurityMode, COMDAT
; _this$ = ecx

; 30   : #ifdef _IMPROVED_PACKET_ENCRYPTION_
; 31   : 	return m_cipher.activated();

  00000	8a 41 4c	 mov	 al, BYTE PTR [ecx+76]

; 32   : #else
; 33   : 	return m_isSecurityMode;
; 34   : #endif
; 35   : }

  00003	c3		 ret	 0
?IsSecurityMode@CNetworkStream@@QAE_NXZ ENDP		; CNetworkStream::IsSecurityMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?SetSendBufferSize@CNetworkStream@@QAEXH@Z
_TEXT	SEGMENT
_sendBufSize$ = 8					; size = 4
?SetSendBufferSize@CNetworkStream@@QAEXH@Z PROC		; CNetworkStream::SetSendBufferSize, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 57   : 	if (m_sendBuf)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _sendBufSize$[ebp]
  0000a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0000d	85 c0		 test	 eax, eax
  0000f	74 1e		 je	 SHORT $LN1@SetSendBuf

; 58   : 	{
; 59   : 		if (m_sendBufSize > sendBufSize)

  00011	39 7e 30	 cmp	 DWORD PTR [esi+48], edi
  00014	7f 3d		 jg	 SHORT $LN4@SetSendBuf

; 60   : 			return;
; 61   : 
; 62   : 		delete [] m_sendBuf;

  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 63   : 
; 64   : 		if (m_sendTEABuf)

  0001c	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0001f	83 c4 04	 add	 esp, 4
  00022	85 c0		 test	 eax, eax
  00024	74 09		 je	 SHORT $LN1@SetSendBuf

; 65   : 			delete [] m_sendTEABuf;

  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002c	83 c4 04	 add	 esp, 4
$LN1@SetSendBuf:

; 66   : 	}
; 67   : 
; 68   : 	m_sendBufSize = sendBufSize;
; 69   : 	m_sendBuf = new char[m_sendBufSize];

  0002f	57		 push	 edi
  00030	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  00033	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00038	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 70   : 	m_sendTEABufSize = ((m_sendBufSize>>3)+1)<<3;

  0003b	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0003e	83 e0 f8	 and	 eax, -8			; fffffff8H
  00041	83 c0 08	 add	 eax, 8

; 71   : 	m_sendTEABuf = new char[m_sendTEABufSize];

  00044	50		 push	 eax
  00045	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00048	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0004d	83 c4 08	 add	 esp, 8
  00050	89 46 3c	 mov	 DWORD PTR [esi+60], eax
$LN4@SetSendBuf:
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi

; 72   : }

  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?SetSendBufferSize@CNetworkStream@@QAEXH@Z ENDP		; CNetworkStream::SetSendBufferSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ?SetRecvBufferSize@CNetworkStream@@QAEXH@Z
_TEXT	SEGMENT
_recvBufSize$ = 8					; size = 4
?SetRecvBufferSize@CNetworkStream@@QAEXH@Z PROC		; CNetworkStream::SetRecvBufferSize, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 39   : 	if (m_recvBuf)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _recvBufSize$[ebp]
  0000a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000d	85 c0		 test	 eax, eax
  0000f	74 1e		 je	 SHORT $LN1@SetRecvBuf

; 40   : 	{
; 41   : 		if (m_recvBufSize>recvBufSize)

  00011	39 7e 20	 cmp	 DWORD PTR [esi+32], edi
  00014	7f 3d		 jg	 SHORT $LN4@SetRecvBuf

; 42   : 			return;
; 43   : 
; 44   : 		delete [] m_recvBuf;

  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 45   : 
; 46   : 		if (m_recvTEABuf)

  0001c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001f	83 c4 04	 add	 esp, 4
  00022	85 c0		 test	 eax, eax
  00024	74 09		 je	 SHORT $LN1@SetRecvBuf

; 47   : 			delete [] m_recvTEABuf;

  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002c	83 c4 04	 add	 esp, 4
$LN1@SetRecvBuf:

; 48   : 	}
; 49   : 	m_recvBufSize = recvBufSize;
; 50   : 	m_recvBuf = new char[m_recvBufSize];	

  0002f	57		 push	 edi
  00030	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  00033	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00038	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 51   : 	m_recvTEABufSize = ((m_recvBufSize>>3)+1)<<3;

  0003b	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0003e	83 e0 f8	 and	 eax, -8			; fffffff8H
  00041	83 c0 08	 add	 eax, 8

; 52   : 	m_recvTEABuf = new char[m_recvTEABufSize];

  00044	50		 push	 eax
  00045	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00048	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0004d	83 c4 08	 add	 esp, 8
  00050	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN4@SetRecvBuf:
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi

; 53   : }

  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?SetRecvBufferSize@CNetworkStream@@QAEXH@Z ENDP		; CNetworkStream::SetRecvBufferSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ??1CNetworkStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CNetworkStream@@UAE@XZ PROC				; CNetworkStream::~CNetworkStream, COMDAT
; _this$ = ecx

; 2968 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CNetworkStream@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CNetworkStream@@6B@
  0002f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 2969 : 	Clear();

  00036	e8 00 00 00 00	 call	 ?Clear@CNetworkStream@@QAEXXZ ; CNetworkStream::Clear

; 2970 : 
; 2971 : 	if (m_sendTEABuf)

  0003b	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0003e	85 c0		 test	 eax, eax
  00040	74 10		 je	 SHORT $LN4@CNetworkSt

; 2972 : 	{
; 2973 : 		delete [] m_sendTEABuf;

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00048	83 c4 04	 add	 esp, 4

; 2974 : 		m_sendTEABuf=NULL;

  0004b	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
$LN4@CNetworkSt:

; 2975 : 	}
; 2976 : 
; 2977 : 	if (m_recvTEABuf)

  00052	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00055	85 c0		 test	 eax, eax
  00057	74 10		 je	 SHORT $LN3@CNetworkSt

; 2978 : 	{
; 2979 : 		delete [] m_recvTEABuf;

  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0005f	83 c4 04	 add	 esp, 4

; 2980 : 		m_recvTEABuf=NULL;

  00062	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
$LN3@CNetworkSt:

; 2981 : 	}
; 2982 : 
; 2983 : 	if (m_recvBuf)

  00069	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0006c	85 c0		 test	 eax, eax
  0006e	74 10		 je	 SHORT $LN2@CNetworkSt

; 2984 : 	{
; 2985 : 		delete [] m_recvBuf;

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00076	83 c4 04	 add	 esp, 4

; 2986 : 		m_recvBuf=NULL;

  00079	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN2@CNetworkSt:

; 2987 : 	}
; 2988 : 
; 2989 : 	if (m_sendBuf)

  00080	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00083	85 c0		 test	 eax, eax
  00085	74 10		 je	 SHORT $LN1@CNetworkSt

; 2990 : 	{
; 2991 : 		delete [] m_sendBuf;

  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0008d	83 c4 04	 add	 esp, 4

; 2992 : 		m_sendBuf=NULL;

  00090	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
$LN1@CNetworkSt:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  00097	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  0009a	85 c0		 test	 eax, eax
  0009c	74 21		 je	 SHORT $LN12@CNetworkSt
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a4	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  000a7	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 1630 : 			this->_Mylast = pointer();

  000ae	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0

; 1631 : 			this->_Myend = pointer();

  000b5	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
$LN12@CNetworkSt:
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp

; 2994 : }

  000bf	8d 4e 60	 lea	 ecx, DWORD PTR [esi+96]
  000c2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000c6	e8 00 00 00 00	 call	 ??1CNetworkAddress@@QAE@XZ ; CNetworkAddress::~CNetworkAddress
  000cb	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  000ce	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d5	e8 00 00 00 00	 call	 ??1Cipher@@QAE@XZ	; Cipher::~Cipher
  000da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e4	59		 pop	 ecx
  000e5	5e		 pop	 esi
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CNetworkStream@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00006	e9 00 00 00 00	 jmp	 ??1Cipher@@QAE@XZ	; Cipher::~Cipher
__unwindfunclet$??1CNetworkStream@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 60	 add	 ecx, 96			; 00000060H
  00011	e9 00 00 00 00	 jmp	 ??1CNetworkAddress@@QAE@XZ ; CNetworkAddress::~CNetworkAddress
__unwindfunclet$??1CNetworkStream@@UAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 78	 add	 ecx, 120		; 00000078H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__ehhandler$??1CNetworkStream@@UAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CNetworkStream@@UAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CNetworkStream@@UAE@XZ ENDP				; CNetworkStream::~CNetworkStream
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp
;	COMDAT ??0CNetworkStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CNetworkStream@@QAE@XZ PROC				; CNetworkStream::CNetworkStream, COMDAT
; _this$ = ecx

; 2934 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CNetworkStream@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  0002d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CNetworkStream@@6B@
  00033	e8 00 00 00 00	 call	 ??0Cipher@@QAE@XZ	; Cipher::Cipher
  00038	8d 4f 60	 lea	 ecx, DWORD PTR [edi+96]
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	e8 00 00 00 00	 call	 ??0CNetworkAddress@@QAE@XZ ; CNetworkAddress::CNetworkAddress
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 482  : 		_Myfirst = pointer();

  00047	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0

; 483  : 		_Mylast = pointer();

  0004e	c7 47 7c 00 00
	00 00		 mov	 DWORD PTR [edi+124], 0

; 484  : 		_Myend = pointer();

  00055	c7 87 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+128], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\netstream.cpp

; 2963 : 	m_kVec_bSequenceTable.resize(SEQUENCE_TABLE_SIZE);

  0005f	68 00 80 00 00	 push	 32768			; 00008000H
  00064	8d 4f 78	 lea	 ecx, DWORD PTR [edi+120]
  00067	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006b	c7 47 5c ff ff
	ff ff		 mov	 DWORD PTR [edi+92], -1
  00072	c6 47 48 00	 mov	 BYTE PTR [edi+72], 0
  00076	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0007d	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00084	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0008b	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00092	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00099	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
  000a0	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  000a7	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  000ae	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
  000b5	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0
  000bc	c7 47 44 00 00
	00 00		 mov	 DWORD PTR [edi+68], 0
  000c3	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  000ca	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
  000d1	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  000d8	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0
  000df	c7 47 70 00 00
	00 00		 mov	 DWORD PTR [edi+112], 0
  000e6	c6 47 74 00	 mov	 BYTE PTR [edi+116], 0
  000ea	e8 00 00 00 00	 call	 ?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize

; 2964 : 	memcpy(&m_kVec_bSequenceTable[0], s_bSequenceTable, sizeof(BYTE) * SEQUENCE_TABLE_SIZE);

  000ef	68 00 80 00 00	 push	 32768			; 00008000H
  000f4	68 00 00 00 00	 push	 OFFSET _s_bSequenceTable
  000f9	ff 77 78	 push	 DWORD PTR [edi+120]
  000fc	e8 00 00 00 00	 call	 _memcpy
  00101	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2965 : }

  00104	8b c7		 mov	 eax, edi
  00106	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00109	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00110	59		 pop	 ecx
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CNetworkStream@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00006	e9 00 00 00 00	 jmp	 ??1Cipher@@QAE@XZ	; Cipher::~Cipher
__unwindfunclet$??0CNetworkStream@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 60	 add	 ecx, 96			; 00000060H
  00011	e9 00 00 00 00	 jmp	 ??1CNetworkAddress@@QAE@XZ ; CNetworkAddress::~CNetworkAddress
__unwindfunclet$??0CNetworkStream@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 78	 add	 ecx, 120		; 00000078H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__ehhandler$??0CNetworkStream@@QAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CNetworkStream@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CNetworkStream@@QAE@XZ ENDP				; CNetworkStream::CNetworkStream
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\cipher.h
;	COMDAT ?set_activated@Cipher@@QAEX_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 1
?set_activated@Cipher@@QAEX_N@Z PROC			; Cipher::set_activated, COMDAT
; _this$ = ecx

; 48   :   void set_activated(bool value) { activated_ = value; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _value$[ebp]
  00006	88 01		 mov	 BYTE PTR [ecx], al
  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?set_activated@Cipher@@QAEX_N@Z ENDP			; Cipher::set_activated
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\cipher.h
;	COMDAT ?activated@Cipher@@QBE_NXZ
_TEXT	SEGMENT
?activated@Cipher@@QBE_NXZ PROC				; Cipher::activated, COMDAT
; _this$ = ecx

; 46   :   bool activated() const { return activated_; }

  00000	8a 01		 mov	 al, BYTE PTR [ecx]
  00002	c3		 ret	 0
?activated@Cipher@@QBE_NXZ ENDP				; Cipher::activated
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\cipher.h
;	COMDAT ?Decrypt@Cipher@@QAEXPAXI@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
?Decrypt@Cipher@@QAEXPAXI@Z PROC			; Cipher::Decrypt, COMDAT
; _this$ = ecx

; 38   :   void Decrypt(void* buffer, size_t length) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 39   :     assert(activated_);
; 40   :     if (!activated_) {

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	74 13		 je	 SHORT $LN2@Decrypt

; 41   :       return;
; 42   :     }
; 43   :     decoder_->ProcessData((CryptoPP::byte*)buffer, (const CryptoPP::byte*)buffer, length);

  00008	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000b	ff 75 0c	 push	 DWORD PTR _length$[ebp]
  0000e	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	50		 push	 eax
  00015	50		 push	 eax
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	ff 52 1c	 call	 DWORD PTR [edx+28]
$LN2@Decrypt:

; 44   :   }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?Decrypt@Cipher@@QAEXPAXI@Z ENDP			; Cipher::Decrypt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\cipher.h
;	COMDAT ?Encrypt@Cipher@@QAEXPAXI@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
?Encrypt@Cipher@@QAEXPAXI@Z PROC			; Cipher::Encrypt, COMDAT
; _this$ = ecx

; 30   :   void Encrypt(void* buffer, size_t length) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   :     assert(activated_);
; 32   :     if (!activated_) {

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	74 13		 je	 SHORT $LN2@Encrypt

; 33   :       return;
; 34   :     }
; 35   :     encoder_->ProcessData((CryptoPP::byte*)buffer, (const CryptoPP::byte*)buffer, length);

  00008	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000b	ff 75 0c	 push	 DWORD PTR _length$[ebp]
  0000e	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	50		 push	 eax
  00015	50		 push	 eax
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	ff 52 1c	 call	 DWORD PTR [edx+28]
$LN2@Encrypt:

; 36   :   }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?Encrypt@Cipher@@QAEXPAXI@Z ENDP			; Cipher::Encrypt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ??__FAAD_CHANNEL@CryptoPP@@YAXXZ
text$yd	SEGMENT
$T1 = -1						; size = 1
$T2 = -1						; size = 1
??__FAAD_CHANNEL@CryptoPP@@YAXXZ PROC			; CryptoPP::`dynamic atexit destructor for 'AAD_CHANNEL'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00004	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR _AAD_CHANNEL+20, 16 ; 00000010H
  0000b	72 2e		 jb	 SHORT $LN23@dynamic
  0000d	56		 push	 esi

; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;

  0000e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _AAD_CHANNEL

; 684  : 		return (_Alty());

  00014	8d 4d ff	 lea	 ecx, DWORD PTR $T2[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >

; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);

  0001c	68 00 00 00 00	 push	 OFFSET _AAD_CHANNEL
  00021	8d 4d ff	 lea	 ecx, DWORD PTR $T2[ebp]
  00024	e8 00 00 00 00	 call	 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 684  : 		return (_Alty());

  00029	8d 4d ff	 lea	 ecx, DWORD PTR $T1[ebp]
  0002c	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00037	83 c4 04	 add	 esp, 4
  0003a	5e		 pop	 esi
$LN23@dynamic:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;

  0003b	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR _AAD_CHANNEL+20, 15 ; 0000000fH

; 685  : 		}
; 686  : 	};
; 687  : 
; 688  : 		// TEMPLATE CLASS basic_string
; 689  : template<class _Elem,
; 690  : 	class _Traits,
; 691  : 	class _Alloc>
; 692  : 	class basic_string
; 693  : 		: public _String_alloc<!is_empty<_Alloc>::value,
; 694  : 			_String_base_types<_Elem, _Alloc> >
; 695  : 	{	// null-terminated transparent array of elements
; 696  : public:
; 697  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 698  : 	typedef _String_alloc<!is_empty<_Alloc>::value,
; 699  : 		_String_base_types<_Elem, _Alloc> > _Mybase;
; 700  : 	typedef _Traits traits_type;
; 701  : 	typedef _Alloc allocator_type;
; 702  : 
; 703  : 	typedef typename _Mybase::_Alty _Alty;
; 704  : 
; 705  : 	typedef typename _Mybase::value_type value_type;
; 706  : 	typedef typename _Mybase::size_type size_type;
; 707  : 	typedef typename _Mybase::difference_type difference_type;
; 708  : 	typedef typename _Mybase::pointer pointer;
; 709  : 	typedef typename _Mybase::const_pointer const_pointer;
; 710  : 	typedef typename _Mybase::reference reference;
; 711  : 	typedef typename _Mybase::const_reference const_reference;
; 712  : 
; 713  : 	typedef typename _Mybase::iterator iterator;
; 714  : 	typedef typename _Mybase::const_iterator const_iterator;
; 715  : 
; 716  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 717  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 718  : 
; 719  : 	basic_string(const _Myt& _Right)
; 720  : 
; 721  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 722  : 
; 723  : 
; 724  : 		{	// construct by copying _Right
; 725  : 		_Tidy();
; 726  : 		assign(_Right, 0, npos);
; 727  : 		}
; 728  : 
; 729  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 730  : 		: _Mybase(_Al)
; 731  : 		{	// construct by copying with allocator
; 732  : 		_Tidy();
; 733  : 		assign(_Right, 0, npos);
; 734  : 		}
; 735  : 
; 736  : 	basic_string()
; 737  : 		: _Mybase()
; 738  : 		{	// construct empty string
; 739  : 		_Tidy();
; 740  : 		}
; 741  : 
; 742  : 	explicit basic_string(const _Alloc& _Al)
; 743  : 		: _Mybase(_Al)
; 744  : 		{	// construct empty string with allocator
; 745  : 		_Tidy();
; 746  : 		}
; 747  : 
; 748  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 749  : 		size_type _Count = npos)
; 750  : 		: _Mybase(_Right._Getal())
; 751  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 752  : 		_Tidy();
; 753  : 		assign(_Right, _Roff, _Count);
; 754  : 		}
; 755  : 
; 756  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 757  : 		const _Alloc& _Al)
; 758  : 		: _Mybase(_Al)
; 759  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 760  : 		_Tidy();
; 761  : 		assign(_Right, _Roff, _Count);
; 762  : 		}
; 763  : 
; 764  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 765  : 		: _Mybase()
; 766  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 767  : 		_Tidy();
; 768  : 		assign(_Ptr, _Count);
; 769  : 		}
; 770  : 
; 771  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 772  : 		: _Mybase(_Al)
; 773  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 774  : 		_Tidy();
; 775  : 		assign(_Ptr, _Count);
; 776  : 		}
; 777  : 
; 778  : 	basic_string(const _Elem *_Ptr)
; 779  : 		: _Mybase()
; 780  : 		{	// construct from [_Ptr, <null>)
; 781  : 		_Tidy();
; 782  : 		assign(_Ptr);
; 783  : 		}
; 784  : 
; 785  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 786  : 		: _Mybase(_Al)
; 787  : 		{	// construct from [_Ptr, <null>) with allocator
; 788  : 		_Tidy();
; 789  : 		assign(_Ptr);
; 790  : 		}
; 791  : 
; 792  : 	basic_string(size_type _Count, _Elem _Ch)
; 793  : 		: _Mybase()
; 794  : 		{	// construct from _Count * _Ch
; 795  : 		_Tidy();
; 796  : 		assign(_Count, _Ch);
; 797  : 		}
; 798  : 
; 799  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 800  : 		: _Mybase(_Al)
; 801  : 		{	// construct from _Count * _Ch with allocator
; 802  : 		_Tidy();
; 803  : 		assign(_Count, _Ch);
; 804  : 		}
; 805  : 
; 806  : 	template<class _Iter,
; 807  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 808  : 			void>::type>
; 809  : 		basic_string(_Iter _First, _Iter _Last)
; 810  : 		: _Mybase()
; 811  : 		{	// construct from [_First, _Last)
; 812  : 		_Tidy();
; 813  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 814  : 		}
; 815  : 
; 816  : 	template<class _Iter,
; 817  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 818  : 			void>::type>
; 819  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 820  : 		: _Mybase(_Al)
; 821  : 		{	// construct from [_First, _Last) with allocator
; 822  : 		_Tidy();
; 823  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 824  : 		}
; 825  : 
; 826  : 	template<class _Iter>
; 827  : 		void _Construct(_Iter _First,
; 828  : 			_Iter _Last, input_iterator_tag)
; 829  : 		{	// initialize from [_First, _Last), input iterators
; 830  : 		_TRY_BEGIN
; 831  : 		for (; _First != _Last; ++_First)
; 832  : 			append((size_type)1, (_Elem)*_First);
; 833  : 		_CATCH_ALL
; 834  : 		_Tidy(true);
; 835  : 		_RERAISE;
; 836  : 		_CATCH_END
; 837  : 		}
; 838  : 
; 839  : 	template<class _Iter>
; 840  : 		void _Construct(_Iter _First,
; 841  : 			_Iter _Last, forward_iterator_tag)
; 842  : 		{	// initialize from [_First, _Last), forward iterators
; 843  : 		_DEBUG_RANGE(_First, _Last);
; 844  : 		size_type _Count = 0;
; 845  : 		_Distance(_First, _Last, _Count);
; 846  : 		reserve(_Count);
; 847  : 
; 848  : 		_TRY_BEGIN
; 849  : 		for (; _First != _Last; ++_First)
; 850  : 			append((size_type)1, (_Elem)*_First);
; 851  : 		_CATCH_ALL
; 852  : 		_Tidy(true);
; 853  : 		_RERAISE;
; 854  : 		_CATCH_END
; 855  : 		}
; 856  : 
; 857  : 	basic_string(const_pointer _First, const_pointer _Last)
; 858  : 		: _Mybase()
; 859  : 		{	// construct from [_First, _Last), const pointers
; 860  : 		_DEBUG_RANGE(_First, _Last);
; 861  : 		_Tidy();
; 862  : 		if (_First != _Last)
; 863  : 			assign(&*_First, _Last - _First);
; 864  : 		}
; 865  : 
; 866  : 	basic_string(const_pointer _First, const_pointer _Last,
; 867  : 		const _Alloc& _Al)
; 868  : 		: _Mybase(_Al)
; 869  : 		{	// construct from [_First, _Last), const pointers
; 870  : 		_DEBUG_RANGE(_First, _Last);
; 871  : 		_Tidy();
; 872  : 		if (_First != _Last)
; 873  : 			assign(&*_First, _Last - _First);
; 874  : 		}
; 875  : 
; 876  : 	basic_string(const_iterator _First, const_iterator _Last)
; 877  : 		: _Mybase()
; 878  : 		{	// construct from [_First, _Last), const_iterators
; 879  : 		_DEBUG_RANGE(_First, _Last);
; 880  : 		_Tidy();
; 881  : 		if (_First != _Last)
; 882  : 			assign(&*_First, _Last - _First);
; 883  : 		}
; 884  : 
; 885  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 886  : 		: _Mybase(_Right._Getal())
; 887  : 		{	// construct by moving _Right
; 888  : 		_Tidy();
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 890  : 		}
; 891  : 
; 892  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 893  : 		: _Mybase(_Al)
; 894  : 		{	// construct by moving _Right, allocator
; 895  : 		if (this->_Getal() != _Right._Getal())
; 896  : 			assign(_Right.begin(), _Right.end());
; 897  : 		else
; 898  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 899  : 		}
; 900  : 
; 901  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 902  : 		{	// assign by moving _Right
; 903  : 		if (this != &_Right)
; 904  : 			{	// different, assign it
; 905  : 			_Tidy(true);
; 906  : 
; 907  : 			if (_Alty::propagate_on_container_move_assignment::value
; 908  : 				&& this->_Getal() != _Right._Getal())
; 909  : 				this->_Change_alloc(_Right._Getal());
; 910  : 
; 911  : 			if (this->_Getal() != _Right._Getal())
; 912  : 				assign(_Right.begin(), _Right.end());
; 913  : 			else
; 914  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 915  : 			}
; 916  : 		return (*this);
; 917  : 		}
; 918  : 
; 919  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 920  : 		{	// assign by moving _Right
; 921  : 		if (this == &_Right)
; 922  : 			;
; 923  : 		else if (get_allocator() != _Right.get_allocator()
; 924  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 925  : 			*this = _Right;
; 926  : 		else
; 927  : 			{	// not same, clear this and steal from _Right
; 928  : 			_Tidy(true);
; 929  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	void _Assign_rv(_Myt&& _Right)
; 935  : 		{	// assign by moving _Right
; 936  : 		if (_Right._Myres < this->_BUF_SIZE)
; 937  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 938  : 				_Right._Mysize + 1);
; 939  : 		else
; 940  : 			{	// copy pointer
; 941  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 942  : 			_Right._Bx._Ptr = pointer();
; 943  : 			}
; 944  : 		this->_Mysize = _Right._Mysize;
; 945  : 		this->_Myres = _Right._Myres;
; 946  : 		_Right._Tidy();
; 947  : 		}
; 948  : 
; 949  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Tidy();
; 954  : 		assign(_Ilist.begin(), _Ilist.end());
; 955  : 		}
; 956  : 
; 957  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 958  : 		{	// assign initializer_list
; 959  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 960  : 		}
; 961  : 
; 962  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 963  : 		{	// append initializer_list
; 964  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 965  : 		}
; 966  : 
; 967  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 968  : 		{	// assign initializer_list
; 969  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 970  : 		}
; 971  : 
; 972  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// append initializer_list
; 974  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	iterator insert(const_iterator _Where,
; 978  : 		_XSTD initializer_list<_Elem> _Ilist)
; 979  : 		{	// insert initializer_list
; 980  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 981  : 		}
; 982  : 
; 983  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 984  : 		_XSTD initializer_list<_Elem> _Ilist)
; 985  : 		{	// replace with initializer_list
; 986  : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 987  : 		}
; 988  : 
; 989  : 	~basic_string() _NOEXCEPT
; 990  : 		{	// destroy the string
; 991  : 		_Tidy(true);
; 992  : 		}
; 993  : 
; 994  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 995  : 
; 996  : 	_Myt& operator=(const _Myt& _Right)
; 997  : 		{	// assign _Right
; 998  : 		if (this != &_Right)
; 999  : 			{	// different, assign it
; 1000 : 			if (this->_Getal() != _Right._Getal()
; 1001 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1002 : 				{	// change allocator before copying
; 1003 : 				_Tidy(true);
; 1004 : 				this->_Change_alloc(_Right._Getal());
; 1005 : 				}
; 1006 : 
; 1007 : 			assign(_Right);
; 1008 : 			}
; 1009 : 		return (*this);
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& operator=(const _Elem *_Ptr)
; 1013 : 		{	// assign [_Ptr, <null>)
; 1014 : 		return (assign(_Ptr));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& operator=(_Elem _Ch)
; 1018 : 		{	// assign 1 * _Ch
; 1019 : 		return (assign(1, _Ch));
; 1020 : 		}
; 1021 : 
; 1022 : 	_Myt& operator+=(const _Myt& _Right)
; 1023 : 		{	// append _Right
; 1024 : 		return (append(_Right));
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1028 : 		{	// append [_Ptr, <null>)
; 1029 : 		return (append(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator+=(_Elem _Ch)
; 1033 : 		{	// append 1 * _Ch
; 1034 : 		return (append((size_type)1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right, 0, npos));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& append(const _Myt& _Right,
; 1043 : 		size_type _Roff, size_type _Count)
; 1044 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1045 : 		if (_Right.size() < _Roff)
; 1046 : 			_Xran();	// _Roff off end
; 1047 : 		size_type _Num = _Right.size() - _Roff;
; 1048 : 		if (_Num < _Count)
; 1049 : 			_Count = _Num;	// trim _Count to size
; 1050 : 		if (npos - this->_Mysize <= _Count)
; 1051 : 			_Xlen();	// result too long
; 1052 : 
; 1053 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1054 : 			{	// make room and append new stuff
; 1055 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1056 : 				_Right._Myptr() + _Roff, _Count);
; 1057 : 			_Eos(_Num);
; 1058 : 			}
; 1059 : 		return (*this);
; 1060 : 		}
; 1061 : 
; 1062 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1063 : 		{	// append [_Ptr, _Ptr + _Count)
; 1064 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1065 : 		if (_Count != 0)
; 1066 : 			_DEBUG_POINTER(_Ptr);
; 1067 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1068 : 
; 1069 : 		if (_Inside(_Ptr))
; 1070 : 			return (append(*this,
; 1071 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1072 : 		if (npos - this->_Mysize <= _Count)
; 1073 : 			_Xlen();	// result too long
; 1074 : 
; 1075 : 		size_type _Num;
; 1076 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1077 : 			{	// make room and append new stuff
; 1078 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1079 : 			_Eos(_Num);
; 1080 : 			}
; 1081 : 		return (*this);
; 1082 : 		}
; 1083 : 
; 1084 : 	_Myt& append(const _Elem *_Ptr)
; 1085 : 		{	// append [_Ptr, <null>)
; 1086 : 		_DEBUG_POINTER(_Ptr);
; 1087 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1088 : 		}
; 1089 : 
; 1090 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1091 : 		{	// append _Count * _Ch
; 1092 : 		if (npos - this->_Mysize <= _Count)
; 1093 : 			_Xlen();	// result too long
; 1094 : 
; 1095 : 		size_type _Num;
; 1096 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1097 : 			{	// make room and append new stuff using assign
; 1098 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1099 : 			_Eos(_Num);
; 1100 : 			}
; 1101 : 		return (*this);
; 1102 : 		}
; 1103 : 
; 1104 : 	template<class _Iter>
; 1105 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1106 : 			_Myt&>::type
; 1107 : 		append(_Iter _First, _Iter _Last)
; 1108 : 		{	// append [_First, _Last), input iterators
; 1109 : 		return (replace(end(), end(), _First, _Last));
; 1110 : 		}
; 1111 : 
; 1112 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1113 : 		{	// append [_First, _Last), const pointers
; 1114 : 		return (replace(end(), end(), _First, _Last));
; 1115 : 		}
; 1116 : 
; 1117 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1118 : 		{	// append [_First, _Last), const_iterators
; 1119 : 		return (replace(end(), end(), _First, _Last));
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Myt& _Right)
; 1123 : 		{	// assign _Right
; 1124 : 		return (assign(_Right, 0, npos));
; 1125 : 		}
; 1126 : 
; 1127 : 	_Myt& assign(const _Myt& _Right,
; 1128 : 		size_type _Roff, size_type _Count)
; 1129 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1130 : 		if (_Right.size() < _Roff)
; 1131 : 			_Xran();	// _Roff off end
; 1132 : 		size_type _Num = _Right.size() - _Roff;
; 1133 : 		if (_Count < _Num)
; 1134 : 			_Num = _Count;	// trim _Num to size
; 1135 : 
; 1136 : 		if (this == &_Right)
; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1138 : 		else if (_Grow(_Num))
; 1139 : 			{	// make room and assign new stuff
; 1140 : 			_Traits::copy(this->_Myptr(),
; 1141 : 				_Right._Myptr() + _Roff, _Num);
; 1142 : 			_Eos(_Num);
; 1143 : 			}
; 1144 : 		return (*this);
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1149 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1150 : 		if (_Count != 0)
; 1151 : 			_DEBUG_POINTER(_Ptr);
; 1152 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1153 : 
; 1154 : 		if (_Inside(_Ptr))
; 1155 : 			return (assign(*this,
; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1157 : 
; 1158 : 		if (_Grow(_Count))
; 1159 : 			{	// make room and assign new stuff
; 1160 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1161 : 			_Eos(_Count);
; 1162 : 			}
; 1163 : 		return (*this);
; 1164 : 		}
; 1165 : 
; 1166 : 	_Myt& assign(const _Elem *_Ptr)
; 1167 : 		{	// assign [_Ptr, <null>)
; 1168 : 		_DEBUG_POINTER(_Ptr);
; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)
; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00045	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR _AAD_CHANNEL+16, 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0004f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _AAD_CHANNEL, 0
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??__FAAD_CHANNEL@CryptoPP@@YAXXZ ENDP			; CryptoPP::`dynamic atexit destructor for 'AAD_CHANNEL''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h
;	COMDAT ??__EAAD_CHANNEL@CryptoPP@@YAXXZ
text$di	SEGMENT
??__EAAD_CHANNEL@CryptoPP@@YAXXZ PROC			; CryptoPP::`dynamic initializer for 'AAD_CHANNEL'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00000	6a 03		 push	 3
  00002	68 00 00 00 00	 push	 OFFSET ??_C@_03BIFOHCEN@AAD?$AA@
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET _AAD_CHANNEL
  0000c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h

; 507  : static const std::string AAD_CHANNEL("AAD");

  00011	68 00 00 00 00	 push	 OFFSET ??__FAAD_CHANNEL@CryptoPP@@YAXXZ ; CryptoPP::`dynamic atexit destructor for 'AAD_CHANNEL''
  00016	e8 00 00 00 00	 call	 _atexit
  0001b	59		 pop	 ecx
  0001c	c3		 ret	 0
??__EAAD_CHANNEL@CryptoPP@@YAXXZ ENDP			; CryptoPP::`dynamic initializer for 'AAD_CHANNEL''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ??__FDEFAULT_CHANNEL@CryptoPP@@YAXXZ
text$yd	SEGMENT
$T1 = -1						; size = 1
$T2 = -1						; size = 1
??__FDEFAULT_CHANNEL@CryptoPP@@YAXXZ PROC		; CryptoPP::`dynamic atexit destructor for 'DEFAULT_CHANNEL'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00004	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR _DEFAULT_CHANNEL+20, 16 ; 00000010H
  0000b	72 2e		 jb	 SHORT $LN23@dynamic
  0000d	56		 push	 esi

; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;

  0000e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _DEFAULT_CHANNEL

; 684  : 		return (_Alty());

  00014	8d 4d ff	 lea	 ecx, DWORD PTR $T2[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >

; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);

  0001c	68 00 00 00 00	 push	 OFFSET _DEFAULT_CHANNEL
  00021	8d 4d ff	 lea	 ecx, DWORD PTR $T2[ebp]
  00024	e8 00 00 00 00	 call	 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 684  : 		return (_Alty());

  00029	8d 4d ff	 lea	 ecx, DWORD PTR $T1[ebp]
  0002c	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00037	83 c4 04	 add	 esp, 4
  0003a	5e		 pop	 esi
$LN23@dynamic:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;

  0003b	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR _DEFAULT_CHANNEL+20, 15 ; 0000000fH

; 685  : 		}
; 686  : 	};
; 687  : 
; 688  : 		// TEMPLATE CLASS basic_string
; 689  : template<class _Elem,
; 690  : 	class _Traits,
; 691  : 	class _Alloc>
; 692  : 	class basic_string
; 693  : 		: public _String_alloc<!is_empty<_Alloc>::value,
; 694  : 			_String_base_types<_Elem, _Alloc> >
; 695  : 	{	// null-terminated transparent array of elements
; 696  : public:
; 697  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 698  : 	typedef _String_alloc<!is_empty<_Alloc>::value,
; 699  : 		_String_base_types<_Elem, _Alloc> > _Mybase;
; 700  : 	typedef _Traits traits_type;
; 701  : 	typedef _Alloc allocator_type;
; 702  : 
; 703  : 	typedef typename _Mybase::_Alty _Alty;
; 704  : 
; 705  : 	typedef typename _Mybase::value_type value_type;
; 706  : 	typedef typename _Mybase::size_type size_type;
; 707  : 	typedef typename _Mybase::difference_type difference_type;
; 708  : 	typedef typename _Mybase::pointer pointer;
; 709  : 	typedef typename _Mybase::const_pointer const_pointer;
; 710  : 	typedef typename _Mybase::reference reference;
; 711  : 	typedef typename _Mybase::const_reference const_reference;
; 712  : 
; 713  : 	typedef typename _Mybase::iterator iterator;
; 714  : 	typedef typename _Mybase::const_iterator const_iterator;
; 715  : 
; 716  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 717  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 718  : 
; 719  : 	basic_string(const _Myt& _Right)
; 720  : 
; 721  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 722  : 
; 723  : 
; 724  : 		{	// construct by copying _Right
; 725  : 		_Tidy();
; 726  : 		assign(_Right, 0, npos);
; 727  : 		}
; 728  : 
; 729  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 730  : 		: _Mybase(_Al)
; 731  : 		{	// construct by copying with allocator
; 732  : 		_Tidy();
; 733  : 		assign(_Right, 0, npos);
; 734  : 		}
; 735  : 
; 736  : 	basic_string()
; 737  : 		: _Mybase()
; 738  : 		{	// construct empty string
; 739  : 		_Tidy();
; 740  : 		}
; 741  : 
; 742  : 	explicit basic_string(const _Alloc& _Al)
; 743  : 		: _Mybase(_Al)
; 744  : 		{	// construct empty string with allocator
; 745  : 		_Tidy();
; 746  : 		}
; 747  : 
; 748  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 749  : 		size_type _Count = npos)
; 750  : 		: _Mybase(_Right._Getal())
; 751  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 752  : 		_Tidy();
; 753  : 		assign(_Right, _Roff, _Count);
; 754  : 		}
; 755  : 
; 756  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 757  : 		const _Alloc& _Al)
; 758  : 		: _Mybase(_Al)
; 759  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 760  : 		_Tidy();
; 761  : 		assign(_Right, _Roff, _Count);
; 762  : 		}
; 763  : 
; 764  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 765  : 		: _Mybase()
; 766  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 767  : 		_Tidy();
; 768  : 		assign(_Ptr, _Count);
; 769  : 		}
; 770  : 
; 771  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 772  : 		: _Mybase(_Al)
; 773  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 774  : 		_Tidy();
; 775  : 		assign(_Ptr, _Count);
; 776  : 		}
; 777  : 
; 778  : 	basic_string(const _Elem *_Ptr)
; 779  : 		: _Mybase()
; 780  : 		{	// construct from [_Ptr, <null>)
; 781  : 		_Tidy();
; 782  : 		assign(_Ptr);
; 783  : 		}
; 784  : 
; 785  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 786  : 		: _Mybase(_Al)
; 787  : 		{	// construct from [_Ptr, <null>) with allocator
; 788  : 		_Tidy();
; 789  : 		assign(_Ptr);
; 790  : 		}
; 791  : 
; 792  : 	basic_string(size_type _Count, _Elem _Ch)
; 793  : 		: _Mybase()
; 794  : 		{	// construct from _Count * _Ch
; 795  : 		_Tidy();
; 796  : 		assign(_Count, _Ch);
; 797  : 		}
; 798  : 
; 799  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 800  : 		: _Mybase(_Al)
; 801  : 		{	// construct from _Count * _Ch with allocator
; 802  : 		_Tidy();
; 803  : 		assign(_Count, _Ch);
; 804  : 		}
; 805  : 
; 806  : 	template<class _Iter,
; 807  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 808  : 			void>::type>
; 809  : 		basic_string(_Iter _First, _Iter _Last)
; 810  : 		: _Mybase()
; 811  : 		{	// construct from [_First, _Last)
; 812  : 		_Tidy();
; 813  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 814  : 		}
; 815  : 
; 816  : 	template<class _Iter,
; 817  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 818  : 			void>::type>
; 819  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 820  : 		: _Mybase(_Al)
; 821  : 		{	// construct from [_First, _Last) with allocator
; 822  : 		_Tidy();
; 823  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 824  : 		}
; 825  : 
; 826  : 	template<class _Iter>
; 827  : 		void _Construct(_Iter _First,
; 828  : 			_Iter _Last, input_iterator_tag)
; 829  : 		{	// initialize from [_First, _Last), input iterators
; 830  : 		_TRY_BEGIN
; 831  : 		for (; _First != _Last; ++_First)
; 832  : 			append((size_type)1, (_Elem)*_First);
; 833  : 		_CATCH_ALL
; 834  : 		_Tidy(true);
; 835  : 		_RERAISE;
; 836  : 		_CATCH_END
; 837  : 		}
; 838  : 
; 839  : 	template<class _Iter>
; 840  : 		void _Construct(_Iter _First,
; 841  : 			_Iter _Last, forward_iterator_tag)
; 842  : 		{	// initialize from [_First, _Last), forward iterators
; 843  : 		_DEBUG_RANGE(_First, _Last);
; 844  : 		size_type _Count = 0;
; 845  : 		_Distance(_First, _Last, _Count);
; 846  : 		reserve(_Count);
; 847  : 
; 848  : 		_TRY_BEGIN
; 849  : 		for (; _First != _Last; ++_First)
; 850  : 			append((size_type)1, (_Elem)*_First);
; 851  : 		_CATCH_ALL
; 852  : 		_Tidy(true);
; 853  : 		_RERAISE;
; 854  : 		_CATCH_END
; 855  : 		}
; 856  : 
; 857  : 	basic_string(const_pointer _First, const_pointer _Last)
; 858  : 		: _Mybase()
; 859  : 		{	// construct from [_First, _Last), const pointers
; 860  : 		_DEBUG_RANGE(_First, _Last);
; 861  : 		_Tidy();
; 862  : 		if (_First != _Last)
; 863  : 			assign(&*_First, _Last - _First);
; 864  : 		}
; 865  : 
; 866  : 	basic_string(const_pointer _First, const_pointer _Last,
; 867  : 		const _Alloc& _Al)
; 868  : 		: _Mybase(_Al)
; 869  : 		{	// construct from [_First, _Last), const pointers
; 870  : 		_DEBUG_RANGE(_First, _Last);
; 871  : 		_Tidy();
; 872  : 		if (_First != _Last)
; 873  : 			assign(&*_First, _Last - _First);
; 874  : 		}
; 875  : 
; 876  : 	basic_string(const_iterator _First, const_iterator _Last)
; 877  : 		: _Mybase()
; 878  : 		{	// construct from [_First, _Last), const_iterators
; 879  : 		_DEBUG_RANGE(_First, _Last);
; 880  : 		_Tidy();
; 881  : 		if (_First != _Last)
; 882  : 			assign(&*_First, _Last - _First);
; 883  : 		}
; 884  : 
; 885  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 886  : 		: _Mybase(_Right._Getal())
; 887  : 		{	// construct by moving _Right
; 888  : 		_Tidy();
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 890  : 		}
; 891  : 
; 892  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 893  : 		: _Mybase(_Al)
; 894  : 		{	// construct by moving _Right, allocator
; 895  : 		if (this->_Getal() != _Right._Getal())
; 896  : 			assign(_Right.begin(), _Right.end());
; 897  : 		else
; 898  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 899  : 		}
; 900  : 
; 901  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 902  : 		{	// assign by moving _Right
; 903  : 		if (this != &_Right)
; 904  : 			{	// different, assign it
; 905  : 			_Tidy(true);
; 906  : 
; 907  : 			if (_Alty::propagate_on_container_move_assignment::value
; 908  : 				&& this->_Getal() != _Right._Getal())
; 909  : 				this->_Change_alloc(_Right._Getal());
; 910  : 
; 911  : 			if (this->_Getal() != _Right._Getal())
; 912  : 				assign(_Right.begin(), _Right.end());
; 913  : 			else
; 914  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 915  : 			}
; 916  : 		return (*this);
; 917  : 		}
; 918  : 
; 919  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 920  : 		{	// assign by moving _Right
; 921  : 		if (this == &_Right)
; 922  : 			;
; 923  : 		else if (get_allocator() != _Right.get_allocator()
; 924  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 925  : 			*this = _Right;
; 926  : 		else
; 927  : 			{	// not same, clear this and steal from _Right
; 928  : 			_Tidy(true);
; 929  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	void _Assign_rv(_Myt&& _Right)
; 935  : 		{	// assign by moving _Right
; 936  : 		if (_Right._Myres < this->_BUF_SIZE)
; 937  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 938  : 				_Right._Mysize + 1);
; 939  : 		else
; 940  : 			{	// copy pointer
; 941  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 942  : 			_Right._Bx._Ptr = pointer();
; 943  : 			}
; 944  : 		this->_Mysize = _Right._Mysize;
; 945  : 		this->_Myres = _Right._Myres;
; 946  : 		_Right._Tidy();
; 947  : 		}
; 948  : 
; 949  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Tidy();
; 954  : 		assign(_Ilist.begin(), _Ilist.end());
; 955  : 		}
; 956  : 
; 957  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 958  : 		{	// assign initializer_list
; 959  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 960  : 		}
; 961  : 
; 962  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 963  : 		{	// append initializer_list
; 964  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 965  : 		}
; 966  : 
; 967  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 968  : 		{	// assign initializer_list
; 969  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 970  : 		}
; 971  : 
; 972  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// append initializer_list
; 974  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	iterator insert(const_iterator _Where,
; 978  : 		_XSTD initializer_list<_Elem> _Ilist)
; 979  : 		{	// insert initializer_list
; 980  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 981  : 		}
; 982  : 
; 983  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 984  : 		_XSTD initializer_list<_Elem> _Ilist)
; 985  : 		{	// replace with initializer_list
; 986  : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 987  : 		}
; 988  : 
; 989  : 	~basic_string() _NOEXCEPT
; 990  : 		{	// destroy the string
; 991  : 		_Tidy(true);
; 992  : 		}
; 993  : 
; 994  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 995  : 
; 996  : 	_Myt& operator=(const _Myt& _Right)
; 997  : 		{	// assign _Right
; 998  : 		if (this != &_Right)
; 999  : 			{	// different, assign it
; 1000 : 			if (this->_Getal() != _Right._Getal()
; 1001 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1002 : 				{	// change allocator before copying
; 1003 : 				_Tidy(true);
; 1004 : 				this->_Change_alloc(_Right._Getal());
; 1005 : 				}
; 1006 : 
; 1007 : 			assign(_Right);
; 1008 : 			}
; 1009 : 		return (*this);
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& operator=(const _Elem *_Ptr)
; 1013 : 		{	// assign [_Ptr, <null>)
; 1014 : 		return (assign(_Ptr));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& operator=(_Elem _Ch)
; 1018 : 		{	// assign 1 * _Ch
; 1019 : 		return (assign(1, _Ch));
; 1020 : 		}
; 1021 : 
; 1022 : 	_Myt& operator+=(const _Myt& _Right)
; 1023 : 		{	// append _Right
; 1024 : 		return (append(_Right));
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1028 : 		{	// append [_Ptr, <null>)
; 1029 : 		return (append(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator+=(_Elem _Ch)
; 1033 : 		{	// append 1 * _Ch
; 1034 : 		return (append((size_type)1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right, 0, npos));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& append(const _Myt& _Right,
; 1043 : 		size_type _Roff, size_type _Count)
; 1044 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1045 : 		if (_Right.size() < _Roff)
; 1046 : 			_Xran();	// _Roff off end
; 1047 : 		size_type _Num = _Right.size() - _Roff;
; 1048 : 		if (_Num < _Count)
; 1049 : 			_Count = _Num;	// trim _Count to size
; 1050 : 		if (npos - this->_Mysize <= _Count)
; 1051 : 			_Xlen();	// result too long
; 1052 : 
; 1053 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1054 : 			{	// make room and append new stuff
; 1055 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1056 : 				_Right._Myptr() + _Roff, _Count);
; 1057 : 			_Eos(_Num);
; 1058 : 			}
; 1059 : 		return (*this);
; 1060 : 		}
; 1061 : 
; 1062 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1063 : 		{	// append [_Ptr, _Ptr + _Count)
; 1064 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1065 : 		if (_Count != 0)
; 1066 : 			_DEBUG_POINTER(_Ptr);
; 1067 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1068 : 
; 1069 : 		if (_Inside(_Ptr))
; 1070 : 			return (append(*this,
; 1071 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1072 : 		if (npos - this->_Mysize <= _Count)
; 1073 : 			_Xlen();	// result too long
; 1074 : 
; 1075 : 		size_type _Num;
; 1076 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1077 : 			{	// make room and append new stuff
; 1078 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1079 : 			_Eos(_Num);
; 1080 : 			}
; 1081 : 		return (*this);
; 1082 : 		}
; 1083 : 
; 1084 : 	_Myt& append(const _Elem *_Ptr)
; 1085 : 		{	// append [_Ptr, <null>)
; 1086 : 		_DEBUG_POINTER(_Ptr);
; 1087 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1088 : 		}
; 1089 : 
; 1090 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1091 : 		{	// append _Count * _Ch
; 1092 : 		if (npos - this->_Mysize <= _Count)
; 1093 : 			_Xlen();	// result too long
; 1094 : 
; 1095 : 		size_type _Num;
; 1096 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1097 : 			{	// make room and append new stuff using assign
; 1098 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1099 : 			_Eos(_Num);
; 1100 : 			}
; 1101 : 		return (*this);
; 1102 : 		}
; 1103 : 
; 1104 : 	template<class _Iter>
; 1105 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1106 : 			_Myt&>::type
; 1107 : 		append(_Iter _First, _Iter _Last)
; 1108 : 		{	// append [_First, _Last), input iterators
; 1109 : 		return (replace(end(), end(), _First, _Last));
; 1110 : 		}
; 1111 : 
; 1112 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1113 : 		{	// append [_First, _Last), const pointers
; 1114 : 		return (replace(end(), end(), _First, _Last));
; 1115 : 		}
; 1116 : 
; 1117 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1118 : 		{	// append [_First, _Last), const_iterators
; 1119 : 		return (replace(end(), end(), _First, _Last));
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Myt& _Right)
; 1123 : 		{	// assign _Right
; 1124 : 		return (assign(_Right, 0, npos));
; 1125 : 		}
; 1126 : 
; 1127 : 	_Myt& assign(const _Myt& _Right,
; 1128 : 		size_type _Roff, size_type _Count)
; 1129 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1130 : 		if (_Right.size() < _Roff)
; 1131 : 			_Xran();	// _Roff off end
; 1132 : 		size_type _Num = _Right.size() - _Roff;
; 1133 : 		if (_Count < _Num)
; 1134 : 			_Num = _Count;	// trim _Num to size
; 1135 : 
; 1136 : 		if (this == &_Right)
; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1138 : 		else if (_Grow(_Num))
; 1139 : 			{	// make room and assign new stuff
; 1140 : 			_Traits::copy(this->_Myptr(),
; 1141 : 				_Right._Myptr() + _Roff, _Num);
; 1142 : 			_Eos(_Num);
; 1143 : 			}
; 1144 : 		return (*this);
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1149 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1150 : 		if (_Count != 0)
; 1151 : 			_DEBUG_POINTER(_Ptr);
; 1152 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1153 : 
; 1154 : 		if (_Inside(_Ptr))
; 1155 : 			return (assign(*this,
; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1157 : 
; 1158 : 		if (_Grow(_Count))
; 1159 : 			{	// make room and assign new stuff
; 1160 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1161 : 			_Eos(_Count);
; 1162 : 			}
; 1163 : 		return (*this);
; 1164 : 		}
; 1165 : 
; 1166 : 	_Myt& assign(const _Elem *_Ptr)
; 1167 : 		{	// assign [_Ptr, <null>)
; 1168 : 		_DEBUG_POINTER(_Ptr);
; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)
; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00045	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR _DEFAULT_CHANNEL+16, 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0004f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _DEFAULT_CHANNEL, 0
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??__FDEFAULT_CHANNEL@CryptoPP@@YAXXZ ENDP		; CryptoPP::`dynamic atexit destructor for 'DEFAULT_CHANNEL''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h
;	COMDAT ??__EDEFAULT_CHANNEL@CryptoPP@@YAXXZ
text$di	SEGMENT
??__EDEFAULT_CHANNEL@CryptoPP@@YAXXZ PROC		; CryptoPP::`dynamic initializer for 'DEFAULT_CHANNEL'', COMDAT

; 506  : static const std::string DEFAULT_CHANNEL;

  00000	68 00 00 00 00	 push	 OFFSET ??__FDEFAULT_CHANNEL@CryptoPP@@YAXXZ ; CryptoPP::`dynamic atexit destructor for 'DEFAULT_CHANNEL''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__EDEFAULT_CHANNEL@CryptoPP@@YAXXZ ENDP		; CryptoPP::`dynamic initializer for 'DEFAULT_CHANNEL''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h
;	COMDAT ??__Fs_nullNameValuePairs@CryptoPP@@YAXXZ
text$yd	SEGMENT
??__Fs_nullNameValuePairs@CryptoPP@@YAXXZ PROC		; CryptoPP::`dynamic atexit destructor for 's_nullNameValuePairs'', COMDAT

; 293  : 	virtual ~NameValuePairs() {}

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _s_nullNameValuePairs, OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  0000a	c3		 ret	 0
??__Fs_nullNameValuePairs@CryptoPP@@YAXXZ ENDP		; CryptoPP::`dynamic atexit destructor for 's_nullNameValuePairs''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h
;	COMDAT ??__Es_nullNameValuePairs@CryptoPP@@YAXXZ
text$di	SEGMENT
??__Es_nullNameValuePairs@CryptoPP@@YAXXZ PROC		; CryptoPP::`dynamic initializer for 's_nullNameValuePairs'', COMDAT

; 472  : static const NullNameValuePairs s_nullNameValuePairs;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fs_nullNameValuePairs@CryptoPP@@YAXXZ ; CryptoPP::`dynamic atexit destructor for 's_nullNameValuePairs''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Es_nullNameValuePairs@CryptoPP@@YAXXZ ENDP		; CryptoPP::`dynamic initializer for 's_nullNameValuePairs''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h
;	COMDAT ??_GNullNameValuePairs@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNullNameValuePairs@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::NullNameValuePairs::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 293  : 	virtual ~NameValuePairs() {}

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  00010	74 09		 je	 SHORT $LN8@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN8@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_GNullNameValuePairs@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::NullNameValuePairs::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1NullNameValuePairs@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1NullNameValuePairs@CryptoPP@@UAE@XZ PROC		; CryptoPP::NullNameValuePairs::~NullNameValuePairs, COMDAT
; _this$ = ecx

; 293  : 	virtual ~NameValuePairs() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  00006	c3		 ret	 0
??1NullNameValuePairs@CryptoPP@@UAE@XZ ENDP		; CryptoPP::NullNameValuePairs::~NullNameValuePairs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h
;	COMDAT ?GetVoidValue@NullNameValuePairs@CryptoPP@@UBE_NPBDABVtype_info@@PAX@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
_valueType$ = 12					; size = 4
_pValue$ = 16						; size = 4
?GetVoidValue@NullNameValuePairs@CryptoPP@@UBE_NPBDABVtype_info@@PAX@Z PROC ; CryptoPP::NullNameValuePairs::GetVoidValue, COMDAT
; _this$ = ecx

; 466  : 		{CRYPTOPP_UNUSED(name); CRYPTOPP_UNUSED(valueType); CRYPTOPP_UNUSED(pValue); return false;}

  00000	32 c0		 xor	 al, al
  00002	c2 0c 00	 ret	 12			; 0000000cH
?GetVoidValue@NullNameValuePairs@CryptoPP@@UBE_NPBDABVtype_info@@PAX@Z ENDP ; CryptoPP::NullNameValuePairs::GetVoidValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h
;	COMDAT ??0NullNameValuePairs@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0NullNameValuePairs@CryptoPP@@QAE@XZ PROC		; CryptoPP::NullNameValuePairs::NullNameValuePairs, COMDAT
; _this$ = ecx

; 464  : 	NullNameValuePairs() {}    //  Clang complains a default ctor must be avilable

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NullNameValuePairs@CryptoPP@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0NullNameValuePairs@CryptoPP@@QAE@XZ ENDP		; CryptoPP::NullNameValuePairs::NullNameValuePairs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h
;	COMDAT ??_GNameValuePairs@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNameValuePairs@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::NameValuePairs::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 293  : 	virtual ~NameValuePairs() {}

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_GNameValuePairs@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::NameValuePairs::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0NameValuePairs@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0NameValuePairs@CryptoPP@@QAE@XZ PROC			; CryptoPP::NameValuePairs::NameValuePairs, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0NameValuePairs@CryptoPP@@QAE@XZ ENDP			; CryptoPP::NameValuePairs::NameValuePairs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1NameValuePairs@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1NameValuePairs@CryptoPP@@UAE@XZ PROC			; CryptoPP::NameValuePairs::~NameValuePairs, COMDAT
; _this$ = ecx

; 293  : 	virtual ~NameValuePairs() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  00006	c3		 ret	 0
??1NameValuePairs@CryptoPP@@UAE@XZ ENDP			; CryptoPP::NameValuePairs::~NameValuePairs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 601  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	77 0f		 ja	 SHORT $LN1@Allocate
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	8b c8		 mov	 ecx, eax
  00019	83 c4 04	 add	 esp, 4
  0001c	85 c9		 test	 ecx, ecx
  0001e	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00020	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  00025	8b c1		 mov	 eax, ecx

; 32   : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2295 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2290 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2272 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2273 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 22		 je	 SHORT $LN19@Tidy

; 2274 : 			;
; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1c		 jb	 SHORT $LN19@Tidy

; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2279 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN14@Tidy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@Tidy:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
  00031	5b		 pop	 ebx
$LN19@Tidy:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00032	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 2280 : 				_Traits::copy(this->_Bx._Buf,
; 2281 : 					_STD addressof(*_Ptr), _Newsize);
; 2282 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2283 : 			}
; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;

  00035	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0003c	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2286 : 		}

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2256 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	85 d2		 test	 edx, edx
  00009	74 2d		 je	 SHORT $LN2@Inside

; 513  : 			: this->_Bx._Buf);

  0000b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00011	72 04		 jb	 SHORT $LN8@Inside
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00013	8b 31		 mov	 esi, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  00015	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00017	8b f1		 mov	 esi, ecx
$LN9@Inside:

; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

  00019	3b d6		 cmp	 edx, esi
  0001b	72 1b		 jb	 SHORT $LN2@Inside

; 513  : 			: this->_Bx._Buf);

  0001d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00020	72 04		 jb	 SHORT $LN14@Inside
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00022	8b 31		 mov	 esi, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  00024	eb 02		 jmp	 SHORT $LN15@Inside
$LN14@Inside:
  00026	8b f1		 mov	 esi, ecx
$LN15@Inside:

; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

  00028	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0002b	03 c6		 add	 eax, esi
  0002d	3b c2		 cmp	 eax, edx
  0002f	76 07		 jbe	 SHORT $LN2@Inside

; 2260 : 		else
; 2261 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2262 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN2@Inside:

; 2259 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2262 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Ptr$1$ = 12						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2242 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2243 : 		if (max_size() < _Newsize)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0000d	0f 87 93 00 00
	00		 ja	 $LN67@Grow

; 2244 : 			_Xlen();	// result too long
; 2245 : 		if (this->_Myres < _Newsize)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	3b c7		 cmp	 eax, edi
  00018	73 17		 jae	 SHORT $LN5@Grow

; 2246 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001a	ff 76 10	 push	 DWORD PTR [esi+16]
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2252 : 		return (0 < _Newsize);	// return true only if more work to do

  00023	33 c0		 xor	 eax, eax
  00025	3b c7		 cmp	 eax, edi
  00027	5f		 pop	 edi
  00028	1b c0		 sbb	 eax, eax
  0002a	f7 d8		 neg	 eax
  0002c	5e		 pop	 esi

; 2253 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
$LN5@Grow:

; 2247 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00031	80 7d 0c 00	 cmp	 BYTE PTR __Trim$[ebp], 0
  00035	74 50		 je	 SHORT $LN3@Grow
  00037	83 ff 10	 cmp	 edi, 16			; 00000010H
  0003a	73 4b		 jae	 SHORT $LN3@Grow

; 2248 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2249 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  0003c	53		 push	 ebx
  0003d	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00040	3b fb		 cmp	 edi, ebx
  00042	0f 42 df	 cmovb	 ebx, edi

; 2254 : 
; 2255 : 	bool _Inside(const _Elem *_Ptr)
; 2256 : 		{	// test if _Ptr points inside string
; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2259 : 			return (false);	// don't ask
; 2260 : 		else
; 2261 : 			return (true);
; 2262 : 		}
; 2263 : 
; 2264 : 	static size_type _Pdif(const_iterator _P2,
; 2265 : 		const_iterator _P1)
; 2266 : 		{	// compute safe iterator difference
; 2267 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2268 : 		}
; 2269 : 
; 2270 : 	void _Tidy(bool _Built = false,
; 2271 : 		size_type _Newsize = 0)
; 2272 : 		{	// initialize buffer, deallocating any storage
; 2273 : 		if (!_Built)
; 2274 : 			;
; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00045	83 f8 10	 cmp	 eax, 16			; 00000010H
  00048	72 20		 jb	 SHORT $LN44@Grow

; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;

  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	89 45 0c	 mov	 DWORD PTR __Ptr$1$[ebp], eax

; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2279 : 			if (0 < _Newsize)

  0004f	85 db		 test	 ebx, ebx
  00051	74 0e		 je	 SHORT $LN39@Grow
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00053	53		 push	 ebx
  00054	50		 push	 eax
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 _memcpy
  0005b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$1$[ebp]
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN39@Grow:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00067	83 c4 04	 add	 esp, 4
$LN44@Grow:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2252 : 		return (0 < _Newsize);	// return true only if more work to do

  0006a	33 c0		 xor	 eax, eax

; 514  : 		}
; 515  : 
; 516  : 	const value_type *_Myptr() const
; 517  : 		{	// determine current pointer to buffer for nonmutable string
; 518  : 		return (this->_BUF_SIZE <= this->_Myres
; 519  : 			? _STD addressof(*this->_Bx._Ptr)
; 520  : 			: this->_Bx._Buf);
; 521  : 		}
; 522  : 
; 523  : 	union _Bxty
; 524  : 		{	// storage for small buffer or pointer to larger one
; 525  : 		value_type _Buf[_BUF_SIZE];
; 526  : 		pointer _Ptr;
; 527  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 528  : 		} _Bx;
; 529  : 
; 530  : 	size_type _Mysize;	// current length of string
; 531  : 	size_type _Myres;	// current storage reserved for string
; 532  : 	};
; 533  : 
; 534  : 		// TEMPLATE CLASS _String_alloc
; 535  : template<bool _Al_has_storage,
; 536  : 	class _Alloc_types>
; 537  : 	class _String_alloc
; 538  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 539  : 	{	// base class for basic_string to hold allocator with storage
; 540  : public:
; 541  : 	typename _Alloc_types::_Alty _Alval;	// allocator object
; 542  : 
; 543  : 	typedef _String_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 544  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 545  : 	typedef typename _Alloc_types::_Alty _Alty;
; 546  : 
; 547  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 548  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 549  : 		: _Alval(_Al)
; 550  : 		{	// construct allocator from _Al
; 551  : 		}
; 552  : 
; 553  : 	void _Change_alloc(const _Alty& _Al)
; 554  : 		{	// replace old allocator
; 555  : 		this->_Alval = _Al;
; 556  : 		}
; 557  : 
; 558  : 	void _Swap_alloc(_Myt& _Right)
; 559  : 		{	// swap allocators
; 560  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 561  : 		}
; 562  : 
; 563  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 564  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 565  : 		: _Alval(_Al)
; 566  : 		{	// construct allocator from _Al
; 567  : 		_Alloc_proxy();
; 568  : 		}
; 569  : 
; 570  : 	~_String_alloc() _NOEXCEPT
; 571  : 		{	// destroy the object
; 572  : 		_Free_proxy();
; 573  : 		}
; 574  : 
; 575  : 	void _Change_alloc(const _Alty& _Al)
; 576  : 		{	// replace old allocator
; 577  : 		_Free_proxy();
; 578  : 		this->_Alval = _Al;
; 579  : 		_Alloc_proxy();
; 580  : 		}
; 581  : 
; 582  : 	void _Swap_alloc(_Myt& _Right)
; 583  : 		{	// swap allocators
; 584  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 585  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 586  : 		}
; 587  : 
; 588  : 	void _Alloc_proxy()
; 589  : 		{	// construct proxy from _Alval
; 590  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 591  : 			_Alproxy(this->_Alval);
; 592  : 		this->_Myproxy = _Alproxy.allocate(1);
; 593  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 594  : 		this->_Myproxy->_Mycont = this;
; 595  : 		}
; 596  : 
; 597  : 	void _Free_proxy()
; 598  : 		{	// destroy proxy
; 599  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 600  : 			_Alproxy(this->_Alval);
; 601  : 		this->_Orphan_all();
; 602  : 		_Alproxy.destroy(this->_Myproxy);
; 603  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 604  : 		this->_Myproxy = 0;
; 605  : 		}
; 606  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 607  : 
; 608  : 	_Alty& _Getal()
; 609  : 		{	// get reference to allocator
; 610  : 		return (this->_Alval);
; 611  : 		}
; 612  : 
; 613  : 	const _Alty& _Getal() const
; 614  : 		{	// get reference to allocator
; 615  : 		return (this->_Alval);
; 616  : 		}
; 617  : 	};
; 618  : 
; 619  : template<class _Alloc_types>
; 620  : 	class _String_alloc<false, _Alloc_types>
; 621  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 622  : 	{	// base class for basic_string to hold allocator with no storage
; 623  : public:
; 624  : 	typedef _String_alloc<false, _Alloc_types> _Myt;
; 625  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 626  : 
; 627  : 	typedef typename _Alloc_types::_Alty _Alty;
; 628  : 
; 629  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 630  : 	_String_alloc(const _Alloc& = _Alloc())
; 631  : 		{	// construct allocator from _Al
; 632  : 		}
; 633  : 
; 634  : 	void _Change_alloc(const _Alty&)
; 635  : 		{	// replace old allocator
; 636  : 		}
; 637  : 
; 638  : 	void _Swap_alloc(_Myt&)
; 639  : 		{	// swap allocators
; 640  : 		}
; 641  : 
; 642  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 643  : 	_String_alloc(const _Alloc& = _Alloc())
; 644  : 		{	// construct allocator from _Al
; 645  : 		_Alloc_proxy();
; 646  : 		}
; 647  : 
; 648  : 	~_String_alloc() _NOEXCEPT
; 649  : 		{	// destroy the object
; 650  : 		_Free_proxy();
; 651  : 		}
; 652  : 
; 653  : 	void _Change_alloc(const _Alty&)
; 654  : 		{	// replace old allocator
; 655  : 		}
; 656  : 
; 657  : 	void _Swap_alloc(_Myt& _Right)
; 658  : 		{	// swap allocators
; 659  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	void _Alloc_proxy()
; 663  : 		{	// construct proxy from _Alval
; 664  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 665  : 			_Alproxy;
; 666  : 		this->_Myproxy = _Alproxy.allocate(1);
; 667  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 668  : 		this->_Myproxy->_Mycont = this;
; 669  : 		}
; 670  : 
; 671  : 	void _Free_proxy()
; 672  : 		{	// destroy proxy
; 673  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 674  : 			_Alproxy;
; 675  : 		this->_Orphan_all();
; 676  : 		_Alproxy.destroy(this->_Myproxy);
; 677  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 678  : 		this->_Myproxy = 0;
; 679  : 		}
; 680  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 681  : 
; 682  : 	_Alty _Getal() const
; 683  : 		{	// get reference to allocator
; 684  : 		return (_Alty());
; 685  : 		}
; 686  : 	};
; 687  : 
; 688  : 		// TEMPLATE CLASS basic_string
; 689  : template<class _Elem,
; 690  : 	class _Traits,
; 691  : 	class _Alloc>
; 692  : 	class basic_string
; 693  : 		: public _String_alloc<!is_empty<_Alloc>::value,
; 694  : 			_String_base_types<_Elem, _Alloc> >
; 695  : 	{	// null-terminated transparent array of elements
; 696  : public:
; 697  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 698  : 	typedef _String_alloc<!is_empty<_Alloc>::value,
; 699  : 		_String_base_types<_Elem, _Alloc> > _Mybase;
; 700  : 	typedef _Traits traits_type;
; 701  : 	typedef _Alloc allocator_type;
; 702  : 
; 703  : 	typedef typename _Mybase::_Alty _Alty;
; 704  : 
; 705  : 	typedef typename _Mybase::value_type value_type;
; 706  : 	typedef typename _Mybase::size_type size_type;
; 707  : 	typedef typename _Mybase::difference_type difference_type;
; 708  : 	typedef typename _Mybase::pointer pointer;
; 709  : 	typedef typename _Mybase::const_pointer const_pointer;
; 710  : 	typedef typename _Mybase::reference reference;
; 711  : 	typedef typename _Mybase::const_reference const_reference;
; 712  : 
; 713  : 	typedef typename _Mybase::iterator iterator;
; 714  : 	typedef typename _Mybase::const_iterator const_iterator;
; 715  : 
; 716  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 717  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 718  : 
; 719  : 	basic_string(const _Myt& _Right)
; 720  : 
; 721  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 722  : 
; 723  : 
; 724  : 		{	// construct by copying _Right
; 725  : 		_Tidy();
; 726  : 		assign(_Right, 0, npos);
; 727  : 		}
; 728  : 
; 729  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 730  : 		: _Mybase(_Al)
; 731  : 		{	// construct by copying with allocator
; 732  : 		_Tidy();
; 733  : 		assign(_Right, 0, npos);
; 734  : 		}
; 735  : 
; 736  : 	basic_string()
; 737  : 		: _Mybase()
; 738  : 		{	// construct empty string
; 739  : 		_Tidy();
; 740  : 		}
; 741  : 
; 742  : 	explicit basic_string(const _Alloc& _Al)
; 743  : 		: _Mybase(_Al)
; 744  : 		{	// construct empty string with allocator
; 745  : 		_Tidy();
; 746  : 		}
; 747  : 
; 748  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 749  : 		size_type _Count = npos)
; 750  : 		: _Mybase(_Right._Getal())
; 751  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 752  : 		_Tidy();
; 753  : 		assign(_Right, _Roff, _Count);
; 754  : 		}
; 755  : 
; 756  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 757  : 		const _Alloc& _Al)
; 758  : 		: _Mybase(_Al)
; 759  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 760  : 		_Tidy();
; 761  : 		assign(_Right, _Roff, _Count);
; 762  : 		}
; 763  : 
; 764  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 765  : 		: _Mybase()
; 766  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 767  : 		_Tidy();
; 768  : 		assign(_Ptr, _Count);
; 769  : 		}
; 770  : 
; 771  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 772  : 		: _Mybase(_Al)
; 773  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 774  : 		_Tidy();
; 775  : 		assign(_Ptr, _Count);
; 776  : 		}
; 777  : 
; 778  : 	basic_string(const _Elem *_Ptr)
; 779  : 		: _Mybase()
; 780  : 		{	// construct from [_Ptr, <null>)
; 781  : 		_Tidy();
; 782  : 		assign(_Ptr);
; 783  : 		}
; 784  : 
; 785  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 786  : 		: _Mybase(_Al)
; 787  : 		{	// construct from [_Ptr, <null>) with allocator
; 788  : 		_Tidy();
; 789  : 		assign(_Ptr);
; 790  : 		}
; 791  : 
; 792  : 	basic_string(size_type _Count, _Elem _Ch)
; 793  : 		: _Mybase()
; 794  : 		{	// construct from _Count * _Ch
; 795  : 		_Tidy();
; 796  : 		assign(_Count, _Ch);
; 797  : 		}
; 798  : 
; 799  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 800  : 		: _Mybase(_Al)
; 801  : 		{	// construct from _Count * _Ch with allocator
; 802  : 		_Tidy();
; 803  : 		assign(_Count, _Ch);
; 804  : 		}
; 805  : 
; 806  : 	template<class _Iter,
; 807  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 808  : 			void>::type>
; 809  : 		basic_string(_Iter _First, _Iter _Last)
; 810  : 		: _Mybase()
; 811  : 		{	// construct from [_First, _Last)
; 812  : 		_Tidy();
; 813  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 814  : 		}
; 815  : 
; 816  : 	template<class _Iter,
; 817  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 818  : 			void>::type>
; 819  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 820  : 		: _Mybase(_Al)
; 821  : 		{	// construct from [_First, _Last) with allocator
; 822  : 		_Tidy();
; 823  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 824  : 		}
; 825  : 
; 826  : 	template<class _Iter>
; 827  : 		void _Construct(_Iter _First,
; 828  : 			_Iter _Last, input_iterator_tag)
; 829  : 		{	// initialize from [_First, _Last), input iterators
; 830  : 		_TRY_BEGIN
; 831  : 		for (; _First != _Last; ++_First)
; 832  : 			append((size_type)1, (_Elem)*_First);
; 833  : 		_CATCH_ALL
; 834  : 		_Tidy(true);
; 835  : 		_RERAISE;
; 836  : 		_CATCH_END
; 837  : 		}
; 838  : 
; 839  : 	template<class _Iter>
; 840  : 		void _Construct(_Iter _First,
; 841  : 			_Iter _Last, forward_iterator_tag)
; 842  : 		{	// initialize from [_First, _Last), forward iterators
; 843  : 		_DEBUG_RANGE(_First, _Last);
; 844  : 		size_type _Count = 0;
; 845  : 		_Distance(_First, _Last, _Count);
; 846  : 		reserve(_Count);
; 847  : 
; 848  : 		_TRY_BEGIN
; 849  : 		for (; _First != _Last; ++_First)
; 850  : 			append((size_type)1, (_Elem)*_First);
; 851  : 		_CATCH_ALL
; 852  : 		_Tidy(true);
; 853  : 		_RERAISE;
; 854  : 		_CATCH_END
; 855  : 		}
; 856  : 
; 857  : 	basic_string(const_pointer _First, const_pointer _Last)
; 858  : 		: _Mybase()
; 859  : 		{	// construct from [_First, _Last), const pointers
; 860  : 		_DEBUG_RANGE(_First, _Last);
; 861  : 		_Tidy();
; 862  : 		if (_First != _Last)
; 863  : 			assign(&*_First, _Last - _First);
; 864  : 		}
; 865  : 
; 866  : 	basic_string(const_pointer _First, const_pointer _Last,
; 867  : 		const _Alloc& _Al)
; 868  : 		: _Mybase(_Al)
; 869  : 		{	// construct from [_First, _Last), const pointers
; 870  : 		_DEBUG_RANGE(_First, _Last);
; 871  : 		_Tidy();
; 872  : 		if (_First != _Last)
; 873  : 			assign(&*_First, _Last - _First);
; 874  : 		}
; 875  : 
; 876  : 	basic_string(const_iterator _First, const_iterator _Last)
; 877  : 		: _Mybase()
; 878  : 		{	// construct from [_First, _Last), const_iterators
; 879  : 		_DEBUG_RANGE(_First, _Last);
; 880  : 		_Tidy();
; 881  : 		if (_First != _Last)
; 882  : 			assign(&*_First, _Last - _First);
; 883  : 		}
; 884  : 
; 885  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 886  : 		: _Mybase(_Right._Getal())
; 887  : 		{	// construct by moving _Right
; 888  : 		_Tidy();
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 890  : 		}
; 891  : 
; 892  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 893  : 		: _Mybase(_Al)
; 894  : 		{	// construct by moving _Right, allocator
; 895  : 		if (this->_Getal() != _Right._Getal())
; 896  : 			assign(_Right.begin(), _Right.end());
; 897  : 		else
; 898  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 899  : 		}
; 900  : 
; 901  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 902  : 		{	// assign by moving _Right
; 903  : 		if (this != &_Right)
; 904  : 			{	// different, assign it
; 905  : 			_Tidy(true);
; 906  : 
; 907  : 			if (_Alty::propagate_on_container_move_assignment::value
; 908  : 				&& this->_Getal() != _Right._Getal())
; 909  : 				this->_Change_alloc(_Right._Getal());
; 910  : 
; 911  : 			if (this->_Getal() != _Right._Getal())
; 912  : 				assign(_Right.begin(), _Right.end());
; 913  : 			else
; 914  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 915  : 			}
; 916  : 		return (*this);
; 917  : 		}
; 918  : 
; 919  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 920  : 		{	// assign by moving _Right
; 921  : 		if (this == &_Right)
; 922  : 			;
; 923  : 		else if (get_allocator() != _Right.get_allocator()
; 924  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 925  : 			*this = _Right;
; 926  : 		else
; 927  : 			{	// not same, clear this and steal from _Right
; 928  : 			_Tidy(true);
; 929  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	void _Assign_rv(_Myt&& _Right)
; 935  : 		{	// assign by moving _Right
; 936  : 		if (_Right._Myres < this->_BUF_SIZE)
; 937  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 938  : 				_Right._Mysize + 1);
; 939  : 		else
; 940  : 			{	// copy pointer
; 941  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 942  : 			_Right._Bx._Ptr = pointer();
; 943  : 			}
; 944  : 		this->_Mysize = _Right._Mysize;
; 945  : 		this->_Myres = _Right._Myres;
; 946  : 		_Right._Tidy();
; 947  : 		}
; 948  : 
; 949  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Tidy();
; 954  : 		assign(_Ilist.begin(), _Ilist.end());
; 955  : 		}
; 956  : 
; 957  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 958  : 		{	// assign initializer_list
; 959  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 960  : 		}
; 961  : 
; 962  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 963  : 		{	// append initializer_list
; 964  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 965  : 		}
; 966  : 
; 967  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 968  : 		{	// assign initializer_list
; 969  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 970  : 		}
; 971  : 
; 972  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// append initializer_list
; 974  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	iterator insert(const_iterator _Where,
; 978  : 		_XSTD initializer_list<_Elem> _Ilist)
; 979  : 		{	// insert initializer_list
; 980  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 981  : 		}
; 982  : 
; 983  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 984  : 		_XSTD initializer_list<_Elem> _Ilist)
; 985  : 		{	// replace with initializer_list
; 986  : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 987  : 		}
; 988  : 
; 989  : 	~basic_string() _NOEXCEPT
; 990  : 		{	// destroy the string
; 991  : 		_Tidy(true);
; 992  : 		}
; 993  : 
; 994  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 995  : 
; 996  : 	_Myt& operator=(const _Myt& _Right)
; 997  : 		{	// assign _Right
; 998  : 		if (this != &_Right)
; 999  : 			{	// different, assign it
; 1000 : 			if (this->_Getal() != _Right._Getal()
; 1001 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1002 : 				{	// change allocator before copying
; 1003 : 				_Tidy(true);
; 1004 : 				this->_Change_alloc(_Right._Getal());
; 1005 : 				}
; 1006 : 
; 1007 : 			assign(_Right);
; 1008 : 			}
; 1009 : 		return (*this);
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& operator=(const _Elem *_Ptr)
; 1013 : 		{	// assign [_Ptr, <null>)
; 1014 : 		return (assign(_Ptr));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& operator=(_Elem _Ch)
; 1018 : 		{	// assign 1 * _Ch
; 1019 : 		return (assign(1, _Ch));
; 1020 : 		}
; 1021 : 
; 1022 : 	_Myt& operator+=(const _Myt& _Right)
; 1023 : 		{	// append _Right
; 1024 : 		return (append(_Right));
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1028 : 		{	// append [_Ptr, <null>)
; 1029 : 		return (append(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator+=(_Elem _Ch)
; 1033 : 		{	// append 1 * _Ch
; 1034 : 		return (append((size_type)1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right, 0, npos));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& append(const _Myt& _Right,
; 1043 : 		size_type _Roff, size_type _Count)
; 1044 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1045 : 		if (_Right.size() < _Roff)
; 1046 : 			_Xran();	// _Roff off end
; 1047 : 		size_type _Num = _Right.size() - _Roff;
; 1048 : 		if (_Num < _Count)
; 1049 : 			_Count = _Num;	// trim _Count to size
; 1050 : 		if (npos - this->_Mysize <= _Count)
; 1051 : 			_Xlen();	// result too long
; 1052 : 
; 1053 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1054 : 			{	// make room and append new stuff
; 1055 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1056 : 				_Right._Myptr() + _Roff, _Count);
; 1057 : 			_Eos(_Num);
; 1058 : 			}
; 1059 : 		return (*this);
; 1060 : 		}
; 1061 : 
; 1062 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1063 : 		{	// append [_Ptr, _Ptr + _Count)
; 1064 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1065 : 		if (_Count != 0)
; 1066 : 			_DEBUG_POINTER(_Ptr);
; 1067 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1068 : 
; 1069 : 		if (_Inside(_Ptr))
; 1070 : 			return (append(*this,
; 1071 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1072 : 		if (npos - this->_Mysize <= _Count)
; 1073 : 			_Xlen();	// result too long
; 1074 : 
; 1075 : 		size_type _Num;
; 1076 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1077 : 			{	// make room and append new stuff
; 1078 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1079 : 			_Eos(_Num);
; 1080 : 			}
; 1081 : 		return (*this);
; 1082 : 		}
; 1083 : 
; 1084 : 	_Myt& append(const _Elem *_Ptr)
; 1085 : 		{	// append [_Ptr, <null>)
; 1086 : 		_DEBUG_POINTER(_Ptr);
; 1087 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1088 : 		}
; 1089 : 
; 1090 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1091 : 		{	// append _Count * _Ch
; 1092 : 		if (npos - this->_Mysize <= _Count)
; 1093 : 			_Xlen();	// result too long
; 1094 : 
; 1095 : 		size_type _Num;
; 1096 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1097 : 			{	// make room and append new stuff using assign
; 1098 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1099 : 			_Eos(_Num);
; 1100 : 			}
; 1101 : 		return (*this);
; 1102 : 		}
; 1103 : 
; 1104 : 	template<class _Iter>
; 1105 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1106 : 			_Myt&>::type
; 1107 : 		append(_Iter _First, _Iter _Last)
; 1108 : 		{	// append [_First, _Last), input iterators
; 1109 : 		return (replace(end(), end(), _First, _Last));
; 1110 : 		}
; 1111 : 
; 1112 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1113 : 		{	// append [_First, _Last), const pointers
; 1114 : 		return (replace(end(), end(), _First, _Last));
; 1115 : 		}
; 1116 : 
; 1117 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1118 : 		{	// append [_First, _Last), const_iterators
; 1119 : 		return (replace(end(), end(), _First, _Last));
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Myt& _Right)
; 1123 : 		{	// assign _Right
; 1124 : 		return (assign(_Right, 0, npos));
; 1125 : 		}
; 1126 : 
; 1127 : 	_Myt& assign(const _Myt& _Right,
; 1128 : 		size_type _Roff, size_type _Count)
; 1129 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1130 : 		if (_Right.size() < _Roff)
; 1131 : 			_Xran();	// _Roff off end
; 1132 : 		size_type _Num = _Right.size() - _Roff;
; 1133 : 		if (_Count < _Num)
; 1134 : 			_Num = _Count;	// trim _Num to size
; 1135 : 
; 1136 : 		if (this == &_Right)
; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1138 : 		else if (_Grow(_Num))
; 1139 : 			{	// make room and assign new stuff
; 1140 : 			_Traits::copy(this->_Myptr(),
; 1141 : 				_Right._Myptr() + _Roff, _Num);
; 1142 : 			_Eos(_Num);
; 1143 : 			}
; 1144 : 		return (*this);
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1149 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1150 : 		if (_Count != 0)
; 1151 : 			_DEBUG_POINTER(_Ptr);
; 1152 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1153 : 
; 1154 : 		if (_Inside(_Ptr))
; 1155 : 			return (assign(*this,
; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1157 : 
; 1158 : 		if (_Grow(_Count))
; 1159 : 			{	// make room and assign new stuff
; 1160 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1161 : 			_Eos(_Count);
; 1162 : 			}
; 1163 : 		return (*this);
; 1164 : 		}
; 1165 : 
; 1166 : 	_Myt& assign(const _Elem *_Ptr)
; 1167 : 		{	// assign [_Ptr, <null>)
; 1168 : 		_DEBUG_POINTER(_Ptr);
; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)
; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0006c	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 2280 : 				_Traits::copy(this->_Bx._Buf,
; 2281 : 					_STD addressof(*_Ptr), _Newsize);
; 2282 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2283 : 			}
; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;

  0006f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 2252 : 		return (0 < _Newsize);	// return true only if more work to do

  00076	3b c7		 cmp	 eax, edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00078	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0
  0007c	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2252 : 		return (0 < _Newsize);	// return true only if more work to do

  0007d	1b c0		 sbb	 eax, eax
  0007f	5f		 pop	 edi
  00080	f7 d8		 neg	 eax
  00082	5e		 pop	 esi

; 2253 : 		}

  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
$LN3@Grow:

; 2250 : 		else if (_Newsize == 0)

  00087	85 ff		 test	 edi, edi
  00089	75 0d		 jne	 SHORT $LN64@Grow

; 514  : 		}
; 515  : 
; 516  : 	const value_type *_Myptr() const
; 517  : 		{	// determine current pointer to buffer for nonmutable string
; 518  : 		return (this->_BUF_SIZE <= this->_Myres
; 519  : 			? _STD addressof(*this->_Bx._Ptr)
; 520  : 			: this->_Bx._Buf);
; 521  : 		}
; 522  : 
; 523  : 	union _Bxty
; 524  : 		{	// storage for small buffer or pointer to larger one
; 525  : 		value_type _Buf[_BUF_SIZE];
; 526  : 		pointer _Ptr;
; 527  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 528  : 		} _Bx;
; 529  : 
; 530  : 	size_type _Mysize;	// current length of string
; 531  : 	size_type _Myres;	// current storage reserved for string
; 532  : 	};
; 533  : 
; 534  : 		// TEMPLATE CLASS _String_alloc
; 535  : template<bool _Al_has_storage,
; 536  : 	class _Alloc_types>
; 537  : 	class _String_alloc
; 538  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 539  : 	{	// base class for basic_string to hold allocator with storage
; 540  : public:
; 541  : 	typename _Alloc_types::_Alty _Alval;	// allocator object
; 542  : 
; 543  : 	typedef _String_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 544  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 545  : 	typedef typename _Alloc_types::_Alty _Alty;
; 546  : 
; 547  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 548  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 549  : 		: _Alval(_Al)
; 550  : 		{	// construct allocator from _Al
; 551  : 		}
; 552  : 
; 553  : 	void _Change_alloc(const _Alty& _Al)
; 554  : 		{	// replace old allocator
; 555  : 		this->_Alval = _Al;
; 556  : 		}
; 557  : 
; 558  : 	void _Swap_alloc(_Myt& _Right)
; 559  : 		{	// swap allocators
; 560  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 561  : 		}
; 562  : 
; 563  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 564  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 565  : 		: _Alval(_Al)
; 566  : 		{	// construct allocator from _Al
; 567  : 		_Alloc_proxy();
; 568  : 		}
; 569  : 
; 570  : 	~_String_alloc() _NOEXCEPT
; 571  : 		{	// destroy the object
; 572  : 		_Free_proxy();
; 573  : 		}
; 574  : 
; 575  : 	void _Change_alloc(const _Alty& _Al)
; 576  : 		{	// replace old allocator
; 577  : 		_Free_proxy();
; 578  : 		this->_Alval = _Al;
; 579  : 		_Alloc_proxy();
; 580  : 		}
; 581  : 
; 582  : 	void _Swap_alloc(_Myt& _Right)
; 583  : 		{	// swap allocators
; 584  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 585  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 586  : 		}
; 587  : 
; 588  : 	void _Alloc_proxy()
; 589  : 		{	// construct proxy from _Alval
; 590  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 591  : 			_Alproxy(this->_Alval);
; 592  : 		this->_Myproxy = _Alproxy.allocate(1);
; 593  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 594  : 		this->_Myproxy->_Mycont = this;
; 595  : 		}
; 596  : 
; 597  : 	void _Free_proxy()
; 598  : 		{	// destroy proxy
; 599  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 600  : 			_Alproxy(this->_Alval);
; 601  : 		this->_Orphan_all();
; 602  : 		_Alproxy.destroy(this->_Myproxy);
; 603  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 604  : 		this->_Myproxy = 0;
; 605  : 		}
; 606  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 607  : 
; 608  : 	_Alty& _Getal()
; 609  : 		{	// get reference to allocator
; 610  : 		return (this->_Alval);
; 611  : 		}
; 612  : 
; 613  : 	const _Alty& _Getal() const
; 614  : 		{	// get reference to allocator
; 615  : 		return (this->_Alval);
; 616  : 		}
; 617  : 	};
; 618  : 
; 619  : template<class _Alloc_types>
; 620  : 	class _String_alloc<false, _Alloc_types>
; 621  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 622  : 	{	// base class for basic_string to hold allocator with no storage
; 623  : public:
; 624  : 	typedef _String_alloc<false, _Alloc_types> _Myt;
; 625  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 626  : 
; 627  : 	typedef typename _Alloc_types::_Alty _Alty;
; 628  : 
; 629  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 630  : 	_String_alloc(const _Alloc& = _Alloc())
; 631  : 		{	// construct allocator from _Al
; 632  : 		}
; 633  : 
; 634  : 	void _Change_alloc(const _Alty&)
; 635  : 		{	// replace old allocator
; 636  : 		}
; 637  : 
; 638  : 	void _Swap_alloc(_Myt&)
; 639  : 		{	// swap allocators
; 640  : 		}
; 641  : 
; 642  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 643  : 	_String_alloc(const _Alloc& = _Alloc())
; 644  : 		{	// construct allocator from _Al
; 645  : 		_Alloc_proxy();
; 646  : 		}
; 647  : 
; 648  : 	~_String_alloc() _NOEXCEPT
; 649  : 		{	// destroy the object
; 650  : 		_Free_proxy();
; 651  : 		}
; 652  : 
; 653  : 	void _Change_alloc(const _Alty&)
; 654  : 		{	// replace old allocator
; 655  : 		}
; 656  : 
; 657  : 	void _Swap_alloc(_Myt& _Right)
; 658  : 		{	// swap allocators
; 659  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	void _Alloc_proxy()
; 663  : 		{	// construct proxy from _Alval
; 664  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 665  : 			_Alproxy;
; 666  : 		this->_Myproxy = _Alproxy.allocate(1);
; 667  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 668  : 		this->_Myproxy->_Mycont = this;
; 669  : 		}
; 670  : 
; 671  : 	void _Free_proxy()
; 672  : 		{	// destroy proxy
; 673  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 674  : 			_Alproxy;
; 675  : 		this->_Orphan_all();
; 676  : 		_Alproxy.destroy(this->_Myproxy);
; 677  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 678  : 		this->_Myproxy = 0;
; 679  : 		}
; 680  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 681  : 
; 682  : 	_Alty _Getal() const
; 683  : 		{	// get reference to allocator
; 684  : 		return (_Alty());
; 685  : 		}
; 686  : 	};
; 687  : 
; 688  : 		// TEMPLATE CLASS basic_string
; 689  : template<class _Elem,
; 690  : 	class _Traits,
; 691  : 	class _Alloc>
; 692  : 	class basic_string
; 693  : 		: public _String_alloc<!is_empty<_Alloc>::value,
; 694  : 			_String_base_types<_Elem, _Alloc> >
; 695  : 	{	// null-terminated transparent array of elements
; 696  : public:
; 697  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 698  : 	typedef _String_alloc<!is_empty<_Alloc>::value,
; 699  : 		_String_base_types<_Elem, _Alloc> > _Mybase;
; 700  : 	typedef _Traits traits_type;
; 701  : 	typedef _Alloc allocator_type;
; 702  : 
; 703  : 	typedef typename _Mybase::_Alty _Alty;
; 704  : 
; 705  : 	typedef typename _Mybase::value_type value_type;
; 706  : 	typedef typename _Mybase::size_type size_type;
; 707  : 	typedef typename _Mybase::difference_type difference_type;
; 708  : 	typedef typename _Mybase::pointer pointer;
; 709  : 	typedef typename _Mybase::const_pointer const_pointer;
; 710  : 	typedef typename _Mybase::reference reference;
; 711  : 	typedef typename _Mybase::const_reference const_reference;
; 712  : 
; 713  : 	typedef typename _Mybase::iterator iterator;
; 714  : 	typedef typename _Mybase::const_iterator const_iterator;
; 715  : 
; 716  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 717  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 718  : 
; 719  : 	basic_string(const _Myt& _Right)
; 720  : 
; 721  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 722  : 
; 723  : 
; 724  : 		{	// construct by copying _Right
; 725  : 		_Tidy();
; 726  : 		assign(_Right, 0, npos);
; 727  : 		}
; 728  : 
; 729  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 730  : 		: _Mybase(_Al)
; 731  : 		{	// construct by copying with allocator
; 732  : 		_Tidy();
; 733  : 		assign(_Right, 0, npos);
; 734  : 		}
; 735  : 
; 736  : 	basic_string()
; 737  : 		: _Mybase()
; 738  : 		{	// construct empty string
; 739  : 		_Tidy();
; 740  : 		}
; 741  : 
; 742  : 	explicit basic_string(const _Alloc& _Al)
; 743  : 		: _Mybase(_Al)
; 744  : 		{	// construct empty string with allocator
; 745  : 		_Tidy();
; 746  : 		}
; 747  : 
; 748  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 749  : 		size_type _Count = npos)
; 750  : 		: _Mybase(_Right._Getal())
; 751  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 752  : 		_Tidy();
; 753  : 		assign(_Right, _Roff, _Count);
; 754  : 		}
; 755  : 
; 756  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 757  : 		const _Alloc& _Al)
; 758  : 		: _Mybase(_Al)
; 759  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 760  : 		_Tidy();
; 761  : 		assign(_Right, _Roff, _Count);
; 762  : 		}
; 763  : 
; 764  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 765  : 		: _Mybase()
; 766  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 767  : 		_Tidy();
; 768  : 		assign(_Ptr, _Count);
; 769  : 		}
; 770  : 
; 771  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 772  : 		: _Mybase(_Al)
; 773  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 774  : 		_Tidy();
; 775  : 		assign(_Ptr, _Count);
; 776  : 		}
; 777  : 
; 778  : 	basic_string(const _Elem *_Ptr)
; 779  : 		: _Mybase()
; 780  : 		{	// construct from [_Ptr, <null>)
; 781  : 		_Tidy();
; 782  : 		assign(_Ptr);
; 783  : 		}
; 784  : 
; 785  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 786  : 		: _Mybase(_Al)
; 787  : 		{	// construct from [_Ptr, <null>) with allocator
; 788  : 		_Tidy();
; 789  : 		assign(_Ptr);
; 790  : 		}
; 791  : 
; 792  : 	basic_string(size_type _Count, _Elem _Ch)
; 793  : 		: _Mybase()
; 794  : 		{	// construct from _Count * _Ch
; 795  : 		_Tidy();
; 796  : 		assign(_Count, _Ch);
; 797  : 		}
; 798  : 
; 799  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 800  : 		: _Mybase(_Al)
; 801  : 		{	// construct from _Count * _Ch with allocator
; 802  : 		_Tidy();
; 803  : 		assign(_Count, _Ch);
; 804  : 		}
; 805  : 
; 806  : 	template<class _Iter,
; 807  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 808  : 			void>::type>
; 809  : 		basic_string(_Iter _First, _Iter _Last)
; 810  : 		: _Mybase()
; 811  : 		{	// construct from [_First, _Last)
; 812  : 		_Tidy();
; 813  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 814  : 		}
; 815  : 
; 816  : 	template<class _Iter,
; 817  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 818  : 			void>::type>
; 819  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 820  : 		: _Mybase(_Al)
; 821  : 		{	// construct from [_First, _Last) with allocator
; 822  : 		_Tidy();
; 823  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 824  : 		}
; 825  : 
; 826  : 	template<class _Iter>
; 827  : 		void _Construct(_Iter _First,
; 828  : 			_Iter _Last, input_iterator_tag)
; 829  : 		{	// initialize from [_First, _Last), input iterators
; 830  : 		_TRY_BEGIN
; 831  : 		for (; _First != _Last; ++_First)
; 832  : 			append((size_type)1, (_Elem)*_First);
; 833  : 		_CATCH_ALL
; 834  : 		_Tidy(true);
; 835  : 		_RERAISE;
; 836  : 		_CATCH_END
; 837  : 		}
; 838  : 
; 839  : 	template<class _Iter>
; 840  : 		void _Construct(_Iter _First,
; 841  : 			_Iter _Last, forward_iterator_tag)
; 842  : 		{	// initialize from [_First, _Last), forward iterators
; 843  : 		_DEBUG_RANGE(_First, _Last);
; 844  : 		size_type _Count = 0;
; 845  : 		_Distance(_First, _Last, _Count);
; 846  : 		reserve(_Count);
; 847  : 
; 848  : 		_TRY_BEGIN
; 849  : 		for (; _First != _Last; ++_First)
; 850  : 			append((size_type)1, (_Elem)*_First);
; 851  : 		_CATCH_ALL
; 852  : 		_Tidy(true);
; 853  : 		_RERAISE;
; 854  : 		_CATCH_END
; 855  : 		}
; 856  : 
; 857  : 	basic_string(const_pointer _First, const_pointer _Last)
; 858  : 		: _Mybase()
; 859  : 		{	// construct from [_First, _Last), const pointers
; 860  : 		_DEBUG_RANGE(_First, _Last);
; 861  : 		_Tidy();
; 862  : 		if (_First != _Last)
; 863  : 			assign(&*_First, _Last - _First);
; 864  : 		}
; 865  : 
; 866  : 	basic_string(const_pointer _First, const_pointer _Last,
; 867  : 		const _Alloc& _Al)
; 868  : 		: _Mybase(_Al)
; 869  : 		{	// construct from [_First, _Last), const pointers
; 870  : 		_DEBUG_RANGE(_First, _Last);
; 871  : 		_Tidy();
; 872  : 		if (_First != _Last)
; 873  : 			assign(&*_First, _Last - _First);
; 874  : 		}
; 875  : 
; 876  : 	basic_string(const_iterator _First, const_iterator _Last)
; 877  : 		: _Mybase()
; 878  : 		{	// construct from [_First, _Last), const_iterators
; 879  : 		_DEBUG_RANGE(_First, _Last);
; 880  : 		_Tidy();
; 881  : 		if (_First != _Last)
; 882  : 			assign(&*_First, _Last - _First);
; 883  : 		}
; 884  : 
; 885  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 886  : 		: _Mybase(_Right._Getal())
; 887  : 		{	// construct by moving _Right
; 888  : 		_Tidy();
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 890  : 		}
; 891  : 
; 892  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 893  : 		: _Mybase(_Al)
; 894  : 		{	// construct by moving _Right, allocator
; 895  : 		if (this->_Getal() != _Right._Getal())
; 896  : 			assign(_Right.begin(), _Right.end());
; 897  : 		else
; 898  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 899  : 		}
; 900  : 
; 901  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 902  : 		{	// assign by moving _Right
; 903  : 		if (this != &_Right)
; 904  : 			{	// different, assign it
; 905  : 			_Tidy(true);
; 906  : 
; 907  : 			if (_Alty::propagate_on_container_move_assignment::value
; 908  : 				&& this->_Getal() != _Right._Getal())
; 909  : 				this->_Change_alloc(_Right._Getal());
; 910  : 
; 911  : 			if (this->_Getal() != _Right._Getal())
; 912  : 				assign(_Right.begin(), _Right.end());
; 913  : 			else
; 914  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 915  : 			}
; 916  : 		return (*this);
; 917  : 		}
; 918  : 
; 919  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 920  : 		{	// assign by moving _Right
; 921  : 		if (this == &_Right)
; 922  : 			;
; 923  : 		else if (get_allocator() != _Right.get_allocator()
; 924  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 925  : 			*this = _Right;
; 926  : 		else
; 927  : 			{	// not same, clear this and steal from _Right
; 928  : 			_Tidy(true);
; 929  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	void _Assign_rv(_Myt&& _Right)
; 935  : 		{	// assign by moving _Right
; 936  : 		if (_Right._Myres < this->_BUF_SIZE)
; 937  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 938  : 				_Right._Mysize + 1);
; 939  : 		else
; 940  : 			{	// copy pointer
; 941  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 942  : 			_Right._Bx._Ptr = pointer();
; 943  : 			}
; 944  : 		this->_Mysize = _Right._Mysize;
; 945  : 		this->_Myres = _Right._Myres;
; 946  : 		_Right._Tidy();
; 947  : 		}
; 948  : 
; 949  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Tidy();
; 954  : 		assign(_Ilist.begin(), _Ilist.end());
; 955  : 		}
; 956  : 
; 957  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 958  : 		{	// assign initializer_list
; 959  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 960  : 		}
; 961  : 
; 962  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 963  : 		{	// append initializer_list
; 964  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 965  : 		}
; 966  : 
; 967  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 968  : 		{	// assign initializer_list
; 969  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 970  : 		}
; 971  : 
; 972  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// append initializer_list
; 974  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	iterator insert(const_iterator _Where,
; 978  : 		_XSTD initializer_list<_Elem> _Ilist)
; 979  : 		{	// insert initializer_list
; 980  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 981  : 		}
; 982  : 
; 983  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 984  : 		_XSTD initializer_list<_Elem> _Ilist)
; 985  : 		{	// replace with initializer_list
; 986  : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 987  : 		}
; 988  : 
; 989  : 	~basic_string() _NOEXCEPT
; 990  : 		{	// destroy the string
; 991  : 		_Tidy(true);
; 992  : 		}
; 993  : 
; 994  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 995  : 
; 996  : 	_Myt& operator=(const _Myt& _Right)
; 997  : 		{	// assign _Right
; 998  : 		if (this != &_Right)
; 999  : 			{	// different, assign it
; 1000 : 			if (this->_Getal() != _Right._Getal()
; 1001 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1002 : 				{	// change allocator before copying
; 1003 : 				_Tidy(true);
; 1004 : 				this->_Change_alloc(_Right._Getal());
; 1005 : 				}
; 1006 : 
; 1007 : 			assign(_Right);
; 1008 : 			}
; 1009 : 		return (*this);
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& operator=(const _Elem *_Ptr)
; 1013 : 		{	// assign [_Ptr, <null>)
; 1014 : 		return (assign(_Ptr));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& operator=(_Elem _Ch)
; 1018 : 		{	// assign 1 * _Ch
; 1019 : 		return (assign(1, _Ch));
; 1020 : 		}
; 1021 : 
; 1022 : 	_Myt& operator+=(const _Myt& _Right)
; 1023 : 		{	// append _Right
; 1024 : 		return (append(_Right));
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1028 : 		{	// append [_Ptr, <null>)
; 1029 : 		return (append(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator+=(_Elem _Ch)
; 1033 : 		{	// append 1 * _Ch
; 1034 : 		return (append((size_type)1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right, 0, npos));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& append(const _Myt& _Right,
; 1043 : 		size_type _Roff, size_type _Count)
; 1044 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1045 : 		if (_Right.size() < _Roff)
; 1046 : 			_Xran();	// _Roff off end
; 1047 : 		size_type _Num = _Right.size() - _Roff;
; 1048 : 		if (_Num < _Count)
; 1049 : 			_Count = _Num;	// trim _Count to size
; 1050 : 		if (npos - this->_Mysize <= _Count)
; 1051 : 			_Xlen();	// result too long
; 1052 : 
; 1053 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1054 : 			{	// make room and append new stuff
; 1055 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1056 : 				_Right._Myptr() + _Roff, _Count);
; 1057 : 			_Eos(_Num);
; 1058 : 			}
; 1059 : 		return (*this);
; 1060 : 		}
; 1061 : 
; 1062 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1063 : 		{	// append [_Ptr, _Ptr + _Count)
; 1064 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1065 : 		if (_Count != 0)
; 1066 : 			_DEBUG_POINTER(_Ptr);
; 1067 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1068 : 
; 1069 : 		if (_Inside(_Ptr))
; 1070 : 			return (append(*this,
; 1071 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1072 : 		if (npos - this->_Mysize <= _Count)
; 1073 : 			_Xlen();	// result too long
; 1074 : 
; 1075 : 		size_type _Num;
; 1076 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1077 : 			{	// make room and append new stuff
; 1078 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1079 : 			_Eos(_Num);
; 1080 : 			}
; 1081 : 		return (*this);
; 1082 : 		}
; 1083 : 
; 1084 : 	_Myt& append(const _Elem *_Ptr)
; 1085 : 		{	// append [_Ptr, <null>)
; 1086 : 		_DEBUG_POINTER(_Ptr);
; 1087 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1088 : 		}
; 1089 : 
; 1090 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1091 : 		{	// append _Count * _Ch
; 1092 : 		if (npos - this->_Mysize <= _Count)
; 1093 : 			_Xlen();	// result too long
; 1094 : 
; 1095 : 		size_type _Num;
; 1096 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1097 : 			{	// make room and append new stuff using assign
; 1098 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1099 : 			_Eos(_Num);
; 1100 : 			}
; 1101 : 		return (*this);
; 1102 : 		}
; 1103 : 
; 1104 : 	template<class _Iter>
; 1105 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1106 : 			_Myt&>::type
; 1107 : 		append(_Iter _First, _Iter _Last)
; 1108 : 		{	// append [_First, _Last), input iterators
; 1109 : 		return (replace(end(), end(), _First, _Last));
; 1110 : 		}
; 1111 : 
; 1112 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1113 : 		{	// append [_First, _Last), const pointers
; 1114 : 		return (replace(end(), end(), _First, _Last));
; 1115 : 		}
; 1116 : 
; 1117 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1118 : 		{	// append [_First, _Last), const_iterators
; 1119 : 		return (replace(end(), end(), _First, _Last));
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Myt& _Right)
; 1123 : 		{	// assign _Right
; 1124 : 		return (assign(_Right, 0, npos));
; 1125 : 		}
; 1126 : 
; 1127 : 	_Myt& assign(const _Myt& _Right,
; 1128 : 		size_type _Roff, size_type _Count)
; 1129 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1130 : 		if (_Right.size() < _Roff)
; 1131 : 			_Xran();	// _Roff off end
; 1132 : 		size_type _Num = _Right.size() - _Roff;
; 1133 : 		if (_Count < _Num)
; 1134 : 			_Num = _Count;	// trim _Num to size
; 1135 : 
; 1136 : 		if (this == &_Right)
; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1138 : 		else if (_Grow(_Num))
; 1139 : 			{	// make room and assign new stuff
; 1140 : 			_Traits::copy(this->_Myptr(),
; 1141 : 				_Right._Myptr() + _Roff, _Num);
; 1142 : 			_Eos(_Num);
; 1143 : 			}
; 1144 : 		return (*this);
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1149 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1150 : 		if (_Count != 0)
; 1151 : 			_DEBUG_POINTER(_Ptr);
; 1152 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1153 : 
; 1154 : 		if (_Inside(_Ptr))
; 1155 : 			return (assign(*this,
; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1157 : 
; 1158 : 		if (_Grow(_Count))
; 1159 : 			{	// make room and assign new stuff
; 1160 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1161 : 			_Eos(_Count);
; 1162 : 			}
; 1163 : 		return (*this);
; 1164 : 		}
; 1165 : 
; 1166 : 	_Myt& assign(const _Elem *_Ptr)
; 1167 : 		{	// assign [_Ptr, <null>)
; 1168 : 		_DEBUG_POINTER(_Ptr);
; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)
; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0008b	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 513  : 			: this->_Bx._Buf);

  0008e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00091	72 02		 jb	 SHORT $LN60@Grow
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00093	8b 36		 mov	 esi, DWORD PTR [esi]
$LN60@Grow:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00095	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN64@Grow:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2252 : 		return (0 < _Newsize);	// return true only if more work to do

  00098	33 c0		 xor	 eax, eax
  0009a	3b c7		 cmp	 eax, edi
  0009c	5f		 pop	 edi
  0009d	1b c0		 sbb	 eax, eax
  0009f	f7 d8		 neg	 eax
  000a1	5e		 pop	 esi

; 2253 : 		}

  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
$LN67@Grow:

; 2285 : 		_Eos(_Newsize);
; 2286 : 		}
; 2287 : 
; 2288 : 	__declspec(noreturn) void _Xlen() const
; 2289 : 		{	// report a length_error
; 2290 : 		_Xlength_error("string too long");

  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000ab	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN69@Grow:
$LN66@Grow:
  000b0	cc		 int	 3
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2236 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 513  : 			: this->_Bx._Buf);

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00007	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  0000a	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 513  : 			: this->_Bx._Buf);

  0000d	72 0a		 jb	 SHORT $LN5@Eos
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00011	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2238 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN5@Eos:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00019	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2238 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$1$ = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
$T2 = 11						; size = 1
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f8		 mov	 edi, eax
  00035	83 cf 0f	 or	 edi, 15			; 0000000fH

; 2203 : 		if (max_size() < _Newres)

  00038	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN9@Copy

; 2204 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f8		 mov	 edi, eax
  0003f	eb 27		 jmp	 SHORT $LN47@Copy
$LN9@Copy:

; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00041	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e7		 mul	 edi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b ca		 cmp	 ecx, edx
  00053	76 13		 jbe	 SHORT $LN47@Copy

; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible

  0005a	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	76 05		 jbe	 SHORT $LN47@Copy

; 514  : 		}
; 515  : 
; 516  : 	const value_type *_Myptr() const
; 517  : 		{	// determine current pointer to buffer for nonmutable string
; 518  : 		return (this->_BUF_SIZE <= this->_Myres
; 519  : 			? _STD addressof(*this->_Bx._Ptr)
; 520  : 			: this->_Bx._Buf);
; 521  : 		}
; 522  : 
; 523  : 	union _Bxty
; 524  : 		{	// storage for small buffer or pointer to larger one
; 525  : 		value_type _Buf[_BUF_SIZE];
; 526  : 		pointer _Ptr;
; 527  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 528  : 		} _Bx;
; 529  : 
; 530  : 	size_type _Mysize;	// current length of string
; 531  : 	size_type _Myres;	// current storage reserved for string
; 532  : 	};
; 533  : 
; 534  : 		// TEMPLATE CLASS _String_alloc
; 535  : template<bool _Al_has_storage,
; 536  : 	class _Alloc_types>
; 537  : 	class _String_alloc
; 538  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 539  : 	{	// base class for basic_string to hold allocator with storage
; 540  : public:
; 541  : 	typename _Alloc_types::_Alty _Alval;	// allocator object
; 542  : 
; 543  : 	typedef _String_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 544  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 545  : 	typedef typename _Alloc_types::_Alty _Alty;
; 546  : 
; 547  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 548  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 549  : 		: _Alval(_Al)
; 550  : 		{	// construct allocator from _Al
; 551  : 		}
; 552  : 
; 553  : 	void _Change_alloc(const _Alty& _Al)
; 554  : 		{	// replace old allocator
; 555  : 		this->_Alval = _Al;
; 556  : 		}
; 557  : 
; 558  : 	void _Swap_alloc(_Myt& _Right)
; 559  : 		{	// swap allocators
; 560  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 561  : 		}
; 562  : 
; 563  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 564  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 565  : 		: _Alval(_Al)
; 566  : 		{	// construct allocator from _Al
; 567  : 		_Alloc_proxy();
; 568  : 		}
; 569  : 
; 570  : 	~_String_alloc() _NOEXCEPT
; 571  : 		{	// destroy the object
; 572  : 		_Free_proxy();
; 573  : 		}
; 574  : 
; 575  : 	void _Change_alloc(const _Alty& _Al)
; 576  : 		{	// replace old allocator
; 577  : 		_Free_proxy();
; 578  : 		this->_Alval = _Al;
; 579  : 		_Alloc_proxy();
; 580  : 		}
; 581  : 
; 582  : 	void _Swap_alloc(_Myt& _Right)
; 583  : 		{	// swap allocators
; 584  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 585  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 586  : 		}
; 587  : 
; 588  : 	void _Alloc_proxy()
; 589  : 		{	// construct proxy from _Alval
; 590  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 591  : 			_Alproxy(this->_Alval);
; 592  : 		this->_Myproxy = _Alproxy.allocate(1);
; 593  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 594  : 		this->_Myproxy->_Mycont = this;
; 595  : 		}
; 596  : 
; 597  : 	void _Free_proxy()
; 598  : 		{	// destroy proxy
; 599  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 600  : 			_Alproxy(this->_Alval);
; 601  : 		this->_Orphan_all();
; 602  : 		_Alproxy.destroy(this->_Myproxy);
; 603  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 604  : 		this->_Myproxy = 0;
; 605  : 		}
; 606  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 607  : 
; 608  : 	_Alty& _Getal()
; 609  : 		{	// get reference to allocator
; 610  : 		return (this->_Alval);
; 611  : 		}
; 612  : 
; 613  : 	const _Alty& _Getal() const
; 614  : 		{	// get reference to allocator
; 615  : 		return (this->_Alval);
; 616  : 		}
; 617  : 	};
; 618  : 
; 619  : template<class _Alloc_types>
; 620  : 	class _String_alloc<false, _Alloc_types>
; 621  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 622  : 	{	// base class for basic_string to hold allocator with no storage
; 623  : public:
; 624  : 	typedef _String_alloc<false, _Alloc_types> _Myt;
; 625  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 626  : 
; 627  : 	typedef typename _Alloc_types::_Alty _Alty;
; 628  : 
; 629  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 630  : 	_String_alloc(const _Alloc& = _Alloc())
; 631  : 		{	// construct allocator from _Al
; 632  : 		}
; 633  : 
; 634  : 	void _Change_alloc(const _Alty&)
; 635  : 		{	// replace old allocator
; 636  : 		}
; 637  : 
; 638  : 	void _Swap_alloc(_Myt&)
; 639  : 		{	// swap allocators
; 640  : 		}
; 641  : 
; 642  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 643  : 	_String_alloc(const _Alloc& = _Alloc())
; 644  : 		{	// construct allocator from _Al
; 645  : 		_Alloc_proxy();
; 646  : 		}
; 647  : 
; 648  : 	~_String_alloc() _NOEXCEPT
; 649  : 		{	// destroy the object
; 650  : 		_Free_proxy();
; 651  : 		}
; 652  : 
; 653  : 	void _Change_alloc(const _Alty&)
; 654  : 		{	// replace old allocator
; 655  : 		}
; 656  : 
; 657  : 	void _Swap_alloc(_Myt& _Right)
; 658  : 		{	// swap allocators
; 659  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	void _Alloc_proxy()
; 663  : 		{	// construct proxy from _Alval
; 664  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 665  : 			_Alproxy;
; 666  : 		this->_Myproxy = _Alproxy.allocate(1);
; 667  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 668  : 		this->_Myproxy->_Mycont = this;
; 669  : 		}
; 670  : 
; 671  : 	void _Free_proxy()
; 672  : 		{	// destroy proxy
; 673  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 674  : 			_Alproxy;
; 675  : 		this->_Orphan_all();
; 676  : 		_Alproxy.destroy(this->_Myproxy);
; 677  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 678  : 		this->_Myproxy = 0;
; 679  : 		}
; 680  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 681  : 
; 682  : 	_Alty _Getal() const
; 683  : 		{	// get reference to allocator
; 684  : 		return (_Alty());
; 685  : 		}
; 686  : 	};
; 687  : 
; 688  : 		// TEMPLATE CLASS basic_string
; 689  : template<class _Elem,
; 690  : 	class _Traits,
; 691  : 	class _Alloc>
; 692  : 	class basic_string
; 693  : 		: public _String_alloc<!is_empty<_Alloc>::value,
; 694  : 			_String_base_types<_Elem, _Alloc> >
; 695  : 	{	// null-terminated transparent array of elements
; 696  : public:
; 697  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 698  : 	typedef _String_alloc<!is_empty<_Alloc>::value,
; 699  : 		_String_base_types<_Elem, _Alloc> > _Mybase;
; 700  : 	typedef _Traits traits_type;
; 701  : 	typedef _Alloc allocator_type;
; 702  : 
; 703  : 	typedef typename _Mybase::_Alty _Alty;
; 704  : 
; 705  : 	typedef typename _Mybase::value_type value_type;
; 706  : 	typedef typename _Mybase::size_type size_type;
; 707  : 	typedef typename _Mybase::difference_type difference_type;
; 708  : 	typedef typename _Mybase::pointer pointer;
; 709  : 	typedef typename _Mybase::const_pointer const_pointer;
; 710  : 	typedef typename _Mybase::reference reference;
; 711  : 	typedef typename _Mybase::const_reference const_reference;
; 712  : 
; 713  : 	typedef typename _Mybase::iterator iterator;
; 714  : 	typedef typename _Mybase::const_iterator const_iterator;
; 715  : 
; 716  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 717  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 718  : 
; 719  : 	basic_string(const _Myt& _Right)
; 720  : 
; 721  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 722  : 
; 723  : 
; 724  : 		{	// construct by copying _Right
; 725  : 		_Tidy();
; 726  : 		assign(_Right, 0, npos);
; 727  : 		}
; 728  : 
; 729  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 730  : 		: _Mybase(_Al)
; 731  : 		{	// construct by copying with allocator
; 732  : 		_Tidy();
; 733  : 		assign(_Right, 0, npos);
; 734  : 		}
; 735  : 
; 736  : 	basic_string()
; 737  : 		: _Mybase()
; 738  : 		{	// construct empty string
; 739  : 		_Tidy();
; 740  : 		}
; 741  : 
; 742  : 	explicit basic_string(const _Alloc& _Al)
; 743  : 		: _Mybase(_Al)
; 744  : 		{	// construct empty string with allocator
; 745  : 		_Tidy();
; 746  : 		}
; 747  : 
; 748  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 749  : 		size_type _Count = npos)
; 750  : 		: _Mybase(_Right._Getal())
; 751  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 752  : 		_Tidy();
; 753  : 		assign(_Right, _Roff, _Count);
; 754  : 		}
; 755  : 
; 756  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 757  : 		const _Alloc& _Al)
; 758  : 		: _Mybase(_Al)
; 759  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 760  : 		_Tidy();
; 761  : 		assign(_Right, _Roff, _Count);
; 762  : 		}
; 763  : 
; 764  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 765  : 		: _Mybase()
; 766  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 767  : 		_Tidy();
; 768  : 		assign(_Ptr, _Count);
; 769  : 		}
; 770  : 
; 771  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 772  : 		: _Mybase(_Al)
; 773  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 774  : 		_Tidy();
; 775  : 		assign(_Ptr, _Count);
; 776  : 		}
; 777  : 
; 778  : 	basic_string(const _Elem *_Ptr)
; 779  : 		: _Mybase()
; 780  : 		{	// construct from [_Ptr, <null>)
; 781  : 		_Tidy();
; 782  : 		assign(_Ptr);
; 783  : 		}
; 784  : 
; 785  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 786  : 		: _Mybase(_Al)
; 787  : 		{	// construct from [_Ptr, <null>) with allocator
; 788  : 		_Tidy();
; 789  : 		assign(_Ptr);
; 790  : 		}
; 791  : 
; 792  : 	basic_string(size_type _Count, _Elem _Ch)
; 793  : 		: _Mybase()
; 794  : 		{	// construct from _Count * _Ch
; 795  : 		_Tidy();
; 796  : 		assign(_Count, _Ch);
; 797  : 		}
; 798  : 
; 799  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 800  : 		: _Mybase(_Al)
; 801  : 		{	// construct from _Count * _Ch with allocator
; 802  : 		_Tidy();
; 803  : 		assign(_Count, _Ch);
; 804  : 		}
; 805  : 
; 806  : 	template<class _Iter,
; 807  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 808  : 			void>::type>
; 809  : 		basic_string(_Iter _First, _Iter _Last)
; 810  : 		: _Mybase()
; 811  : 		{	// construct from [_First, _Last)
; 812  : 		_Tidy();
; 813  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 814  : 		}
; 815  : 
; 816  : 	template<class _Iter,
; 817  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 818  : 			void>::type>
; 819  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 820  : 		: _Mybase(_Al)
; 821  : 		{	// construct from [_First, _Last) with allocator
; 822  : 		_Tidy();
; 823  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 824  : 		}
; 825  : 
; 826  : 	template<class _Iter>
; 827  : 		void _Construct(_Iter _First,
; 828  : 			_Iter _Last, input_iterator_tag)
; 829  : 		{	// initialize from [_First, _Last), input iterators
; 830  : 		_TRY_BEGIN
; 831  : 		for (; _First != _Last; ++_First)
; 832  : 			append((size_type)1, (_Elem)*_First);
; 833  : 		_CATCH_ALL
; 834  : 		_Tidy(true);
; 835  : 		_RERAISE;
; 836  : 		_CATCH_END
; 837  : 		}
; 838  : 
; 839  : 	template<class _Iter>
; 840  : 		void _Construct(_Iter _First,
; 841  : 			_Iter _Last, forward_iterator_tag)
; 842  : 		{	// initialize from [_First, _Last), forward iterators
; 843  : 		_DEBUG_RANGE(_First, _Last);
; 844  : 		size_type _Count = 0;
; 845  : 		_Distance(_First, _Last, _Count);
; 846  : 		reserve(_Count);
; 847  : 
; 848  : 		_TRY_BEGIN
; 849  : 		for (; _First != _Last; ++_First)
; 850  : 			append((size_type)1, (_Elem)*_First);
; 851  : 		_CATCH_ALL
; 852  : 		_Tidy(true);
; 853  : 		_RERAISE;
; 854  : 		_CATCH_END
; 855  : 		}
; 856  : 
; 857  : 	basic_string(const_pointer _First, const_pointer _Last)
; 858  : 		: _Mybase()
; 859  : 		{	// construct from [_First, _Last), const pointers
; 860  : 		_DEBUG_RANGE(_First, _Last);
; 861  : 		_Tidy();
; 862  : 		if (_First != _Last)
; 863  : 			assign(&*_First, _Last - _First);
; 864  : 		}
; 865  : 
; 866  : 	basic_string(const_pointer _First, const_pointer _Last,
; 867  : 		const _Alloc& _Al)
; 868  : 		: _Mybase(_Al)
; 869  : 		{	// construct from [_First, _Last), const pointers
; 870  : 		_DEBUG_RANGE(_First, _Last);
; 871  : 		_Tidy();
; 872  : 		if (_First != _Last)
; 873  : 			assign(&*_First, _Last - _First);
; 874  : 		}
; 875  : 
; 876  : 	basic_string(const_iterator _First, const_iterator _Last)
; 877  : 		: _Mybase()
; 878  : 		{	// construct from [_First, _Last), const_iterators
; 879  : 		_DEBUG_RANGE(_First, _Last);
; 880  : 		_Tidy();
; 881  : 		if (_First != _Last)
; 882  : 			assign(&*_First, _Last - _First);
; 883  : 		}
; 884  : 
; 885  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 886  : 		: _Mybase(_Right._Getal())
; 887  : 		{	// construct by moving _Right
; 888  : 		_Tidy();
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 890  : 		}
; 891  : 
; 892  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 893  : 		: _Mybase(_Al)
; 894  : 		{	// construct by moving _Right, allocator
; 895  : 		if (this->_Getal() != _Right._Getal())
; 896  : 			assign(_Right.begin(), _Right.end());
; 897  : 		else
; 898  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 899  : 		}
; 900  : 
; 901  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 902  : 		{	// assign by moving _Right
; 903  : 		if (this != &_Right)
; 904  : 			{	// different, assign it
; 905  : 			_Tidy(true);
; 906  : 
; 907  : 			if (_Alty::propagate_on_container_move_assignment::value
; 908  : 				&& this->_Getal() != _Right._Getal())
; 909  : 				this->_Change_alloc(_Right._Getal());
; 910  : 
; 911  : 			if (this->_Getal() != _Right._Getal())
; 912  : 				assign(_Right.begin(), _Right.end());
; 913  : 			else
; 914  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 915  : 			}
; 916  : 		return (*this);
; 917  : 		}
; 918  : 
; 919  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 920  : 		{	// assign by moving _Right
; 921  : 		if (this == &_Right)
; 922  : 			;
; 923  : 		else if (get_allocator() != _Right.get_allocator()
; 924  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 925  : 			*this = _Right;
; 926  : 		else
; 927  : 			{	// not same, clear this and steal from _Right
; 928  : 			_Tidy(true);
; 929  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	void _Assign_rv(_Myt&& _Right)
; 935  : 		{	// assign by moving _Right
; 936  : 		if (_Right._Myres < this->_BUF_SIZE)
; 937  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 938  : 				_Right._Mysize + 1);
; 939  : 		else
; 940  : 			{	// copy pointer
; 941  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 942  : 			_Right._Bx._Ptr = pointer();
; 943  : 			}
; 944  : 		this->_Mysize = _Right._Mysize;
; 945  : 		this->_Myres = _Right._Myres;
; 946  : 		_Right._Tidy();
; 947  : 		}
; 948  : 
; 949  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Tidy();
; 954  : 		assign(_Ilist.begin(), _Ilist.end());
; 955  : 		}
; 956  : 
; 957  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 958  : 		{	// assign initializer_list
; 959  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 960  : 		}
; 961  : 
; 962  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 963  : 		{	// append initializer_list
; 964  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 965  : 		}
; 966  : 
; 967  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 968  : 		{	// assign initializer_list
; 969  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 970  : 		}
; 971  : 
; 972  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// append initializer_list
; 974  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	iterator insert(const_iterator _Where,
; 978  : 		_XSTD initializer_list<_Elem> _Ilist)
; 979  : 		{	// insert initializer_list
; 980  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 981  : 		}
; 982  : 
; 983  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 984  : 		_XSTD initializer_list<_Elem> _Ilist)
; 985  : 		{	// replace with initializer_list
; 986  : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 987  : 		}
; 988  : 
; 989  : 	~basic_string() _NOEXCEPT
; 990  : 		{	// destroy the string
; 991  : 		_Tidy(true);
; 992  : 		}
; 993  : 
; 994  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 995  : 
; 996  : 	_Myt& operator=(const _Myt& _Right)
; 997  : 		{	// assign _Right
; 998  : 		if (this != &_Right)
; 999  : 			{	// different, assign it
; 1000 : 			if (this->_Getal() != _Right._Getal()
; 1001 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1002 : 				{	// change allocator before copying
; 1003 : 				_Tidy(true);
; 1004 : 				this->_Change_alloc(_Right._Getal());
; 1005 : 				}
; 1006 : 
; 1007 : 			assign(_Right);
; 1008 : 			}
; 1009 : 		return (*this);
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& operator=(const _Elem *_Ptr)
; 1013 : 		{	// assign [_Ptr, <null>)
; 1014 : 		return (assign(_Ptr));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& operator=(_Elem _Ch)
; 1018 : 		{	// assign 1 * _Ch
; 1019 : 		return (assign(1, _Ch));
; 1020 : 		}
; 1021 : 
; 1022 : 	_Myt& operator+=(const _Myt& _Right)
; 1023 : 		{	// append _Right
; 1024 : 		return (append(_Right));
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1028 : 		{	// append [_Ptr, <null>)
; 1029 : 		return (append(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator+=(_Elem _Ch)
; 1033 : 		{	// append 1 * _Ch
; 1034 : 		return (append((size_type)1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right, 0, npos));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& append(const _Myt& _Right,
; 1043 : 		size_type _Roff, size_type _Count)
; 1044 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1045 : 		if (_Right.size() < _Roff)
; 1046 : 			_Xran();	// _Roff off end
; 1047 : 		size_type _Num = _Right.size() - _Roff;
; 1048 : 		if (_Num < _Count)
; 1049 : 			_Count = _Num;	// trim _Count to size
; 1050 : 		if (npos - this->_Mysize <= _Count)
; 1051 : 			_Xlen();	// result too long
; 1052 : 
; 1053 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1054 : 			{	// make room and append new stuff
; 1055 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1056 : 				_Right._Myptr() + _Roff, _Count);
; 1057 : 			_Eos(_Num);
; 1058 : 			}
; 1059 : 		return (*this);
; 1060 : 		}
; 1061 : 
; 1062 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1063 : 		{	// append [_Ptr, _Ptr + _Count)
; 1064 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1065 : 		if (_Count != 0)
; 1066 : 			_DEBUG_POINTER(_Ptr);
; 1067 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1068 : 
; 1069 : 		if (_Inside(_Ptr))
; 1070 : 			return (append(*this,
; 1071 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1072 : 		if (npos - this->_Mysize <= _Count)
; 1073 : 			_Xlen();	// result too long
; 1074 : 
; 1075 : 		size_type _Num;
; 1076 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1077 : 			{	// make room and append new stuff
; 1078 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1079 : 			_Eos(_Num);
; 1080 : 			}
; 1081 : 		return (*this);
; 1082 : 		}
; 1083 : 
; 1084 : 	_Myt& append(const _Elem *_Ptr)
; 1085 : 		{	// append [_Ptr, <null>)
; 1086 : 		_DEBUG_POINTER(_Ptr);
; 1087 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1088 : 		}
; 1089 : 
; 1090 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1091 : 		{	// append _Count * _Ch
; 1092 : 		if (npos - this->_Mysize <= _Count)
; 1093 : 			_Xlen();	// result too long
; 1094 : 
; 1095 : 		size_type _Num;
; 1096 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1097 : 			{	// make room and append new stuff using assign
; 1098 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1099 : 			_Eos(_Num);
; 1100 : 			}
; 1101 : 		return (*this);
; 1102 : 		}
; 1103 : 
; 1104 : 	template<class _Iter>
; 1105 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1106 : 			_Myt&>::type
; 1107 : 		append(_Iter _First, _Iter _Last)
; 1108 : 		{	// append [_First, _Last), input iterators
; 1109 : 		return (replace(end(), end(), _First, _Last));
; 1110 : 		}
; 1111 : 
; 1112 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1113 : 		{	// append [_First, _Last), const pointers
; 1114 : 		return (replace(end(), end(), _First, _Last));
; 1115 : 		}
; 1116 : 
; 1117 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1118 : 		{	// append [_First, _Last), const_iterators
; 1119 : 		return (replace(end(), end(), _First, _Last));
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Myt& _Right)
; 1123 : 		{	// assign _Right
; 1124 : 		return (assign(_Right, 0, npos));
; 1125 : 		}
; 1126 : 
; 1127 : 	_Myt& assign(const _Myt& _Right,
; 1128 : 		size_type _Roff, size_type _Count)
; 1129 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1130 : 		if (_Right.size() < _Roff)
; 1131 : 			_Xran();	// _Roff off end
; 1132 : 		size_type _Num = _Right.size() - _Roff;
; 1133 : 		if (_Count < _Num)
; 1134 : 			_Num = _Count;	// trim _Num to size
; 1135 : 
; 1136 : 		if (this == &_Right)
; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1138 : 		else if (_Grow(_Num))
; 1139 : 			{	// make room and assign new stuff
; 1140 : 			_Traits::copy(this->_Myptr(),
; 1141 : 				_Right._Myptr() + _Roff, _Num);
; 1142 : 			_Eos(_Num);
; 1143 : 			}
; 1144 : 		return (*this);
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1149 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1150 : 		if (_Count != 0)
; 1151 : 			_DEBUG_POINTER(_Ptr);
; 1152 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1153 : 
; 1154 : 		if (_Inside(_Ptr))
; 1155 : 			return (assign(*this,
; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1157 : 
; 1158 : 		if (_Grow(_Count))
; 1159 : 			{	// make room and assign new stuff
; 1160 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1161 : 			_Eos(_Count);
; 1162 : 			}
; 1163 : 		return (*this);
; 1164 : 		}
; 1165 : 
; 1166 : 	_Myt& assign(const _Elem *_Ptr)
; 1167 : 		{	// assign [_Ptr, <null>)
; 1168 : 		_DEBUG_POINTER(_Ptr);
; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)
; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00063	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$LN47@Copy:

; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

  00068	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 23   : 	void *_Ptr = 0;

  00072	33 c0		 xor	 eax, eax
  00074	89 45 ec	 mov	 DWORD PTR __Ptr$1$[ebp], eax

; 24   : 
; 25   : 	if (_Count == 0)

  00077	85 c9		 test	 ecx, ecx
  00079	74 46		 je	 SHORT $LN19@Copy

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0007b	83 f9 ff	 cmp	 ecx, -1
  0007e	77 10		 ja	 SHORT $LN62@Copy
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00086	83 c4 04	 add	 esp, 4
  00089	89 45 ec	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  0008c	85 c0		 test	 eax, eax
  0008e	75 31		 jne	 SHORT $LN19@Copy
$LN62@Copy:

; 29   : 		_Xbad_alloc();	// report no memory

  00090	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN174@Copy:
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00095	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]

; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  00098	8d 4d 0b	 lea	 ecx, DWORD PTR $T2[ebp]
  0009b	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax
  0009e	40		 inc	 eax
  0009f	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  000a2	50		 push	 eax
  000a3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000a7	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
  000ac	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax

; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END

  000af	b8 00 00 00 00	 mov	 eax, $LN171@Copy
  000b4	c3		 ret	 0
$LN171@Copy:

; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

  000b5	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
  000b8	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bb	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  000be	89 45 ec	 mov	 DWORD PTR __Ptr$1$[ebp], eax
$LN19@Copy:

; 2225 : 
; 2226 : 		if (0 < _Oldlen)

  000c1	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000c4	85 db		 test	 ebx, ebx
  000c6	74 48		 je	 SHORT $LN112@Copy

; 513  : 			: this->_Bx._Buf);

  000c8	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000cc	72 31		 jb	 SHORT $LN105@Copy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  000ce	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  000d0	eb 2f		 jmp	 SHORT $LN106@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)

  000d2	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  000d5	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000d9	72 0a		 jb	 SHORT $LN91@Copy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000db	ff 36		 push	 DWORD PTR [esi]
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e2	83 c4 04	 add	 esp, 4
$LN91@Copy:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2222 : 			_RERAISE;

  000e5	6a 00		 push	 0

; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;
; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2279 : 			if (0 < _Newsize)
; 2280 : 				_Traits::copy(this->_Bx._Buf,
; 2281 : 					_STD addressof(*_Ptr), _Newsize);
; 2282 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2283 : 			}
; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;

  000e7	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  000ee	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2222 : 			_RERAISE;

  000f5	6a 00		 push	 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000f7	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2222 : 			_RERAISE;

  000fa	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN175@Copy:
$LN105@Copy:

; 513  : 			: this->_Bx._Buf);

  000ff	8b ce		 mov	 ecx, esi
$LN106@Copy:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00101	85 db		 test	 ebx, ebx
  00103	74 0b		 je	 SHORT $LN112@Copy
  00105	53		 push	 ebx
  00106	51		 push	 ecx
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 _memcpy
  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN112@Copy:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00110	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00114	72 0a		 jb	 SHORT $LN131@Copy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00116	ff 36		 push	 DWORD PTR [esi]
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$LN131@Copy:

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00120	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00123	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00126	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2231 : 		this->_Myres = _Newres;

  00128	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0012b	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 513  : 			: this->_Bx._Buf);

  0012e	83 ff 10	 cmp	 edi, 16			; 00000010H
  00131	72 02		 jb	 SHORT $LN166@Copy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00133	8b f0		 mov	 esi, eax
$LN166@Copy:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00135	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2233 : 		}

  00139	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0013c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00143	59		 pop	 ecx
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 08 00	 ret	 8
$LN173@Copy:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1761 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1754 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1755 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1342 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1343 : 		if (this->_Mysize < _Off)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00009	57		 push	 edi
  0000a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	72 7e		 jb	 SHORT $LN41@erase

; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)

  00011	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00014	8b c7		 mov	 eax, edi
  00016	2b c1		 sub	 eax, ecx
  00018	3b c2		 cmp	 eax, edx
  0001a	77 23		 ja	 SHORT $LN3@erase

; 513  : 			: this->_Bx._Buf);

  0001c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00020	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 513  : 			: this->_Bx._Buf);

  00023	72 0e		 jb	 SHORT $LN14@erase
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00028	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1354 : 		return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 1355 : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
$LN14@erase:

; 513  : 			: this->_Bx._Buf);

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00037	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1355 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN3@erase:

; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)

  0003f	85 d2		 test	 edx, edx
  00041	74 44		 je	 SHORT $LN38@erase

; 513  : 			: this->_Bx._Buf);

  00043	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00047	72 04		 jb	 SHORT $LN22@erase
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00049	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  0004b	eb 02		 jmp	 SHORT $LN23@erase
$LN22@erase:
  0004d	8b c6		 mov	 eax, esi
$LN23@erase:

; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;

  0004f	2b fa		 sub	 edi, edx
  00051	53		 push	 ebx
  00052	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]

; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

  00055	8b c7		 mov	 eax, edi
  00057	2b c1		 sub	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00059	74 0e		 je	 SHORT $LN29@erase
  0005b	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

  0005c	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

  0005f	50		 push	 eax
  00060	53		 push	 ebx
  00061	e8 00 00 00 00	 call	 _memmove
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN29@erase:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  00069	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0006d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00070	5b		 pop	 ebx

; 513  : 			: this->_Bx._Buf);

  00071	72 0e		 jb	 SHORT $LN34@erase
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00073	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00075	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1354 : 		return (*this);

  00079	8b c6		 mov	 eax, esi
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi

; 1355 : 		}

  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
$LN34@erase:

; 513  : 			: this->_Bx._Buf);

  00081	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00083	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN38@erase:
  00087	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1354 : 		return (*this);

  00088	8b c6		 mov	 eax, esi
  0008a	5e		 pop	 esi

; 1355 : 		}

  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
$LN41@erase:

; 2238 : 		}
; 2239 : 
; 2240 : 	bool _Grow(size_type _Newsize,
; 2241 : 		bool _Trim = false)
; 2242 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2243 : 		if (max_size() < _Newsize)
; 2244 : 			_Xlen();	// result too long
; 2245 : 		if (this->_Myres < _Newsize)
; 2246 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow
; 2247 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2248 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2249 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2250 : 		else if (_Newsize == 0)
; 2251 : 			_Eos(0);	// new size is zero, just null terminate
; 2252 : 		return (0 < _Newsize);	// return true only if more work to do
; 2253 : 		}
; 2254 : 
; 2255 : 	bool _Inside(const _Elem *_Ptr)
; 2256 : 		{	// test if _Ptr points inside string
; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2259 : 			return (false);	// don't ask
; 2260 : 		else
; 2261 : 			return (true);
; 2262 : 		}
; 2263 : 
; 2264 : 	static size_type _Pdif(const_iterator _P2,
; 2265 : 		const_iterator _P1)
; 2266 : 		{	// compute safe iterator difference
; 2267 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2268 : 		}
; 2269 : 
; 2270 : 	void _Tidy(bool _Built = false,
; 2271 : 		size_type _Newsize = 0)
; 2272 : 		{	// initialize buffer, deallocating any storage
; 2273 : 		if (!_Built)
; 2274 : 			;
; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;
; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2279 : 			if (0 < _Newsize)
; 2280 : 				_Traits::copy(this->_Bx._Buf,
; 2281 : 					_STD addressof(*_Ptr), _Newsize);
; 2282 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2283 : 			}
; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;
; 2285 : 		_Eos(_Newsize);
; 2286 : 		}
; 2287 : 
; 2288 : 	__declspec(noreturn) void _Xlen() const
; 2289 : 		{	// report a length_error
; 2290 : 		_Xlength_error("string too long");
; 2291 : 		}
; 2292 : 
; 2293 : 	__declspec(noreturn) void _Xran() const
; 2294 : 		{	// report an out_of_range error
; 2295 : 		_Xout_of_range("invalid string position");

  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00094	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN43@erase:
$LN40@erase:
  00099	cc		 int	 3
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1334 : 		{	// erase elements [_Off, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1335 : 		if (this->_Mysize < _Off)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00009	72 21		 jb	 SHORT $LN18@erase

; 513  : 			: this->_Bx._Buf);

  0000b	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 513  : 			: this->_Bx._Buf);

  00012	72 0c		 jb	 SHORT $LN11@erase
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00016	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1338 : 		return (*this);

  0001a	8b c1		 mov	 eax, ecx

; 1339 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN11@erase:

; 513  : 			: this->_Bx._Buf);

  00020	8b d1		 mov	 edx, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00022	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1338 : 		return (*this);

  00026	8b c1		 mov	 eax, ecx

; 1339 : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN18@erase:

; 2238 : 		}
; 2239 : 
; 2240 : 	bool _Grow(size_type _Newsize,
; 2241 : 		bool _Trim = false)
; 2242 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2243 : 		if (max_size() < _Newsize)
; 2244 : 			_Xlen();	// result too long
; 2245 : 		if (this->_Myres < _Newsize)
; 2246 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow
; 2247 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2248 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2249 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2250 : 		else if (_Newsize == 0)
; 2251 : 			_Eos(0);	// new size is zero, just null terminate
; 2252 : 		return (0 < _Newsize);	// return true only if more work to do
; 2253 : 		}
; 2254 : 
; 2255 : 	bool _Inside(const _Elem *_Ptr)
; 2256 : 		{	// test if _Ptr points inside string
; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2259 : 			return (false);	// don't ask
; 2260 : 		else
; 2261 : 			return (true);
; 2262 : 		}
; 2263 : 
; 2264 : 	static size_type _Pdif(const_iterator _P2,
; 2265 : 		const_iterator _P1)
; 2266 : 		{	// compute safe iterator difference
; 2267 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2268 : 		}
; 2269 : 
; 2270 : 	void _Tidy(bool _Built = false,
; 2271 : 		size_type _Newsize = 0)
; 2272 : 		{	// initialize buffer, deallocating any storage
; 2273 : 		if (!_Built)
; 2274 : 			;
; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;
; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2279 : 			if (0 < _Newsize)
; 2280 : 				_Traits::copy(this->_Bx._Buf,
; 2281 : 					_STD addressof(*_Ptr), _Newsize);
; 2282 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2283 : 			}
; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;
; 2285 : 		_Eos(_Newsize);
; 2286 : 		}
; 2287 : 
; 2288 : 	__declspec(noreturn) void _Xlen() const
; 2289 : 		{	// report a length_error
; 2290 : 		_Xlength_error("string too long");
; 2291 : 		}
; 2292 : 
; 2293 : 	__declspec(noreturn) void _Xran() const
; 2294 : 		{	// report an out_of_range error
; 2295 : 		_Xout_of_range("invalid string position");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00031	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN20@erase:
$LN17@erase:
  00036	cc		 int	 3
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1167 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 523  : 			: _CSTD strlen(_First));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000a	75 0e		 jne	 SHORT $LN5@assign
  0000c	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  0000e	52		 push	 edx
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00015	5e		 pop	 esi

; 1170 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN5@assign:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 523  : 			: _CSTD strlen(_First));

  0001a	8b d6		 mov	 edx, esi
  0001c	57		 push	 edi
  0001d	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL7@assign:
  00020	8a 02		 mov	 al, BYTE PTR [edx]
  00022	42		 inc	 edx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL7@assign
  00027	2b d7		 sub	 edx, edi
  00029	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  0002a	52		 push	 edx
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00031	5e		 pop	 esi

; 1170 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2253 : 		}
; 2254 : 
; 2255 : 	bool _Inside(const _Elem *_Ptr)
; 2256 : 		{	// test if _Ptr points inside string
; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi

; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)

  00008	8b f1		 mov	 esi, ecx

; 2253 : 		}
; 2254 : 
; 2255 : 	bool _Inside(const _Elem *_Ptr)
; 2256 : 		{	// test if _Ptr points inside string
; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

  0000a	85 db		 test	 ebx, ebx
  0000c	74 57		 je	 SHORT $LN2@assign

; 513  : 			: this->_Bx._Buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00014	72 04		 jb	 SHORT $LN12@assign
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  00018	eb 02		 jmp	 SHORT $LN13@assign
$LN12@assign:
  0001a	8b c6		 mov	 eax, esi
$LN13@assign:

; 2253 : 		}
; 2254 : 
; 2255 : 	bool _Inside(const _Elem *_Ptr)
; 2256 : 		{	// test if _Ptr points inside string
; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

  0001c	3b d8		 cmp	 ebx, eax
  0001e	72 45		 jb	 SHORT $LN2@assign

; 513  : 			: this->_Bx._Buf);

  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN18@assign
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00025	8b 16		 mov	 edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  00027	eb 02		 jmp	 SHORT $LN19@assign
$LN18@assign:
  00029	8b d6		 mov	 edx, esi
$LN19@assign:

; 2253 : 		}
; 2254 : 
; 2255 : 	bool _Inside(const _Elem *_Ptr)
; 2256 : 		{	// test if _Ptr points inside string
; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

  0002b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002e	03 c2		 add	 eax, edx
  00030	3b c3		 cmp	 eax, ebx
  00032	76 31		 jbe	 SHORT $LN2@assign

; 513  : 			: this->_Bx._Buf);

  00034	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00037	72 16		 jb	 SHORT $LN24@assign

; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring

  00039	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring

  0003e	8b ce		 mov	 ecx, esi
  00040	2b d8		 sub	 ebx, eax
  00042	53		 push	 ebx
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 1164 : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN24@assign:

; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring

  0004f	ff 75 0c	 push	 DWORD PTR __Count$[ebp]

; 513  : 			: this->_Bx._Buf);

  00052	8b c6		 mov	 eax, esi

; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring

  00054	8b ce		 mov	 ecx, esi
  00056	2b d8		 sub	 ebx, eax
  00058	53		 push	 ebx
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx

; 1164 : 		}

  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
$LN2@assign:
  00065	57		 push	 edi

; 2238 : 		}
; 2239 : 
; 2240 : 	bool _Grow(size_type _Newsize,
; 2241 : 		bool _Trim = false)
; 2242 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2243 : 		if (max_size() < _Newsize)

  00066	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00069	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0006c	77 7e		 ja	 SHORT $LN118@assign

; 2244 : 			_Xlen();	// result too long
; 2245 : 		if (this->_Myres < _Newsize)

  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	3b c7		 cmp	 eax, edi
  00073	73 19		 jae	 SHORT $LN32@assign

; 2246 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  00075	ff 76 10	 push	 DWORD PTR [esi+16]
  00078	8b ce		 mov	 ecx, esi
  0007a	57		 push	 edi
  0007b	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2251 : 			_Eos(0);	// new size is zero, just null terminate
; 2252 : 		return (0 < _Newsize);	// return true only if more work to do

  00080	85 ff		 test	 edi, edi

; 1157 : 
; 1158 : 		if (_Grow(_Count))

  00082	74 5f		 je	 SHORT $LN112@assign
$LN117@assign:

; 513  : 			: this->_Bx._Buf);

  00084	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00088	72 2a		 jb	 SHORT $LN96@assign
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  0008c	eb 28		 jmp	 SHORT $LN97@assign
$LN32@assign:

; 2247 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2248 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2249 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2250 : 		else if (_Newsize == 0)

  0008e	85 ff		 test	 edi, edi
  00090	75 f2		 jne	 SHORT $LN117@assign

; 1165 : 
; 1166 : 	_Myt& assign(const _Elem *_Ptr)
; 1167 : 		{	// assign [_Ptr, <null>)
; 1168 : 		_DEBUG_POINTER(_Ptr);
; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)
; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00092	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 513  : 			: this->_Bx._Buf);

  00095	83 f8 10	 cmp	 eax, 16			; 00000010H
  00098	72 0e		 jb	 SHORT $LN87@assign
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0009a	8b 06		 mov	 eax, DWORD PTR [esi]
  0009c	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0009d	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1163 : 		return (*this);

  000a0	8b c6		 mov	 eax, esi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx

; 1164 : 		}

  000a4	5d		 pop	 ebp
  000a5	c2 08 00	 ret	 8
$LN87@assign:

; 513  : 			: this->_Bx._Buf);

  000a8	8b c6		 mov	 eax, esi
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000ad	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1164 : 		}

  000b0	5d		 pop	 ebp
  000b1	c2 08 00	 ret	 8
$LN96@assign:

; 513  : 			: this->_Bx._Buf);

  000b4	8b c6		 mov	 eax, esi
$LN97@assign:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  000b6	85 ff		 test	 edi, edi
  000b8	74 0b		 je	 SHORT $LN103@assign
  000ba	57		 push	 edi
  000bb	53		 push	 ebx
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 _memcpy
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN103@assign:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  000c5	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 1165 : 
; 1166 : 	_Myt& assign(const _Elem *_Ptr)
; 1167 : 		{	// assign [_Ptr, <null>)
; 1168 : 		_DEBUG_POINTER(_Ptr);
; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)
; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  000c9	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 513  : 			: this->_Bx._Buf);

  000cc	72 0f		 jb	 SHORT $LN108@assign
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  000ce	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000d0	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1163 : 		return (*this);

  000d4	8b c6		 mov	 eax, esi
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx

; 1164 : 		}

  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
$LN108@assign:

; 513  : 			: this->_Bx._Buf);

  000dd	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000df	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN112@assign:
  000e3	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1163 : 		return (*this);

  000e4	8b c6		 mov	 eax, esi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx

; 1164 : 		}

  000e8	5d		 pop	 ebp
  000e9	c2 08 00	 ret	 8
$LN118@assign:

; 2259 : 			return (false);	// don't ask
; 2260 : 		else
; 2261 : 			return (true);
; 2262 : 		}
; 2263 : 
; 2264 : 	static size_type _Pdif(const_iterator _P2,
; 2265 : 		const_iterator _P1)
; 2266 : 		{	// compute safe iterator difference
; 2267 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2268 : 		}
; 2269 : 
; 2270 : 	void _Tidy(bool _Built = false,
; 2271 : 		size_type _Newsize = 0)
; 2272 : 		{	// initialize buffer, deallocating any storage
; 2273 : 		if (!_Built)
; 2274 : 			;
; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;
; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2279 : 			if (0 < _Newsize)
; 2280 : 				_Traits::copy(this->_Bx._Buf,
; 2281 : 					_STD addressof(*_Ptr), _Newsize);
; 2282 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2283 : 			}
; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;
; 2285 : 		_Eos(_Newsize);
; 2286 : 		}
; 2287 : 
; 2288 : 	__declspec(noreturn) void _Xlen() const
; 2289 : 		{	// report a length_error
; 2290 : 		_Xlength_error("string too long");

  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000f1	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN120@assign:
$LN115@assign:
  000f6	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1129 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1130 : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0000e	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  00011	3b f9		 cmp	 edi, ecx
  00013	0f 82 e9 00 00
	00		 jb	 $LN125@assign

; 1131 : 			_Xran();	// _Roff off end
; 1132 : 		size_type _Num = _Right.size() - _Roff;

  00019	2b f9		 sub	 edi, ecx

; 1133 : 		if (_Count < _Num)

  0001b	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi
  0001e	0f 42 7d 10	 cmovb	 edi, DWORD PTR __Count$[ebp]

; 1134 : 			_Num = _Count;	// trim _Num to size
; 1135 : 
; 1136 : 		if (this == &_Right)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 47		 jne	 SHORT $LN3@assign

; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  00026	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]

; 1146 : 
; 1147 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1149 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1150 : 		if (_Count != 0)
; 1151 : 			_DEBUG_POINTER(_Ptr);
; 1152 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1153 : 
; 1154 : 		if (_Inside(_Ptr))
; 1155 : 			return (assign(*this,
; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1157 : 
; 1158 : 		if (_Grow(_Count))
; 1159 : 			{	// make room and assign new stuff
; 1160 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1161 : 			_Eos(_Count);
; 1162 : 			}
; 1163 : 		return (*this);
; 1164 : 		}
; 1165 : 
; 1166 : 	_Myt& assign(const _Elem *_Ptr)
; 1167 : 		{	// assign [_Ptr, <null>)
; 1168 : 		_DEBUG_POINTER(_Ptr);
; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)

  00029	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  0002c	0f 82 da 00 00
	00		 jb	 $LN127@assign

; 513  : 			: this->_Bx._Buf);

  00032	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00036	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 513  : 			: this->_Bx._Buf);

  00039	72 19		 jb	 SHORT $LN25@assign
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0003b	8b 16		 mov	 edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00042	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  00046	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0004b	5f		 pop	 edi

; 1144 : 		return (*this);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 1145 : 		}

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN25@assign:

; 513  : 			: this->_Bx._Buf);

  00054	8b d6		 mov	 edx, esi

; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  00056	51		 push	 ecx
  00057	6a 00		 push	 0
  00059	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0005b	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0005f	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00064	5f		 pop	 edi

; 1144 : 		return (*this);

  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx

; 1145 : 		}

  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 2238 : 		}
; 2239 : 
; 2240 : 	bool _Grow(size_type _Newsize,
; 2241 : 		bool _Trim = false)
; 2242 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2243 : 		if (max_size() < _Newsize)

  0006d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00070	0f 87 a0 00 00
	00		 ja	 $LN128@assign

; 2244 : 			_Xlen();	// result too long
; 2245 : 		if (this->_Myres < _Newsize)

  00076	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00079	3b c7		 cmp	 eax, edi
  0007b	73 24		 jae	 SHORT $LN35@assign

; 2246 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0007d	ff 76 10	 push	 DWORD PTR [esi+16]
  00080	8b ce		 mov	 ecx, esi
  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]

; 2251 : 			_Eos(0);	// new size is zero, just null terminate
; 2252 : 		return (0 < _Newsize);	// return true only if more work to do

  0008b	85 ff		 test	 edi, edi

; 1138 : 		else if (_Grow(_Num))

  0008d	74 6a		 je	 SHORT $LN120@assign
$LN124@assign:

; 514  : 		}
; 515  : 
; 516  : 	const value_type *_Myptr() const
; 517  : 		{	// determine current pointer to buffer for nonmutable string
; 518  : 		return (this->_BUF_SIZE <= this->_Myres
; 519  : 			? _STD addressof(*this->_Bx._Ptr)
; 520  : 			: this->_Bx._Buf);

  0008f	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  00093	72 02		 jb	 SHORT $LN98@assign
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00095	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN98@assign:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  00097	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0009b	72 2a		 jb	 SHORT $LN104@assign
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0009d	8b 16		 mov	 edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  0009f	eb 28		 jmp	 SHORT $LN105@assign
$LN35@assign:

; 2247 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2248 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2249 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2250 : 		else if (_Newsize == 0)

  000a1	85 ff		 test	 edi, edi
  000a3	75 ea		 jne	 SHORT $LN124@assign

; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  000a5	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 513  : 			: this->_Bx._Buf);

  000a8	83 f8 10	 cmp	 eax, 16			; 00000010H
  000ab	72 0e		 jb	 SHORT $LN90@assign
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  000ad	8b 06		 mov	 eax, DWORD PTR [esi]
  000af	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000b0	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1144 : 		return (*this);

  000b3	8b c6		 mov	 eax, esi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx

; 1145 : 		}

  000b7	5d		 pop	 ebp
  000b8	c2 0c 00	 ret	 12			; 0000000cH
$LN90@assign:

; 513  : 			: this->_Bx._Buf);

  000bb	8b c6		 mov	 eax, esi
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000c0	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1145 : 		}

  000c3	5d		 pop	 ebp
  000c4	c2 0c 00	 ret	 12			; 0000000cH
$LN104@assign:

; 513  : 			: this->_Bx._Buf);

  000c7	8b d6		 mov	 edx, esi
$LN105@assign:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  000c9	85 ff		 test	 edi, edi
  000cb	74 0e		 je	 SHORT $LN111@assign
  000cd	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1141 : 				_Right._Myptr() + _Roff, _Num);

  000ce	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  000d1	50		 push	 eax
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 _memcpy
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN111@assign:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 513  : 			: this->_Bx._Buf);

  000db	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  000df	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 513  : 			: this->_Bx._Buf);

  000e2	72 0f		 jb	 SHORT $LN116@assign
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  000e4	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000e6	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1144 : 		return (*this);

  000ea	8b c6		 mov	 eax, esi
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx

; 1145 : 		}

  000ef	5d		 pop	 ebp
  000f0	c2 0c 00	 ret	 12			; 0000000cH
$LN116@assign:

; 513  : 			: this->_Bx._Buf);

  000f3	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000f5	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN120@assign:
  000f9	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1144 : 		return (*this);

  000fa	8b c6		 mov	 eax, esi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx

; 1145 : 		}

  000fe	5d		 pop	 ebp
  000ff	c2 0c 00	 ret	 12			; 0000000cH
$LN125@assign:

; 2291 : 		}
; 2292 : 
; 2293 : 	__declspec(noreturn) void _Xran() const
; 2294 : 		{	// report an out_of_range error
; 2295 : 		_Xout_of_range("invalid string position");

  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00107	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN129@assign:
$LN127@assign:
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00111	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN130@assign:
$LN128@assign:

; 2253 : 		}
; 2254 : 
; 2255 : 	bool _Inside(const _Elem *_Ptr)
; 2256 : 		{	// test if _Ptr points inside string
; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2259 : 			return (false);	// don't ask
; 2260 : 		else
; 2261 : 			return (true);
; 2262 : 		}
; 2263 : 
; 2264 : 	static size_type _Pdif(const_iterator _P2,
; 2265 : 		const_iterator _P1)
; 2266 : 		{	// compute safe iterator difference
; 2267 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2268 : 		}
; 2269 : 
; 2270 : 	void _Tidy(bool _Built = false,
; 2271 : 		size_type _Newsize = 0)
; 2272 : 		{	// initialize buffer, deallocating any storage
; 2273 : 		if (!_Built)
; 2274 : 			;
; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;
; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2279 : 			if (0 < _Newsize)
; 2280 : 				_Traits::copy(this->_Bx._Buf,
; 2281 : 					_STD addressof(*_Ptr), _Newsize);
; 2282 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2283 : 			}
; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;
; 2285 : 		_Eos(_Newsize);
; 2286 : 		}
; 2287 : 
; 2288 : 	__declspec(noreturn) void _Xlen() const
; 2289 : 		{	// report a length_error
; 2290 : 		_Xlength_error("string too long");

  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0011b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN131@assign:
$LN122@assign:
  00120	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 990  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2238 : 		}
; 2239 : 
; 2240 : 	bool _Grow(size_type _Newsize,
; 2241 : 		bool _Trim = false)
; 2242 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2243 : 		if (max_size() < _Newsize)
; 2244 : 			_Xlen();	// result too long
; 2245 : 		if (this->_Myres < _Newsize)
; 2246 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow
; 2247 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2248 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2249 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2250 : 		else if (_Newsize == 0)
; 2251 : 			_Eos(0);	// new size is zero, just null terminate
; 2252 : 		return (0 < _Newsize);	// return true only if more work to do
; 2253 : 		}
; 2254 : 
; 2255 : 	bool _Inside(const _Elem *_Ptr)
; 2256 : 		{	// test if _Ptr points inside string
; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2259 : 			return (false);	// don't ask
; 2260 : 		else
; 2261 : 			return (true);
; 2262 : 		}
; 2263 : 
; 2264 : 	static size_type _Pdif(const_iterator _P2,
; 2265 : 		const_iterator _P1)
; 2266 : 		{	// compute safe iterator difference
; 2267 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2268 : 		}
; 2269 : 
; 2270 : 	void _Tidy(bool _Built = false,
; 2271 : 		size_type _Newsize = 0)
; 2272 : 		{	// initialize buffer, deallocating any storage
; 2273 : 		if (!_Built)
; 2274 : 			;
; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00003	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00007	72 0a		 jb	 SHORT $LN21@basic_stri
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	ff 36		 push	 DWORD PTR [esi]
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN21@basic_stri:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;

  00013	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 993  : 
; 994  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 995  : 
; 996  : 	_Myt& operator=(const _Myt& _Right)
; 997  : 		{	// assign _Right
; 998  : 		if (this != &_Right)
; 999  : 			{	// different, assign it
; 1000 : 			if (this->_Getal() != _Right._Getal()
; 1001 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1002 : 				{	// change allocator before copying
; 1003 : 				_Tidy(true);
; 1004 : 				this->_Change_alloc(_Right._Getal());
; 1005 : 				}
; 1006 : 
; 1007 : 			assign(_Right);
; 1008 : 			}
; 1009 : 		return (*this);
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& operator=(const _Elem *_Ptr)
; 1013 : 		{	// assign [_Ptr, <null>)
; 1014 : 		return (assign(_Ptr));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& operator=(_Elem _Ch)
; 1018 : 		{	// assign 1 * _Ch
; 1019 : 		return (assign(1, _Ch));
; 1020 : 		}
; 1021 : 
; 1022 : 	_Myt& operator+=(const _Myt& _Right)
; 1023 : 		{	// append _Right
; 1024 : 		return (append(_Right));
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1028 : 		{	// append [_Ptr, <null>)
; 1029 : 		return (append(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator+=(_Elem _Ch)
; 1033 : 		{	// append 1 * _Ch
; 1034 : 		return (append((size_type)1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right, 0, npos));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& append(const _Myt& _Right,
; 1043 : 		size_type _Roff, size_type _Count)
; 1044 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1045 : 		if (_Right.size() < _Roff)
; 1046 : 			_Xran();	// _Roff off end
; 1047 : 		size_type _Num = _Right.size() - _Roff;
; 1048 : 		if (_Num < _Count)
; 1049 : 			_Count = _Num;	// trim _Count to size
; 1050 : 		if (npos - this->_Mysize <= _Count)
; 1051 : 			_Xlen();	// result too long
; 1052 : 
; 1053 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1054 : 			{	// make room and append new stuff
; 1055 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1056 : 				_Right._Myptr() + _Roff, _Count);
; 1057 : 			_Eos(_Num);
; 1058 : 			}
; 1059 : 		return (*this);
; 1060 : 		}
; 1061 : 
; 1062 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1063 : 		{	// append [_Ptr, _Ptr + _Count)
; 1064 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1065 : 		if (_Count != 0)
; 1066 : 			_DEBUG_POINTER(_Ptr);
; 1067 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1068 : 
; 1069 : 		if (_Inside(_Ptr))
; 1070 : 			return (append(*this,
; 1071 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1072 : 		if (npos - this->_Mysize <= _Count)
; 1073 : 			_Xlen();	// result too long
; 1074 : 
; 1075 : 		size_type _Num;
; 1076 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1077 : 			{	// make room and append new stuff
; 1078 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1079 : 			_Eos(_Num);
; 1080 : 			}
; 1081 : 		return (*this);
; 1082 : 		}
; 1083 : 
; 1084 : 	_Myt& append(const _Elem *_Ptr)
; 1085 : 		{	// append [_Ptr, <null>)
; 1086 : 		_DEBUG_POINTER(_Ptr);
; 1087 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1088 : 		}
; 1089 : 
; 1090 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1091 : 		{	// append _Count * _Ch
; 1092 : 		if (npos - this->_Mysize <= _Count)
; 1093 : 			_Xlen();	// result too long
; 1094 : 
; 1095 : 		size_type _Num;
; 1096 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1097 : 			{	// make room and append new stuff using assign
; 1098 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1099 : 			_Eos(_Num);
; 1100 : 			}
; 1101 : 		return (*this);
; 1102 : 		}
; 1103 : 
; 1104 : 	template<class _Iter>
; 1105 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1106 : 			_Myt&>::type
; 1107 : 		append(_Iter _First, _Iter _Last)
; 1108 : 		{	// append [_First, _Last), input iterators
; 1109 : 		return (replace(end(), end(), _First, _Last));
; 1110 : 		}
; 1111 : 
; 1112 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1113 : 		{	// append [_First, _Last), const pointers
; 1114 : 		return (replace(end(), end(), _First, _Last));
; 1115 : 		}
; 1116 : 
; 1117 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1118 : 		{	// append [_First, _Last), const_iterators
; 1119 : 		return (replace(end(), end(), _First, _Last));
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Myt& _Right)
; 1123 : 		{	// assign _Right
; 1124 : 		return (assign(_Right, 0, npos));
; 1125 : 		}
; 1126 : 
; 1127 : 	_Myt& assign(const _Myt& _Right,
; 1128 : 		size_type _Roff, size_type _Count)
; 1129 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1130 : 		if (_Right.size() < _Roff)
; 1131 : 			_Xran();	// _Roff off end
; 1132 : 		size_type _Num = _Right.size() - _Roff;
; 1133 : 		if (_Count < _Num)
; 1134 : 			_Num = _Count;	// trim _Num to size
; 1135 : 
; 1136 : 		if (this == &_Right)
; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1138 : 		else if (_Grow(_Num))
; 1139 : 			{	// make room and assign new stuff
; 1140 : 			_Traits::copy(this->_Myptr(),
; 1141 : 				_Right._Myptr() + _Roff, _Num);
; 1142 : 			_Eos(_Num);
; 1143 : 			}
; 1144 : 		return (*this);
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1149 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1150 : 		if (_Count != 0)
; 1151 : 			_DEBUG_POINTER(_Ptr);
; 1152 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1153 : 
; 1154 : 		if (_Inside(_Ptr))
; 1155 : 			return (assign(*this,
; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1157 : 
; 1158 : 		if (_Grow(_Count))
; 1159 : 			{	// make room and assign new stuff
; 1160 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1161 : 			_Eos(_Count);
; 1162 : 			}
; 1163 : 		return (*this);
; 1164 : 		}
; 1165 : 
; 1166 : 	_Myt& assign(const _Elem *_Ptr)
; 1167 : 		{	// assign [_Ptr, <null>)
; 1168 : 		_DEBUG_POINTER(_Ptr);
; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)
; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0001a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00021	c6 06 00	 mov	 BYTE PTR [esi], 0
  00024	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 992  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 780  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 523  : 			: _CSTD strlen(_First));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;

  00009	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)
; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00017	c6 06 00	 mov	 BYTE PTR [esi], 0

; 523  : 			: _CSTD strlen(_First));

  0001a	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0001d	75 12		 jne	 SHORT $LN43@basic_stri
  0001f	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00021	52		 push	 edx
  00022	51		 push	 ecx
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 781  : 		_Tidy();
; 782  : 		assign(_Ptr);
; 783  : 		}

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN43@basic_stri:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 523  : 			: _CSTD strlen(_First));

  00031	8b d1		 mov	 edx, ecx
  00033	57		 push	 edi
  00034	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL45@basic_stri:
  00037	8a 02		 mov	 al, BYTE PTR [edx]
  00039	42		 inc	 edx
  0003a	84 c0		 test	 al, al
  0003c	75 f9		 jne	 SHORT $LL45@basic_stri
  0003e	2b d7		 sub	 edx, edi
  00040	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00041	52		 push	 edx
  00042	51		 push	 ecx
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 781  : 		_Tidy();
; 782  : 		assign(_Ptr);
; 783  : 		}

  0004a	8b c6		 mov	 eax, esi
  0004c	5e		 pop	 esi
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2238 : 		}
; 2239 : 
; 2240 : 	bool _Grow(size_type _Newsize,
; 2241 : 		bool _Trim = false)
; 2242 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2243 : 		if (max_size() < _Newsize)
; 2244 : 			_Xlen();	// result too long
; 2245 : 		if (this->_Myres < _Newsize)
; 2246 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow
; 2247 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2248 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2249 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2250 : 		else if (_Newsize == 0)
; 2251 : 			_Eos(0);	// new size is zero, just null terminate
; 2252 : 		return (0 < _Newsize);	// return true only if more work to do
; 2253 : 		}
; 2254 : 
; 2255 : 	bool _Inside(const _Elem *_Ptr)
; 2256 : 		{	// test if _Ptr points inside string
; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2259 : 			return (false);	// don't ask
; 2260 : 		else
; 2261 : 			return (true);
; 2262 : 		}
; 2263 : 
; 2264 : 	static size_type _Pdif(const_iterator _P2,
; 2265 : 		const_iterator _P1)
; 2266 : 		{	// compute safe iterator difference
; 2267 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2268 : 		}
; 2269 : 
; 2270 : 	void _Tidy(bool _Built = false,
; 2271 : 		size_type _Newsize = 0)
; 2272 : 		{	// initialize buffer, deallocating any storage
; 2273 : 		if (!_Built)
; 2274 : 			;
; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;
; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2279 : 			if (0 < _Newsize)
; 2280 : 				_Traits::copy(this->_Bx._Buf,
; 2281 : 					_STD addressof(*_Ptr), _Newsize);
; 2282 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2283 : 			}
; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;

  00000	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 740  : 		}

  00007	8b c1		 mov	 eax, ecx

; 741  : 
; 742  : 	explicit basic_string(const _Alloc& _Al)
; 743  : 		: _Mybase(_Al)
; 744  : 		{	// construct empty string with allocator
; 745  : 		_Tidy();
; 746  : 		}
; 747  : 
; 748  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 749  : 		size_type _Count = npos)
; 750  : 		: _Mybase(_Right._Getal())
; 751  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 752  : 		_Tidy();
; 753  : 		assign(_Right, _Roff, _Count);
; 754  : 		}
; 755  : 
; 756  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 757  : 		const _Alloc& _Al)
; 758  : 		: _Mybase(_Al)
; 759  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 760  : 		_Tidy();
; 761  : 		assign(_Right, _Roff, _Count);
; 762  : 		}
; 763  : 
; 764  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 765  : 		: _Mybase()
; 766  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 767  : 		_Tidy();
; 768  : 		assign(_Ptr, _Count);
; 769  : 		}
; 770  : 
; 771  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 772  : 		: _Mybase(_Al)
; 773  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 774  : 		_Tidy();
; 775  : 		assign(_Ptr, _Count);
; 776  : 		}
; 777  : 
; 778  : 	basic_string(const _Elem *_Ptr)
; 779  : 		: _Mybase()
; 780  : 		{	// construct from [_Ptr, <null>)
; 781  : 		_Tidy();
; 782  : 		assign(_Ptr);
; 783  : 		}
; 784  : 
; 785  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 786  : 		: _Mybase(_Al)
; 787  : 		{	// construct from [_Ptr, <null>) with allocator
; 788  : 		_Tidy();
; 789  : 		assign(_Ptr);
; 790  : 		}
; 791  : 
; 792  : 	basic_string(size_type _Count, _Elem _Ch)
; 793  : 		: _Mybase()
; 794  : 		{	// construct from _Count * _Ch
; 795  : 		_Tidy();
; 796  : 		assign(_Count, _Ch);
; 797  : 		}
; 798  : 
; 799  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 800  : 		: _Mybase(_Al)
; 801  : 		{	// construct from _Count * _Ch with allocator
; 802  : 		_Tidy();
; 803  : 		assign(_Count, _Ch);
; 804  : 		}
; 805  : 
; 806  : 	template<class _Iter,
; 807  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 808  : 			void>::type>
; 809  : 		basic_string(_Iter _First, _Iter _Last)
; 810  : 		: _Mybase()
; 811  : 		{	// construct from [_First, _Last)
; 812  : 		_Tidy();
; 813  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 814  : 		}
; 815  : 
; 816  : 	template<class _Iter,
; 817  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 818  : 			void>::type>
; 819  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 820  : 		: _Mybase(_Al)
; 821  : 		{	// construct from [_First, _Last) with allocator
; 822  : 		_Tidy();
; 823  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 824  : 		}
; 825  : 
; 826  : 	template<class _Iter>
; 827  : 		void _Construct(_Iter _First,
; 828  : 			_Iter _Last, input_iterator_tag)
; 829  : 		{	// initialize from [_First, _Last), input iterators
; 830  : 		_TRY_BEGIN
; 831  : 		for (; _First != _Last; ++_First)
; 832  : 			append((size_type)1, (_Elem)*_First);
; 833  : 		_CATCH_ALL
; 834  : 		_Tidy(true);
; 835  : 		_RERAISE;
; 836  : 		_CATCH_END
; 837  : 		}
; 838  : 
; 839  : 	template<class _Iter>
; 840  : 		void _Construct(_Iter _First,
; 841  : 			_Iter _Last, forward_iterator_tag)
; 842  : 		{	// initialize from [_First, _Last), forward iterators
; 843  : 		_DEBUG_RANGE(_First, _Last);
; 844  : 		size_type _Count = 0;
; 845  : 		_Distance(_First, _Last, _Count);
; 846  : 		reserve(_Count);
; 847  : 
; 848  : 		_TRY_BEGIN
; 849  : 		for (; _First != _Last; ++_First)
; 850  : 			append((size_type)1, (_Elem)*_First);
; 851  : 		_CATCH_ALL
; 852  : 		_Tidy(true);
; 853  : 		_RERAISE;
; 854  : 		_CATCH_END
; 855  : 		}
; 856  : 
; 857  : 	basic_string(const_pointer _First, const_pointer _Last)
; 858  : 		: _Mybase()
; 859  : 		{	// construct from [_First, _Last), const pointers
; 860  : 		_DEBUG_RANGE(_First, _Last);
; 861  : 		_Tidy();
; 862  : 		if (_First != _Last)
; 863  : 			assign(&*_First, _Last - _First);
; 864  : 		}
; 865  : 
; 866  : 	basic_string(const_pointer _First, const_pointer _Last,
; 867  : 		const _Alloc& _Al)
; 868  : 		: _Mybase(_Al)
; 869  : 		{	// construct from [_First, _Last), const pointers
; 870  : 		_DEBUG_RANGE(_First, _Last);
; 871  : 		_Tidy();
; 872  : 		if (_First != _Last)
; 873  : 			assign(&*_First, _Last - _First);
; 874  : 		}
; 875  : 
; 876  : 	basic_string(const_iterator _First, const_iterator _Last)
; 877  : 		: _Mybase()
; 878  : 		{	// construct from [_First, _Last), const_iterators
; 879  : 		_DEBUG_RANGE(_First, _Last);
; 880  : 		_Tidy();
; 881  : 		if (_First != _Last)
; 882  : 			assign(&*_First, _Last - _First);
; 883  : 		}
; 884  : 
; 885  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 886  : 		: _Mybase(_Right._Getal())
; 887  : 		{	// construct by moving _Right
; 888  : 		_Tidy();
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 890  : 		}
; 891  : 
; 892  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 893  : 		: _Mybase(_Al)
; 894  : 		{	// construct by moving _Right, allocator
; 895  : 		if (this->_Getal() != _Right._Getal())
; 896  : 			assign(_Right.begin(), _Right.end());
; 897  : 		else
; 898  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 899  : 		}
; 900  : 
; 901  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 902  : 		{	// assign by moving _Right
; 903  : 		if (this != &_Right)
; 904  : 			{	// different, assign it
; 905  : 			_Tidy(true);
; 906  : 
; 907  : 			if (_Alty::propagate_on_container_move_assignment::value
; 908  : 				&& this->_Getal() != _Right._Getal())
; 909  : 				this->_Change_alloc(_Right._Getal());
; 910  : 
; 911  : 			if (this->_Getal() != _Right._Getal())
; 912  : 				assign(_Right.begin(), _Right.end());
; 913  : 			else
; 914  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 915  : 			}
; 916  : 		return (*this);
; 917  : 		}
; 918  : 
; 919  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 920  : 		{	// assign by moving _Right
; 921  : 		if (this == &_Right)
; 922  : 			;
; 923  : 		else if (get_allocator() != _Right.get_allocator()
; 924  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 925  : 			*this = _Right;
; 926  : 		else
; 927  : 			{	// not same, clear this and steal from _Right
; 928  : 			_Tidy(true);
; 929  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	void _Assign_rv(_Myt&& _Right)
; 935  : 		{	// assign by moving _Right
; 936  : 		if (_Right._Myres < this->_BUF_SIZE)
; 937  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 938  : 				_Right._Mysize + 1);
; 939  : 		else
; 940  : 			{	// copy pointer
; 941  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 942  : 			_Right._Bx._Ptr = pointer();
; 943  : 			}
; 944  : 		this->_Mysize = _Right._Mysize;
; 945  : 		this->_Myres = _Right._Myres;
; 946  : 		_Right._Tidy();
; 947  : 		}
; 948  : 
; 949  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Tidy();
; 954  : 		assign(_Ilist.begin(), _Ilist.end());
; 955  : 		}
; 956  : 
; 957  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 958  : 		{	// assign initializer_list
; 959  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 960  : 		}
; 961  : 
; 962  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 963  : 		{	// append initializer_list
; 964  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 965  : 		}
; 966  : 
; 967  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 968  : 		{	// assign initializer_list
; 969  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 970  : 		}
; 971  : 
; 972  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// append initializer_list
; 974  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	iterator insert(const_iterator _Where,
; 978  : 		_XSTD initializer_list<_Elem> _Ilist)
; 979  : 		{	// insert initializer_list
; 980  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 981  : 		}
; 982  : 
; 983  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 984  : 		_XSTD initializer_list<_Elem> _Ilist)
; 985  : 		{	// replace with initializer_list
; 986  : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 987  : 		}
; 988  : 
; 989  : 	~basic_string() _NOEXCEPT
; 990  : 		{	// destroy the string
; 991  : 		_Tidy(true);
; 992  : 		}
; 993  : 
; 994  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 995  : 
; 996  : 	_Myt& operator=(const _Myt& _Right)
; 997  : 		{	// assign _Right
; 998  : 		if (this != &_Right)
; 999  : 			{	// different, assign it
; 1000 : 			if (this->_Getal() != _Right._Getal()
; 1001 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1002 : 				{	// change allocator before copying
; 1003 : 				_Tidy(true);
; 1004 : 				this->_Change_alloc(_Right._Getal());
; 1005 : 				}
; 1006 : 
; 1007 : 			assign(_Right);
; 1008 : 			}
; 1009 : 		return (*this);
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& operator=(const _Elem *_Ptr)
; 1013 : 		{	// assign [_Ptr, <null>)
; 1014 : 		return (assign(_Ptr));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& operator=(_Elem _Ch)
; 1018 : 		{	// assign 1 * _Ch
; 1019 : 		return (assign(1, _Ch));
; 1020 : 		}
; 1021 : 
; 1022 : 	_Myt& operator+=(const _Myt& _Right)
; 1023 : 		{	// append _Right
; 1024 : 		return (append(_Right));
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1028 : 		{	// append [_Ptr, <null>)
; 1029 : 		return (append(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator+=(_Elem _Ch)
; 1033 : 		{	// append 1 * _Ch
; 1034 : 		return (append((size_type)1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right, 0, npos));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& append(const _Myt& _Right,
; 1043 : 		size_type _Roff, size_type _Count)
; 1044 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1045 : 		if (_Right.size() < _Roff)
; 1046 : 			_Xran();	// _Roff off end
; 1047 : 		size_type _Num = _Right.size() - _Roff;
; 1048 : 		if (_Num < _Count)
; 1049 : 			_Count = _Num;	// trim _Count to size
; 1050 : 		if (npos - this->_Mysize <= _Count)
; 1051 : 			_Xlen();	// result too long
; 1052 : 
; 1053 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1054 : 			{	// make room and append new stuff
; 1055 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1056 : 				_Right._Myptr() + _Roff, _Count);
; 1057 : 			_Eos(_Num);
; 1058 : 			}
; 1059 : 		return (*this);
; 1060 : 		}
; 1061 : 
; 1062 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1063 : 		{	// append [_Ptr, _Ptr + _Count)
; 1064 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1065 : 		if (_Count != 0)
; 1066 : 			_DEBUG_POINTER(_Ptr);
; 1067 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1068 : 
; 1069 : 		if (_Inside(_Ptr))
; 1070 : 			return (append(*this,
; 1071 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1072 : 		if (npos - this->_Mysize <= _Count)
; 1073 : 			_Xlen();	// result too long
; 1074 : 
; 1075 : 		size_type _Num;
; 1076 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1077 : 			{	// make room and append new stuff
; 1078 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1079 : 			_Eos(_Num);
; 1080 : 			}
; 1081 : 		return (*this);
; 1082 : 		}
; 1083 : 
; 1084 : 	_Myt& append(const _Elem *_Ptr)
; 1085 : 		{	// append [_Ptr, <null>)
; 1086 : 		_DEBUG_POINTER(_Ptr);
; 1087 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1088 : 		}
; 1089 : 
; 1090 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1091 : 		{	// append _Count * _Ch
; 1092 : 		if (npos - this->_Mysize <= _Count)
; 1093 : 			_Xlen();	// result too long
; 1094 : 
; 1095 : 		size_type _Num;
; 1096 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1097 : 			{	// make room and append new stuff using assign
; 1098 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1099 : 			_Eos(_Num);
; 1100 : 			}
; 1101 : 		return (*this);
; 1102 : 		}
; 1103 : 
; 1104 : 	template<class _Iter>
; 1105 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1106 : 			_Myt&>::type
; 1107 : 		append(_Iter _First, _Iter _Last)
; 1108 : 		{	// append [_First, _Last), input iterators
; 1109 : 		return (replace(end(), end(), _First, _Last));
; 1110 : 		}
; 1111 : 
; 1112 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1113 : 		{	// append [_First, _Last), const pointers
; 1114 : 		return (replace(end(), end(), _First, _Last));
; 1115 : 		}
; 1116 : 
; 1117 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1118 : 		{	// append [_First, _Last), const_iterators
; 1119 : 		return (replace(end(), end(), _First, _Last));
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Myt& _Right)
; 1123 : 		{	// assign _Right
; 1124 : 		return (assign(_Right, 0, npos));
; 1125 : 		}
; 1126 : 
; 1127 : 	_Myt& assign(const _Myt& _Right,
; 1128 : 		size_type _Roff, size_type _Count)
; 1129 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1130 : 		if (_Right.size() < _Roff)
; 1131 : 			_Xran();	// _Roff off end
; 1132 : 		size_type _Num = _Right.size() - _Roff;
; 1133 : 		if (_Count < _Num)
; 1134 : 			_Num = _Count;	// trim _Num to size
; 1135 : 
; 1136 : 		if (this == &_Right)
; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1138 : 		else if (_Grow(_Num))
; 1139 : 			{	// make room and assign new stuff
; 1140 : 			_Traits::copy(this->_Myptr(),
; 1141 : 				_Right._Myptr() + _Roff, _Num);
; 1142 : 			_Eos(_Num);
; 1143 : 			}
; 1144 : 		return (*this);
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1149 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1150 : 		if (_Count != 0)
; 1151 : 			_DEBUG_POINTER(_Ptr);
; 1152 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1153 : 
; 1154 : 		if (_Inside(_Ptr))
; 1155 : 			return (assign(*this,
; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1157 : 
; 1158 : 		if (_Grow(_Count))
; 1159 : 			{	// make room and assign new stuff
; 1160 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1161 : 			_Eos(_Count);
; 1162 : 			}
; 1163 : 		return (*this);
; 1164 : 		}
; 1165 : 
; 1166 : 	_Myt& assign(const _Elem *_Ptr)
; 1167 : 		{	// assign [_Ptr, <null>)
; 1168 : 		_DEBUG_POINTER(_Ptr);
; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1173 : 		{	// assign _Count * _Ch
; 1174 : 		if (_Count == npos)
; 1175 : 			_Xlen();	// result too long
; 1176 : 
; 1177 : 		if (_Grow(_Count))
; 1178 : 			{	// make room and assign new stuff
; 1179 : 			_Chassign(0, _Count, _Ch);
; 1180 : 			_Eos(_Count);
; 1181 : 			}
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	template<class _Iter>
; 1186 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1187 : 			_Myt&>::type
; 1188 : 		assign(_Iter _First, _Iter _Last)
; 1189 : 		{	// assign [_First, _Last), input iterators
; 1190 : 		return (replace(begin(), end(), _First, _Last));
; 1191 : 		}
; 1192 : 
; 1193 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1194 : 		{	// assign [_First, _Last), const pointers
; 1195 : 		return (replace(begin(), end(), _First, _Last));
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1199 : 		{	// assign [_First, _Last), const_iterators
; 1200 : 		return (replace(begin(), end(), _First, _Last));
; 1201 : 		}
; 1202 : 
; 1203 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1204 : 		{	// insert _Right at _Off
; 1205 : 		return (insert(_Off, _Right, 0, npos));
; 1206 : 		}
; 1207 : 
; 1208 : 	_Myt& insert(size_type _Off,
; 1209 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1210 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1211 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1212 : 			_Xran();	// _Off or _Roff off end
; 1213 : 		size_type _Num = _Right.size() - _Roff;
; 1214 : 		if (_Num < _Count)
; 1215 : 			_Count = _Num;	// trim _Count to size
; 1216 : 		if (npos - this->_Mysize <= _Count)
; 1217 : 			_Xlen();	// result too long
; 1218 : 
; 1219 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1220 : 			{	// make room and insert new stuff
; 1221 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1222 : 				this->_Myptr() + _Off,
; 1223 : 				this->_Mysize - _Off);	// empty out hole
; 1224 : 			if (this == &_Right)
; 1225 : 				_Traits::move(this->_Myptr() + _Off,
; 1226 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1227 : 						_Count);	// substring
; 1228 : 			else
; 1229 : 				_Traits::copy(this->_Myptr() + _Off,
; 1230 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1231 : 			_Eos(_Num);
; 1232 : 			}
; 1233 : 		return (*this);
; 1234 : 		}
; 1235 : 
; 1236 : 	_Myt& insert(size_type _Off,
; 1237 : 		const _Elem *_Ptr, size_type _Count)
; 1238 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1239 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 : 		if (_Count != 0)
; 1241 : 			_DEBUG_POINTER(_Ptr);
; 1242 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1243 : 
; 1244 : 		if (_Inside(_Ptr))
; 1245 : 			return (insert(_Off, *this,
; 1246 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1264 : 		{	// insert [_Ptr, <null>) at _Off
; 1265 : 		_DEBUG_POINTER(_Ptr);
; 1266 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1267 : 		}
; 1268 : 
; 1269 : 	_Myt& insert(size_type _Off,
; 1270 : 		size_type _Count, _Elem _Ch)
; 1271 : 		{	// insert _Count * _Ch at _Off
; 1272 : 		if (this->_Mysize < _Off)
; 1273 : 			_Xran();	// _Off off end
; 1274 : 		if (npos - this->_Mysize <= _Count)
; 1275 : 			_Xlen();	// result too long
; 1276 : 		size_type _Num;
; 1277 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1278 : 			{	// make room and insert new stuff
; 1279 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1280 : 				this->_Myptr() + _Off,
; 1281 : 				this->_Mysize - _Off);	// empty out hole
; 1282 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1283 : 			_Eos(_Num);
; 1284 : 			}
; 1285 : 		return (*this);
; 1286 : 		}
; 1287 : 
; 1288 : 	iterator insert(const_iterator _Where)
; 1289 : 		{	// insert <null> at _Where
; 1290 : 		return (insert(_Where, _Elem()));
; 1291 : 		}
; 1292 : 
; 1293 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1294 : 		{	// insert _Ch at _Where
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		insert(_Off, 1, _Ch);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1301 : 		{	// insert _Count * _Elem at _Where
; 1302 : 		size_type _Off = _Pdif(_Where, begin());
; 1303 : 		insert(_Off, _Count, _Ch);
; 1304 : 		return (begin() + _Off);
; 1305 : 		}
; 1306 : 
; 1307 : 	template<class _Iter>
; 1308 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1309 : 			iterator>::type
; 1310 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1311 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1312 : 		size_type _Off = _Pdif(_Where, begin());
; 1313 : 		replace(_Where, _Where, _First, _Last);
; 1314 : 		return (begin() + _Off);
; 1315 : 		}
; 1316 : 
; 1317 : 	iterator insert(const_iterator _Where,
; 1318 : 		const_pointer _First, const_pointer _Last)
; 1319 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1320 : 		size_type _Off = _Pdif(_Where, begin());
; 1321 : 		replace(_Where, _Where, _First, _Last);
; 1322 : 		return (begin() + _Off);
; 1323 : 		}
; 1324 : 
; 1325 : 	iterator insert(const_iterator _Where,
; 1326 : 		const_iterator _First, const_iterator _Last)
; 1327 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1328 : 		size_type _Off = _Pdif(_Where, begin());
; 1329 : 		replace(_Where, _Where, _First, _Last);
; 1330 : 		return (begin() + _Off);
; 1331 : 		}
; 1332 : 
; 1333 : 	_Myt& erase(size_type _Off = 0)
; 1334 : 		{	// erase elements [_Off, ...)
; 1335 : 		if (this->_Mysize < _Off)
; 1336 : 			_Xran();	// _Off off end
; 1337 : 		_Eos(_Off);
; 1338 : 		return (*this);
; 1339 : 		}
; 1340 : 
; 1341 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1342 : 		{	// erase elements [_Off, _Off + _Count)
; 1343 : 		if (this->_Mysize < _Off)
; 1344 : 			_Xran();	// _Off off end
; 1345 : 		if (this->_Mysize - _Off <= _Count)
; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1347 : 		else if (0 < _Count)
; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1350 : 			size_type _Newsize = this->_Mysize - _Count;
; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1352 : 			_Eos(_Newsize);
; 1353 : 			}
; 1354 : 		return (*this);
; 1355 : 		}
; 1356 : 
; 1357 : 	iterator erase(const_iterator _Where)
; 1358 : 		{	// erase element at _Where
; 1359 : 		size_type _Count = _Pdif(_Where, begin());
; 1360 : 		erase(_Count, 1);
; 1361 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1362 : 		}
; 1363 : 
; 1364 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1365 : 		{	// erase substring [_First, _Last)
; 1366 : 		_DEBUG_RANGE(_First, _Last);
; 1367 : 		size_type _Count = _Pdif(_First, begin());
; 1368 : 		erase(_Count, _Pdif(_Last, _First));
; 1369 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1370 : 		}
; 1371 : 
; 1372 : 	void clear() _NOEXCEPT
; 1373 : 		{	// erase all
; 1374 : 		_Eos(0);
; 1375 : 		}
; 1376 : 
; 1377 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1378 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1379 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1380 : 		}
; 1381 : 
; 1382 : 	_Myt& replace(size_type _Off,
; 1383 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1384 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1385 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1386 : 			_Xran();	// _Off or _Roff off end
; 1387 : 		if (this->_Mysize - _Off < _N0)
; 1388 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1389 : 		size_type _Num = _Right.size() - _Roff;
; 1390 : 		if (_Num < _Count)
; 1391 : 			_Count = _Num;	// trim _Count to size
; 1392 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1393 : 			_Xlen();	// result too long
; 1394 : 
; 1395 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1396 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1397 : 		if (this->_Mysize < _Newsize)
; 1398 : 			_Grow(_Newsize);
; 1399 : 
; 1400 : 		if (this != &_Right)
; 1401 : 			{	// no overlap, just move down and copy in new stuff
; 1402 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1403 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1404 : 			_Traits::copy(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (_Count <= _N0)
; 1408 : 			{	// hole doesn't get larger, just copy in substring
; 1409 : 			_Traits::move(this->_Myptr() + _Off,
; 1410 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1411 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1412 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1413 : 			}
; 1414 : 		else if (_Roff <= _Off)
; 1415 : 			{	// hole gets larger, substring begins before hole
; 1416 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1417 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1418 : 			_Traits::move(this->_Myptr() + _Off,
; 1419 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1420 : 			}
; 1421 : 		else if (_Off + _N0 <= _Roff)
; 1422 : 			{	// hole gets larger, substring begins after hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1427 : 				_Count);	// fill hole
; 1428 : 			}
; 1429 : 		else
; 1430 : 			{	// hole gets larger, substring begins in hole
; 1431 : 			_Traits::move(this->_Myptr() + _Off,
; 1432 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1433 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1434 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1435 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1436 : 				this->_Myptr() + _Roff + _Count,
; 1437 : 				_Count - _N0);	// fill rest of new hole
; 1438 : 			}
; 1439 : 
; 1440 : 		_Eos(_Newsize);
; 1441 : 		return (*this);
; 1442 : 		}
; 1443 : 
; 1444 : 	_Myt& replace(size_type _Off,
; 1445 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1446 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1447 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1448 : 		if (_Count != 0)
; 1449 : 			_DEBUG_POINTER(_Ptr);
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(
; 1519 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1520 : 		}
; 1521 : 
; 1522 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1523 : 		const _Elem *_Ptr, size_type _Count)
; 1524 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1525 : 		return (replace(
; 1526 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const _Elem *_Ptr)
; 1531 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1532 : 		return (replace(
; 1533 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1534 : 		}
; 1535 : 
; 1536 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1537 : 		size_type _Count, _Elem _Ch)
; 1538 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1539 : 		return (replace(
; 1540 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1541 : 		}
; 1542 : 
; 1543 : 	template<class _Iter>
; 1544 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1545 : 			_Myt&>::type
; 1546 : 		replace(const_iterator _First, const_iterator _Last,
; 1547 : 			_Iter _First2, _Iter _Last2)
; 1548 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1549 : 		_Myt _Right(_First2, _Last2);
; 1550 : 		replace(_First, _Last, _Right);
; 1551 : 		return (*this);
; 1552 : 		}
; 1553 : 
; 1554 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1555 : 		const_pointer _First2, const_pointer _Last2)
; 1556 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1557 : 		if (_First2 == _Last2)
; 1558 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1559 : 		else
; 1560 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1561 : 				&*_First2, _Last2 - _First2);
; 1562 : 		return (*this);
; 1563 : 		}
; 1564 : 
; 1565 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1566 : 		pointer _First2, pointer _Last2)
; 1567 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1568 : 		if (_First2 == _Last2)
; 1569 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1570 : 		else
; 1571 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1572 : 				&*_First2, _Last2 - _First2);
; 1573 : 		return (*this);
; 1574 : 		}
; 1575 : 
; 1576 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1577 : 		const_iterator _First2, const_iterator _Last2)
; 1578 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1579 : 		if (_First2 == _Last2)
; 1580 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1581 : 		else
; 1582 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1583 : 				&*_First2, _Last2 - _First2);
; 1584 : 		return (*this);
; 1585 : 		}
; 1586 : 
; 1587 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1588 : 		iterator _First2, iterator _Last2)
; 1589 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1590 : 		if (_First2 == _Last2)
; 1591 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1592 : 		else
; 1593 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1594 : 				&*_First2, _Last2 - _First2);
; 1595 : 		return (*this);
; 1596 : 		}
; 1597 : 
; 1598 : 	iterator begin() _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of mutable sequence
; 1600 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1601 : 		}
; 1602 : 
; 1603 : 	const_iterator begin() const _NOEXCEPT
; 1604 : 		{	// return iterator for beginning of nonmutable sequence
; 1605 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1606 : 		}
; 1607 : 
; 1608 : 	iterator end() _NOEXCEPT
; 1609 : 		{	// return iterator for end of mutable sequence
; 1610 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1611 : 		}
; 1612 : 
; 1613 : 	const_iterator end() const _NOEXCEPT
; 1614 : 		{	// return iterator for end of nonmutable sequence
; 1615 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1616 : 		}
; 1617 : 
; 1618 : 	reverse_iterator rbegin() _NOEXCEPT
; 1619 : 		{	// return iterator for beginning of reversed mutable sequence
; 1620 : 		return (reverse_iterator(end()));
; 1621 : 		}
; 1622 : 
; 1623 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1624 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1625 : 		return (const_reverse_iterator(end()));
; 1626 : 		}
; 1627 : 
; 1628 : 	reverse_iterator rend() _NOEXCEPT
; 1629 : 		{	// return iterator for end of reversed mutable sequence
; 1630 : 		return (reverse_iterator(begin()));
; 1631 : 		}
; 1632 : 
; 1633 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1634 : 		{	// return iterator for end of reversed nonmutable sequence
; 1635 : 		return (const_reverse_iterator(begin()));
; 1636 : 		}
; 1637 : 
; 1638 : 	const_iterator cbegin() const _NOEXCEPT
; 1639 : 		{	// return iterator for beginning of nonmutable sequence
; 1640 : 		return (((const _Myt *)this)->begin());
; 1641 : 		}
; 1642 : 
; 1643 : 	const_iterator cend() const _NOEXCEPT
; 1644 : 		{	// return iterator for end of nonmutable sequence
; 1645 : 		return (((const _Myt *)this)->end());
; 1646 : 		}
; 1647 : 
; 1648 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1649 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1650 : 		return (((const _Myt *)this)->rbegin());
; 1651 : 		}
; 1652 : 
; 1653 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1654 : 		{	// return iterator for end of reversed nonmutable sequence
; 1655 : 		return (((const _Myt *)this)->rend());
; 1656 : 		}
; 1657 : 
; 1658 : 	void shrink_to_fit()
; 1659 : 		{	// reduce capacity
; 1660 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1661 : 			{	// worth shrinking, do it
; 1662 : 			_Myt _Tmp(*this);
; 1663 : 			swap(_Tmp);
; 1664 : 			}
; 1665 : 		}
; 1666 : 
; 1667 : 	reference at(size_type _Off)
; 1668 : 		{	// subscript mutable sequence with checking
; 1669 : 		if (this->_Mysize <= _Off)
; 1670 : 			_Xran();	// _Off off end
; 1671 : 		return (this->_Myptr()[_Off]);
; 1672 : 		}
; 1673 : 
; 1674 : 	const_reference at(size_type _Off) const
; 1675 : 		{	// subscript nonmutable sequence with checking
; 1676 : 		if (this->_Mysize <= _Off)
; 1677 : 			_Xran();	// _Off off end
; 1678 : 		return (this->_Myptr()[_Off]);
; 1679 : 		}
; 1680 : 
; 1681 : 	reference operator[](size_type _Off)
; 1682 : 		{	// subscript mutable sequence
; 1683 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 : 		if (this->_Mysize < _Off)	// sic
; 1685 : 			_DEBUG_ERROR("string subscript out of range");
; 1686 : 
; 1687 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1688 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1689 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1690 : 
; 1691 : 		return (this->_Myptr()[_Off]);
; 1692 : 		}
; 1693 : 
; 1694 : 	const_reference operator[](size_type _Off) const
; 1695 : 		{	// subscript nonmutable sequence
; 1696 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1697 : 		if (this->_Mysize < _Off)	// sic
; 1698 : 			_DEBUG_ERROR("string subscript out of range");
; 1699 : 
; 1700 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1701 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1702 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1703 : 
; 1704 : 		return (this->_Myptr()[_Off]);
; 1705 : 		}
; 1706 : 
; 1707 : 	void push_back(_Elem _Ch)
; 1708 : 		{	// insert element at end
; 1709 : 		insert(end(), _Ch);
; 1710 : 		}
; 1711 : 
; 1712 : 	void pop_back()
; 1713 : 		{	// erase element at end
; 1714 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1715 : 		}
; 1716 : 
; 1717 : 	reference front()
; 1718 : 		{	// return first element of mutable sequence
; 1719 : 		return (*begin());
; 1720 : 		}
; 1721 : 
; 1722 : 	const_reference front() const
; 1723 : 		{	// return first element of nonmutable sequence
; 1724 : 		return (*begin());
; 1725 : 		}
; 1726 : 
; 1727 : 	reference back()
; 1728 : 		{	// return last element of mutable sequence
; 1729 : 		return (*(end() - 1));
; 1730 : 		}
; 1731 : 
; 1732 : 	const_reference back() const
; 1733 : 		{	// return last element of nonmutable sequence
; 1734 : 		return (*(end() - 1));
; 1735 : 		}
; 1736 : 
; 1737 : 	const _Elem *c_str() const _NOEXCEPT
; 1738 : 		{	// return pointer to null-terminated nonmutable array
; 1739 : 		return (this->_Myptr());
; 1740 : 		}
; 1741 : 
; 1742 : 	const _Elem *data() const _NOEXCEPT
; 1743 : 		{	// return pointer to nonmutable array
; 1744 : 		return (c_str());
; 1745 : 		}
; 1746 : 
; 1747 : 	size_type length() const _NOEXCEPT
; 1748 : 		{	// return length of sequence
; 1749 : 		return (this->_Mysize);
; 1750 : 		}
; 1751 : 
; 1752 : 	size_type size() const _NOEXCEPT
; 1753 : 		{	// return length of sequence
; 1754 : 		return (this->_Mysize);
; 1755 : 		}
; 1756 : 
; 1757 : 	size_type max_size() const _NOEXCEPT
; 1758 : 		{	// return maximum possible length of sequence
; 1759 : 		size_type _Num = this->_Getal().max_size();
; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1761 : 		}
; 1762 : 
; 1763 : 	void resize(size_type _Newsize)
; 1764 : 		{	// determine new length, padding with null elements as needed
; 1765 : 		resize(_Newsize, _Elem());
; 1766 : 		}
; 1767 : 
; 1768 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1769 : 		{	// determine new length, padding with _Ch elements as needed
; 1770 : 		if (_Newsize <= this->_Mysize)
; 1771 : 			_Eos(_Newsize);
; 1772 : 		else
; 1773 : 			append(_Newsize - this->_Mysize, _Ch);
; 1774 : 		}
; 1775 : 
; 1776 : 	size_type capacity() const _NOEXCEPT
; 1777 : 		{	// return current length of allocated storage
; 1778 : 		return (this->_Myres);
; 1779 : 		}
; 1780 : 
; 1781 : 	void reserve(size_type _Newcap = 0)
; 1782 : 		{	// determine new minimum length of allocated storage
; 1783 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1784 : 			{	// change reservation
; 1785 : 			size_type _Size = this->_Mysize;
; 1786 : 			if (_Grow(_Newcap, true))
; 1787 : 				_Eos(_Size);
; 1788 : 			}
; 1789 : 		}
; 1790 : 
; 1791 : 	bool empty() const _NOEXCEPT
; 1792 : 		{	// test if sequence is empty
; 1793 : 		return (this->_Mysize == 0);
; 1794 : 		}
; 1795 : 
; 1796 : 	_SCL_INSECURE_DEPRECATE
; 1797 : 
; 1798 : 	size_type copy(_Elem *_Ptr,
; 1799 : 		size_type _Count, size_type _Off = 0) const
; 1800 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1801 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1802 : 		if (_Count != 0)
; 1803 : 			_DEBUG_POINTER(_Ptr);
; 1804 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1805 : 
; 1806 : 		if (this->_Mysize < _Off)
; 1807 : 			_Xran();	// _Off off end
; 1808 : 		if (this->_Mysize - _Off < _Count)
; 1809 : 			_Count = this->_Mysize - _Off;
; 1810 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1811 : 		return (_Count);
; 1812 : 		}
; 1813 : 
; 1814 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1815 : 		size_type _Count, size_type _Off = 0) const
; 1816 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1817 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1818 : 		if (_Count != 0)
; 1819 : 			_DEBUG_POINTER(_Dest);
; 1820 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1821 : 
; 1822 : 		if (this->_Mysize < _Off)
; 1823 : 			_Xran();	// _Off off end
; 1824 : 		if (this->_Mysize - _Off < _Count)
; 1825 : 			_Count = this->_Mysize - _Off;
; 1826 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1827 : 		return (_Count);
; 1828 : 		}
; 1829 : 
; 1830 : 	void _Swap_bx(_Myt& _Right)
; 1831 : 		{	// exchange _Bx with _Right._Bx
; 1832 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1833 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1834 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1835 : 			else
; 1836 : 				{	// swap large with small
; 1837 : 				pointer _Ptr = this->_Bx._Ptr;
; 1838 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1839 : 				_Traits::copy(this->_Bx._Buf,
; 1840 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1841 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1842 : 				}
; 1843 : 		else
; 1844 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1845 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1846 : 			else
; 1847 : 				{	// swap small with large
; 1848 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1849 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1850 : 				_Traits::copy(_Right._Bx._Buf,
; 1851 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1852 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1853 : 				}
; 1854 : 		}
; 1855 : 
; 1856 : 	void swap(_Myt& _Right)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this == &_Right)
; 1859 : 			;	// same object, do nothing
; 1860 : 		else if (this->_Getal() == _Right._Getal())
; 1861 : 			{	// same allocator, swap control information
; 1862 : 			this->_Swap_all(_Right);
; 1863 : 			_Swap_bx(_Right);
; 1864 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1865 : 			_STD swap(this->_Myres, _Right._Myres);
; 1866 : 			}
; 1867 : 
; 1868 : 		else if (_Alty::propagate_on_container_swap::value)
; 1869 : 			{	// swap allocators and control information
; 1870 : 			this->_Swap_alloc(_Right);
; 1871 : 			_Swap_bx(_Right);
; 1872 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1873 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1874 : 			_STD swap(this->_Myres, _Right._Myres);
; 1875 : 			}
; 1876 : 
; 1877 : 		else
; 1878 : 			{	// different allocator, do multiple assigns
; 1879 : 			_Myt _Tmp = *this;
; 1880 : 
; 1881 : 			*this = _Right;
; 1882 : 			_Right = _Tmp;
; 1883 : 			}
; 1884 : 		}
; 1885 : 
; 1886 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1887 : 		{	// look for _Right beginning at or after _Off
; 1888 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1889 : 		}
; 1890 : 
; 1891 : 	size_type find(const _Elem *_Ptr,
; 1892 : 		size_type _Off, size_type _Count) const
; 1893 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1894 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1895 : 		if (_Count != 0)
; 1896 : 			_DEBUG_POINTER(_Ptr);
; 1897 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1898 : 
; 1899 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1900 : 			return (_Off);	// null string always matches (if inside string)
; 1901 : 
; 1902 : 		size_type _Nm;
; 1903 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1904 : 			{	// room for match, look for it
; 1905 : 			const _Elem *_Uptr, *_Vptr;
; 1906 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1907 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1908 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1909 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1910 : 					return (_Uptr - this->_Myptr());	// found a match
; 1911 : 			}
; 1912 : 
; 1913 : 		return (npos);	// no match
; 1914 : 		}
; 1915 : 
; 1916 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1917 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1918 : 		_DEBUG_POINTER(_Ptr);
; 1919 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1920 : 		}
; 1921 : 
; 1922 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1923 : 		{	// look for _Ch at or after _Off
; 1924 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1925 : 		}
; 1926 : 
; 1927 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1928 : 		{	// look for _Right beginning before _Off
; 1929 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1930 : 		}
; 1931 : 
; 1932 : 	size_type rfind(const _Elem *_Ptr,
; 1933 : 		size_type _Off, size_type _Count) const
; 1934 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1935 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1936 : 		if (_Count != 0)
; 1937 : 			_DEBUG_POINTER(_Ptr);
; 1938 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1939 : 
; 1940 : 		if (_Count == 0)
; 1941 : 			return (_Off < this->_Mysize ? _Off
; 1942 : 				: this->_Mysize);	// null always matches
; 1943 : 		if (_Count <= this->_Mysize)
; 1944 : 			{	// room for match, look for it
; 1945 : 			const _Elem *_Uptr = this->_Myptr() +
; 1946 : 				(_Off < this->_Mysize - _Count ? _Off
; 1947 : 					: this->_Mysize - _Count);
; 1948 : 			for (; ; --_Uptr)
; 1949 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1950 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1951 : 					return (_Uptr - this->_Myptr());	// found a match
; 1952 : 				else if (_Uptr == this->_Myptr())
; 1953 : 					break;	// at beginning, no more chance for match
; 1954 : 			}
; 1955 : 
; 1956 : 		return (npos);	// no match
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1960 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1961 : 		_DEBUG_POINTER(_Ptr);
; 1962 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1963 : 		}
; 1964 : 
; 1965 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1966 : 		{	// look for _Ch before _Off
; 1967 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1968 : 		}
; 1969 : 
; 1970 : 	size_type find_first_of(const _Myt& _Right,
; 1971 : 		size_type _Off = 0) const _NOEXCEPT
; 1972 : 		{	// look for one of _Right at or after _Off
; 1973 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1974 : 		}
; 1975 : 
; 1976 : 	size_type find_first_of(const _Elem *_Ptr,
; 1977 : 		size_type _Off, size_type _Count) const
; 1978 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1979 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1980 : 		if (_Count != 0)
; 1981 : 			_DEBUG_POINTER(_Ptr);
; 1982 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1983 : 
; 1984 : 		if (0 < _Count && _Off < this->_Mysize)
; 1985 : 			{	// room for match, look for it
; 1986 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1987 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1988 : 				_Uptr < _Vptr; ++_Uptr)
; 1989 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1990 : 					return (_Uptr - this->_Myptr());	// found a match
; 1991 : 			}
; 1992 : 
; 1993 : 		return (npos);	// no match
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_first_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off = 0) const
; 1998 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1999 : 		_DEBUG_POINTER(_Ptr);
; 2000 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_first_of(_Elem _Ch,
; 2004 : 		size_type _Off = 0) const
; 2005 : 		{	// look for _Ch at or after _Off
; 2006 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 2007 : 		}
; 2008 : 
; 2009 : 	size_type find_last_of(const _Myt& _Right,
; 2010 : 		size_type _Off = npos) const _NOEXCEPT
; 2011 : 		{	// look for one of _Right before _Off
; 2012 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 2013 : 		}
; 2014 : 
; 2015 : 	size_type find_last_of(const _Elem *_Ptr,
; 2016 : 		size_type _Off, size_type _Count) const
; 2017 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 2018 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2019 : 		if (_Count != 0)
; 2020 : 			_DEBUG_POINTER(_Ptr);
; 2021 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2022 : 
; 2023 : 		if (0 < _Count && 0 < this->_Mysize)
; 2024 : 			{	// worth searching, do it
; 2025 : 			const _Elem *_Uptr = this->_Myptr()
; 2026 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2027 : 			for (; ; --_Uptr)
; 2028 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2029 : 					return (_Uptr - this->_Myptr());	// found a match
; 2030 : 				else if (_Uptr == this->_Myptr())
; 2031 : 					break;	// at beginning, no more chance for match
; 2032 : 			}
; 2033 : 
; 2034 : 		return (npos);	// no match
; 2035 : 		}
; 2036 : 
; 2037 : 	size_type find_last_of(const _Elem *_Ptr,
; 2038 : 		size_type _Off = npos) const
; 2039 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2040 : 		_DEBUG_POINTER(_Ptr);
; 2041 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2042 : 		}
; 2043 : 
; 2044 : 	size_type find_last_of(_Elem _Ch,
; 2045 : 		size_type _Off = npos) const
; 2046 : 		{	// look for _Ch before _Off
; 2047 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2048 : 		}
; 2049 : 
; 2050 : 	size_type find_first_not_of(const _Myt& _Right,
; 2051 : 		size_type _Off = 0) const _NOEXCEPT
; 2052 : 		{	// look for none of _Right at or after _Off
; 2053 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2054 : 			_Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2060 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2061 : 		if (_Count != 0)
; 2062 : 			_DEBUG_POINTER(_Ptr);
; 2063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2064 : 
; 2065 : 		if (_Off < this->_Mysize)
; 2066 : 			{	// room for match, look for it
; 2067 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2068 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2069 : 				_Uptr < _Vptr; ++_Uptr)
; 2070 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2071 : 					return (_Uptr - this->_Myptr());
; 2072 : 			}
; 2073 : 		return (npos);
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off = 0) const
; 2078 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2079 : 		_DEBUG_POINTER(_Ptr);
; 2080 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_first_not_of(_Elem _Ch,
; 2084 : 		size_type _Off = 0) const
; 2085 : 		{	// look for non _Ch at or after _Off
; 2086 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2087 : 		}
; 2088 : 
; 2089 : 	size_type find_last_not_of(const _Myt& _Right,
; 2090 : 		size_type _Off = npos) const _NOEXCEPT
; 2091 : 		{	// look for none of _Right before _Off
; 2092 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2093 : 		}
; 2094 : 
; 2095 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2096 : 		size_type _Off, size_type _Count) const
; 2097 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2098 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2099 : 		if (_Count != 0)
; 2100 : 			_DEBUG_POINTER(_Ptr);
; 2101 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2102 : 
; 2103 : 		if (0 < this->_Mysize)
; 2104 : 			{	// worth searching, do it
; 2105 : 			const _Elem *_Uptr = this->_Myptr()
; 2106 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2107 : 			for (; ; --_Uptr)
; 2108 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2109 : 					return (_Uptr - this->_Myptr());
; 2110 : 				else if (_Uptr == this->_Myptr())
; 2111 : 					break;
; 2112 : 			}
; 2113 : 		return (npos);
; 2114 : 		}
; 2115 : 
; 2116 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2117 : 		size_type _Off = npos) const
; 2118 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2119 : 		_DEBUG_POINTER(_Ptr);
; 2120 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2121 : 		}
; 2122 : 
; 2123 : 	size_type find_last_not_of(_Elem _Ch,
; 2124 : 		size_type _Off = npos) const
; 2125 : 		{	// look for non _Ch before _Off
; 2126 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2127 : 		}
; 2128 : 
; 2129 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2130 : 		{	// return [_Off, _Off + _Count) as new string
; 2131 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2132 : 		}
; 2133 : 
; 2134 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2135 : 		{	// compare [0, _Mysize) with _Right
; 2136 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2137 : 		}
; 2138 : 
; 2139 : 	int compare(size_type _Off, size_type _N0,
; 2140 : 		const _Myt& _Right) const
; 2141 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2142 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2143 : 		}
; 2144 : 
; 2145 : 	int compare(size_type _Off,
; 2146 : 		size_type _N0, const _Myt& _Right,
; 2147 : 		size_type _Roff, size_type _Count) const
; 2148 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2149 : 		if (_Right.size() < _Roff)
; 2150 : 			_Xran();	// _Off off end
; 2151 : 		if (_Right._Mysize - _Roff < _Count)
; 2152 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2153 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2154 : 		}
; 2155 : 
; 2156 : 	int compare(const _Elem *_Ptr) const
; 2157 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2158 : 		_DEBUG_POINTER(_Ptr);
; 2159 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2160 : 		}
; 2161 : 
; 2162 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2163 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2164 : 		_DEBUG_POINTER(_Ptr);
; 2165 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2166 : 		}
; 2167 : 
; 2168 : 	int compare(size_type _Off,
; 2169 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2170 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2171 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2172 : 		if (_Count != 0)
; 2173 : 			_DEBUG_POINTER(_Ptr);
; 2174 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2175 : 
; 2176 : 		if (this->_Mysize < _Off)
; 2177 : 			_Xran();	// _Off off end
; 2178 : 		if (this->_Mysize - _Off < _N0)
; 2179 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2180 : 
; 2181 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2182 : 			_N0 < _Count ? _N0 : _Count);
; 2183 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2184 : 			: _N0 == _Count ? 0 : +1);
; 2185 : 		}
; 2186 : 
; 2187 : 	allocator_type get_allocator() const _NOEXCEPT
; 2188 : 		{	// return allocator object for values
; 2189 : 		return (this->_Getal());
; 2190 : 		}
; 2191 : 
; 2192 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2193 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2194 : 		if (_Count == 1)
; 2195 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2196 : 		else
; 2197 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2198 : 		}
; 2199 : 
; 2200 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2203 : 		if (max_size() < _Newres)
; 2204 : 			_Newres = _Newsize;	// undo roundup if too big
; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2210 : 		else
; 2211 : 			_Newres = max_size();	// settle for max_size()
; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN
; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2216 : 		_CATCH_ALL
; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2218 : 			_TRY_BEGIN
; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2222 : 			_RERAISE;
; 2223 : 			_CATCH_END
; 2224 : 		_CATCH_END
; 2225 : 
; 2226 : 		if (0 < _Oldlen)
; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements
; 2229 : 		_Tidy(true);
; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2231 : 		this->_Myres = _Newres;
; 2232 : 		_Eos(_Oldlen);
; 2233 : 		}
; 2234 : 
; 2235 : 	void _Eos(size_type _Newsize)
; 2236 : 		{	// set new length and null terminator
; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00009	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring

; 740  : 		}

  00013	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 683  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 684  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 685  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 494  : 		_Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 631  : 		{	// construct allocator from _Al
; 632  : 		}

  00007	8b c1		 mov	 eax, ecx

; 495  : 		_Myres = 0;

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 631  : 		{	// construct allocator from _Al
; 632  : 		}

  00010	c2 04 00	 ret	 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 518  : 		return (this->_BUF_SIZE <= this->_Myres
; 519  : 			? _STD addressof(*this->_Bx._Ptr)
; 520  : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 521  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 518  : 		return (this->_BUF_SIZE <= this->_Myres
; 519  : 			? _STD addressof(*this->_Bx._Ptr)
; 520  : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 521  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 511  : 		return (this->_BUF_SIZE <= this->_Myres
; 512  : 			? _STD addressof(*this->_Bx._Ptr)
; 513  : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 514  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 511  : 		return (this->_BUF_SIZE <= this->_Myres
; 512  : 			? _STD addressof(*this->_Bx._Ptr)
; 513  : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 514  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 493  : 		{	// initialize values
; 494  : 		_Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 495  : 		_Myres = 0;
; 496  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	83 c8 ff	 or	 eax, -1

; 885  : 		}

  00003	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 14		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	77 15		 ja	 SHORT $LN14@allocate
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	8b c8		 mov	 ecx, eax
  00019	83 c4 04	 add	 esp, 4
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00020	8b c1		 mov	 eax, ecx

; 848  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  0002b	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	83 c8 ff	 or	 eax, -1

; 736  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	83 c8 ff	 or	 eax, -1

; 613  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 14		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	77 15		 ja	 SHORT $LN11@allocate
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	8b c8		 mov	 ecx, eax
  00019	83 c4 04	 add	 esp, 4
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00020	8b c1		 mov	 eax, ecx

; 579  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  0002b	cc		 int	 3
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ?_Fill_n@std@@YAPAEPAEIE@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 1
?_Fill_n@std@@YAPAEPAEIE@Z PROC				; std::_Fill_n, COMDAT

; 2652 : 	{	// copy unsigned char _Val _Count times through [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2653 : 	_CSTD memset(_Dest, _Val, _Count);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000e	57		 push	 edi
  0000f	0f b6 c0	 movzx	 eax, al
  00012	50		 push	 eax
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _memset
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2654 : 	return (_Dest + _Count);

  0001c	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi

; 2655 : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?_Fill_n@std@@YAPAEPAEIE@Z ENDP				; std::_Fill_n
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 564  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000b	88 08		 mov	 BYTE PTR [eax], cl

; 565  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@move
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 554  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@move:

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

  0000f	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 554  : 		}

  00012	5d		 pop	 ebp

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00013	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@copy
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 531  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@copy:

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  0000f	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 531  : 		}

  00012	5d		 pop	 ebp

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00013	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	80 38 00	 cmp	 BYTE PTR [eax], 0
  00009	75 04		 jne	 SHORT $LN3@length
  0000b	33 c0		 xor	 eax, eax

; 524  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@length:

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

  0000f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL5@length:
  00012	8a 08		 mov	 cl, BYTE PTR [eax]
  00014	40		 inc	 eax
  00015	84 c9		 test	 cl, cl
  00017	75 f9		 jne	 SHORT $LL5@length
  00019	2b c2		 sub	 eax, edx

; 524  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 65   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 61   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 134  : }

  00003	5d		 pop	 ebp

; 133  :     return _time64(_Time);

  00004	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
END
