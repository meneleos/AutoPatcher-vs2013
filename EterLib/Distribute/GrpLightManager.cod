; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\GamePackages\Client\Tools\Patcher2017\EterLib\GrpLightManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_fCurTime@CLightBase@@1MA			; CLightBase::ms_fCurTime
_BSS	SEGMENT
?ms_fCurTime@CLightBase@@1MA DD 01H DUP (?)		; CLightBase::ms_fCurTime
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	_sqrtf
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR3@@QAE@ABU_D3DVECTOR@@@Z		; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
PUBLIC	??0D3DXCOLOR@@QAE@XZ				; D3DXCOLOR::D3DXCOLOR
PUBLIC	??0D3DXCOLOR@@QAE@ABU_D3DCOLORVALUE@@@Z		; D3DXCOLOR::D3DXCOLOR
PUBLIC	??0D3DXCOLOR@@QAE@MMMM@Z			; D3DXCOLOR::D3DXCOLOR
PUBLIC	??HD3DXCOLOR@@QBE?AU0@ABU0@@Z			; D3DXCOLOR::operator+
PUBLIC	??GD3DXCOLOR@@QBE?AU0@ABU0@@Z			; D3DXCOLOR::operator-
PUBLIC	??DD3DXCOLOR@@QBE?AU0@M@Z			; D3DXCOLOR::operator*
PUBLIC	?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z		; D3DXVec3Length
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	??0?$tuple@$$$V@std@@QAE@XZ			; std::tuple<>::tuple<>
PUBLIC	??0?$tuple@$$$V@std@@QAE@ABV01@@Z		; std::tuple<>::tuple<>
PUBLIC	?Instance@?$CSingleton@VCTimer@@@@SAAAVCTimer@@XZ ; CSingleton<CTimer>::Instance
PUBLIC	??0CLightBase@@QAE@XZ				; CLightBase::CLightBase
PUBLIC	??1CLightBase@@UAE@XZ				; CLightBase::~CLightBase
PUBLIC	??_GCLightBase@@UAEPAXI@Z			; CLightBase::`scalar deleting destructor'
PUBLIC	??0CLight@@QAE@XZ				; CLight::CLight
PUBLIC	??1CLight@@UAE@XZ				; CLight::~CLight
PUBLIC	?Initialize@CLight@@QAEXXZ			; CLight::Initialize
PUBLIC	?Clear@CLight@@QAEXXZ				; CLight::Clear
PUBLIC	?Update@CLight@@QAEXXZ				; CLight::Update
PUBLIC	?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z	; CLight::SetParameter
PUBLIC	?SetDistance@CLight@@QAEXM@Z			; CLight::SetDistance
PUBLIC	?GetDistance@CLight@@QBEMXZ			; CLight::GetDistance
PUBLIC	?SetDeviceLight@CLight@@QAEXH@Z			; CLight::SetDeviceLight
PUBLIC	?SetDiffuseColor@CLight@@QAEXMMMM@Z		; CLight::SetDiffuseColor
PUBLIC	?SetAmbientColor@CLight@@QAEXMMMM@Z		; CLight::SetAmbientColor
PUBLIC	?SetRange@CLight@@QAEXM@Z			; CLight::SetRange
PUBLIC	?SetPosition@CLight@@QAEXMMM@Z			; CLight::SetPosition
PUBLIC	?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ	; CLight::GetPosition
PUBLIC	?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ; CLight::BlendDiffuseColor
PUBLIC	?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ; CLight::BlendAmbientColor
PUBLIC	?BlendRange@CLight@@QAEXMMM@Z			; CLight::BlendRange
PUBLIC	??0?$CTransitor@UD3DXCOLOR@@@@QAE@XZ		; CTransitor<D3DXCOLOR>::CTransitor<D3DXCOLOR>
PUBLIC	??1?$CTransitor@UD3DXCOLOR@@@@QAE@XZ		; CTransitor<D3DXCOLOR>::~CTransitor<D3DXCOLOR>
PUBLIC	?SetActive@?$CTransitor@UD3DXCOLOR@@@@QAEXH@Z	; CTransitor<D3DXCOLOR>::SetActive
PUBLIC	?isActive@?$CTransitor@UD3DXCOLOR@@@@QAEHXZ	; CTransitor<D3DXCOLOR>::isActive
PUBLIC	?isActiveTime@?$CTransitor@UD3DXCOLOR@@@@QAEHM@Z ; CTransitor<D3DXCOLOR>::isActiveTime
PUBLIC	?SetSourceValue@?$CTransitor@UD3DXCOLOR@@@@QAEXABUD3DXCOLOR@@@Z ; CTransitor<D3DXCOLOR>::SetSourceValue
PUBLIC	?SetTransition@?$CTransitor@UD3DXCOLOR@@@@QAEXABUD3DXCOLOR@@0MM@Z ; CTransitor<D3DXCOLOR>::SetTransition
PUBLIC	?GetValue@?$CTransitor@UD3DXCOLOR@@@@QAEHMPAUD3DXCOLOR@@@Z ; CTransitor<D3DXCOLOR>::GetValue
PUBLIC	??0?$CTransitor@M@@QAE@XZ			; CTransitor<float>::CTransitor<float>
PUBLIC	??1?$CTransitor@M@@QAE@XZ			; CTransitor<float>::~CTransitor<float>
PUBLIC	?SetActive@?$CTransitor@M@@QAEXH@Z		; CTransitor<float>::SetActive
PUBLIC	?isActive@?$CTransitor@M@@QAEHXZ		; CTransitor<float>::isActive
PUBLIC	?isActiveTime@?$CTransitor@M@@QAEHM@Z		; CTransitor<float>::isActiveTime
PUBLIC	?SetSourceValue@?$CTransitor@M@@QAEXABM@Z	; CTransitor<float>::SetSourceValue
PUBLIC	?SetTransition@?$CTransitor@M@@QAEXABM0MM@Z	; CTransitor<float>::SetTransition
PUBLIC	?GetValue@?$CTransitor@M@@QAEHMPAM@Z		; CTransitor<float>::GetValue
PUBLIC	??_GCLight@@UAEPAXI@Z				; CLight::`scalar deleting destructor'
PUBLIC	??0?$CSingleton@VCLightManager@@@@QAE@XZ	; CSingleton<CLightManager>::CSingleton<CLightManager>
PUBLIC	??1?$CSingleton@VCLightManager@@@@UAE@XZ	; CSingleton<CLightManager>::~CSingleton<CLightManager>
PUBLIC	??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z	; CSingleton<CLightManager>::`scalar deleting destructor'
PUBLIC	??0CLightManager@@QAE@XZ			; CLightManager::CLightManager
PUBLIC	??1CLightManager@@UAE@XZ			; CLightManager::~CLightManager
PUBLIC	?Destroy@CLightManager@@QAEXXZ			; CLightManager::Destroy
PUBLIC	?Initialize@CLightManager@@QAEXXZ		; CLightManager::Initialize
PUBLIC	?Update@CLightManager@@QAEXXZ			; CLightManager::Update
PUBLIC	?FlushLight@CLightManager@@QAEXXZ		; CLightManager::FlushLight
PUBLIC	?RestoreLight@CLightManager@@QAEXXZ		; CLightManager::RestoreLight
PUBLIC	?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z ; CLightManager::RegisterLight
PUBLIC	?GetLight@CLightManager@@QAEPAVCLight@@K@Z	; CLightManager::GetLight
PUBLIC	?DeleteLight@CLightManager@@QAEXK@Z		; CLightManager::DeleteLight
PUBLIC	?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z ; CLightManager::SetCenterPosition
PUBLIC	?SetLimitLightCount@CLightManager@@QAEXK@Z	; CLightManager::SetLimitLightCount
PUBLIC	?SetSkipIndex@CLightManager@@QAEXK@Z		; CLightManager::SetSkipIndex
PUBLIC	??0?$allocator@K@std@@QAE@XZ			; std::allocator<unsigned long>::allocator<unsigned long>
PUBLIC	?deallocate@?$allocator@K@std@@QAEXPAKI@Z	; std::allocator<unsigned long>::deallocate
PUBLIC	?allocate@?$allocator@K@std@@QAEPAKI@Z		; std::allocator<unsigned long>::allocate
PUBLIC	?construct@?$allocator@K@std@@QAEXPAKABK@Z	; std::allocator<unsigned long>::construct
PUBLIC	?max_size@?$allocator@K@std@@QBEIXZ		; std::allocator<unsigned long>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z ; std::allocator_traits<std::allocator<unsigned long> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<unsigned long> >::_Wrap_alloc<std::allocator<unsigned long> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEPAKI@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKI@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<unsigned long> >::max_size
PUBLIC	?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z	; std::allocator<unsigned long *>::deallocate
PUBLIC	?allocate@?$allocator@PAK@std@@QAEPAPAKI@Z	; std::allocator<unsigned long *>::allocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEPAPAKI@Z ; std::_Wrap_alloc<std::allocator<unsigned long *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEXPAPAKI@Z ; std::_Wrap_alloc<std::allocator<unsigned long *> >::deallocate
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Deque_val<std::_Deque_simple_types<unsigned long> >
PUBLIC	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QBEII@Z ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Getblock
PUBLIC	??1?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::~_Deque_val<std::_Deque_simple_types<unsigned long> >
PUBLIC	??0?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >
PUBLIC	??1?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::~_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >
PUBLIC	?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Free_proxy
PUBLIC	?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
PUBLIC	??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ	; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >
PUBLIC	??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
PUBLIC	?end@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ ; std::deque<unsigned long,std::allocator<unsigned long> >::end
PUBLIC	?max_size@?$deque@KV?$allocator@K@std@@@std@@QBEIXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::max_size
PUBLIC	?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::empty
PUBLIC	?back@?$deque@KV?$allocator@K@std@@@std@@QAEAAKXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::back
PUBLIC	?push_back@?$deque@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::push_back
PUBLIC	?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_back
PUBLIC	?clear@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::clear
PUBLIC	?_Xlen@?$deque@KV?$allocator@K@std@@@std@@IBEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
PUBLIC	?_Growmap@?$deque@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
PUBLIC	?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
PUBLIC	??R?$less@K@std@@QBE_NABK0@Z			; std::less<unsigned long>::operator()
PUBLIC	??0?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<unsigned long const ,CLight *> >::allocator<std::pair<unsigned long const ,CLight *> >
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::allocate
PUBLIC	?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::max_size
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >
PUBLIC	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Color
PUBLIC	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Isnil
PUBLIC	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Left
PUBLIC	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Parent
PUBLIC	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Right
PUBLIC	?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAU?$pair@$$CBKPAVCLight@@@2@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Myval
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Max
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Min
PUBLIC	??0?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >
PUBLIC	??1?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::~_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >
PUBLIC	?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Freeheadnode
PUBLIC	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Getal
PUBLIC	??0?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >
PUBLIC	?_Buynode0@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Buynode0
PUBLIC	?_Freenode0@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Freenode0
PUBLIC	??1?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAE@XZ ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::~_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >
PUBLIC	??0?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z ; std::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
PUBLIC	?_Getcomp@?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBE?AU?$less@K@2@XZ ; std::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Getcomp
PUBLIC	??1?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
PUBLIC	??0?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::end
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::size
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::max_size
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::clear
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::find
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::lower_bound
PUBLIC	?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Destroy_if_not_nil
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Erase
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lbound
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lmost
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lrotate
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Rmost
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Root
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Rrotate
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Tidy
PUBLIC	?_Kfn@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKPAVCLight@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Kfn
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Key
PUBLIC	??0?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >
PUBLIC	??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z ; std::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >::operator[]
PUBLIC	??1?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >::~map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >
PUBLIC	??0?$allocator@PAVCLight@@@std@@QAE@XZ		; std::allocator<CLight *>::allocator<CLight *>
PUBLIC	??0?$allocator@PAVCLight@@@std@@QAE@ABV01@@Z	; std::allocator<CLight *>::allocator<CLight *>
PUBLIC	?deallocate@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@I@Z ; std::allocator<CLight *>::deallocate
PUBLIC	?allocate@?$allocator@PAVCLight@@@std@@QAEPAPAVCLight@@I@Z ; std::allocator<CLight *>::allocate
PUBLIC	?construct@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@ABQAV3@@Z ; std::allocator<CLight *>::construct
PUBLIC	?max_size@?$allocator@PAVCLight@@@std@@QBEIXZ	; std::allocator<CLight *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAIABV?$allocator@PAVCLight@@@2@@Z ; std::allocator_traits<std::allocator<CLight *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CLight *> >::_Wrap_alloc<std::allocator<CLight *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEPAPAVCLight@@I@Z ; std::_Wrap_alloc<std::allocator<CLight *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@I@Z ; std::_Wrap_alloc<std::allocator<CLight *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CLight *> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CLight *> >::_Vector_val<std::_Simple_types<CLight *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCLight@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >
PUBLIC	?_Change_alloc@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@2@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >::_Change_alloc
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >::_Getal
PUBLIC	??0?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ ; std::vector<CLight *,std::allocator<CLight *> >::vector<CLight *,std::allocator<CLight *> >
PUBLIC	??1?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ ; std::vector<CLight *,std::allocator<CLight *> >::~vector<CLight *,std::allocator<CLight *> >
PUBLIC	??4?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CLight *,std::allocator<CLight *> >::operator=
PUBLIC	?capacity@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ ; std::vector<CLight *,std::allocator<CLight *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Unused_capacity
PUBLIC	?begin@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@2@XZ ; std::vector<CLight *,std::allocator<CLight *> >::begin
PUBLIC	?end@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@2@XZ ; std::vector<CLight *,std::allocator<CLight *> >::end
PUBLIC	?size@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ ; std::vector<CLight *,std::allocator<CLight *> >::size
PUBLIC	?max_size@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ ; std::vector<CLight *,std::allocator<CLight *> >::max_size
PUBLIC	?empty@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBE_NXZ ; std::vector<CLight *,std::allocator<CLight *> >::empty
PUBLIC	??A?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAPAVCLight@@I@Z ; std::vector<CLight *,std::allocator<CLight *> >::operator[]
PUBLIC	?back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAPAVCLight@@XZ ; std::vector<CLight *,std::allocator<CLight *> >::back
PUBLIC	?push_back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXABQAVCLight@@@Z ; std::vector<CLight *,std::allocator<CLight *> >::push_back
PUBLIC	?pop_back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXXZ ; std::vector<CLight *,std::allocator<CLight *> >::pop_back
PUBLIC	?clear@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXXZ ; std::vector<CLight *,std::allocator<CLight *> >::clear
PUBLIC	?_Buy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAE_NI@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Buy
PUBLIC	?_Destroy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXPAPAVCLight@@0@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEII@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBE_NPBQAVCLight@@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Tidy
PUBLIC	?_Xlen@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEXXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEXPAPAVCLight@@0@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Orphan_range
PUBLIC	?NewLightID@CLightManager@@IAEKXZ		; CLightManager::NewLightID
PUBLIC	?ReleaseLightID@CLightManager@@IAEXK@Z		; CLightManager::ReleaseLightID
PUBLIC	??0?$CDynamicPool@VCLight@@@@QAE@XZ		; CDynamicPool<CLight>::CDynamicPool<CLight>
PUBLIC	??1?$CDynamicPool@VCLight@@@@UAE@XZ		; CDynamicPool<CLight>::~CDynamicPool<CLight>
PUBLIC	?Destroy@?$CDynamicPool@VCLight@@@@QAEXXZ	; CDynamicPool<CLight>::Destroy
PUBLIC	?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ ; CDynamicPool<CLight>::Alloc
PUBLIC	?Free@?$CDynamicPool@VCLight@@@@QAEXPAVCLight@@@Z ; CDynamicPool<CLight>::Free
PUBLIC	?FreeAll@?$CDynamicPool@VCLight@@@@QAEXXZ	; CDynamicPool<CLight>::FreeAll
PUBLIC	?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z ; CDynamicPool<CLight>::Delete
PUBLIC	??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z		; CDynamicPool<CLight>::`scalar deleting destructor'
PUBLIC	??_GCLightManager@@UAEPAXI@Z			; CLightManager::`scalar deleting destructor'
PUBLIC	?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ ; CSingleton<CStateManager>::Instance
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator--
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::_Mynode
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAVCLight@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator*
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator++
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator++
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator--
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator!=
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAVCLight@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator*
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAVCLight@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator->
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator++
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator--
PUBLIC	??RLightComp@@QBE_NPBVCLight@@0@Z		; LightComp::operator()
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAE@PAPAVCLight@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEABQAVCLight@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator*
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator+=
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Compat
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAE@PAPAVCLight@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEPAPAVCLight@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Unchecked
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEAAPAVCLight@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator+=
PUBLIC	??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-=
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@ULightComp@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@0ULightComp@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >,LightComp>
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
PUBLIC	??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEABKXZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*
PUBLIC	?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Setcont
PUBLIC	??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
PUBLIC	??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEAAKXZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*
PUBLIC	??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator+=
PUBLIC	??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator-=
PUBLIC	??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator-
PUBLIC	??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
PUBLIC	??$construct@KABK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKABK@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>
PUBLIC	??$destroy@K@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAK@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long>
PUBLIC	??$forward_as_tuple@ABK@std@@YA?AV?$tuple@ABK@0@ABK@Z ; std::forward_as_tuple<unsigned long const &>
PUBLIC	??0?$tuple@ABK@std@@QAE@ABK@Z			; std::tuple<unsigned long const &>::tuple<unsigned long const &>
PUBLIC	?_Get_rest@?$tuple@ABK@std@@QAEAAV?$tuple@$$$V@2@XZ ; std::tuple<unsigned long const &>::_Get_rest
PUBLIC	??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
PUBLIC	??$addressof@U?$pair@$$CBKPAVCLight@@@std@@@std@@YAPAU?$pair@$$CBKPAVCLight@@@0@AAU10@@Z ; std::addressof<std::pair<unsigned long const ,CLight *> >
PUBLIC	??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::pair<unsigned long const ,CLight *> >
PUBLIC	??$addressof@QAVCLight@@@std@@YAPBQAVCLight@@ABQAV1@@Z ; std::addressof<CLight * const>
PUBLIC	??$construct@PAVCLight@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CLight *> >::construct<CLight *,CLight * &>
PUBLIC	??$construct@PAVCLight@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CLight *> >::construct<CLight *,CLight * const &>
PUBLIC	??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@P6AXPAVCLight@@@Z@std@@YAP6AXPAVCLight@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@1P6AX0@Z@Z ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >,void (__cdecl*)(CLight *)>
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAVCLight@@@std@@@std@@SAPAU?$pair@$$CBKPAVCLight@@@2@AAU32@@Z ; std::pointer_traits<std::pair<unsigned long const ,CLight *> *>::pointer_to
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<unsigned long *> >::_Wrap_alloc<std::allocator<unsigned long *> ><std::_Wrap_alloc<std::allocator<unsigned long> > >
PUBLIC	??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z ; std::allocator<unsigned long *>::allocator<unsigned long *><unsigned long>
PUBLIC	??$_Uninitialized_copy@PAPAKPAPAKU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ; std::_Uninitialized_copy<unsigned long * *,unsigned long * *,std::_Wrap_alloc<std::allocator<unsigned long *> > >
PUBLIC	??$_Uninitialized_default_fill_n@PAPAKIU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ; std::_Uninitialized_default_fill_n<unsigned long * *,unsigned int,std::_Wrap_alloc<std::allocator<unsigned long *> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned long *> > >
PUBLIC	??$destroy@PAK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAPAK@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long *>
PUBLIC	??$?9V?$allocator@PAVCLight@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0@Z ; std::operator!=<std::allocator<CLight *>,std::allocator<CLight *> >
PUBLIC	??$_Copy_impl@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_impl<CLight * *,CLight * *>
PUBLIC	??$_Ucopy@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEPAPAVCLight@@PAPAV2@00@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Ucopy<CLight * *>
PUBLIC	??$destroy@PAVCLight@@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@@Z ; std::_Wrap_alloc<std::allocator<CLight *> >::destroy<CLight *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAXPAPAVCLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CLight *> > >
PUBLIC	??$_Allocate@K@std@@YAPAKIPAK@Z			; std::_Allocate<unsigned long>
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Kfn@$$CBKPAVCLight@@@?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@SAABKABU?$pair@$$CBKPAVCLight@@@1@@Z ; std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0>::_Kfn<unsigned long const ,CLight *>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
PUBLIC	??$_Umove@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEPAPAVCLight@@PAPAV2@00@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Umove<CLight * *>
PUBLIC	??$_Allocate@PAK@std@@YAPAPAKIPAPAK@Z		; std::_Allocate<unsigned long *>
PUBLIC	??$_Allocate@PAVCLight@@@std@@YAPAPAVCLight@@IPAPAV1@@Z ; std::_Allocate<CLight *>
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>
PUBLIC	??$_Allocate@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CLight *> > >
PUBLIC	??$_Sort@PAPAVCLight@@HULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort<CLight * *,int,LightComp>
PUBLIC	??$forward@ABK@std@@YAABKABK@Z			; std::forward<unsigned long const &>
PUBLIC	??$construct@KABK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAKABK@Z ; std::allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>
PUBLIC	??$destroy@K@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAK@Z ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long>
PUBLIC	??$?0ABKPAPAX@?$tuple@ABK@std@@QAE@$$QAV01@@Z	; std::tuple<unsigned long const &>::tuple<unsigned long const &><unsigned long const &,void * *>
PUBLIC	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
PUBLIC	??$forward@V?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ; std::forward<std::tuple<unsigned long const &> >
PUBLIC	??$forward@V?$tuple@$$$V@std@@@std@@YA$$QAV?$tuple@$$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
PUBLIC	??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Buynode<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
PUBLIC	??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_hint<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
PUBLIC	??$_Move@AAD@std@@YA$$QADAAD@Z			; std::_Move<char &>
PUBLIC	??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$pair@$$CBKPAVCLight@@@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::pair<unsigned long const ,CLight *> >
PUBLIC	??$forward@AAPAVCLight@@@std@@YAAAPAVCLight@@AAPAV1@@Z ; std::forward<CLight * &>
PUBLIC	??$construct@PAVCLight@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CLight *> >::construct<CLight *,CLight * &>
PUBLIC	??$forward@ABQAVCLight@@@std@@YAABQAVCLight@@ABQAV1@@Z ; std::forward<CLight * const &>
PUBLIC	??$construct@PAVCLight@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CLight *> >::construct<CLight *,CLight * const &>
PUBLIC	??$_For_each@PAPAVCLight@@P6AXPAV1@@Z@std@@YAXPAPAVCLight@@0AAP6AXPAV1@@Z@Z ; std::_For_each<CLight * *,void (__cdecl*)(CLight *)>
PUBLIC	??$move@AAP6AXPAVCLight@@@Z@std@@YA$$QAP6AXPAVCLight@@@ZAAP6AX0@Z@Z ; std::move<void (__cdecl*&)(CLight *)>
PUBLIC	??$_Unchecked@PAPAK@std@@YAPAPAKPAPAK@Z		; std::_Unchecked<unsigned long * *>
PUBLIC	??$_Uninit_copy@PAPAKPAPAKU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ; std::_Uninit_copy<unsigned long * *,unsigned long * *,std::_Wrap_alloc<std::allocator<unsigned long *> > >
PUBLIC	??$_Rechecked@PAPAKPAPAK@std@@YAAAPAPAKAAPAPAKPAPAK@Z ; std::_Rechecked<unsigned long * *,unsigned long * *>
PUBLIC	??$_Val_type@PAPAK@std@@YAPAPAKPAPAK@Z		; std::_Val_type<unsigned long * *>
PUBLIC	??$_Ptr_cat@PAKPAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAK0@Z ; std::_Ptr_cat<unsigned long *,unsigned long *>
PUBLIC	??$_Uninit_def_fill_n@PAKIPAK@std@@YAXPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<unsigned long *,unsigned int,unsigned long *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned long *> > >
PUBLIC	??$destroy@PAK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAPAK@Z ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long *>
PUBLIC	??$?8V?$allocator@PAVCLight@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0@Z ; std::operator==<std::allocator<CLight *>,std::allocator<CLight *> >
PUBLIC	??$?8PAVCLight@@PAV0@@std@@YA_NABV?$allocator@PAVCLight@@@0@0@Z ; std::operator==<CLight *,CLight *>
PUBLIC	??$_Ptr_cat@PAVCLight@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCLight@@0@Z ; std::_Ptr_cat<CLight *,CLight *>
PUBLIC	??$_Copy_impl@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<CLight * *,CLight * *>
PUBLIC	??$_Uninitialized_copy@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z ; std::_Uninitialized_copy<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >
PUBLIC	??$destroy@PAVCLight@@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@@Z ; std::allocator_traits<std::allocator<CLight *> >::destroy<CLight *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAXPAPAVCLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CLight *> > >
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
PUBLIC	??$_Uninitialized_move@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z ; std::_Uninitialized_move<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>
PUBLIC	??$?0ABK@?$_Tuple_val@ABK@std@@QAE@ABK@Z	; std::_Tuple_val<unsigned long const &>::_Tuple_val<unsigned long const &><unsigned long const &>
PUBLIC	??$_Unguarded_partition@PAPAVCLight@@ULightComp@@@std@@YA?AU?$pair@PAPAVCLight@@PAPAV1@@0@PAPAVCLight@@0ULightComp@@@Z ; std::_Unguarded_partition<CLight * *,LightComp>
PUBLIC	??$make_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ; std::make_heap<CLight * *,LightComp>
PUBLIC	??$sort_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ; std::sort_heap<CLight * *,LightComp>
PUBLIC	??$_Insertion_sort@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ; std::_Insertion_sort<CLight * *,LightComp>
PUBLIC	??$destroy@K@?$allocator@K@std@@QAEXPAK@Z	; std::allocator<unsigned long>::destroy<unsigned long>
PUBLIC	??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::pair<unsigned long const ,CLight *>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
PUBLIC	??$forward@AAU?$pair@$$CBKPAVCLight@@@std@@@std@@YAAAU?$pair@$$CBKPAVCLight@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,CLight *> &>
PUBLIC	??$_Insert_at@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAU?$pair@$$CBKPAVCLight@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_at<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_nohint<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
PUBLIC	??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::destroy<std::pair<unsigned long const ,CLight *> >
PUBLIC	??$construct@PAVCLight@@AAPAV1@@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@AAPAV2@@Z ; std::allocator<CLight *>::construct<CLight *,CLight * &>
PUBLIC	??$_Uninit_copy@PAKPAK@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned long *,unsigned long *>
PUBLIC	??$_Fill_n@PAPAKIPAK@std@@YAPAPAKPAPAKIABQAK@Z	; std::_Fill_n<unsigned long * *,unsigned int,unsigned long *>
PUBLIC	??$destroy@PAK@?$allocator@K@std@@QAEXPAPAK@Z	; std::allocator<unsigned long>::destroy<unsigned long *>
PUBLIC	??$_Unchecked@PAPAVCLight@@@std@@YAPAPAVCLight@@PAPAV1@@Z ; std::_Unchecked<CLight * *>
PUBLIC	??$_Uninit_copy@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z ; std::_Uninit_copy<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >
PUBLIC	??$_Rechecked@PAPAVCLight@@PAPAV1@@std@@YAAAPAPAVCLight@@AAPAPAV1@PAPAV1@@Z ; std::_Rechecked<CLight * *,CLight * *>
PUBLIC	??$destroy@PAVCLight@@@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@@Z ; std::allocator<CLight *>::destroy<CLight *>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::destroy<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
PUBLIC	??$_Uninit_move@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z ; std::_Uninit_move<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU21@@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::construct<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>
PUBLIC	??$_Median@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ; std::_Median<CLight * *,LightComp>
PUBLIC	??$iter_swap@PAPAVCLight@@PAPAV1@@std@@YAXPAPAVCLight@@0@Z ; std::iter_swap<CLight * *,CLight * *>
PUBLIC	??$?0AAPAPAVCLight@@AAPAPAV0@X@?$pair@PAPAVCLight@@PAPAV1@@std@@QAE@AAPAPAVCLight@@0@Z ; std::pair<CLight * *,CLight * *>::pair<CLight * *,CLight * *><CLight * * &,CLight * * &,void>
PUBLIC	??$_Dist_type@PAPAVCLight@@@std@@YAPAHPAPAVCLight@@@Z ; std::_Dist_type<CLight * *>
PUBLIC	??$_Val_type@PAPAVCLight@@@std@@YAPAPAVCLight@@PAPAV1@@Z ; std::_Val_type<CLight * *>
PUBLIC	??$_Make_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@PAH0@Z ; std::_Make_heap<CLight * *,int,CLight *,LightComp>
PUBLIC	??$_Sort_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ; std::_Sort_heap<CLight * *,LightComp>
PUBLIC	??$_Insertion_sort1@PAPAVCLight@@ULightComp@@PAV1@@std@@YAXPAPAVCLight@@0ULightComp@@0@Z ; std::_Insertion_sort1<CLight * *,LightComp,CLight *>
PUBLIC	??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::pair<unsigned long const ,CLight *>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
PUBLIC	??$_Buynode_if_nil@AAU?$pair@$$CBKPAVCLight@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PAU21@AAU?$pair@$$CBKPAVCLight@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Buynode_if_nil<std::pair<unsigned long const ,CLight *> &>
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool,void>
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > > &,bool,void>
PUBLIC	??$_Uninit_copy@PAVCLight@@PAV1@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CLight *,CLight *>
PUBLIC	??$_Uninit_move@PAVCLight@@PAV1@PAV1@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CLight *,CLight *,CLight *>
PUBLIC	??$_Med3@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ; std::_Med3<CLight * *,LightComp>
PUBLIC	??$swap@PAVCLight@@@std@@YAXAAPAVCLight@@0@Z	; std::swap<CLight *>
PUBLIC	??$forward@AAPAPAVCLight@@@std@@YAAAPAPAVCLight@@AAPAPAV1@@Z ; std::forward<CLight * * &>
PUBLIC	??$_Move@AAPAVCLight@@@std@@YA$$QAPAVCLight@@AAPAV1@@Z ; std::_Move<CLight * &>
PUBLIC	??$_Adjust_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Adjust_heap<CLight * *,int,CLight *,LightComp>
PUBLIC	??$_Pop_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ; std::_Pop_heap<CLight * *,LightComp>
PUBLIC	??$_Move_backward@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Move_backward<CLight * *,CLight * *>
PUBLIC	??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::construct<std::pair<unsigned long const ,CLight *>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > > >
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > > &>
PUBLIC	??$_Push_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Push_heap<CLight * *,int,CLight *,LightComp>
PUBLIC	??$_Pop_heap_0@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@0@Z ; std::_Pop_heap_0<CLight * *,CLight *,LightComp>
PUBLIC	??$_Move_backward@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<CLight * *,CLight * *>
PUBLIC	??$?0ABK$$$V@?$pair@$$CBKPAVCLight@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$$V@1@@Z ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><unsigned long const &>
PUBLIC	??$_Pop_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@00$$QAPAV1@ULightComp@@PAH@Z ; std::_Pop_heap<CLight * *,int,CLight *,LightComp>
PUBLIC	??$?0V?$tuple@ABK@std@@V?$tuple@$$$V@1@$0A@$S@?$pair@$$CBKPAVCLight@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$$V@1@U?$_Arg_idx@$0A@@1@U?$_Arg_idx@$S@1@@Z ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><std::tuple<unsigned long const &>,std::tuple<>,0>
PUBLIC	??$move@AAV?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ; std::move<std::tuple<unsigned long const &> &>
PUBLIC	??$get@$0A@ABK@std@@YAABK$$QAV?$tuple@ABK@0@@Z	; std::get<0,unsigned long const &>
PUBLIC	??_ECLight@@W3AEPAXI@Z				; [thunk]:CLight::`vector deleting destructor'
PUBLIC	??_ECLightManager@@W3AEPAXI@Z			; [thunk]:CLightManager::`vector deleting destructor'
PUBLIC	??_ECLightManager@@W7AEPAXI@Z			; [thunk]:CLightManager::`vector deleting destructor'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_7CLightBase@@6B@				; CLightBase::`vftable'
PUBLIC	??_7CLight@@6BCGraphicBase@@@			; CLight::`vftable'
PUBLIC	??_7CLight@@6BCLightBase@@@			; CLight::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A ; CSingleton<CLightManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCLightManager@@@@6B@		; CSingleton<CLightManager>::`vftable'
PUBLIC	??_7?$CDynamicPool@VCLight@@@@6B@		; CDynamicPool<CLight>::`vftable'
PUBLIC	??_7CLightManager@@6BCGraphicBase@@@		; CLightManager::`vftable'
PUBLIC	??_7CLightManager@@6BCLightBase@@@		; CLightManager::`vftable'
PUBLIC	??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CLightBase@@6B@				; CLightBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLightBase@@@8				; CLightBase `RTTI Type Descriptor'
PUBLIC	??_R3CLightBase@@8				; CLightBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLightBase@@8				; CLightBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLightBase@@8			; CLightBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLight@@6BCGraphicBase@@@			; CLight::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLight@@@8				; CLight `RTTI Type Descriptor'
PUBLIC	??_R3CLight@@8					; CLight::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLight@@8					; CLight::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLight@@8				; CLight::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CLightBase@@8			; CLightBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R4CLight@@6BCLightBase@@@			; CLight::`RTTI Complete Object Locator'
PUBLIC	??_R4CLightManager@@6BCGraphicBase@@@		; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLightManager@@@8			; CLightManager `RTTI Type Descriptor'
PUBLIC	??_R3CLightManager@@8				; CLightManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLightManager@@8				; CLightManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLightManager@@8			; CLightManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8	; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCLightManager@@@@@8	; CSingleton<CLightManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCLightManager@@@@8		; CSingleton<CLightManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCLightManager@@@@8		; CSingleton<CLightManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8	; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLightManager@@6BCLightBase@@@		; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CSingleton@VCLightManager@@@@6B@		; CSingleton<CLightManager>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CDynamicPool@VCLight@@@@6B@		; CDynamicPool<CLight>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCLight@@@@@8		; CDynamicPool<CLight> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCLight@@@@8		; CDynamicPool<CLight>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCLight@@@@8		; CDynamicPool<CLight>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8	; CDynamicPool<CLight>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	??_ECLightBase@@UAEPAXI@Z:PROC			; CLightBase::`vector deleting destructor'
EXTRN	??_ECLight@@UAEPAXI@Z:PROC			; CLight::`vector deleting destructor'
EXTRN	??_E?$CSingleton@VCLightManager@@@@UAEPAXI@Z:PROC ; CSingleton<CLightManager>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCLight@@@@UAEPAXI@Z:PROC	; CDynamicPool<CLight>::`vector deleting destructor'
EXTRN	??_ECLightManager@@UAEPAXI@Z:PROC		; CLightManager::`vector deleting destructor'
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A DD 01H DUP (?) ; CSingleton<CLightManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCLight@@@@@8 ; CDynamicPool<CLight>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCLight@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8 ; CDynamicPool<CLight>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCLight@@@@8 DD 00H			; CDynamicPool<CLight>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCLight@@@@@8
data$r	SEGMENT
??_R0?AV?$CDynamicPool@VCLight@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CLight> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCLight@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCLight@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCLight@@@@6B@ DD 00H		; CDynamicPool<CLight>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCLight@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CSingleton@VCLightManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCLightManager@@@@6B@ DD 00H		; CSingleton<CLightManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@
rdata$r	SEGMENT
??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ DD 00H ; CLightManager::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R4CLightManager@@6BCLightBase@@@
rdata$r	SEGMENT
??_R4CLightManager@@6BCLightBase@@@ DD 00H		; CLightManager::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCLightManager@@@@8 DD 00H		; CSingleton<CLightManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCLightManager@@@@@8
data$r	SEGMENT
??_R0?AV?$CSingleton@VCLightManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CLightManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCLightManager@@@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLightManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLightManager@@8 DD FLAT:??_R0?AVCLightManager@@@8 ; CLightManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CLightManager@@8
rdata$r	SEGMENT
??_R2CLightManager@@8 DD FLAT:??_R1A@?0A@EA@CLightManager@@8 ; CLightManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@CLightBase@@8
	DD	FLAT:??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CLightManager@@8
rdata$r	SEGMENT
??_R3CLightManager@@8 DD 00H				; CLightManager::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLightManager@@@8
data$r	SEGMENT
??_R0?AVCLightManager@@@8 DD FLAT:??_7type_info@@6B@	; CLightManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLightManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CLightManager@@6BCGraphicBase@@@
rdata$r	SEGMENT
??_R4CLightManager@@6BCGraphicBase@@@ DD 00H		; CLightManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R4CLight@@6BCLightBase@@@
rdata$r	SEGMENT
??_R4CLight@@6BCLightBase@@@ DD 00H			; CLight::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCLight@@@8
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@CLightBase@@8
rdata$r	SEGMENT
??_R13?0A@EA@CLightBase@@8 DD FLAT:??_R0?AVCLightBase@@@8 ; CLightBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLight@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLight@@8 DD FLAT:??_R0?AVCLight@@@8	; CLight::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R2CLight@@8
rdata$r	SEGMENT
??_R2CLight@@8 DD FLAT:??_R1A@?0A@EA@CLight@@8		; CLight::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CLight@@8
rdata$r	SEGMENT
??_R3CLight@@8 DD 00H					; CLight::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CLight@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLight@@@8
data$r	SEGMENT
??_R0?AVCLight@@@8 DD FLAT:??_7type_info@@6B@		; CLight `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLight@@', 00H
data$r	ENDS
;	COMDAT ??_R4CLight@@6BCGraphicBase@@@
rdata$r	SEGMENT
??_R4CLight@@6BCGraphicBase@@@ DD 00H			; CLight::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLight@@@8
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLightBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLightBase@@8 DD FLAT:??_R0?AVCLightBase@@@8 ; CLightBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CLightBase@@8
rdata$r	SEGMENT
??_R2CLightBase@@8 DD FLAT:??_R1A@?0A@EA@CLightBase@@8	; CLightBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CLightBase@@8
rdata$r	SEGMENT
??_R3CLightBase@@8 DD 00H				; CLightBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLightBase@@@8
data$r	SEGMENT
??_R0?AVCLightBase@@@8 DD FLAT:??_7type_info@@6B@	; CLightBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLightBase@@', 00H
data$r	ENDS
;	COMDAT ??_R4CLightBase@@6B@
rdata$r	SEGMENT
??_R4CLightBase@@6B@ DD 00H				; CLightBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLightBase@@@8
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
CONST	SEGMENT
??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@ DD FLAT:??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@W7AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightManager@@6BCLightBase@@@
CONST	SEGMENT
??_7CLightManager@@6BCLightBase@@@ DD FLAT:??_R4CLightManager@@6BCLightBase@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightManager@@6BCGraphicBase@@@
CONST	SEGMENT
??_7CLightManager@@6BCGraphicBase@@@ DD FLAT:??_R4CLightManager@@6BCGraphicBase@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCLight@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCLight@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCLight@@@@6B@ ; CDynamicPool<CLight>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCLight@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCLightManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCLightManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCLightManager@@@@6B@ ; CSingleton<CLightManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCLightManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLight@@6BCLightBase@@@
CONST	SEGMENT
??_7CLight@@6BCLightBase@@@ DD FLAT:??_R4CLight@@6BCLightBase@@@ ; CLight::`vftable'
	DD	FLAT:??_ECLight@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLight@@6BCGraphicBase@@@
CONST	SEGMENT
??_7CLight@@6BCGraphicBase@@@ DD FLAT:??_R4CLight@@6BCGraphicBase@@@ ; CLight::`vftable'
	DD	FLAT:??_ECLight@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightBase@@6B@
CONST	SEGMENT
??_7CLightBase@@6B@ DD FLAT:??_R4CLightBase@@6B@	; CLightBase::`vftable'
	DD	FLAT:??_ECLightBase@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z$0
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z$2
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z$0
__unwindtable$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z$2
__ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLightManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$3
__ehfuncinfo$??0CLightManager@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CLightManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CLight@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CLight@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CLight@@UAE@XZ$1
__ehfuncinfo$??1CLight@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CLight@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLightManager@@W7AEPAXI@Z
_TEXT	SEGMENT
??_ECLightManager@@W7AEPAXI@Z PROC			; [thunk]:CLightManager::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_ECLightManager@@UAEPAXI@Z
??_ECLightManager@@W7AEPAXI@Z ENDP			; [thunk]:CLightManager::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLightManager@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECLightManager@@W3AEPAXI@Z PROC			; [thunk]:CLightManager::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECLightManager@@UAEPAXI@Z
??_ECLightManager@@W3AEPAXI@Z ENDP			; [thunk]:CLightManager::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLight@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECLight@@W3AEPAXI@Z PROC				; [thunk]:CLight::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECLight@@UAEPAXI@Z
??_ECLight@@W3AEPAXI@Z ENDP				; [thunk]:CLight::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
;	COMDAT ??$get@$0A@ABK@std@@YAABK$$QAV?$tuple@ABK@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$get@$0A@ABK@std@@YAABK$$QAV?$tuple@ABK@0@@Z PROC	; std::get<0,unsigned long const &>, COMDAT

; 596  : 	{	// get rvalue reference to _Index element of tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 598  : 		_Ttype;
; 599  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_RRtype
; 600  : 		_RRtype;
; 601  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Tuple$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 602  : 	}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
??$get@$0A@ABK@std@@YAABK$$QAV?$tuple@ABK@0@@Z ENDP	; std::get<0,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z PROC ; std::move<std::tuple<unsigned long const &> &>, COMDAT

; 1519 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1520 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1521 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ENDP ; std::move<std::tuple<unsigned long const &> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
;	COMDAT ??$?0V?$tuple@ABK@std@@V?$tuple@$$$V@1@$0A@$S@?$pair@$$CBKPAVCLight@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$$V@1@U?$_Arg_idx@$0A@@1@U?$_Arg_idx@$S@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABK@std@@V?$tuple@$$$V@1@$0A@$S@?$pair@$$CBKPAVCLight@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$$V@1@U?$_Arg_idx@$0A@@1@U?$_Arg_idx@$S@1@@Z PROC ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><std::tuple<unsigned long const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 746  : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple

; 746  : 		{	// construct from pair of tuples

  00008	8b 00		 mov	 eax, DWORD PTR [eax]
  0000a	89 01		 mov	 DWORD PTR [ecx], eax

; 747  : 		}

  0000c	8b c1		 mov	 eax, ecx
  0000e	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00015	5d		 pop	 ebp
  00016	c2 10 00	 ret	 16			; 00000010H
??$?0V?$tuple@ABK@std@@V?$tuple@$$$V@1@$0A@$S@?$pair@$$CBKPAVCLight@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$$V@1@U?$_Arg_idx@$0A@@1@U?$_Arg_idx@$S@1@@Z ENDP ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><std::tuple<unsigned long const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@00$$QAPAV1@ULightComp@@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Pop_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@00$$QAPAV1@ULightComp@@PAH@Z PROC ; std::_Pop_heap<CLight * *,int,CLight *,LightComp>, COMDAT

; 2394 : 	{	// pop *_First to *_Dest and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2395 : 	*_Dest = _Move(*_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2396 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2397 : 		_Move(_Val), _Pred);

  00009	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  0000c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0000e	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00016	2b c2		 sub	 eax, edx
  00018	c1 f8 02	 sar	 eax, 2
  0001b	50		 push	 eax
  0001c	6a 00		 push	 0
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Adjust_heap<CLight * *,int,CLight *,LightComp>
  00024	83 c4 14	 add	 esp, 20			; 00000014H

; 2398 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Pop_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@00$$QAPAV1@ULightComp@@PAH@Z ENDP ; std::_Pop_heap<CLight * *,int,CLight *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
;	COMDAT ??$?0ABK$$$V@?$pair@$$CBKPAVCLight@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$$V@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABK$$$V@?$pair@$$CBKPAVCLight@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$$V@1@@Z PROC ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><unsigned long const &>, COMDAT
; _this$ = ecx

; 762  : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 746  : 		{	// construct from pair of tuples

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 763  : 		}

  0000a	8b c1		 mov	 eax, ecx

; 746  : 		{	// construct from pair of tuples

  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 763  : 		}

  00013	5d		 pop	 ebp
  00014	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABK$$$V@?$pair@$$CBKPAVCLight@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$$V@1@@Z ENDP ; std::pair<unsigned long const ,CLight *>::pair<unsigned long const ,CLight *><unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<CLight * *,CLight * *>, COMDAT

; 2535 : 	{	// move [_First, _Last) backwards to [..., _Dest), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2536 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 2537 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2538 : 		_Count * sizeof (*_First));

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000d	2b c8		 sub	 ecx, eax
  0000f	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00012	51		 push	 ecx
  00013	2b f1		 sub	 esi, ecx
  00015	50		 push	 eax
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _memmove
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2539 : 	return (_Dest - _Count);

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi

; 2540 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move_backward@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap_0@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Val$ = 12						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@0@Z PROC ; std::_Pop_heap_0<CLight * *,CLight *,LightComp>, COMDAT

; 2404 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2405 : 	_Ty _Val = _Move(*(_Last - 1));

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]

; 2395 : 	*_Dest = _Move(*_First);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 2396 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2397 : 		_Move(_Val), _Pred);

  00009	ff 75 10	 push	 DWORD PTR __Pred$[ebp]

; 2405 : 	_Ty _Val = _Move(*(_Last - 1));

  0000c	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  0000f	89 45 0c	 mov	 DWORD PTR __Val$[ebp], eax

; 2395 : 	*_Dest = _Move(*_First);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	89 42 fc	 mov	 DWORD PTR [edx-4], eax

; 2396 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2397 : 		_Move(_Val), _Pred);

  00017	2b d1		 sub	 edx, ecx
  00019	8d 45 0c	 lea	 eax, DWORD PTR __Val$[ebp]
  0001c	83 ea 04	 sub	 edx, 4
  0001f	50		 push	 eax
  00020	c1 fa 02	 sar	 edx, 2
  00023	52		 push	 edx
  00024	6a 00		 push	 0
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Adjust_heap<CLight * *,int,CLight *,LightComp>
  0002c	83 c4 14	 add	 esp, 20			; 00000014H

; 2406 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2407 : 		_Move(_Val), _Pred, _Dist_type(_First));
; 2408 : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Pop_heap_0@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@0@Z ENDP ; std::_Pop_heap_0<CLight * *,CLight *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z PROC ; std::_Push_heap<CLight * *,int,CLight *,LightComp>, COMDAT

; 2313 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2314 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Hole$[ebp]
  00007	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0000a	99		 cdq
  0000b	2b c2		 sub	 eax, edx
  0000d	8b c8		 mov	 ecx, eax
  0000f	d1 f9		 sar	 ecx, 1

; 2316 : 		_Idx = (_Hole - 1) / 2)

  00011	39 75 10	 cmp	 DWORD PTR __Top$[ebp], esi
  00014	7d 38		 jge	 SHORT $LN20@Push_heap
  00016	53		 push	 ebx
  00017	8b 5d 14	 mov	 ebx, DWORD PTR __Val$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0001e	8b ff		 npad	 2
$LL3@Push_heap:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00020	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00022	8b 14 8f	 mov	 edx, DWORD PTR [edi+ecx*4]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00025	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0002a	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 2316 : 		_Idx = (_Hole - 1) / 2)

  0002e	76 16		 jbe	 SHORT $LN21@Push_heap
  00030	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]

; 2317 : 		{	// move _Hole up to parent
; 2318 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00033	89 14 b7	 mov	 DWORD PTR [edi+esi*4], edx
  00036	99		 cdq

; 2319 : 		_Hole = _Idx;

  00037	8b f1		 mov	 esi, ecx
  00039	2b c2		 sub	 eax, edx
  0003b	8b c8		 mov	 ecx, eax
  0003d	d1 f9		 sar	 ecx, 1
  0003f	39 75 10	 cmp	 DWORD PTR __Top$[ebp], esi
  00042	7c dc		 jl	 SHORT $LL3@Push_heap

; 2320 : 		}
; 2321 : 
; 2322 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  00044	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN21@Push_heap:
  00046	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax
  00049	5f		 pop	 edi
  0004a	5b		 pop	 ebx
  0004b	5e		 pop	 esi

; 2323 : 	}

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN20@Push_heap:

; 2320 : 		}
; 2321 : 
; 2322 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  0004e	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00056	89 0c b0	 mov	 DWORD PTR [eax+esi*4], ecx
  00059	5e		 pop	 esi

; 2323 : 	}

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??$_Push_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ENDP ; std::_Push_heap<CLight * *,int,CLight *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > > &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > > >, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
_<_Args_2>$ = 20					; size = 4
??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::construct<std::pair<unsigned long const ,CLight *>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 10		 je	 SHORT $LN3@construct
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple

; 80   : 		{	// construct with argument

  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]

; 81   : 		}
; 82   : 
; 83   : 	template<class _Other>
; 84   : 		_Tuple_val& operator=(_Other&& _Right)
; 85   : 		{	// assign
; 86   : 		_Val = _STD forward<_Other>(_Right);
; 87   : 		return (*this);
; 88   : 		}
; 89   : 
; 90   : 	template<class _Alloc,
; 91   : 		class... _Other>
; 92   : 		_Tuple_val(const _Alloc&,
; 93   : 			typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
; 94   : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 95   : 		: _Val(_STD forward<_Other>(_Arg)...)
; 96   : 		{	// construct with optional arguments, no allocator
; 97   : 		}
; 98   : 
; 99   : 	template<class _Alloc,
; 100  : 		class... _Other>
; 101  : 		_Tuple_val(const _Alloc& _Al,
; 102  : 			typename enable_if<uses_allocator<_Ty, _Alloc>::value
; 103  : 				&& is_constructible<_Ty,
; 104  : 					allocator_arg_t, _Alloc>::value,
; 105  : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 106  : 		: _Val(allocator_arg, _Al, _STD forward<_Other>(_Arg)...)
; 107  : 		{	// construct with optional arguments, leading allocator
; 108  : 		}
; 109  : 
; 110  : 	template<class _Alloc,
; 111  : 		class... _Other>
; 112  : 		_Tuple_val(const _Alloc& _Al,
; 113  : 			typename enable_if<uses_allocator<_Ty, _Alloc>::value
; 114  : 				&& !is_constructible<_Ty,
; 115  : 					allocator_arg_t, _Alloc>::value,
; 116  : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 117  : 		: _Val(_STD forward<_Other>(_Arg)..., _Al)
; 118  : 		{	// construct with optional arguments, trailing allocator
; 119  : 		}
; 120  : 
; 121  : 
; 122  : 	_Ty _Val;
; 123  : 	};
; 124  : 
; 125  : 	// CLASS tuple
; 126  : template<class... _Types>
; 127  : 	class tuple;
; 128  : 
; 129  : template<>
; 130  : 	class tuple<>
; 131  : 	{	// empty tuple
; 132  : public:
; 133  : 	typedef tuple<> _Myt;
; 134  : 
; 135  : 	tuple()
; 136  : 		{	// default construct
; 137  : 		}
; 138  : 
; 139  : 	template<class _Alloc>
; 140  : 		tuple(allocator_arg_t, const _Alloc&) _NOEXCEPT
; 141  : 		{	// default construct, allocator
; 142  : 		}
; 143  : 
; 144  : 	tuple(const tuple&) _NOEXCEPT
; 145  : 		{	// copy construct
; 146  : 		}
; 147  : 
; 148  : 	template<class _Alloc>
; 149  : 		tuple(allocator_arg_t, const _Alloc&, const tuple&) _NOEXCEPT
; 150  : 		{	// copy construct, allocator
; 151  : 		}
; 152  : 
; 153  : 	void swap(_Myt&) _NOEXCEPT
; 154  : 		{	// swap elements
; 155  : 		}
; 156  : 
; 157  : 	bool _Equals(const _Myt&) const _NOEXCEPT
; 158  : 		{	// test if *this == _Right
; 159  : 		return (true);
; 160  : 		}
; 161  : 
; 162  : 	bool _Less(const _Myt&) const _NOEXCEPT
; 163  : 		{	// test if *this < _Right
; 164  : 		return (false);
; 165  : 		}
; 166  : 	};
; 167  : 
; 168  : template<class _This,
; 169  : 	class... _Rest>
; 170  : 	class tuple<_This, _Rest...>
; 171  : 		: private tuple<_Rest...>
; 172  : 	{	// recursive tuple definition
; 173  : public:
; 174  : 	typedef _This _This_type;
; 175  : 	typedef tuple<_This, _Rest...> _Myt;
; 176  : 	typedef tuple<_Rest...> _Mybase;
; 177  : 	static const size_t _Mysize = 1 + sizeof...(_Rest);
; 178  : 
; 179  : 	tuple()
; 180  : 		: _Mybase(),
; 181  : 			_Myfirst()
; 182  : 		{	// construct default
; 183  : 		}
; 184  : 
; 185  : 	template<class... _Rest2>
; 186  : 		explicit tuple(_Tuple_alloc_t, _Rest2&&... _Rest_arg)
; 187  : 			: _Mybase(_STD forward<_Rest2>(_Rest_arg)...),
; 188  : 				_Myfirst(allocator_arg)
; 189  : 		{	// construct smuggled allocator_arg_t element
; 190  : 		}
; 191  : 
; 192  : 	template<class... _Other,
; 193  : 		class = typename _Tuple_enable<
; 194  : 			tuple<const _Other&...>, _Myt>::type>
; 195  : 		tuple(const tuple<_Other...>& _Right)
; 196  : 		: _Mybase(_Right._Get_rest()), _Myfirst(_Right._Myfirst._Val)
; 197  : 		{	// construct by copying same size tuple
; 198  : 		}
; 199  : 
; 200  : 	template<class _Alloc,
; 201  : 		class... _Other,
; 202  : 		class = typename _Tuple_enable<
; 203  : 			tuple<const _Other&...>, _Myt>::type>
; 204  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 205  : 			const tuple<_Other...>& _Right)
; 206  : 		: _Mybase(allocator_arg, _Al, _Right._Get_rest()),
; 207  : 			_Myfirst(_Al, _Tuple_alloc,
; 208  : 				_Right._Myfirst._Val)
; 209  : 		{	// construct by copying same size tuple, allocator
; 210  : 		}
; 211  : 
; 212  : 	explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)
; 213  : 		: _Mybase(_Rest_arg...),
; 214  : 			_Myfirst(_This_arg)
; 215  : 		{	// construct from one or more copied elements
; 216  : 		}
; 217  : 
; 218  : 	template<class _Alloc>
; 219  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 220  : 			const _This& _This_arg, const _Rest&... _Rest_arg)
; 221  : 		: _Mybase(allocator_arg, _Al, _Rest_arg...),
; 222  : 			_Myfirst(_Al, _Tuple_alloc, _This_arg)
; 223  : 		{	// construct from one or more copied elements, allocator
; 224  : 		}
; 225  : 
; 226  : 	template<class _This2,
; 227  : 		class... _Rest2,
; 228  : 		class = typename _Tuple_enable<
; 229  : 			tuple<_This2, _Rest2...>, _Myt>::type>
; 230  : 		explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
; 231  : 		: _Mybase(_STD forward<_Rest2>(_Rest_arg)...),
; 232  : 			_Myfirst(_STD forward<_This2>(_This_arg))
; 233  : 		{	// construct from one or more moved elements
; 234  : 		}
; 235  : 
; 236  : 	template<class _Alloc,
; 237  : 		class _This2,
; 238  : 		class... _Rest2,
; 239  : 		class = typename _Tuple_enable<
; 240  : 			tuple<_This2, _Rest2...>, _Myt>::type>
; 241  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 242  : 			_This2&& _This_arg, _Rest2&&... _Rest_arg)
; 243  : 		: _Mybase(allocator_arg, _Al,
; 244  : 				_STD forward<_Rest2>(_Rest_arg)...),
; 245  : 			_Myfirst(_Al, _Tuple_alloc,
; 246  : 				_STD forward<_This2>(_This_arg))
; 247  : 		{	// construct from one or more moved elements, allocator
; 248  : 		}
; 249  : 
; 250  : 	template<class... _Other,
; 251  : 		class = typename _Tuple_enable<
; 252  : 			tuple<_Other...>, _Myt>::type>
; 253  : 		tuple(tuple<_Other...>&& _Right)
; 254  : 		: _Mybase(_STD forward<typename tuple<_Other...>::_Mybase>
; 255  : 			(_Right._Get_rest())),
; 256  : 			_Myfirst(_STD forward<typename tuple<_Other...>::_This_type>
; 257  : 				(_Right._Myfirst._Val))
; 258  : 		{	// construct by moving same size tuple
; 259  : 		}
; 260  : 
; 261  : 	template<class _Alloc,
; 262  : 		class... _Other,
; 263  : 		class = typename _Tuple_enable<
; 264  : 			tuple<_Other...>, _Myt>::type>
; 265  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 266  : 			tuple<_Other...>&& _Right)
; 267  : 		: _Mybase(allocator_arg, _Al,
; 268  : 				_STD forward<typename tuple<_Other...>::_Mybase>
; 269  : 					(_Right._Get_rest())),
; 270  : 			_Myfirst(_Al, _Tuple_alloc,
; 271  : 				_STD forward<typename tuple<_Other...>::_This_type>
; 272  : 					(_Right._Myfirst._Val))
; 273  : 		{	// construct by moving same size tuple, allocator
; 274  : 		}
; 275  : 
; 276  : 	template<class... _Other>
; 277  : 		_Myt& operator=(const tuple<_Other...>& _Right)
; 278  : 		{	// assign by copying same size tuple
; 279  : 		_Myfirst._Val = _Right._Myfirst._Val;
; 280  : 		(_Mybase&)*this = _Right._Get_rest();
; 281  : 		return (*this);
; 282  : 		}
; 283  : 
; 284  : 	template<class... _Other>
; 285  : 		_Myt& operator=(tuple<_Other...>&& _Right)
; 286  : 		{	// assign by moving same size tuple
; 287  : 		_Myfirst._Val = _STD forward<typename tuple<_Other...>::_This_type>
; 288  : 			(_Right._Myfirst._Val);
; 289  : 		(_Mybase&)*this = _STD forward<typename tuple<_Other...>::_Mybase>
; 290  : 			(_Right._Get_rest());
; 291  : 		return (*this);
; 292  : 		}
; 293  : 
; 294  : 	template<class... _Other>
; 295  : 		bool _Equals(const tuple<_Other...>& _Right) const
; 296  : 		{	// test if *this == _Right
; 297  : 		static_assert(_Mysize == sizeof...(_Other),
; 298  : 			"comparing tuple to object with different size");
; 299  : 		return (_Myfirst._Val == _Right._Myfirst._Val
; 300  : 			&& _Mybase::_Equals(_Right._Get_rest()));
; 301  : 		}
; 302  : 
; 303  : 	template<class... _Other>
; 304  : 		bool _Less(const tuple<_Other...>& _Right) const
; 305  : 		{	// test if *this < _Right
; 306  : 		static_assert(_Mysize == sizeof...(_Other),
; 307  : 			"comparing tuple to object with different size");
; 308  : 		return (_Myfirst._Val < _Right._Myfirst._Val
; 309  : 			|| (!(_Right._Myfirst._Val < _Myfirst._Val)
; 310  : 				&& _Mybase::_Less(_Right._Get_rest())));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc>
; 314  : 		tuple(allocator_arg_t, const _Alloc& _Al)
; 315  : 		: _Mybase(allocator_arg, _Al),
; 316  : 			_Myfirst(_Al, _Tuple_alloc)
; 317  : 		{	// construct default, allocator
; 318  : 		}
; 319  : 
; 320  : 	template<class _Alloc>
; 321  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 322  : 			const _Myt& _Right)
; 323  : 		: _Mybase(allocator_arg, _Al, _Right._Get_rest()),
; 324  : 			_Myfirst(_Al, _Tuple_alloc,
; 325  : 				_Right._Myfirst._Val)
; 326  : 		{	// construct by copying, allocator
; 327  : 		}
; 328  : 
; 329  : 	template<class _First,
; 330  : 		class _Second,
; 331  : 		class = typename _Tuple_enable<
; 332  : 			tuple<const _First&, const _Second&>, _Myt>::type>
; 333  : 		tuple(const pair<_First, _Second>& _Right)
; 334  : 
; 335  : 		: _Mybase(tuple<_Second>(_Right.second)),
; 336  : 			_Myfirst(_Right.first)
; 337  : 		{	// construct by copying pair
; 338  : 		// no static_assert necessary
; 339  : 		}
; 340  : 
; 341  : 	template<class _Alloc,
; 342  : 		class _First,
; 343  : 		class _Second,
; 344  : 		class = typename _Tuple_enable<
; 345  : 			tuple<const _First&, const _Second&>, _Myt>::type>
; 346  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 347  : 			const pair<_First, _Second>& _Right)
; 348  : 
; 349  : 		: _Mybase(allocator_arg, _Al, tuple<_Second>(_Right.second)),
; 350  : 			_Myfirst(_Al, _Tuple_alloc,
; 351  : 				_Right.first)
; 352  : 		{	// construct by copying pair, allocator
; 353  : 		// no static_assert necessary
; 354  : 		}
; 355  : 
; 356  : 	_Myt& operator=(const _Myt& _Right)
; 357  : 		{	// assign
; 358  : 		_Myfirst._Val = _Right._Myfirst._Val;
; 359  : 		(_Mybase&)*this = _Right._Get_rest();
; 360  : 		return (*this);
; 361  : 		}
; 362  : 
; 363  : 	template<class _First,
; 364  : 		class _Second>
; 365  : 		_Myt& operator=(const pair<_First, _Second>& _Right)
; 366  : 		{	// assign by copying pair
; 367  : 		static_assert(_Mysize == 2,
; 368  : 			"assigning to tuple from object with different size");
; 369  : 		_Myfirst._Val = _Right.first;
; 370  : 		(_Mybase&)*this = tuple<_Second>(_Right.second);
; 371  : 		return (*this);
; 372  : 		}
; 373  : 
; 374  : 	template<class _Alloc>
; 375  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 376  : 			_Myt&& _Right)
; 377  : 		: _Mybase(allocator_arg, _Al,
; 378  : 				_STD forward<_Mybase>(_Right._Get_rest())),
; 379  : 			_Myfirst(_Al, _Tuple_alloc,
; 380  : 				_STD forward<_This>(_Right._Myfirst._Val))
; 381  : 		{	// construct by moving, allocator
; 382  : 		}
; 383  : 
; 384  : 	template<class _First,
; 385  : 		class _Second,
; 386  : 		class = typename _Tuple_enable<
; 387  : 			tuple<_First, _Second>, _Myt>::type>
; 388  : 		tuple(pair<_First, _Second>&& _Right)
; 389  : 
; 390  : 		: _Mybase(tuple<_Second>(_STD forward<_Second>(_Right.second))),
; 391  : 			_Myfirst(_STD forward<_First>(_Right.first))
; 392  : 		{	// construct by moving pair
; 393  : 		// no static_assert necessary
; 394  : 		}
; 395  : 
; 396  : 	template<class _Alloc,
; 397  : 		class _First,
; 398  : 		class _Second,
; 399  : 		class = typename _Tuple_enable<
; 400  : 			tuple<_First, _Second>, _Myt>::type>
; 401  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 402  : 			pair<_First, _Second>&& _Right)
; 403  : 
; 404  : 		: _Mybase(allocator_arg, _Al,
; 405  : 				tuple<_Second>(_STD forward<_Second>(_Right.second))),
; 406  : 			_Myfirst(_Al, _Tuple_alloc,
; 407  : 				_STD forward<_First>(_Right.first))
; 408  : 		{	// construct by moving pair, allocator
; 409  : 		// no static_assert necessary
; 410  : 		}
; 411  : 
; 412  : 	_Myt& operator=(_Myt&& _Right)
; 413  : 		_NOEXCEPT_OP(is_nothrow_move_assignable<_This>::value
; 414  : 			&& is_nothrow_move_assignable<_Mybase>::value)
; 415  : 		{	// assign by moving
; 416  : 		_Myfirst = _STD forward<_This>(_Right._Myfirst._Val);
; 417  : 		(_Mybase&)*this = _STD forward<_Mybase>(_Right._Get_rest());
; 418  : 		return (*this);
; 419  : 		}
; 420  : 
; 421  : 	template<class _First,
; 422  : 		class _Second>
; 423  : 		_Myt& operator=(pair<_First, _Second>&& _Right)
; 424  : 		_NOEXCEPT_OP(
; 425  : 			_NOEXCEPT_OP(_Myfirst._Val = _STD forward<_First>(_Right.first))
; 426  : 			&& _NOEXCEPT_OP((_Mybase&)*this =
; 427  : 				tuple<_Second>(_STD forward<_Second>(_Right.second))))
; 428  : 		{	// assign by moving pair
; 429  : 		static_assert(_Mysize == 2,
; 430  : 			"assigning to tuple from object with different size");
; 431  : 		_Myfirst._Val = _STD forward<_First>(_Right.first);
; 432  : 		(_Mybase&)*this =
; 433  : 			tuple<_Second>(_STD forward<_Second>(_Right.second));
; 434  : 		return (*this);
; 435  : 		}
; 436  : 
; 437  : 	_Mybase& _Get_rest()
; 438  : 		{	// get reference to rest of elements
; 439  : 		return (*this);
; 440  : 		}
; 441  : 
; 442  : 	const _Mybase& _Get_rest() const
; 443  : 		{	// get const reference to rest of elements
; 444  : 		return (*this);
; 445  : 		}
; 446  : 
; 447  : 	void swap(tuple& _Right)
; 448  : 		_NOEXCEPT_OP(
; 449  : 			_NOEXCEPT_OP(_Swap_adl(_Myfirst._Val, _Myfirst._Val))
; 450  : 			&& _NOEXCEPT_OP(_Swap_adl((_Mybase&)_Right, (_Mybase&)_Right)))
; 451  : 		{	// swap *this and _Right
; 452  : 		_Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
; 453  : 		_Mybase::swap((_Mybase&)_Right);
; 454  : 		}
; 455  : 
; 456  : 	_Tuple_val<_This> _Myfirst;	// the stored element
; 457  : 	};
; 458  : 
; 459  : 
; 460  : 	// OPERATORS FOR tuple
; 461  : 
; 462  : template<class... _Types1,
; 463  : 	class... _Types2> inline
; 464  : 	bool operator==(const tuple<_Types1...>& _Left,
; 465  : 		const tuple<_Types2...>& _Right)
; 466  : 	{	// test if _Left == _Right
; 467  : 	return (_Left._Equals(_Right));
; 468  : 	}
; 469  : 
; 470  : template<class... _Types1,
; 471  : 	class... _Types2> inline
; 472  : 	bool operator!=(const tuple<_Types1...>& _Left,
; 473  : 		const tuple<_Types2...>& _Right)
; 474  : 	{	// test if _Left != _Right
; 475  : 	return (!(_Left == _Right));
; 476  : 	}
; 477  : 
; 478  : template<class... _Types1,
; 479  : 	class... _Types2> inline
; 480  : 	bool operator<(const tuple<_Types1...>& _Left,
; 481  : 		const tuple<_Types2...>& _Right)
; 482  : 	{	// test if _Left < _Right
; 483  : 	return (_Left._Less(_Right));
; 484  : 	}
; 485  : 
; 486  : template<class... _Types1,
; 487  : 	class... _Types2> inline
; 488  : 	bool operator>=(const tuple<_Types1...>& _Left,
; 489  : 		const tuple<_Types2...>& _Right)
; 490  : 	{	// test if _Left >= _Right
; 491  : 	return (!(_Left < _Right));
; 492  : 	}
; 493  : 
; 494  : template<class... _Types1,
; 495  : 	class... _Types2> inline
; 496  : 	bool operator>(const tuple<_Types1...>& _Left,
; 497  : 		const tuple<_Types2...>& _Right)
; 498  : 	{	// test if _Left > _Right
; 499  : 	return (_Right < _Left);
; 500  : 	}
; 501  : 
; 502  : template<class... _Types1,
; 503  : 	class... _Types2> inline
; 504  : 	bool operator<=(const tuple<_Types1...>& _Left,
; 505  : 		const tuple<_Types2...>& _Right)
; 506  : 	{	// test if _Left <= _Right
; 507  : 	return (!(_Right < _Left));
; 508  : 	}
; 509  : 
; 510  : template<class... _Types> inline
; 511  : 	void swap(tuple<_Types...>& _Left,
; 512  : 		tuple<_Types...>& _Right)
; 513  : 			_NOEXCEPT_OP(_NOEXCEPT_OP(_Left.swap(_Right)))
; 514  : 	{	// swap _Left and _Right
; 515  : 	return (_Left.swap(_Right));
; 516  : 	}
; 517  : 
; 518  : 
; 519  : 	// CLASS tuple_element
; 520  : template<size_t _Index,
; 521  : 	class _Tuple>
; 522  : 	struct tuple_element;
; 523  : 
; 524  : template<class _This,
; 525  : 	class... _Rest>
; 526  : 	struct tuple_element<0, tuple<_This, _Rest...> >
; 527  : 	{	// select first element
; 528  : 	typedef _This type;
; 529  : 	typedef typename add_lvalue_reference<const _This>::type _Ctype;
; 530  : 	typedef typename add_lvalue_reference<_This>::type _Rtype;
; 531  : 	typedef typename add_rvalue_reference<_This>::type _RRtype;
; 532  : 	typedef tuple<_This, _Rest...> _Ttype;
; 533  : 	};
; 534  : 
; 535  : template<size_t _Index,
; 536  : 	class _This,
; 537  : 	class... _Rest>
; 538  : 	struct tuple_element<_Index, tuple<_This, _Rest...> >
; 539  : 		: public tuple_element<_Index - 1, tuple<_Rest...> >
; 540  : 	{	// recursive tuple_element definition
; 541  : 	};
; 542  : 
; 543  : 
; 544  : template<size_t _Index,
; 545  : 	class _Tuple>
; 546  : 	struct tuple_element<_Index, const _Tuple>
; 547  : 	: public tuple_element<_Index, _Tuple>
; 548  : 	{	// tuple_element for const
; 549  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 550  : 	typedef typename add_const<typename _Mybase::type>::type type;
; 551  : 	};
; 552  : 
; 553  : template<size_t _Index,
; 554  : 	class _Tuple>
; 555  : 	struct tuple_element<_Index, volatile _Tuple>
; 556  : 	: public tuple_element<_Index, _Tuple>
; 557  : 	{	// tuple element for volatile
; 558  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 559  : 	typedef typename add_volatile<typename _Mybase::type>::type type;
; 560  : 	};
; 561  : 
; 562  : template<size_t _Index,
; 563  : 	class _Tuple>
; 564  : 	struct tuple_element<_Index, const volatile _Tuple>
; 565  : 	: public tuple_element<_Index, _Tuple>
; 566  : 	{	// tuple_element for const volatile
; 567  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 568  : 	typedef typename add_cv<typename _Mybase::type>::type type;
; 569  : 	};
; 570  : 
; 571  : 	// FUNCTION get
; 572  : template<size_t _Index,
; 573  : 	class... _Types> inline
; 574  : 	typename tuple_element<_Index, tuple<_Types...> >::_Rtype
; 575  : 		get(tuple<_Types...>& _Tuple)
; 576  : 	{	// get reference to _Index element of tuple
; 577  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 578  : 		_Ttype;
; 579  : 	return (((_Ttype&)_Tuple)._Myfirst._Val);
; 580  : 	}
; 581  : 
; 582  : template<size_t _Index,
; 583  : 	class... _Types> inline
; 584  : 	typename tuple_element<_Index, tuple<_Types...> >::_Ctype
; 585  : 		get(const tuple<_Types...>& _Tuple)
; 586  : 	{	// get const reference to _Index element of tuple
; 587  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 588  : 		_Ttype;
; 589  : 	return (((_Ttype&)_Tuple)._Myfirst._Val);
; 590  : 	}
; 591  : 
; 592  : template<size_t _Index,
; 593  : 	class... _Types> inline
; 594  : 	typename tuple_element<_Index, tuple<_Types...> >::_RRtype
; 595  : 		get(tuple<_Types...>&& _Tuple)
; 596  : 	{	// get rvalue reference to _Index element of tuple
; 597  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 598  : 		_Ttype;
; 599  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_RRtype
; 600  : 		_RRtype;
; 601  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
; 602  : 	}
; 603  : 
; 604  : 	// FUNCTION make_tuple
; 605  : template<class... _Types> inline
; 606  : 	tuple<typename _Unrefwrap<_Types>::type...>
; 607  : 		make_tuple(_Types&&... _Args)
; 608  : 	{	// make tuple from elements
; 609  : 	typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
; 610  : 	return (_Ttype(_STD forward<_Types>(_Args)...));
; 611  : 	}
; 612  : 
; 613  : 	// FUNCTION tie
; 614  : template<class... _Types> inline
; 615  : 	tuple<_Types&...>
; 616  : 		tie(_Types&... _Args) _NOEXCEPT
; 617  : 	{	// make tuple from elements
; 618  : 	typedef tuple<_Types&...> _Ttype;
; 619  : 	return (_Ttype(_Args...));
; 620  : 	}
; 621  : 
; 622  : 
; 623  : 	// TEMPLATE FUNCTION forward_as_tuple
; 624  : 
; 625  : template<class... _Types> inline
; 626  : 	tuple<_Types&&...>
; 627  : 		forward_as_tuple(_Types&&... _Args) _NOEXCEPT
; 628  : 	{	// forward arguments in a tuple
; 629  : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));
; 630  : 	}
; 631  : 
; 632  : 
; 633  : 	// TEMPLATE STRUCT _Make_arg_idx AND HELPERS
; 634  : template<class _Arg_idx_type,
; 635  : 	class... _Types>
; 636  : 	struct _Make_arg_idx1
; 637  : 	{	// ends recursion and defines type
; 638  : 	typedef _Arg_idx_type type;
; 639  : 	};
; 640  : 
; 641  : template<size_t... _Indexes,
; 642  : 	class _Ty,
; 643  : 	class... _Types>
; 644  : 	struct _Make_arg_idx1<_Arg_idx<_Indexes...>, _Ty, _Types...>
; 645  : 		: _Make_arg_idx1<_Arg_idx<sizeof...(_Types), _Indexes...>, _Types...>
; 646  : 	{	// counts a type and recurses
; 647  : 	};
; 648  : 
; 649  : template<class... _Types>
; 650  : 	struct _Make_arg_idx
; 651  : 		: _Make_arg_idx1<_Arg_idx<>, _Types...>
; 652  : 	{	// defines type as _Arg_idx<0, 1, 2... (sizeof...(_Types))-1>
; 653  : 	};
; 654  : 
; 655  : template<class _Arg_idx_type1,
; 656  : 	class _Arg_idx_type2>
; 657  : 	struct _Cat_arg_idx;
; 658  : 
; 659  : template<size_t... _Indexes1,
; 660  : 	size_t... _Indexes2>
; 661  : 	struct _Cat_arg_idx<_Arg_idx<_Indexes1...>, _Arg_idx<_Indexes2...> >
; 662  : 	{	// concatenates two _Arg_idx types
; 663  : 	typedef _Arg_idx<_Indexes1..., _Indexes2...> type;
; 664  : 	};
; 665  : 
; 666  : template<size_t _Nx,
; 667  : 	class _Ty>
; 668  : 	struct _Repeat_for
; 669  : 		: integral_constant<size_t, _Nx>
; 670  : 	{	// repeats _Nx for each _Ty in a parameter pack
; 671  : 	};
; 672  : 
; 673  : 	// FUNCTION tuple_cat
; 674  : template<class _Ret,
; 675  : 	class _Kx_arg,
; 676  : 	class _Ix_arg,
; 677  : 	size_t _Ix_next,
; 678  : 	class... _Tuples>
; 679  : 	struct _Tuple_cat2
; 680  : 	{	// determine tuple_cat's return type and _Kx/_Ix indices
; 681  : 	static_assert(sizeof...(_Tuples) == 0,
; 682  : 		"Unsupported tuple_cat arguments.");
; 683  : 	typedef _Ret type;
; 684  : 	typedef _Kx_arg _Kx_arg_idx;
; 685  : 	typedef _Ix_arg _Ix_arg_idx;
; 686  : 	};
; 687  : 
; 688  : template<class... _Types1,
; 689  : 	class _Kx_arg,
; 690  : 	size_t... _Ix,
; 691  : 	size_t _Ix_next,
; 692  : 	class... _Types2,
; 693  : 	class... _Rest>
; 694  : 	struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg, _Arg_idx<_Ix...>, _Ix_next,
; 695  : 		tuple<_Types2...>, _Rest...>
; 696  : 		: _Tuple_cat2<
; 697  : 			tuple<_Types1..., _Types2...>,
; 698  : 			typename _Cat_arg_idx<_Kx_arg,
; 699  : 				typename _Make_arg_idx<_Types2...>::type>::type,
; 700  : 			_Arg_idx<_Ix..., _Repeat_for<_Ix_next, _Types2>::value...>,
; 701  : 			_Ix_next + 1,
; 702  : 			_Rest...>
; 703  : 	{	// determine tuple_cat's return type and _Kx/_Ix indices
; 704  : 	};
; 705  : 
; 706  : template<class... _Tuples>
; 707  : 	struct _Tuple_cat1
; 708  : 		: _Tuple_cat2<tuple<>, _Arg_idx<>, _Arg_idx<>, 0,
; 709  : 			typename decay<_Tuples>::type...>
; 710  : 	{	// prepare to determine tuple_cat's return type and _Kx/_Ix indices
; 711  : 	};
; 712  : 
; 713  : template<class _Ret,
; 714  : 	size_t... _Kx,
; 715  : 	size_t... _Ix,
; 716  : 	class _Ty> inline
; 717  : 	_Ret _Tuple_cat(_Arg_idx<_Kx...>, _Arg_idx<_Ix...>, _Ty&& _Arg)
; 718  : 	{	// concatenate tuples
; 719  : 	return (_Ret(_STD get<_Kx>(_STD get<_Ix>(_STD forward<_Ty>(_Arg)))...));
; 720  : 	}
; 721  : 
; 722  : template<class... _Tuples> inline
; 723  : 	typename _Tuple_cat1<_Tuples...>::type
; 724  : 		tuple_cat(_Tuples&&... _Tpls)
; 725  : 	{	// concatenate tuples
; 726  : 	typedef _Tuple_cat1<_Tuples...> _Cat1;
; 727  : 	return (_Tuple_cat<typename _Cat1::type>(
; 728  : 		typename _Cat1::_Kx_arg_idx(), typename _Cat1::_Ix_arg_idx(),
; 729  : 		_STD forward_as_tuple(_STD forward<_Tuples>(_Tpls)...)));
; 730  : 	}
; 731  : 
; 732  : 
; 733  : 	// TEMPLATE CONSTRUCTOR pair::pair(tuple, tuple, _Arg_idx, _Arg_idx)
; 734  : template<class _Ty1,
; 735  : 	class _Ty2>
; 736  : 	template<class _Tuple1,
; 737  : 		class _Tuple2,
; 738  : 		size_t... _Indexes1,
; 739  : 		size_t... _Indexes2> inline
; 740  : 		pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
; 741  : 			_Tuple2& _Val2,
; 742  : 			_Arg_idx<_Indexes1...>,
; 743  : 			_Arg_idx<_Indexes2...>)
; 744  : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),
; 745  : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)
; 746  : 		{	// construct from pair of tuples

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	89 01		 mov	 DWORD PTR [ecx], eax
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 601  : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::construct<std::pair<unsigned long const ,CLight *>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z PROC ; std::_Move_backward<CLight * *,CLight * *>, COMDAT

; 2546 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2536 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 2537 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2538 : 		_Count * sizeof (*_First));

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000d	2b c8		 sub	 ecx, eax
  0000f	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00012	51		 push	 ecx
  00013	2b f1		 sub	 esi, ecx
  00015	50		 push	 eax
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _memmove
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2547 : 	return (_Move_backward(_First, _Last,
; 2548 : 		_Dest, _Ptr_cat(_First, _Dest)));

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi

; 2549 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move_backward@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ENDP ; std::_Move_backward<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Val$1 = 12						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z PROC ; std::_Pop_heap<CLight * *,LightComp>, COMDAT

; 2413 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2398 : 	}
; 2399 : 
; 2400 : template<class _RanIt,
; 2401 : 	class _Ty,
; 2402 : 	class _Pr> inline
; 2403 : 	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
; 2404 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred
; 2405 : 	_Ty _Val = _Move(*(_Last - 1));

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]

; 2395 : 	*_Dest = _Move(*_First);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 2396 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2397 : 		_Move(_Val), _Pred);

  00009	ff 75 10	 push	 DWORD PTR __Pred$[ebp]

; 2398 : 	}
; 2399 : 
; 2400 : template<class _RanIt,
; 2401 : 	class _Ty,
; 2402 : 	class _Pr> inline
; 2403 : 	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
; 2404 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred
; 2405 : 	_Ty _Val = _Move(*(_Last - 1));

  0000c	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  0000f	89 45 0c	 mov	 DWORD PTR __Val$1[ebp], eax

; 2395 : 	*_Dest = _Move(*_First);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	89 42 fc	 mov	 DWORD PTR [edx-4], eax

; 2396 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2397 : 		_Move(_Val), _Pred);

  00017	2b d1		 sub	 edx, ecx
  00019	8d 45 0c	 lea	 eax, DWORD PTR __Val$1[ebp]
  0001c	83 ea 04	 sub	 edx, 4
  0001f	50		 push	 eax
  00020	c1 fa 02	 sar	 edx, 2
  00023	52		 push	 edx
  00024	6a 00		 push	 0
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Adjust_heap<CLight * *,int,CLight *,LightComp>
  0002c	83 c4 14	 add	 esp, 20			; 00000014H

; 2414 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2415 : 		_Val_type(_First));
; 2416 : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Pop_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ENDP ; std::_Pop_heap<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Adjust_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Top$1$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Adjust_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z PROC ; std::_Adjust_heap<CLight * *,int,CLight *,LightComp>, COMDAT

; 2368 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2369 : 	_Diff _Top = _Hole;
; 2370 : 	_Diff _Idx = 2 * _Hole + 2;
; 2371 : 
; 2372 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Bottom$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  0000f	8b cf		 mov	 ecx, edi
  00011	89 4d 0c	 mov	 DWORD PTR __Top$1$[ebp], ecx
  00014	8d 14 7d 02 00
	00 00		 lea	 edx, DWORD PTR [edi*2+2]
  0001b	3b d3		 cmp	 edx, ebx
  0001d	7d 2a		 jge	 SHORT $LN24@Adjust_hea
  0001f	90		 npad	 1
$LL5@Adjust_hea:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00020	8b 44 96 fc	 mov	 eax, DWORD PTR [esi+edx*4-4]
  00024	8b 0c 96	 mov	 ecx, DWORD PTR [esi+edx*4]
  00027	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0002c	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 2374 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00030	76 01		 jbe	 SHORT $LN2@Adjust_hea

; 2375 : 			--_Idx;

  00032	4a		 dec	 edx
$LN2@Adjust_hea:

; 2376 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00033	8b 04 96	 mov	 eax, DWORD PTR [esi+edx*4]
  00036	89 04 be	 mov	 DWORD PTR [esi+edi*4], eax

; 2377 : 		_Hole = _Idx;

  00039	8b fa		 mov	 edi, edx
  0003b	8d 14 55 02 00
	00 00		 lea	 edx, DWORD PTR [edx*2+2]
  00042	3b d3		 cmp	 edx, ebx
  00044	7c da		 jl	 SHORT $LL5@Adjust_hea
  00046	8b 4d 0c	 mov	 ecx, DWORD PTR __Top$1$[ebp]
$LN24@Adjust_hea:

; 2378 : 		}
; 2379 : 
; 2380 : 	if (_Idx == _Bottom)

  00049	75 0a		 jne	 SHORT $LN1@Adjust_hea

; 2381 : 		{	// only child at bottom, move _Hole down to it
; 2382 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  0004b	8b 44 9e fc	 mov	 eax, DWORD PTR [esi+ebx*4-4]
  0004f	89 04 be	 mov	 DWORD PTR [esi+edi*4], eax

; 2383 : 		_Hole = _Bottom - 1;

  00052	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
$LN1@Adjust_hea:

; 2384 : 		}
; 2385 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  00055	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  00058	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  0005b	51		 push	 ecx
  0005c	57		 push	 edi
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??$_Push_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Push_heap<CLight * *,int,CLight *,LightComp>
  00063	83 c4 14	 add	 esp, 20			; 00000014H
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx

; 2386 : 	}

  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
??$_Adjust_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ENDP ; std::_Adjust_heap<CLight * *,int,CLight *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$_Move@AAPAVCLight@@@std@@YA$$QAPAVCLight@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAVCLight@@@std@@YA$$QAPAVCLight@@AAPAV1@@Z PROC ; std::_Move<CLight * &>, COMDAT

; 1527 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1528 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1529 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAPAVCLight@@@std@@YA$$QAPAVCLight@@AAPAV1@@Z ENDP ; std::_Move<CLight * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAPAVCLight@@@std@@YAAAPAPAVCLight@@AAPAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAPAVCLight@@@std@@YAAAPAPAVCLight@@AAPAPAV1@@Z PROC ; std::forward<CLight * * &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAPAVCLight@@@std@@YAAAPAPAVCLight@@AAPAPAV1@@Z ENDP ; std::forward<CLight * * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
;	COMDAT ??$swap@PAVCLight@@@std@@YAXAAPAVCLight@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAVCLight@@@std@@YAXAAPAVCLight@@0@Z PROC	; std::swap<CLight *>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi
  0000a	8b 32		 mov	 esi, DWORD PTR [edx]
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@PAVCLight@@@std@@YAXAAPAVCLight@@0@Z ENDP	; std::swap<CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z PROC ; std::_Med3<CLight * *,LightComp>, COMDAT

; 3032 : 	{	// sort median of three elements to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 31		 mov	 esi, DWORD PTR [ecx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0000f	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00014	0f 2f 46 78	 comiss	 xmm0, DWORD PTR [esi+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3033 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00018	76 04		 jbe	 SHORT $LN14@Med3
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0001a	89 01		 mov	 DWORD PTR [ecx], eax

; 54   : 	_Right = _Move(_Tmp);

  0001c	89 32		 mov	 DWORD PTR [edx], esi
$LN14@Med3:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  0001e	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00023	8b 37		 mov	 esi, DWORD PTR [edi]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00025	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0002a	0f 2f 46 78	 comiss	 xmm0, DWORD PTR [esi+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3035 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  0002e	76 15		 jbe	 SHORT $LN46@Med3
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00030	89 07		 mov	 DWORD PTR [edi], eax

; 54   : 	_Right = _Move(_Tmp);

  00032	89 31		 mov	 DWORD PTR [ecx], esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00034	8b 02		 mov	 eax, DWORD PTR [edx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00036	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0003b	0f 2f 46 78	 comiss	 xmm0, DWORD PTR [esi+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3038 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0003f	76 04		 jbe	 SHORT $LN46@Med3
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00041	89 01		 mov	 DWORD PTR [ecx], eax

; 54   : 	_Right = _Move(_Tmp);

  00043	89 32		 mov	 DWORD PTR [edx], esi
$LN46@Med3:
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3041 : 	}

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??$_Med3@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ENDP ; std::_Med3<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCLight@@PAV1@PAV1@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCLight@@PAV1@PAV1@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CLight *,CLight *,CLight *>, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	_DEBUG_RANGE(_First, _Last);
; 471  : 	_DEBUG_POINTER(_Dest);
; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 475  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAVCLight@@PAV1@PAV1@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CLight *,CLight *,CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PAVCLight@@PAV1@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAVCLight@@PAV1@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CLight *,CLight *>, COMDAT

; 401  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 402  : 	_DEBUG_RANGE(_First, _Last);
; 403  : 	_DEBUG_POINTER(_Dest);
; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 407  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_copy@PAVCLight@@PAV1@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CLight *,CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > > &,bool,void>, COMDAT
; _this$ = ecx

; 144  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 145  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > > &,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool,void>, COMDAT
; _this$ = ecx

; 144  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 145  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@AAU?$pair@$$CBKPAVCLight@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PAU21@AAU?$pair@$$CBKPAVCLight@@@1@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Buynode_if_nil@AAU?$pair@$$CBKPAVCLight@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PAU21@AAU?$pair@$$CBKPAVCLight@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Buynode_if_nil<std::pair<unsigned long const ,CLight *> &>, COMDAT
; _this$ = ecx

; 1636 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1637 : 		{	// node exists, just return it
; 1638 : 		return (_Node);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 1639 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
??$_Buynode_if_nil@AAU?$pair@$$CBKPAVCLight@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PAU21@AAU?$pair@$$CBKPAVCLight@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Buynode_if_nil<std::pair<unsigned long const ,CLight *> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::pair<unsigned long const ,CLight *>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 10		 je	 SHORT $LN11@construct
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple

; 80   : 		{	// construct with argument

  0000a	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]

; 81   : 		}
; 82   : 
; 83   : 	template<class _Other>
; 84   : 		_Tuple_val& operator=(_Other&& _Right)
; 85   : 		{	// assign
; 86   : 		_Val = _STD forward<_Other>(_Right);
; 87   : 		return (*this);
; 88   : 		}
; 89   : 
; 90   : 	template<class _Alloc,
; 91   : 		class... _Other>
; 92   : 		_Tuple_val(const _Alloc&,
; 93   : 			typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
; 94   : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 95   : 		: _Val(_STD forward<_Other>(_Arg)...)
; 96   : 		{	// construct with optional arguments, no allocator
; 97   : 		}
; 98   : 
; 99   : 	template<class _Alloc,
; 100  : 		class... _Other>
; 101  : 		_Tuple_val(const _Alloc& _Al,
; 102  : 			typename enable_if<uses_allocator<_Ty, _Alloc>::value
; 103  : 				&& is_constructible<_Ty,
; 104  : 					allocator_arg_t, _Alloc>::value,
; 105  : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 106  : 		: _Val(allocator_arg, _Al, _STD forward<_Other>(_Arg)...)
; 107  : 		{	// construct with optional arguments, leading allocator
; 108  : 		}
; 109  : 
; 110  : 	template<class _Alloc,
; 111  : 		class... _Other>
; 112  : 		_Tuple_val(const _Alloc& _Al,
; 113  : 			typename enable_if<uses_allocator<_Ty, _Alloc>::value
; 114  : 				&& !is_constructible<_Ty,
; 115  : 					allocator_arg_t, _Alloc>::value,
; 116  : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 117  : 		: _Val(_STD forward<_Other>(_Arg)..., _Al)
; 118  : 		{	// construct with optional arguments, trailing allocator
; 119  : 		}
; 120  : 
; 121  : 
; 122  : 	_Ty _Val;
; 123  : 	};
; 124  : 
; 125  : 	// CLASS tuple
; 126  : template<class... _Types>
; 127  : 	class tuple;
; 128  : 
; 129  : template<>
; 130  : 	class tuple<>
; 131  : 	{	// empty tuple
; 132  : public:
; 133  : 	typedef tuple<> _Myt;
; 134  : 
; 135  : 	tuple()
; 136  : 		{	// default construct
; 137  : 		}
; 138  : 
; 139  : 	template<class _Alloc>
; 140  : 		tuple(allocator_arg_t, const _Alloc&) _NOEXCEPT
; 141  : 		{	// default construct, allocator
; 142  : 		}
; 143  : 
; 144  : 	tuple(const tuple&) _NOEXCEPT
; 145  : 		{	// copy construct
; 146  : 		}
; 147  : 
; 148  : 	template<class _Alloc>
; 149  : 		tuple(allocator_arg_t, const _Alloc&, const tuple&) _NOEXCEPT
; 150  : 		{	// copy construct, allocator
; 151  : 		}
; 152  : 
; 153  : 	void swap(_Myt&) _NOEXCEPT
; 154  : 		{	// swap elements
; 155  : 		}
; 156  : 
; 157  : 	bool _Equals(const _Myt&) const _NOEXCEPT
; 158  : 		{	// test if *this == _Right
; 159  : 		return (true);
; 160  : 		}
; 161  : 
; 162  : 	bool _Less(const _Myt&) const _NOEXCEPT
; 163  : 		{	// test if *this < _Right
; 164  : 		return (false);
; 165  : 		}
; 166  : 	};
; 167  : 
; 168  : template<class _This,
; 169  : 	class... _Rest>
; 170  : 	class tuple<_This, _Rest...>
; 171  : 		: private tuple<_Rest...>
; 172  : 	{	// recursive tuple definition
; 173  : public:
; 174  : 	typedef _This _This_type;
; 175  : 	typedef tuple<_This, _Rest...> _Myt;
; 176  : 	typedef tuple<_Rest...> _Mybase;
; 177  : 	static const size_t _Mysize = 1 + sizeof...(_Rest);
; 178  : 
; 179  : 	tuple()
; 180  : 		: _Mybase(),
; 181  : 			_Myfirst()
; 182  : 		{	// construct default
; 183  : 		}
; 184  : 
; 185  : 	template<class... _Rest2>
; 186  : 		explicit tuple(_Tuple_alloc_t, _Rest2&&... _Rest_arg)
; 187  : 			: _Mybase(_STD forward<_Rest2>(_Rest_arg)...),
; 188  : 				_Myfirst(allocator_arg)
; 189  : 		{	// construct smuggled allocator_arg_t element
; 190  : 		}
; 191  : 
; 192  : 	template<class... _Other,
; 193  : 		class = typename _Tuple_enable<
; 194  : 			tuple<const _Other&...>, _Myt>::type>
; 195  : 		tuple(const tuple<_Other...>& _Right)
; 196  : 		: _Mybase(_Right._Get_rest()), _Myfirst(_Right._Myfirst._Val)
; 197  : 		{	// construct by copying same size tuple
; 198  : 		}
; 199  : 
; 200  : 	template<class _Alloc,
; 201  : 		class... _Other,
; 202  : 		class = typename _Tuple_enable<
; 203  : 			tuple<const _Other&...>, _Myt>::type>
; 204  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 205  : 			const tuple<_Other...>& _Right)
; 206  : 		: _Mybase(allocator_arg, _Al, _Right._Get_rest()),
; 207  : 			_Myfirst(_Al, _Tuple_alloc,
; 208  : 				_Right._Myfirst._Val)
; 209  : 		{	// construct by copying same size tuple, allocator
; 210  : 		}
; 211  : 
; 212  : 	explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)
; 213  : 		: _Mybase(_Rest_arg...),
; 214  : 			_Myfirst(_This_arg)
; 215  : 		{	// construct from one or more copied elements
; 216  : 		}
; 217  : 
; 218  : 	template<class _Alloc>
; 219  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 220  : 			const _This& _This_arg, const _Rest&... _Rest_arg)
; 221  : 		: _Mybase(allocator_arg, _Al, _Rest_arg...),
; 222  : 			_Myfirst(_Al, _Tuple_alloc, _This_arg)
; 223  : 		{	// construct from one or more copied elements, allocator
; 224  : 		}
; 225  : 
; 226  : 	template<class _This2,
; 227  : 		class... _Rest2,
; 228  : 		class = typename _Tuple_enable<
; 229  : 			tuple<_This2, _Rest2...>, _Myt>::type>
; 230  : 		explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
; 231  : 		: _Mybase(_STD forward<_Rest2>(_Rest_arg)...),
; 232  : 			_Myfirst(_STD forward<_This2>(_This_arg))
; 233  : 		{	// construct from one or more moved elements
; 234  : 		}
; 235  : 
; 236  : 	template<class _Alloc,
; 237  : 		class _This2,
; 238  : 		class... _Rest2,
; 239  : 		class = typename _Tuple_enable<
; 240  : 			tuple<_This2, _Rest2...>, _Myt>::type>
; 241  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 242  : 			_This2&& _This_arg, _Rest2&&... _Rest_arg)
; 243  : 		: _Mybase(allocator_arg, _Al,
; 244  : 				_STD forward<_Rest2>(_Rest_arg)...),
; 245  : 			_Myfirst(_Al, _Tuple_alloc,
; 246  : 				_STD forward<_This2>(_This_arg))
; 247  : 		{	// construct from one or more moved elements, allocator
; 248  : 		}
; 249  : 
; 250  : 	template<class... _Other,
; 251  : 		class = typename _Tuple_enable<
; 252  : 			tuple<_Other...>, _Myt>::type>
; 253  : 		tuple(tuple<_Other...>&& _Right)
; 254  : 		: _Mybase(_STD forward<typename tuple<_Other...>::_Mybase>
; 255  : 			(_Right._Get_rest())),
; 256  : 			_Myfirst(_STD forward<typename tuple<_Other...>::_This_type>
; 257  : 				(_Right._Myfirst._Val))
; 258  : 		{	// construct by moving same size tuple
; 259  : 		}
; 260  : 
; 261  : 	template<class _Alloc,
; 262  : 		class... _Other,
; 263  : 		class = typename _Tuple_enable<
; 264  : 			tuple<_Other...>, _Myt>::type>
; 265  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 266  : 			tuple<_Other...>&& _Right)
; 267  : 		: _Mybase(allocator_arg, _Al,
; 268  : 				_STD forward<typename tuple<_Other...>::_Mybase>
; 269  : 					(_Right._Get_rest())),
; 270  : 			_Myfirst(_Al, _Tuple_alloc,
; 271  : 				_STD forward<typename tuple<_Other...>::_This_type>
; 272  : 					(_Right._Myfirst._Val))
; 273  : 		{	// construct by moving same size tuple, allocator
; 274  : 		}
; 275  : 
; 276  : 	template<class... _Other>
; 277  : 		_Myt& operator=(const tuple<_Other...>& _Right)
; 278  : 		{	// assign by copying same size tuple
; 279  : 		_Myfirst._Val = _Right._Myfirst._Val;
; 280  : 		(_Mybase&)*this = _Right._Get_rest();
; 281  : 		return (*this);
; 282  : 		}
; 283  : 
; 284  : 	template<class... _Other>
; 285  : 		_Myt& operator=(tuple<_Other...>&& _Right)
; 286  : 		{	// assign by moving same size tuple
; 287  : 		_Myfirst._Val = _STD forward<typename tuple<_Other...>::_This_type>
; 288  : 			(_Right._Myfirst._Val);
; 289  : 		(_Mybase&)*this = _STD forward<typename tuple<_Other...>::_Mybase>
; 290  : 			(_Right._Get_rest());
; 291  : 		return (*this);
; 292  : 		}
; 293  : 
; 294  : 	template<class... _Other>
; 295  : 		bool _Equals(const tuple<_Other...>& _Right) const
; 296  : 		{	// test if *this == _Right
; 297  : 		static_assert(_Mysize == sizeof...(_Other),
; 298  : 			"comparing tuple to object with different size");
; 299  : 		return (_Myfirst._Val == _Right._Myfirst._Val
; 300  : 			&& _Mybase::_Equals(_Right._Get_rest()));
; 301  : 		}
; 302  : 
; 303  : 	template<class... _Other>
; 304  : 		bool _Less(const tuple<_Other...>& _Right) const
; 305  : 		{	// test if *this < _Right
; 306  : 		static_assert(_Mysize == sizeof...(_Other),
; 307  : 			"comparing tuple to object with different size");
; 308  : 		return (_Myfirst._Val < _Right._Myfirst._Val
; 309  : 			|| (!(_Right._Myfirst._Val < _Myfirst._Val)
; 310  : 				&& _Mybase::_Less(_Right._Get_rest())));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc>
; 314  : 		tuple(allocator_arg_t, const _Alloc& _Al)
; 315  : 		: _Mybase(allocator_arg, _Al),
; 316  : 			_Myfirst(_Al, _Tuple_alloc)
; 317  : 		{	// construct default, allocator
; 318  : 		}
; 319  : 
; 320  : 	template<class _Alloc>
; 321  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 322  : 			const _Myt& _Right)
; 323  : 		: _Mybase(allocator_arg, _Al, _Right._Get_rest()),
; 324  : 			_Myfirst(_Al, _Tuple_alloc,
; 325  : 				_Right._Myfirst._Val)
; 326  : 		{	// construct by copying, allocator
; 327  : 		}
; 328  : 
; 329  : 	template<class _First,
; 330  : 		class _Second,
; 331  : 		class = typename _Tuple_enable<
; 332  : 			tuple<const _First&, const _Second&>, _Myt>::type>
; 333  : 		tuple(const pair<_First, _Second>& _Right)
; 334  : 
; 335  : 		: _Mybase(tuple<_Second>(_Right.second)),
; 336  : 			_Myfirst(_Right.first)
; 337  : 		{	// construct by copying pair
; 338  : 		// no static_assert necessary
; 339  : 		}
; 340  : 
; 341  : 	template<class _Alloc,
; 342  : 		class _First,
; 343  : 		class _Second,
; 344  : 		class = typename _Tuple_enable<
; 345  : 			tuple<const _First&, const _Second&>, _Myt>::type>
; 346  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 347  : 			const pair<_First, _Second>& _Right)
; 348  : 
; 349  : 		: _Mybase(allocator_arg, _Al, tuple<_Second>(_Right.second)),
; 350  : 			_Myfirst(_Al, _Tuple_alloc,
; 351  : 				_Right.first)
; 352  : 		{	// construct by copying pair, allocator
; 353  : 		// no static_assert necessary
; 354  : 		}
; 355  : 
; 356  : 	_Myt& operator=(const _Myt& _Right)
; 357  : 		{	// assign
; 358  : 		_Myfirst._Val = _Right._Myfirst._Val;
; 359  : 		(_Mybase&)*this = _Right._Get_rest();
; 360  : 		return (*this);
; 361  : 		}
; 362  : 
; 363  : 	template<class _First,
; 364  : 		class _Second>
; 365  : 		_Myt& operator=(const pair<_First, _Second>& _Right)
; 366  : 		{	// assign by copying pair
; 367  : 		static_assert(_Mysize == 2,
; 368  : 			"assigning to tuple from object with different size");
; 369  : 		_Myfirst._Val = _Right.first;
; 370  : 		(_Mybase&)*this = tuple<_Second>(_Right.second);
; 371  : 		return (*this);
; 372  : 		}
; 373  : 
; 374  : 	template<class _Alloc>
; 375  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 376  : 			_Myt&& _Right)
; 377  : 		: _Mybase(allocator_arg, _Al,
; 378  : 				_STD forward<_Mybase>(_Right._Get_rest())),
; 379  : 			_Myfirst(_Al, _Tuple_alloc,
; 380  : 				_STD forward<_This>(_Right._Myfirst._Val))
; 381  : 		{	// construct by moving, allocator
; 382  : 		}
; 383  : 
; 384  : 	template<class _First,
; 385  : 		class _Second,
; 386  : 		class = typename _Tuple_enable<
; 387  : 			tuple<_First, _Second>, _Myt>::type>
; 388  : 		tuple(pair<_First, _Second>&& _Right)
; 389  : 
; 390  : 		: _Mybase(tuple<_Second>(_STD forward<_Second>(_Right.second))),
; 391  : 			_Myfirst(_STD forward<_First>(_Right.first))
; 392  : 		{	// construct by moving pair
; 393  : 		// no static_assert necessary
; 394  : 		}
; 395  : 
; 396  : 	template<class _Alloc,
; 397  : 		class _First,
; 398  : 		class _Second,
; 399  : 		class = typename _Tuple_enable<
; 400  : 			tuple<_First, _Second>, _Myt>::type>
; 401  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 402  : 			pair<_First, _Second>&& _Right)
; 403  : 
; 404  : 		: _Mybase(allocator_arg, _Al,
; 405  : 				tuple<_Second>(_STD forward<_Second>(_Right.second))),
; 406  : 			_Myfirst(_Al, _Tuple_alloc,
; 407  : 				_STD forward<_First>(_Right.first))
; 408  : 		{	// construct by moving pair, allocator
; 409  : 		// no static_assert necessary
; 410  : 		}
; 411  : 
; 412  : 	_Myt& operator=(_Myt&& _Right)
; 413  : 		_NOEXCEPT_OP(is_nothrow_move_assignable<_This>::value
; 414  : 			&& is_nothrow_move_assignable<_Mybase>::value)
; 415  : 		{	// assign by moving
; 416  : 		_Myfirst = _STD forward<_This>(_Right._Myfirst._Val);
; 417  : 		(_Mybase&)*this = _STD forward<_Mybase>(_Right._Get_rest());
; 418  : 		return (*this);
; 419  : 		}
; 420  : 
; 421  : 	template<class _First,
; 422  : 		class _Second>
; 423  : 		_Myt& operator=(pair<_First, _Second>&& _Right)
; 424  : 		_NOEXCEPT_OP(
; 425  : 			_NOEXCEPT_OP(_Myfirst._Val = _STD forward<_First>(_Right.first))
; 426  : 			&& _NOEXCEPT_OP((_Mybase&)*this =
; 427  : 				tuple<_Second>(_STD forward<_Second>(_Right.second))))
; 428  : 		{	// assign by moving pair
; 429  : 		static_assert(_Mysize == 2,
; 430  : 			"assigning to tuple from object with different size");
; 431  : 		_Myfirst._Val = _STD forward<_First>(_Right.first);
; 432  : 		(_Mybase&)*this =
; 433  : 			tuple<_Second>(_STD forward<_Second>(_Right.second));
; 434  : 		return (*this);
; 435  : 		}
; 436  : 
; 437  : 	_Mybase& _Get_rest()
; 438  : 		{	// get reference to rest of elements
; 439  : 		return (*this);
; 440  : 		}
; 441  : 
; 442  : 	const _Mybase& _Get_rest() const
; 443  : 		{	// get const reference to rest of elements
; 444  : 		return (*this);
; 445  : 		}
; 446  : 
; 447  : 	void swap(tuple& _Right)
; 448  : 		_NOEXCEPT_OP(
; 449  : 			_NOEXCEPT_OP(_Swap_adl(_Myfirst._Val, _Myfirst._Val))
; 450  : 			&& _NOEXCEPT_OP(_Swap_adl((_Mybase&)_Right, (_Mybase&)_Right)))
; 451  : 		{	// swap *this and _Right
; 452  : 		_Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
; 453  : 		_Mybase::swap((_Mybase&)_Right);
; 454  : 		}
; 455  : 
; 456  : 	_Tuple_val<_This> _Myfirst;	// the stored element
; 457  : 	};
; 458  : 
; 459  : 
; 460  : 	// OPERATORS FOR tuple
; 461  : 
; 462  : template<class... _Types1,
; 463  : 	class... _Types2> inline
; 464  : 	bool operator==(const tuple<_Types1...>& _Left,
; 465  : 		const tuple<_Types2...>& _Right)
; 466  : 	{	// test if _Left == _Right
; 467  : 	return (_Left._Equals(_Right));
; 468  : 	}
; 469  : 
; 470  : template<class... _Types1,
; 471  : 	class... _Types2> inline
; 472  : 	bool operator!=(const tuple<_Types1...>& _Left,
; 473  : 		const tuple<_Types2...>& _Right)
; 474  : 	{	// test if _Left != _Right
; 475  : 	return (!(_Left == _Right));
; 476  : 	}
; 477  : 
; 478  : template<class... _Types1,
; 479  : 	class... _Types2> inline
; 480  : 	bool operator<(const tuple<_Types1...>& _Left,
; 481  : 		const tuple<_Types2...>& _Right)
; 482  : 	{	// test if _Left < _Right
; 483  : 	return (_Left._Less(_Right));
; 484  : 	}
; 485  : 
; 486  : template<class... _Types1,
; 487  : 	class... _Types2> inline
; 488  : 	bool operator>=(const tuple<_Types1...>& _Left,
; 489  : 		const tuple<_Types2...>& _Right)
; 490  : 	{	// test if _Left >= _Right
; 491  : 	return (!(_Left < _Right));
; 492  : 	}
; 493  : 
; 494  : template<class... _Types1,
; 495  : 	class... _Types2> inline
; 496  : 	bool operator>(const tuple<_Types1...>& _Left,
; 497  : 		const tuple<_Types2...>& _Right)
; 498  : 	{	// test if _Left > _Right
; 499  : 	return (_Right < _Left);
; 500  : 	}
; 501  : 
; 502  : template<class... _Types1,
; 503  : 	class... _Types2> inline
; 504  : 	bool operator<=(const tuple<_Types1...>& _Left,
; 505  : 		const tuple<_Types2...>& _Right)
; 506  : 	{	// test if _Left <= _Right
; 507  : 	return (!(_Right < _Left));
; 508  : 	}
; 509  : 
; 510  : template<class... _Types> inline
; 511  : 	void swap(tuple<_Types...>& _Left,
; 512  : 		tuple<_Types...>& _Right)
; 513  : 			_NOEXCEPT_OP(_NOEXCEPT_OP(_Left.swap(_Right)))
; 514  : 	{	// swap _Left and _Right
; 515  : 	return (_Left.swap(_Right));
; 516  : 	}
; 517  : 
; 518  : 
; 519  : 	// CLASS tuple_element
; 520  : template<size_t _Index,
; 521  : 	class _Tuple>
; 522  : 	struct tuple_element;
; 523  : 
; 524  : template<class _This,
; 525  : 	class... _Rest>
; 526  : 	struct tuple_element<0, tuple<_This, _Rest...> >
; 527  : 	{	// select first element
; 528  : 	typedef _This type;
; 529  : 	typedef typename add_lvalue_reference<const _This>::type _Ctype;
; 530  : 	typedef typename add_lvalue_reference<_This>::type _Rtype;
; 531  : 	typedef typename add_rvalue_reference<_This>::type _RRtype;
; 532  : 	typedef tuple<_This, _Rest...> _Ttype;
; 533  : 	};
; 534  : 
; 535  : template<size_t _Index,
; 536  : 	class _This,
; 537  : 	class... _Rest>
; 538  : 	struct tuple_element<_Index, tuple<_This, _Rest...> >
; 539  : 		: public tuple_element<_Index - 1, tuple<_Rest...> >
; 540  : 	{	// recursive tuple_element definition
; 541  : 	};
; 542  : 
; 543  : 
; 544  : template<size_t _Index,
; 545  : 	class _Tuple>
; 546  : 	struct tuple_element<_Index, const _Tuple>
; 547  : 	: public tuple_element<_Index, _Tuple>
; 548  : 	{	// tuple_element for const
; 549  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 550  : 	typedef typename add_const<typename _Mybase::type>::type type;
; 551  : 	};
; 552  : 
; 553  : template<size_t _Index,
; 554  : 	class _Tuple>
; 555  : 	struct tuple_element<_Index, volatile _Tuple>
; 556  : 	: public tuple_element<_Index, _Tuple>
; 557  : 	{	// tuple element for volatile
; 558  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 559  : 	typedef typename add_volatile<typename _Mybase::type>::type type;
; 560  : 	};
; 561  : 
; 562  : template<size_t _Index,
; 563  : 	class _Tuple>
; 564  : 	struct tuple_element<_Index, const volatile _Tuple>
; 565  : 	: public tuple_element<_Index, _Tuple>
; 566  : 	{	// tuple_element for const volatile
; 567  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 568  : 	typedef typename add_cv<typename _Mybase::type>::type type;
; 569  : 	};
; 570  : 
; 571  : 	// FUNCTION get
; 572  : template<size_t _Index,
; 573  : 	class... _Types> inline
; 574  : 	typename tuple_element<_Index, tuple<_Types...> >::_Rtype
; 575  : 		get(tuple<_Types...>& _Tuple)
; 576  : 	{	// get reference to _Index element of tuple
; 577  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 578  : 		_Ttype;
; 579  : 	return (((_Ttype&)_Tuple)._Myfirst._Val);
; 580  : 	}
; 581  : 
; 582  : template<size_t _Index,
; 583  : 	class... _Types> inline
; 584  : 	typename tuple_element<_Index, tuple<_Types...> >::_Ctype
; 585  : 		get(const tuple<_Types...>& _Tuple)
; 586  : 	{	// get const reference to _Index element of tuple
; 587  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 588  : 		_Ttype;
; 589  : 	return (((_Ttype&)_Tuple)._Myfirst._Val);
; 590  : 	}
; 591  : 
; 592  : template<size_t _Index,
; 593  : 	class... _Types> inline
; 594  : 	typename tuple_element<_Index, tuple<_Types...> >::_RRtype
; 595  : 		get(tuple<_Types...>&& _Tuple)
; 596  : 	{	// get rvalue reference to _Index element of tuple
; 597  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 598  : 		_Ttype;
; 599  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_RRtype
; 600  : 		_RRtype;
; 601  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
; 602  : 	}
; 603  : 
; 604  : 	// FUNCTION make_tuple
; 605  : template<class... _Types> inline
; 606  : 	tuple<typename _Unrefwrap<_Types>::type...>
; 607  : 		make_tuple(_Types&&... _Args)
; 608  : 	{	// make tuple from elements
; 609  : 	typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
; 610  : 	return (_Ttype(_STD forward<_Types>(_Args)...));
; 611  : 	}
; 612  : 
; 613  : 	// FUNCTION tie
; 614  : template<class... _Types> inline
; 615  : 	tuple<_Types&...>
; 616  : 		tie(_Types&... _Args) _NOEXCEPT
; 617  : 	{	// make tuple from elements
; 618  : 	typedef tuple<_Types&...> _Ttype;
; 619  : 	return (_Ttype(_Args...));
; 620  : 	}
; 621  : 
; 622  : 
; 623  : 	// TEMPLATE FUNCTION forward_as_tuple
; 624  : 
; 625  : template<class... _Types> inline
; 626  : 	tuple<_Types&&...>
; 627  : 		forward_as_tuple(_Types&&... _Args) _NOEXCEPT
; 628  : 	{	// forward arguments in a tuple
; 629  : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));
; 630  : 	}
; 631  : 
; 632  : 
; 633  : 	// TEMPLATE STRUCT _Make_arg_idx AND HELPERS
; 634  : template<class _Arg_idx_type,
; 635  : 	class... _Types>
; 636  : 	struct _Make_arg_idx1
; 637  : 	{	// ends recursion and defines type
; 638  : 	typedef _Arg_idx_type type;
; 639  : 	};
; 640  : 
; 641  : template<size_t... _Indexes,
; 642  : 	class _Ty,
; 643  : 	class... _Types>
; 644  : 	struct _Make_arg_idx1<_Arg_idx<_Indexes...>, _Ty, _Types...>
; 645  : 		: _Make_arg_idx1<_Arg_idx<sizeof...(_Types), _Indexes...>, _Types...>
; 646  : 	{	// counts a type and recurses
; 647  : 	};
; 648  : 
; 649  : template<class... _Types>
; 650  : 	struct _Make_arg_idx
; 651  : 		: _Make_arg_idx1<_Arg_idx<>, _Types...>
; 652  : 	{	// defines type as _Arg_idx<0, 1, 2... (sizeof...(_Types))-1>
; 653  : 	};
; 654  : 
; 655  : template<class _Arg_idx_type1,
; 656  : 	class _Arg_idx_type2>
; 657  : 	struct _Cat_arg_idx;
; 658  : 
; 659  : template<size_t... _Indexes1,
; 660  : 	size_t... _Indexes2>
; 661  : 	struct _Cat_arg_idx<_Arg_idx<_Indexes1...>, _Arg_idx<_Indexes2...> >
; 662  : 	{	// concatenates two _Arg_idx types
; 663  : 	typedef _Arg_idx<_Indexes1..., _Indexes2...> type;
; 664  : 	};
; 665  : 
; 666  : template<size_t _Nx,
; 667  : 	class _Ty>
; 668  : 	struct _Repeat_for
; 669  : 		: integral_constant<size_t, _Nx>
; 670  : 	{	// repeats _Nx for each _Ty in a parameter pack
; 671  : 	};
; 672  : 
; 673  : 	// FUNCTION tuple_cat
; 674  : template<class _Ret,
; 675  : 	class _Kx_arg,
; 676  : 	class _Ix_arg,
; 677  : 	size_t _Ix_next,
; 678  : 	class... _Tuples>
; 679  : 	struct _Tuple_cat2
; 680  : 	{	// determine tuple_cat's return type and _Kx/_Ix indices
; 681  : 	static_assert(sizeof...(_Tuples) == 0,
; 682  : 		"Unsupported tuple_cat arguments.");
; 683  : 	typedef _Ret type;
; 684  : 	typedef _Kx_arg _Kx_arg_idx;
; 685  : 	typedef _Ix_arg _Ix_arg_idx;
; 686  : 	};
; 687  : 
; 688  : template<class... _Types1,
; 689  : 	class _Kx_arg,
; 690  : 	size_t... _Ix,
; 691  : 	size_t _Ix_next,
; 692  : 	class... _Types2,
; 693  : 	class... _Rest>
; 694  : 	struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg, _Arg_idx<_Ix...>, _Ix_next,
; 695  : 		tuple<_Types2...>, _Rest...>
; 696  : 		: _Tuple_cat2<
; 697  : 			tuple<_Types1..., _Types2...>,
; 698  : 			typename _Cat_arg_idx<_Kx_arg,
; 699  : 				typename _Make_arg_idx<_Types2...>::type>::type,
; 700  : 			_Arg_idx<_Ix..., _Repeat_for<_Ix_next, _Types2>::value...>,
; 701  : 			_Ix_next + 1,
; 702  : 			_Rest...>
; 703  : 	{	// determine tuple_cat's return type and _Kx/_Ix indices
; 704  : 	};
; 705  : 
; 706  : template<class... _Tuples>
; 707  : 	struct _Tuple_cat1
; 708  : 		: _Tuple_cat2<tuple<>, _Arg_idx<>, _Arg_idx<>, 0,
; 709  : 			typename decay<_Tuples>::type...>
; 710  : 	{	// prepare to determine tuple_cat's return type and _Kx/_Ix indices
; 711  : 	};
; 712  : 
; 713  : template<class _Ret,
; 714  : 	size_t... _Kx,
; 715  : 	size_t... _Ix,
; 716  : 	class _Ty> inline
; 717  : 	_Ret _Tuple_cat(_Arg_idx<_Kx...>, _Arg_idx<_Ix...>, _Ty&& _Arg)
; 718  : 	{	// concatenate tuples
; 719  : 	return (_Ret(_STD get<_Kx>(_STD get<_Ix>(_STD forward<_Ty>(_Arg)))...));
; 720  : 	}
; 721  : 
; 722  : template<class... _Tuples> inline
; 723  : 	typename _Tuple_cat1<_Tuples...>::type
; 724  : 		tuple_cat(_Tuples&&... _Tpls)
; 725  : 	{	// concatenate tuples
; 726  : 	typedef _Tuple_cat1<_Tuples...> _Cat1;
; 727  : 	return (_Tuple_cat<typename _Cat1::type>(
; 728  : 		typename _Cat1::_Kx_arg_idx(), typename _Cat1::_Ix_arg_idx(),
; 729  : 		_STD forward_as_tuple(_STD forward<_Tuples>(_Tpls)...)));
; 730  : 	}
; 731  : 
; 732  : 
; 733  : 	// TEMPLATE CONSTRUCTOR pair::pair(tuple, tuple, _Arg_idx, _Arg_idx)
; 734  : template<class _Ty1,
; 735  : 	class _Ty2>
; 736  : 	template<class _Tuple1,
; 737  : 		class _Tuple2,
; 738  : 		size_t... _Indexes1,
; 739  : 		size_t... _Indexes2> inline
; 740  : 		pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
; 741  : 			_Tuple2& _Val2,
; 742  : 			_Arg_idx<_Indexes1...>,
; 743  : 			_Arg_idx<_Indexes2...>)
; 744  : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),
; 745  : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)
; 746  : 		{	// construct from pair of tuples

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	89 01		 mov	 DWORD PTR [ecx], eax
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$LN11@construct:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 724  : 		}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::pair<unsigned long const ,CLight *>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Insertion_sort1@PAPAVCLight@@ULightComp@@PAV1@@std@@YAXPAPAVCLight@@0ULightComp@@0@Z
_TEXT	SEGMENT
tv297 = 8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAPAVCLight@@ULightComp@@PAV1@@std@@YAXPAPAVCLight@@0ULightComp@@0@Z PROC ; std::_Insertion_sort1<CLight * *,LightComp,CLight *>, COMDAT

; 2999 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3000 : 	if (_First != _Last)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000a	3b f8		 cmp	 edi, eax
  0000c	0f 84 81 00 00
	00		 je	 $LN6@Insertion_

; 3001 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00012	56		 push	 esi
  00013	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00016	3b f0		 cmp	 esi, eax
  00018	74 78		 je	 SHORT $LN44@Insertion_
  0001a	b9 04 00 00 00	 mov	 ecx, 4
  0001f	2b cf		 sub	 ecx, edi
  00021	89 4d 08	 mov	 DWORD PTR tv297[ebp], ecx
  00024	53		 push	 ebx
$LL7@Insertion_:

; 3002 : 			{	// order next element
; 3003 : 			_BidIt _Next1 = _Next;
; 3004 : 			_Ty _Val = _Move(*_Next);

  00025	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00027	8b d6		 mov	 edx, esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00029	8b 07		 mov	 eax, DWORD PTR [edi]
  0002b	f3 0f 10 4b 78	 movss	 xmm1, DWORD PTR [ebx+120]
  00030	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00035	0f 2f c1	 comiss	 xmm0, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3006 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

  00038	76 25		 jbe	 SHORT $LN5@Insertion_
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2536 : 	ptrdiff_t _Count = _Last - _First;

  0003a	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  0003d	03 c6		 add	 eax, esi
  0003f	c1 f8 02	 sar	 eax, 2

; 2537 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2538 : 		_Count * sizeof (*_First));

  00042	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  00049	8b c6		 mov	 eax, esi
  0004b	51		 push	 ecx
  0004c	2b c1		 sub	 eax, ecx
  0004e	83 c0 04	 add	 eax, 4
  00051	57		 push	 edi
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _memmove
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3009 : 				*_First = _Move(_Val);

  0005b	89 1f		 mov	 DWORD PTR [edi], ebx

; 3010 : 				}
; 3011 : 			else

  0005d	eb 27		 jmp	 SHORT $LN4@Insertion_
$LN5@Insertion_:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  0005f	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3001 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00062	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00065	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  0006a	0f 2f c1	 comiss	 xmm0, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3015 : 					_Next1 = _First1)

  0006d	76 15		 jbe	 SHORT $LN1@Insertion_
  0006f	90		 npad	 1
$LL3@Insertion_:

; 3016 : 					*_Next1 = _Move(*_First1);	// move hole down

  00070	89 0a		 mov	 DWORD PTR [edx], ecx
  00072	8b d0		 mov	 edx, eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00074	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3015 : 					_Next1 = _First1)

  00077	83 e8 04	 sub	 eax, 4
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0007a	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  0007f	0f 2f c1	 comiss	 xmm0, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3015 : 					_Next1 = _First1)

  00082	77 ec		 ja	 SHORT $LL3@Insertion_
$LN1@Insertion_:

; 3017 : 				*_Next1 = _Move(_Val);	// insert element in hole

  00084	89 1a		 mov	 DWORD PTR [edx], ebx
$LN4@Insertion_:

; 3001 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00086	8b 4d 08	 mov	 ecx, DWORD PTR tv297[ebp]
  00089	83 c6 04	 add	 esi, 4
  0008c	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0008f	75 94		 jne	 SHORT $LL7@Insertion_
  00091	5b		 pop	 ebx
$LN44@Insertion_:
  00092	5e		 pop	 esi
$LN6@Insertion_:
  00093	5f		 pop	 edi

; 3018 : 				}
; 3019 : 			}
; 3020 : 	}

  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
??$_Insertion_sort1@PAPAVCLight@@ULightComp@@PAV1@@std@@YAXPAPAVCLight@@0ULightComp@@0@Z ENDP ; std::_Insertion_sort1<CLight * *,LightComp,CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z
_TEXT	SEGMENT
__Val$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z PROC ; std::_Sort_heap<CLight * *,LightComp>, COMDAT

; 2475 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2476 : 	for (; 1 < _Last - _First; --_Last)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000a	2b ce		 sub	 ecx, esi
  0000c	8b c1		 mov	 eax, ecx
  0000e	83 e0 fc	 and	 eax, -4			; fffffffcH
  00011	83 f8 04	 cmp	 eax, 4
  00014	0f 8e a4 00 00
	00		 jle	 $LN1@Sort_heap
  0001a	53		 push	 ebx
  0001b	57		 push	 edi
  0001c	8d 64 24 00	 npad	 4
$LL3@Sort_heap:

; 2398 : 	}
; 2399 : 
; 2400 : template<class _RanIt,
; 2401 : 	class _Ty,
; 2402 : 	class _Pr> inline
; 2403 : 	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
; 2404 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred
; 2405 : 	_Ty _Val = _Move(*(_Last - 1));

  00020	8b 44 0e fc	 mov	 eax, DWORD PTR [esi+ecx-4]

; 2323 : 	}
; 2324 : 
; 2325 : template<class _RanIt,
; 2326 : 	class _Diff,
; 2327 : 	class _Ty,
; 2328 : 	class _Pr> inline
; 2329 : 	void _Push_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
; 2330 : 	{	// push *_Last onto heap at [_First, _Last), using _Pred
; 2331 : 	_Diff _Count = _Last - _First;
; 2332 : 	if (0 < _Count)
; 2333 : 		{	// worth doing, percolate *_Last
; 2334 : 		_Ty _Val = _Move(*_Last);
; 2335 : 		_Push_heap(_First, _Count, _Diff(0), _Move(_Val), _Pred);
; 2336 : 		}
; 2337 : 	}
; 2338 : 
; 2339 : template<class _RanIt,
; 2340 : 	class _Pr> inline
; 2341 : 	void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
; 2342 : 	{	// push *(_Last - 1) onto heap at [_First, _Last - 1), using _Pred
; 2343 : 	_DEBUG_RANGE(_First, _Last);
; 2344 : 	_DEBUG_POINTER(_Pred);
; 2345 : 	if (_First != _Last)
; 2346 : 		{	// check and push to nontrivial heap
; 2347 : 		--_Last;
; 2348 : 		_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2349 : 		_Push_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2350 : 			_Dist_type(_First), _Val_type(_First));
; 2351 : 		}
; 2352 : 	}
; 2353 : 
; 2354 : 		// TEMPLATE FUNCTION push_heap
; 2355 : template<class _RanIt> inline
; 2356 : 	void push_heap(_RanIt _First, _RanIt _Last)
; 2357 : 	{	// push *(_Last - 1) onto heap at [_First, _Last - 1), using operator<
; 2358 : 	_STD push_heap(_First, _Last, less<>());
; 2359 : 	}
; 2360 : 
; 2361 : 		// TEMPLATE FUNCTION pop_heap WITH PRED
; 2362 : template<class _RanIt,
; 2363 : 	class _Diff,
; 2364 : 	class _Ty,
; 2365 : 	class _Pr> inline
; 2366 : 	void _Adjust_heap(_RanIt _First, _Diff _Hole, _Diff _Bottom,
; 2367 : 		_Ty&& _Val, _Pr _Pred)
; 2368 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred
; 2369 : 	_Diff _Top = _Hole;
; 2370 : 	_Diff _Idx = 2 * _Hole + 2;

  00024	ba 02 00 00 00	 mov	 edx, 2

; 2398 : 	}
; 2399 : 
; 2400 : template<class _RanIt,
; 2401 : 	class _Ty,
; 2402 : 	class _Pr> inline
; 2403 : 	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
; 2404 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred
; 2405 : 	_Ty _Val = _Move(*(_Last - 1));

  00029	89 45 08	 mov	 DWORD PTR __Val$1$[ebp], eax

; 2384 : 		}
; 2385 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);
; 2386 : 	}
; 2387 : 
; 2388 : template<class _RanIt,
; 2389 : 	class _Diff,
; 2390 : 	class _Ty,
; 2391 : 	class _Pr> inline
; 2392 : 	void _Pop_heap(_RanIt _First, _RanIt _Last, _RanIt _Dest,
; 2393 : 		_Ty&& _Val, _Pr _Pred, _Diff *)
; 2394 : 	{	// pop *_First to *_Dest and reheap, using _Pred
; 2395 : 	*_Dest = _Move(*_First);
; 2396 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2397 : 		_Move(_Val), _Pred);

  0002c	33 ff		 xor	 edi, edi
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	89 44 0e fc	 mov	 DWORD PTR [esi+ecx-4], eax
  00034	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00037	8b d9		 mov	 ebx, ecx
  00039	89 4d 0c	 mov	 DWORD PTR __Last$[ebp], ecx
  0003c	c1 fb 02	 sar	 ebx, 2

; 2371 : 
; 2372 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  0003f	3b d3		 cmp	 edx, ebx
  00041	7d 29		 jge	 SHORT $LN76@Sort_heap
$LL32@Sort_heap:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00043	8b 44 96 fc	 mov	 eax, DWORD PTR [esi+edx*4-4]
  00047	8b 0c 96	 mov	 ecx, DWORD PTR [esi+edx*4]
  0004a	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0004f	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 2374 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00053	76 01		 jbe	 SHORT $LN29@Sort_heap

; 2375 : 			--_Idx;

  00055	4a		 dec	 edx
$LN29@Sort_heap:

; 2376 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00056	8b 04 96	 mov	 eax, DWORD PTR [esi+edx*4]
  00059	89 04 be	 mov	 DWORD PTR [esi+edi*4], eax

; 2377 : 		_Hole = _Idx;

  0005c	8b fa		 mov	 edi, edx
  0005e	8d 14 55 02 00
	00 00		 lea	 edx, DWORD PTR [edx*2+2]
  00065	3b d3		 cmp	 edx, ebx
  00067	7c da		 jl	 SHORT $LL32@Sort_heap
  00069	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
$LN76@Sort_heap:

; 2378 : 		}
; 2379 : 
; 2380 : 	if (_Idx == _Bottom)

  0006c	75 0a		 jne	 SHORT $LN28@Sort_heap

; 2381 : 		{	// only child at bottom, move _Hole down to it
; 2382 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  0006e	8b 44 9e fc	 mov	 eax, DWORD PTR [esi+ebx*4-4]
  00072	89 04 be	 mov	 DWORD PTR [esi+edi*4], eax

; 2383 : 		_Hole = _Bottom - 1;

  00075	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
$LN28@Sort_heap:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00078	8b 5d 08	 mov	 ebx, DWORD PTR __Val$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 2314 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  0007b	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0007e	99		 cdq
  0007f	2b c2		 sub	 eax, edx
  00081	d1 f8		 sar	 eax, 1

; 2316 : 		_Idx = (_Hole - 1) / 2)

  00083	85 ff		 test	 edi, edi
  00085	7e 24		 jle	 SHORT $LN47@Sort_heap
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00087	f3 0f 10 43 78	 movss	 xmm0, DWORD PTR [ebx+120]
  0008c	8d 64 24 00	 npad	 4
$LL49@Sort_heap:
  00090	8b 0c 86	 mov	 ecx, DWORD PTR [esi+eax*4]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00093	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 2316 : 		_Idx = (_Hole - 1) / 2)

  00097	76 0f		 jbe	 SHORT $LN74@Sort_heap

; 2317 : 		{	// move _Hole up to parent
; 2318 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00099	89 0c be	 mov	 DWORD PTR [esi+edi*4], ecx

; 2319 : 		_Hole = _Idx;

  0009c	8b f8		 mov	 edi, eax
  0009e	48		 dec	 eax
  0009f	99		 cdq
  000a0	2b c2		 sub	 eax, edx
  000a2	d1 f8		 sar	 eax, 1
  000a4	85 ff		 test	 edi, edi
  000a6	7f e8		 jg	 SHORT $LL49@Sort_heap
$LN74@Sort_heap:
  000a8	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
$LN47@Sort_heap:

; 2476 : 	for (; 1 < _Last - _First; --_Last)

  000ab	8b c1		 mov	 eax, ecx

; 2320 : 		}
; 2321 : 
; 2322 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  000ad	89 1c be	 mov	 DWORD PTR [esi+edi*4], ebx

; 2476 : 	for (; 1 < _Last - _First; --_Last)

  000b0	83 e0 fc	 and	 eax, -4			; fffffffcH
  000b3	83 f8 04	 cmp	 eax, 4
  000b6	0f 8f 64 ff ff
	ff		 jg	 $LL3@Sort_heap
  000bc	5f		 pop	 edi
  000bd	5b		 pop	 ebx
$LN1@Sort_heap:
  000be	5e		 pop	 esi

; 2477 : 		_Pop_heap(_First, _Last, _Pred);
; 2478 : 	}

  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
??$_Sort_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ENDP ; std::_Sort_heap<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Make_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@PAH0@Z
_TEXT	SEGMENT
tv300 = -8						; size = 4
__Hole$1$ = -4						; size = 4
__Val$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@PAH0@Z PROC ; std::_Make_heap<CLight * *,int,CLight *,LightComp>, COMDAT

; 2442 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2443 : 	_Diff _Bottom = _Last - _First;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000e	2b ce		 sub	 ecx, esi
  00010	c1 f9 02	 sar	 ecx, 2

; 2444 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  00013	8b c1		 mov	 eax, ecx
  00015	89 4d 0c	 mov	 DWORD PTR __Last$[ebp], ecx
  00018	99		 cdq
  00019	2b c2		 sub	 eax, edx
  0001b	8b d8		 mov	 ebx, eax
  0001d	d1 fb		 sar	 ebx, 1
  0001f	85 db		 test	 ebx, ebx
  00021	0f 8e a6 00 00
	00		 jle	 $LN1@Make_heap

; 2443 : 	_Diff _Bottom = _Last - _First;

  00027	8d 04 5d 02 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+2]
  0002e	57		 push	 edi
  0002f	90		 npad	 1
$LL2@Make_heap:

; 2445 : 		{	// reheap top half, bottom to top
; 2446 : 		--_Hole;
; 2447 : 		_Ty _Val = _Move(*(_First + _Hole));

  00030	8b 54 9e fc	 mov	 edx, DWORD PTR [esi+ebx*4-4]
  00034	4b		 dec	 ebx
  00035	83 e8 02	 sub	 eax, 2
  00038	89 55 08	 mov	 DWORD PTR __Val$1$[ebp], edx
  0003b	89 5d fc	 mov	 DWORD PTR __Hole$1$[ebp], ebx

; 2448 : 		_Adjust_heap(_First, _Hole, _Bottom,
; 2449 : 			_Move(_Val), _Pred);

  0003e	8b fb		 mov	 edi, ebx
  00040	89 45 f8	 mov	 DWORD PTR tv300[ebp], eax

; 2323 : 	}
; 2324 : 
; 2325 : template<class _RanIt,
; 2326 : 	class _Diff,
; 2327 : 	class _Ty,
; 2328 : 	class _Pr> inline
; 2329 : 	void _Push_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
; 2330 : 	{	// push *_Last onto heap at [_First, _Last), using _Pred
; 2331 : 	_Diff _Count = _Last - _First;
; 2332 : 	if (0 < _Count)
; 2333 : 		{	// worth doing, percolate *_Last
; 2334 : 		_Ty _Val = _Move(*_Last);
; 2335 : 		_Push_heap(_First, _Count, _Diff(0), _Move(_Val), _Pred);
; 2336 : 		}
; 2337 : 	}
; 2338 : 
; 2339 : template<class _RanIt,
; 2340 : 	class _Pr> inline
; 2341 : 	void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
; 2342 : 	{	// push *(_Last - 1) onto heap at [_First, _Last - 1), using _Pred
; 2343 : 	_DEBUG_RANGE(_First, _Last);
; 2344 : 	_DEBUG_POINTER(_Pred);
; 2345 : 	if (_First != _Last)
; 2346 : 		{	// check and push to nontrivial heap
; 2347 : 		--_Last;
; 2348 : 		_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2349 : 		_Push_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2350 : 			_Dist_type(_First), _Val_type(_First));
; 2351 : 		}
; 2352 : 	}
; 2353 : 
; 2354 : 		// TEMPLATE FUNCTION push_heap
; 2355 : template<class _RanIt> inline
; 2356 : 	void push_heap(_RanIt _First, _RanIt _Last)
; 2357 : 	{	// push *(_Last - 1) onto heap at [_First, _Last - 1), using operator<
; 2358 : 	_STD push_heap(_First, _Last, less<>());
; 2359 : 	}
; 2360 : 
; 2361 : 		// TEMPLATE FUNCTION pop_heap WITH PRED
; 2362 : template<class _RanIt,
; 2363 : 	class _Diff,
; 2364 : 	class _Ty,
; 2365 : 	class _Pr> inline
; 2366 : 	void _Adjust_heap(_RanIt _First, _Diff _Hole, _Diff _Bottom,
; 2367 : 		_Ty&& _Val, _Pr _Pred)
; 2368 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred
; 2369 : 	_Diff _Top = _Hole;
; 2370 : 	_Diff _Idx = 2 * _Hole + 2;

  00043	8b d0		 mov	 edx, eax

; 2371 : 
; 2372 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00045	3b c1		 cmp	 eax, ecx
  00047	7d 33		 jge	 SHORT $LN11@Make_heap
  00049	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0004c	8d 64 24 00	 npad	 4
$LL13@Make_heap:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00050	8b 44 96 fc	 mov	 eax, DWORD PTR [esi+edx*4-4]
  00054	8b 0c 96	 mov	 ecx, DWORD PTR [esi+edx*4]
  00057	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0005c	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 2374 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00060	76 01		 jbe	 SHORT $LN10@Make_heap

; 2375 : 			--_Idx;

  00062	4a		 dec	 edx
$LN10@Make_heap:

; 2376 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00063	8b 04 96	 mov	 eax, DWORD PTR [esi+edx*4]
  00066	89 04 be	 mov	 DWORD PTR [esi+edi*4], eax

; 2377 : 		_Hole = _Idx;

  00069	8b fa		 mov	 edi, edx
  0006b	8d 14 55 02 00
	00 00		 lea	 edx, DWORD PTR [edx*2+2]
  00072	3b d3		 cmp	 edx, ebx
  00074	7c da		 jl	 SHORT $LL13@Make_heap
  00076	8b 5d fc	 mov	 ebx, DWORD PTR __Hole$1$[ebp]
  00079	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
$LN11@Make_heap:

; 2378 : 		}
; 2379 : 
; 2380 : 	if (_Idx == _Bottom)

  0007c	3b d1		 cmp	 edx, ecx
  0007e	75 0a		 jne	 SHORT $LN9@Make_heap

; 2381 : 		{	// only child at bottom, move _Hole down to it
; 2382 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  00080	8b 44 8e fc	 mov	 eax, DWORD PTR [esi+ecx*4-4]
  00084	89 04 be	 mov	 DWORD PTR [esi+edi*4], eax

; 2383 : 		_Hole = _Bottom - 1;

  00087	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
$LN9@Make_heap:

; 2314 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  0008a	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0008d	99		 cdq
  0008e	2b c2		 sub	 eax, edx
  00090	d1 f8		 sar	 eax, 1

; 2316 : 		_Idx = (_Hole - 1) / 2)

  00092	3b df		 cmp	 ebx, edi
  00094	7d 25		 jge	 SHORT $LN28@Make_heap
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00096	8b 4d 08	 mov	 ecx, DWORD PTR __Val$1$[ebp]
  00099	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  0009e	8b ff		 npad	 2
$LL30@Make_heap:
  000a0	8b 0c 86	 mov	 ecx, DWORD PTR [esi+eax*4]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000a3	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 2316 : 		_Idx = (_Hole - 1) / 2)

  000a7	76 0f		 jbe	 SHORT $LN55@Make_heap

; 2317 : 		{	// move _Hole up to parent
; 2318 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  000a9	89 0c be	 mov	 DWORD PTR [esi+edi*4], ecx

; 2319 : 		_Hole = _Idx;

  000ac	8b f8		 mov	 edi, eax
  000ae	48		 dec	 eax
  000af	99		 cdq
  000b0	2b c2		 sub	 eax, edx
  000b2	d1 f8		 sar	 eax, 1
  000b4	3b df		 cmp	 ebx, edi
  000b6	7c e8		 jl	 SHORT $LL30@Make_heap
$LN55@Make_heap:
  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
$LN28@Make_heap:

; 2320 : 		}
; 2321 : 
; 2322 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  000bb	8b 45 08	 mov	 eax, DWORD PTR __Val$1$[ebp]
  000be	89 04 be	 mov	 DWORD PTR [esi+edi*4], eax

; 2444 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  000c1	8b 45 f8	 mov	 eax, DWORD PTR tv300[ebp]
  000c4	85 db		 test	 ebx, ebx
  000c6	0f 8f 64 ff ff
	ff		 jg	 $LL2@Make_heap
  000cc	5f		 pop	 edi
$LN1@Make_heap:
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx

; 2450 : 		}
; 2451 : 	}

  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
??$_Make_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@PAH0@Z ENDP ; std::_Make_heap<CLight * *,int,CLight *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVCLight@@@std@@YAPAPAVCLight@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVCLight@@@std@@YAPAPAVCLight@@PAPAV1@@Z PROC ; std::_Val_type<CLight * *>, COMDAT

; 646  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 647  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVCLight@@@std@@YAPAPAVCLight@@PAPAV1@@Z ENDP ; std::_Val_type<CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Dist_type@PAPAVCLight@@@std@@YAPAHPAPAVCLight@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAPAVCLight@@@std@@YAPAHPAPAVCLight@@@Z PROC ; std::_Dist_type<CLight * *>, COMDAT

; 706  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 707  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAPAVCLight@@@std@@YAPAHPAPAVCLight@@@Z ENDP ; std::_Dist_type<CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
;	COMDAT ??$?0AAPAPAVCLight@@AAPAPAV0@X@?$pair@PAPAVCLight@@PAPAV1@@std@@QAE@AAPAPAVCLight@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAVCLight@@AAPAPAV0@X@?$pair@PAPAVCLight@@PAPAV1@@std@@QAE@AAPAPAVCLight@@0@Z PROC ; std::pair<CLight * *,CLight * *>::pair<CLight * *,CLight * *><CLight * * &,CLight * * &,void>, COMDAT
; _this$ = ecx

; 144  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 145  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAPAVCLight@@AAPAPAV0@X@?$pair@PAPAVCLight@@PAPAV1@@std@@QAE@AAPAPAVCLight@@0@Z ENDP ; std::pair<CLight * *,CLight * *>::pair<CLight * *,CLight * *><CLight * * &,CLight * * &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
;	COMDAT ??$iter_swap@PAPAVCLight@@PAPAV1@@std@@YAXPAPAVCLight@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAPAVCLight@@PAPAV1@@std@@YAXPAPAVCLight@@0@Z PROC ; std::iter_swap<CLight * *,CLight * *>, COMDAT

; 27   : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : 
; 31   : 		// TEMPLATE FUNCTION swap
; 32   : template<class _Ty,
; 33   : 	size_t _Size> inline
; 34   : 	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
; 35   : 		_NOEXCEPT_OP(_NOEXCEPT_OP(swap(*_Left, *_Right)))
; 36   : 	{	// exchange arrays stored at _Left and _Right
; 37   : 	if (&_Left != &_Right)
; 38   : 		{	// worth swapping, swap ranges
; 39   : 		_Ty *_First1 = _Left;
; 40   : 		_Ty *_Last1 = _First1 + _Size;
; 41   : 		_Ty *_First2 = _Right;
; 42   : 		for (; _First1 != _Last1; ++_First1, ++_First2)
; 43   : 			_STD iter_swap(_First1, _First2);
; 44   : 		}
; 45   : 	}
; 46   : 
; 47   : template<class _Ty> inline
; 48   : 	void swap(_Ty& _Left, _Ty& _Right)
; 49   : 		_NOEXCEPT_OP(is_nothrow_move_constructible<_Ty>::value
; 50   : 			&& is_nothrow_move_assignable<_Ty>::value)
; 51   : 	{	// exchange values stored at _Left and _Right
; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi

; 30   : 
; 31   : 		// TEMPLATE FUNCTION swap
; 32   : template<class _Ty,
; 33   : 	size_t _Size> inline
; 34   : 	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
; 35   : 		_NOEXCEPT_OP(_NOEXCEPT_OP(swap(*_Left, *_Right)))
; 36   : 	{	// exchange arrays stored at _Left and _Right
; 37   : 	if (&_Left != &_Right)
; 38   : 		{	// worth swapping, swap ranges
; 39   : 		_Ty *_First1 = _Left;
; 40   : 		_Ty *_Last1 = _First1 + _Size;
; 41   : 		_Ty *_First2 = _Right;
; 42   : 		for (; _First1 != _Last1; ++_First1, ++_First2)
; 43   : 			_STD iter_swap(_First1, _First2);
; 44   : 		}
; 45   : 	}
; 46   : 
; 47   : template<class _Ty> inline
; 48   : 	void swap(_Ty& _Left, _Ty& _Right)
; 49   : 		_NOEXCEPT_OP(is_nothrow_move_constructible<_Ty>::value
; 50   : 			&& is_nothrow_move_assignable<_Ty>::value)
; 51   : 	{	// exchange values stored at _Left and _Right
; 52   : 	_Ty _Tmp = _Move(_Left);

  0000a	8b 32		 mov	 esi, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 28   : 	swap(*_Left, *_Right);
; 29   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$iter_swap@PAPAVCLight@@PAPAV1@@std@@YAXPAPAVCLight@@0@Z ENDP ; std::iter_swap<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Median@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z
_TEXT	SEGMENT
tv722 = -8						; size = 4
tv705 = -8						; size = 4
tv709 = -4						; size = 4
__Tmp$1$ = -4						; size = 4
__Tmp$1$ = -4						; size = 4
__First$1$ = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv704 = 16						; size = 4
__Tmp$1$ = 16						; size = 4
__Tmp$1$ = 16						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Median@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z PROC ; std::_Median<CLight * *,LightComp>, COMDAT

; 3046 : 	{	// sort median element to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3047 : 	if (40 < _Last - _First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	8b c3		 mov	 eax, ebx
  0000f	2b c1		 sub	 eax, ecx
  00011	c1 f8 02	 sar	 eax, 2
  00014	56		 push	 esi
  00015	83 f8 28	 cmp	 eax, 40			; 00000028H
  00018	0f 8e 65 01 00
	00		 jle	 $LN2@Median

; 3048 : 		{	// median of nine
; 3049 : 		size_t _Step = (_Last - _First + 1) / 8;

  0001e	40		 inc	 eax
  0001f	99		 cdq
  00020	83 e2 07	 and	 edx, 7
  00023	03 c2		 add	 eax, edx
  00025	c1 f8 03	 sar	 eax, 3
  00028	57		 push	 edi

; 3050 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

  00029	8d 3c c5 00 00
	00 00		 lea	 edi, DWORD PTR [eax*8]
  00030	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00037	89 7d f8	 mov	 DWORD PTR tv722[ebp], edi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  0003a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003c	8b 14 0e	 mov	 edx, DWORD PTR [esi+ecx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0003f	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00044	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3033 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00048	76 05		 jbe	 SHORT $LN18@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0004a	89 04 0e	 mov	 DWORD PTR [esi+ecx], eax

; 54   : 	_Right = _Move(_Tmp);

  0004d	89 11		 mov	 DWORD PTR [ecx], edx
$LN18@Median:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0004f	8b 04 0e	 mov	 eax, DWORD PTR [esi+ecx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00052	8b 14 0f	 mov	 edx, DWORD PTR [edi+ecx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00055	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0005a	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3035 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  0005e	76 18		 jbe	 SHORT $LN50@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00060	89 04 0f	 mov	 DWORD PTR [edi+ecx], eax

; 54   : 	_Right = _Move(_Tmp);

  00063	89 14 0e	 mov	 DWORD PTR [esi+ecx], edx
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00066	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00068	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0006d	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3038 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00071	76 05		 jbe	 SHORT $LN50@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00073	89 04 0e	 mov	 DWORD PTR [esi+ecx], eax

; 54   : 	_Right = _Move(_Tmp);

  00076	89 11		 mov	 DWORD PTR [ecx], edx
$LN50@Median:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3051 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00078	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  0007b	8b fa		 mov	 edi, edx
  0007d	2b fe		 sub	 edi, esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  0007f	8b 02		 mov	 eax, DWORD PTR [edx]
  00081	89 45 fc	 mov	 DWORD PTR __Tmp$1$[ebp], eax
  00084	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00086	8b 5d fc	 mov	 ebx, DWORD PTR __Tmp$1$[ebp]
  00089	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0008e	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3033 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00092	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  00095	76 07		 jbe	 SHORT $LN71@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00097	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00099	8b 45 fc	 mov	 eax, DWORD PTR __Tmp$1$[ebp]
  0009c	89 07		 mov	 DWORD PTR [edi], eax
$LN71@Median:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  0009e	8b 04 16	 mov	 eax, DWORD PTR [esi+edx]
  000a1	89 45 fc	 mov	 DWORD PTR __Tmp$1$[ebp], eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000a4	8b 02		 mov	 eax, DWORD PTR [edx]
  000a6	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  000ab	8b 45 fc	 mov	 eax, DWORD PTR __Tmp$1$[ebp]
  000ae	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3035 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  000b2	76 23		 jbe	 SHORT $LN103@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  000b4	8b 02		 mov	 eax, DWORD PTR [edx]
  000b6	89 04 16	 mov	 DWORD PTR [esi+edx], eax

; 54   : 	_Right = _Move(_Tmp);

  000b9	8b 45 fc	 mov	 eax, DWORD PTR __Tmp$1$[ebp]
  000bc	89 02		 mov	 DWORD PTR [edx], eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  000be	8b 1f		 mov	 ebx, DWORD PTR [edi]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000c0	f3 0f 10 43 78	 movss	 xmm0, DWORD PTR [ebx+120]
  000c5	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3038 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  000c9	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  000cc	76 09		 jbe	 SHORT $LN103@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  000ce	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000d0	89 0a		 mov	 DWORD PTR [edx], ecx
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 54   : 	_Right = _Move(_Tmp);

  000d5	89 07		 mov	 DWORD PTR [edi], eax
$LN103@Median:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3052 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  000d7	8b fb		 mov	 edi, ebx
  000d9	8b c3		 mov	 eax, ebx
  000db	2b 45 f8	 sub	 eax, DWORD PTR tv722[ebp]
  000de	2b fe		 sub	 edi, esi
  000e0	89 45 fc	 mov	 DWORD PTR __First$1$[ebp], eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  000e3	8b 17		 mov	 edx, DWORD PTR [edi]
  000e5	89 55 10	 mov	 DWORD PTR __Tmp$1$[ebp], edx
  000e8	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000ea	f3 0f 10 42 78	 movss	 xmm0, DWORD PTR [edx+120]
  000ef	8b 55 10	 mov	 edx, DWORD PTR __Tmp$1$[ebp]
  000f2	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3033 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  000f6	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  000f9	76 0c		 jbe	 SHORT $LN124@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  000fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fd	89 0f		 mov	 DWORD PTR [edi], ecx

; 54   : 	_Right = _Move(_Tmp);

  000ff	8b 4d 10	 mov	 ecx, DWORD PTR __Tmp$1$[ebp]
  00102	89 08		 mov	 DWORD PTR [eax], ecx
  00104	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
$LN124@Median:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00107	8b 03		 mov	 eax, DWORD PTR [ebx]
  00109	89 45 10	 mov	 DWORD PTR __Tmp$1$[ebp], eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0010c	8b 07		 mov	 eax, DWORD PTR [edi]
  0010e	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00113	8b 45 10	 mov	 eax, DWORD PTR __Tmp$1$[ebp]
  00116	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3035 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  0011a	76 25		 jbe	 SHORT $LN156@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0011c	8b 07		 mov	 eax, DWORD PTR [edi]
  0011e	89 03		 mov	 DWORD PTR [ebx], eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00120	8b 45 fc	 mov	 eax, DWORD PTR __First$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 54   : 	_Right = _Move(_Tmp);

  00123	8b 5d 10	 mov	 ebx, DWORD PTR __Tmp$1$[ebp]
  00126	89 1f		 mov	 DWORD PTR [edi], ebx
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00128	8b 08		 mov	 ecx, DWORD PTR [eax]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0012a	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  0012f	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3038 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00133	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00136	76 09		 jbe	 SHORT $LN156@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00138	8b 10		 mov	 edx, DWORD PTR [eax]
  0013a	89 17		 mov	 DWORD PTR [edi], edx
  0013c	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]

; 54   : 	_Right = _Move(_Tmp);

  0013f	89 18		 mov	 DWORD PTR [eax], ebx
$LN156@Median:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00141	8b 04 0e	 mov	 eax, DWORD PTR [esi+ecx]
  00144	8b 1a		 mov	 ebx, DWORD PTR [edx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00146	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0014b	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3033 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0014f	76 05		 jbe	 SHORT $LN177@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00151	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00153	89 1c 0e	 mov	 DWORD PTR [esi+ecx], ebx
$LN177@Median:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00156	8b 02		 mov	 eax, DWORD PTR [edx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00158	8b 1f		 mov	 ebx, DWORD PTR [edi]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0015a	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0015f	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3035 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00163	76 17		 jbe	 SHORT $LN270@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00165	89 07		 mov	 DWORD PTR [edi], eax

; 54   : 	_Right = _Move(_Tmp);

  00167	89 1a		 mov	 DWORD PTR [edx], ebx
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00169	8b 04 0e	 mov	 eax, DWORD PTR [esi+ecx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0016c	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00171	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3038 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00175	76 05		 jbe	 SHORT $LN270@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00177	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00179	89 1c 0e	 mov	 DWORD PTR [esi+ecx], ebx
$LN270@Median:
  0017c	5f		 pop	 edi
$LN262@Median:
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3057 : 	}

  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
$LN2@Median:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00183	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  00186	8b 01		 mov	 eax, DWORD PTR [ecx]
  00188	8b 32		 mov	 esi, DWORD PTR [edx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0018a	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0018f	0f 2f 46 78	 comiss	 xmm0, DWORD PTR [esi+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3033 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00193	76 04		 jbe	 SHORT $LN230@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00195	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00197	89 31		 mov	 DWORD PTR [ecx], esi
$LN230@Median:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00199	8b 02		 mov	 eax, DWORD PTR [edx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  0019b	8b 33		 mov	 esi, DWORD PTR [ebx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0019d	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  001a2	0f 2f 46 78	 comiss	 xmm0, DWORD PTR [esi+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3035 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  001a6	76 d5		 jbe	 SHORT $LN262@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  001a8	89 03		 mov	 DWORD PTR [ebx], eax

; 54   : 	_Right = _Move(_Tmp);

  001aa	89 32		 mov	 DWORD PTR [edx], esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  001ac	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  001ae	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  001b3	0f 2f 46 78	 comiss	 xmm0, DWORD PTR [esi+120]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3038 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  001b7	76 c4		 jbe	 SHORT $LN262@Median
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  001b9	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  001bb	89 31		 mov	 DWORD PTR [ecx], esi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3057 : 	}

  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c3		 ret	 0
??$_Median@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ENDP ; std::_Median<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::construct<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 601  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::construct<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z PROC ; std::_Uninit_move<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >, COMDAT

; 482  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 483  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 485  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z ENDP ; std::_Uninit_move<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::destroy<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::destroy<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 601  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVCLight@@@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAVCLight@@@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@@Z PROC ; std::allocator<CLight *>::destroy<CLight *>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAVCLight@@@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@@Z ENDP ; std::allocator<CLight *>::destroy<CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAVCLight@@PAPAV1@@std@@YAAAPAPAVCLight@@AAPAPAV1@PAPAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAVCLight@@PAPAV1@@std@@YAAAPAPAVCLight@@AAPAPAV1@PAPAV1@@Z PROC ; std::_Rechecked<CLight * *,CLight * *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 	return (_Dest);
; 291  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAPAVCLight@@PAPAV1@@std@@YAAAPAPAVCLight@@AAPAPAV1@PAPAV1@@Z ENDP ; std::_Rechecked<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z PROC ; std::_Uninit_copy<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >, COMDAT

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 416  : 		_Ptr_cat(_First, _Dest)));
; 417  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_copy@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z ENDP ; std::_Uninit_copy<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAVCLight@@@std@@YAPAPAVCLight@@PAPAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAVCLight@@@std@@YAPAPAVCLight@@PAPAV1@@Z PROC ; std::_Unchecked<CLight * *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 282  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAPAVCLight@@@std@@YAPAPAVCLight@@PAPAV1@@Z ENDP ; std::_Unchecked<CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAK@?$allocator@K@std@@QAEXPAPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAK@?$allocator@K@std@@QAEXPAPAK@Z PROC	; std::allocator<unsigned long>::destroy<unsigned long *>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAK@?$allocator@K@std@@QAEXPAPAK@Z ENDP	; std::allocator<unsigned long>::destroy<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Fill_n@PAPAKIPAK@std@@YAPAPAKPAPAKIABQAK@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill_n@PAPAKIPAK@std@@YAPAPAKPAPAKIABQAK@Z PROC	; std::_Fill_n<unsigned long * *,unsigned int,unsigned long *>, COMDAT

; 2631 : 	{	// copy _Val _Count times through [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	85 d2		 test	 edx, edx
  0000b	74 0f		 je	 SHORT $LN1@Fill_n
  0000d	56		 push	 esi
  0000e	8b 75 10	 mov	 esi, DWORD PTR __Val$[ebp]
$LL3@Fill_n:

; 2633 : 		*_Dest = _Val;

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	89 08		 mov	 DWORD PTR [eax], ecx
  00015	83 c0 04	 add	 eax, 4
  00018	4a		 dec	 edx
  00019	75 f6		 jne	 SHORT $LL3@Fill_n
  0001b	5e		 pop	 esi
$LN1@Fill_n:

; 2634 : 	return (_Dest);
; 2635 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Fill_n@PAPAKIPAK@std@@YAPAPAKPAPAKIABQAK@Z ENDP	; std::_Fill_n<unsigned long * *,unsigned int,unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PAKPAK@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAKPAK@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<unsigned long *,unsigned long *>, COMDAT

; 401  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 402  : 	_DEBUG_RANGE(_First, _Last);
; 403  : 	_DEBUG_POINTER(_Dest);
; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 407  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_copy@PAKPAK@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<unsigned long *,unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCLight@@AAPAV1@@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCLight@@AAPAV1@@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@AAPAV2@@Z PROC ; std::allocator<CLight *>::construct<CLight *,CLight * &>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 601  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCLight@@AAPAV1@@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@AAPAV2@@Z ENDP ; std::allocator<CLight *>::construct<CLight *,CLight * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::destroy<std::pair<unsigned long const ,CLight *> >, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::destroy<std::pair<unsigned long const ,CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
_TEXT	SEGMENT
tv495 = -28						; size = 4
_this$1$ = -24						; size = 4
__Addleft$2 = -20					; size = 1
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
$T3 = 12						; size = 4
__Where$4 = 12						; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_nohint<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>, COMDAT
; _this$ = ecx

; 1777 : 		_Pairib _Insert_nohint(bool _Leftish,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b c1		 mov	 eax, ecx
  0002d	89 45 e8	 mov	 DWORD PTR _this$1$[ebp], eax

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00030	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1782 : 		_Nodeptr _Wherenode = this->_Myhead;
; 1783 : 		bool _Addleft = true;	// add to left of head if tree empty

  00032	b2 01		 mov	 dl, 1
  00034	8b 5d 10	 mov	 ebx, DWORD PTR __Val$[ebp]
  00037	8b f9		 mov	 edi, ecx
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00040	89 4d e4	 mov	 DWORD PTR tv495[ebp], ecx

; 1778 : 			_Valty&& _Val, _Nodety _Newnode)
; 1779 : 		{	// try to insert node, on left if _Leftish
; 1780 : 		_TRY_BEGIN
; 1781 : 		_Nodeptr _Trynode = _Root();

  00043	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1782 : 		_Nodeptr _Wherenode = this->_Myhead;
; 1783 : 		bool _Addleft = true;	// add to left of head if tree empty

  00046	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1784 : 
; 1785 : 		while (!this->_Isnil(_Trynode))

  00049	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004d	75 30		 jne	 SHORT $LN11@Insert_noh
  0004f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00051	8a 75 0c	 mov	 dh, BYTE PTR __Leftish$[ebp]
$LL12@Insert_noh:

; 1786 : 			{	// look for leaf to insert before (_Addleft) or after
; 1787 : 			_Wherenode = _Trynode;

  00054	8b f8		 mov	 edi, eax

; 1788 : 			if (_Leftish)

  00056	84 f6		 test	 dh, dh
  00058	74 08		 je	 SHORT $LN10@Insert_noh
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  0005a	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1789 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  0005d	0f 93 c2	 setae	 dl

; 1790 : 					this->_Key(_Trynode),
; 1791 : 					this->_Kfn(_Val));	// favor left end
; 1792 : 			else

  00060	eb 06		 jmp	 SHORT $LN175@Insert_noh
$LN10@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  00062	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00065	0f 92 c2	 setb	 dl
$LN175@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1793 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

  00068	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1794 : 					this->_Kfn(_Val),
; 1795 : 					this->_Key(_Trynode));	// favor right end
; 1796 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1797 : 				: this->_Right(_Trynode);

  0006b	84 d2		 test	 dl, dl
  0006d	74 04		 je	 SHORT $LN16@Insert_noh
  0006f	8b 00		 mov	 eax, DWORD PTR [eax]
  00071	eb 03		 jmp	 SHORT $LN17@Insert_noh
$LN16@Insert_noh:
  00073	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN17@Insert_noh:

; 1784 : 
; 1785 : 		while (!this->_Isnil(_Trynode))

  00076	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007a	74 d8		 je	 SHORT $LL12@Insert_noh
  0007c	8b 4d e4	 mov	 ecx, DWORD PTR tv495[ebp]
$LN11@Insert_noh:

; 44   : 		{	// construct with node pointer _Pnode

  0007f	8b f7		 mov	 esi, edi
  00081	89 75 0c	 mov	 DWORD PTR __Where$4[ebp], esi

; 1798 : 			}
; 1799 : 
; 1800 : 		if (this->_Multi)
; 1801 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1802 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1803 : 		else
; 1804 : 			{	// insert only if unique
; 1805 : 			iterator _Where = iterator(_Wherenode, this);
; 1806 : 			if (!_Addleft)

  00084	84 d2		 test	 dl, dl
  00086	74 41		 je	 SHORT $LN106@Insert_noh

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  00088	3b 39		 cmp	 edi, DWORD PTR [ecx]

; 1807 : 				;	// need to test if insert after is okay
; 1808 : 			else if (_Where == begin())

  0008a	75 32		 jne	 SHORT $LN4@Insert_noh

; 1809 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  0008c	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  0008f	53		 push	 ebx
  00090	57		 push	 edi
  00091	6a 01		 push	 1
$LN176@Insert_noh:
  00093	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00096	8d 45 0c	 lea	 eax, DWORD PTR $T3[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAU?$pair@$$CBKPAVCLight@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_at<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 144  : 		{	// construct from moved values

  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a4	89 08		 mov	 DWORD PTR [eax], ecx
  000a6	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1829 : 		}

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 10 00	 ret	 16			; 00000010H
$LN4@Insert_noh:

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  000be	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$4[ebp]
  000c1	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator--
  000c6	8b 75 0c	 mov	 esi, DWORD PTR __Where$4[ebp]
$LN106@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  000c9	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1817 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  000cc	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  000cf	3b 03		 cmp	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1814 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  000d1	73 1b		 jae	 SHORT $LN2@Insert_noh

; 1817 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  000d3	53		 push	 ebx
  000d4	57		 push	 edi
  000d5	ff 75 ec	 push	 DWORD PTR __Addleft$2[ebp]
  000d8	eb b9		 jmp	 SHORT $LN176@Insert_noh
__catch$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z$0:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000da	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e2	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1827 : 		_RERAISE;

  000e5	6a 00		 push	 0
  000e7	6a 00		 push	 0
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN177@Insert_noh:
$LN2@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000ee	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 144  : 		{	// construct from moved values

  000f3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000f6	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 144  : 		{	// construct from moved values

  000f9	89 30		 mov	 DWORD PTR [eax], esi
  000fb	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1829 : 		}

  000ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00102	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00109	59		 pop	 ecx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 10 00	 ret	 16			; 00000010H
$LN174@Insert_noh:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_nohint<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAU?$pair@$$CBKPAVCLight@@@1@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAU?$pair@$$CBKPAVCLight@@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_at<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>, COMDAT
; _this$ = ecx

; 1833 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 1834 : 		_Valty&& _Val, _Nodety _Node)
; 1835 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1836 : 		if (max_size() - 1 <= this->_Mysize)

  00007	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000a	3d a9 aa aa 0a	 cmp	 eax, 178956969		; 0aaaaaa9H
  0000f	0f 83 df 01 00
	00		 jae	 $LN396@Insert_at

; 1840 : 			}
; 1841 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1842 : 			_STD forward<_Valty>(_Val));
; 1843 : 
; 1844 : 		++this->_Mysize;
; 1845 : 		_Newnode->_Parent = _Wherenode;

  00015	8b 5d 18	 mov	 ebx, DWORD PTR __Node$[ebp]
  00018	40		 inc	 eax
  00019	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0001c	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0001f	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1846 : 
; 1847 : 		if (_Wherenode == this->_Myhead)

  00022	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00024	3b c1		 cmp	 eax, ecx
  00026	75 0e		 jne	 SHORT $LN16@Insert_at

; 1848 : 			{	// first node in tree, just set head values
; 1849 : 			_Root() = _Newnode;

  00028	89 59 04	 mov	 DWORD PTR [ecx+4], ebx

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  0002b	8b 07		 mov	 eax, DWORD PTR [edi]

; 1850 : 			_Lmost() = _Newnode;

  0002d	89 18		 mov	 DWORD PTR [eax], ebx

; 1851 : 			_Rmost() = _Newnode;

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
  00031	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00034	eb 1f		 jmp	 SHORT $LN11@Insert_at
$LN16@Insert_at:

; 1852 : 			}
; 1853 : 		else if (_Addleft)

  00036	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  0003a	74 0c		 je	 SHORT $LN14@Insert_at

; 1854 : 			{	// add to left of _Wherenode
; 1855 : 			this->_Left(_Wherenode) = _Newnode;

  0003c	89 18		 mov	 DWORD PTR [eax], ebx

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  0003e	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1856 : 			if (_Wherenode == _Lmost())

  00040	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00042	75 11		 jne	 SHORT $LN11@Insert_at

; 1857 : 				_Lmost() = _Newnode;

  00044	89 19		 mov	 DWORD PTR [ecx], ebx

; 1858 : 			}
; 1859 : 		else

  00046	eb 0d		 jmp	 SHORT $LN11@Insert_at
$LN14@Insert_at:

; 1860 : 			{	// add to right of _Wherenode
; 1861 : 			this->_Right(_Wherenode) = _Newnode;

  00048	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);

  0004b	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1862 : 			if (_Wherenode == _Rmost())

  0004d	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00050	75 03		 jne	 SHORT $LN11@Insert_at

; 1863 : 				_Rmost() = _Newnode;

  00052	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
$LN11@Insert_at:

; 1864 : 			}
; 1865 : 
; 1866 : 		for (_Nodeptr _Pnode = _Newnode;
; 1867 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00055	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00058	8b c3		 mov	 eax, ebx
  0005a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0005e	0f 85 7c 01 00
	00		 jne	 $LN9@Insert_at
  00064	56		 push	 esi
$LL10@Insert_at:

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  00068	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]

; 1868 : 			if (this->_Parent(_Pnode)
; 1869 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  0006b	8b 16		 mov	 edx, DWORD PTR [esi]
  0006d	3b ca		 cmp	 ecx, edx
  0006f	0f 85 ab 00 00
	00		 jne	 $LN8@Insert_at

; 1870 : 				{	// fixup red-red in left subtree
; 1871 : 				_Wherenode =
; 1872 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

  00075	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 1873 : 				if (this->_Color(_Wherenode) == this->_Red)

  00078	80 7a 0c 00	 cmp	 BYTE PTR [edx+12], 0
  0007c	0f 84 a4 00 00
	00		 je	 $LN395@Insert_at

; 1874 : 					{	// parent has two red children, blacken both
; 1875 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1876 : 					this->_Color(_Wherenode) = this->_Black;
; 1877 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1878 : 						= this->_Red;
; 1879 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1880 : 					}
; 1881 : 				else
; 1882 : 					{	// parent has red and black children
; 1883 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  00082	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00085	75 3a		 jne	 SHORT $LN127@Insert_at

; 1884 : 						{	// rotate right child to left
; 1885 : 						_Pnode = this->_Parent(_Pnode);

  00087	8b c1		 mov	 eax, ecx

; 1925 : 
; 1926 : 	template<class _Moveit>
; 1927 : 		void _Copy(const _Myt& _Right,
; 1928 : 			_Moveit _Movefl)
; 1929 : 		{	// copy or move entire tree from _Right
; 1930 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead, _Movefl);
; 1931 : 		this->_Mysize = _Right.size();
; 1932 : 		if (!this->_Isnil(_Root()))
; 1933 : 			{	// nonempty tree, look for new smallest and largest
; 1934 : 			_Lmost() = this->_Min(_Root());
; 1935 : 			_Rmost() = this->_Max(_Root());
; 1936 : 			}
; 1937 : 		else
; 1938 : 			{	// empty tree, just tidy head pointers
; 1939 : 			_Lmost() = this->_Myhead;
; 1940 : 			_Rmost() = this->_Myhead;
; 1941 : 			}
; 1942 : 		}
; 1943 : 
; 1944 : 	template<class _Want_to_move,
; 1945 : 		class _Can_move,
; 1946 : 		class _Is_set,
; 1947 : 		class _Dummy>
; 1948 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, _Want_to_move,
; 1949 : 			_Can_move, _Is_set, _Dummy)
; 1950 : 		{	// copy to new node -- nonmovable
; 1951 : 		return (this->_Buynode(this->_Myval(_Rootnode)));
; 1952 : 		}
; 1953 : 
; 1954 : 	template<class _Dummy>
; 1955 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1956 : 			true_type, true_type, _Dummy)
; 1957 : 		{	// move to new node -- movable, set
; 1958 : 		return (this->_Buynode(
; 1959 : 			_STD forward<value_type>(this->_Myval(_Rootnode))));
; 1960 : 		}
; 1961 : 
; 1962 : 	template<class _Dummy>
; 1963 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1964 : 			true_type, false_type, _Dummy)
; 1965 : 		{	// move to new node -- movable, map
; 1966 : 		return (this->_Buynode(
; 1967 : 			_STD forward<key_type>(const_cast<key_type&>(
; 1968 : 				this->_Myval(_Rootnode).first)),
; 1969 : 			_STD forward<typename value_type::second_type>(this->_Myval(
; 1970 : 				_Rootnode).second)));
; 1971 : 		}
; 1972 : 
; 1973 : 	template<class _Moveit>
; 1974 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1975 : 			_Moveit _Movefl)
; 1976 : 		{	// copy entire subtree, recursively
; 1977 : 		_Nodeptr _Newroot = this->_Myhead;	// point at nil node
; 1978 : 
; 1979 : 		if (!this->_Isnil(_Rootnode))
; 1980 : 			{	// copy or move a node, then any subtrees
; 1981 : 			_Nodeptr _Pnode = _Copy_or_move(_Rootnode, _Movefl,
; 1982 : 				typename is_move_constructible<value_type>::type(),
; 1983 : 				typename is_same<key_type, value_type>::type(), 0);
; 1984 : 			_Pnode->_Parent = _Wherenode;
; 1985 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1986 : 			if (this->_Isnil(_Newroot))
; 1987 : 				_Newroot = _Pnode;	// memorize new root
; 1988 : 
; 1989 : 			_TRY_BEGIN
; 1990 : 			this->_Left(_Pnode) =
; 1991 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 1992 : 			this->_Right(_Pnode) =
; 1993 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 1994 : 			_CATCH_ALL
; 1995 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 1996 : 			_RERAISE;
; 1997 : 			_CATCH_END
; 1998 : 			}
; 1999 : 
; 2000 : 		return (_Newroot);	// return newly constructed tree
; 2001 : 		}
; 2002 : 
; 2003 : 	_Paircc _Eqrange(const key_type& _Keyval) const
; 2004 : 		{	// find leftmost node not less than _Keyval
; 2005 : 		_Nodeptr _Pnode = _Root();
; 2006 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2007 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2008 : 
; 2009 : 		while (!this->_Isnil(_Pnode))
; 2010 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2011 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2012 : 			else
; 2013 : 				{	// _Pnode not less than _Keyval, remember it
; 2014 : 				if (this->_Isnil(_Hinode)
; 2015 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2016 : 						this->_Key(_Pnode)))
; 2017 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2018 : 				_Lonode = _Pnode;
; 2019 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2020 : 				}
; 2021 : 
; 2022 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2023 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2024 : 		while (!this->_Isnil(_Pnode))
; 2025 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2026 : 				{	// _Pnode greater than _Keyval, remember it
; 2027 : 				_Hinode = _Pnode;
; 2028 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2029 : 				}
; 2030 : 			else
; 2031 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2032 : 
; 2033 : 		const_iterator _First = const_iterator(_Lonode, this);
; 2034 : 		const_iterator _Last = const_iterator(_Hinode, this);
; 2035 : 		return (_Paircc(_First, _Last));
; 2036 : 		}
; 2037 : 
; 2038 : 	_Pairii _Eqrange(const key_type& _Keyval)
; 2039 : 		{	// find leftmost node not less than _Keyval
; 2040 : 		_Nodeptr _Pnode = _Root();
; 2041 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2042 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2043 : 
; 2044 : 		while (!this->_Isnil(_Pnode))
; 2045 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2046 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2047 : 			else
; 2048 : 				{	// _Pnode not less than _Keyval, remember it
; 2049 : 				if (this->_Isnil(_Hinode)
; 2050 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2051 : 						 this->_Key(_Pnode)))
; 2052 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2053 : 				_Lonode = _Pnode;
; 2054 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2055 : 				}
; 2056 : 
; 2057 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2058 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2059 : 		while (!this->_Isnil(_Pnode))
; 2060 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2061 : 				{	// _Pnode greater than _Keyval, remember it
; 2062 : 				_Hinode = _Pnode;
; 2063 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2064 : 				}
; 2065 : 			else
; 2066 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2067 : 
; 2068 : 		iterator _First = iterator(_Lonode, this);
; 2069 : 		iterator _Last = iterator(_Hinode, this);
; 2070 : 		return (_Pairii(_First, _Last));
; 2071 : 		}
; 2072 : 
; 2073 : 	void _Erase(_Nodeptr _Rootnode)
; 2074 : 		{	// free entire subtree, recursively
; 2075 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2076 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2077 : 			{	// free subtrees, then node
; 2078 : 			_Erase(this->_Right(_Pnode));
; 2079 : 			_Pnode = this->_Left(_Pnode);
; 2080 : 			this->_Getal().destroy(
; 2081 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2082 : 
; 2083 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2084 : 			}
; 2085 : 		}
; 2086 : 
; 2087 : 	_Nodeptr _Lbound(const key_type& _Keyval) const
; 2088 : 		{	// find leftmost node not less than _Keyval
; 2089 : 		_Nodeptr _Pnode = _Root();
; 2090 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2091 : 
; 2092 : 		while (!this->_Isnil(_Pnode))
; 2093 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2094 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2095 : 			else
; 2096 : 				{	// _Pnode not less than _Keyval, remember it
; 2097 : 				_Wherenode = _Pnode;
; 2098 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2099 : 				}
; 2100 : 
; 2101 : 		return (_Wherenode);	// return best remembered candidate
; 2102 : 		}
; 2103 : 
; 2104 : 	_Nodeptr _Lbound(const key_type& _Keyval)
; 2105 : 		{	// find leftmost node not less than _Keyval
; 2106 : 		_Nodeptr _Pnode = _Root();
; 2107 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2108 : 
; 2109 : 		while (!this->_Isnil(_Pnode))
; 2110 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2111 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2112 : 			else
; 2113 : 				{	// _Pnode not less than _Keyval, remember it
; 2114 : 				_Wherenode = _Pnode;
; 2115 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2116 : 				}
; 2117 : 
; 2118 : 		return (_Wherenode);	// return best remembered candidate
; 2119 : 		}
; 2120 : 
; 2121 : 	_Nodeptr& _Lmost() const
; 2122 : 		{	// return leftmost node in nonmutable tree
; 2123 : 		return (this->_Left(this->_Myhead));
; 2124 : 		}
; 2125 : 
; 2126 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2127 : 		{	// promote right node to root of subtree
; 2128 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00089	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 2129 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0008c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0008e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00091	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 2130 : 
; 2131 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00093	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00097	75 03		 jne	 SHORT $LN126@Insert_at

; 2132 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00099	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN126@Insert_at:

; 2133 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0009c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  000a2	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 2134 : 
; 2135 : 		if (_Wherenode == _Root())

  000a4	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a7	75 05		 jne	 SHORT $LN125@Insert_at

; 2136 : 			_Root() = _Pnode;

  000a9	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 2137 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  000ac	eb 0e		 jmp	 SHORT $LN122@Insert_at
$LN125@Insert_at:

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  000ae	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 2137 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  000b1	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000b3	75 04		 jne	 SHORT $LN123@Insert_at

; 2138 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  000b5	89 11		 mov	 DWORD PTR [ecx], edx

; 2139 : 		else

  000b7	eb 03		 jmp	 SHORT $LN122@Insert_at
$LN123@Insert_at:

; 2140 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  000b9	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN122@Insert_at:

; 2141 : 
; 2142 : 		this->_Left(_Pnode) = _Wherenode;

  000bc	89 02		 mov	 DWORD PTR [edx], eax

; 2143 : 		this->_Parent(_Wherenode) = _Pnode;

  000be	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN127@Insert_at:

; 1886 : 						_Lrotate(_Pnode);
; 1887 : 						}
; 1888 : 					this->_Color(this->_Parent(_Pnode)) =
; 1889 : 						this->_Black;	// propagate red up

  000c1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c4	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1890 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1891 : 						this->_Red;

  000c8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000ce	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 1892 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  000d2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 2144 : 		}
; 2145 : 
; 2146 : 	_Nodeptr& _Rmost() const
; 2147 : 		{	// return rightmost node in nonmutable tree
; 2148 : 		return (this->_Right(this->_Myhead));
; 2149 : 		}
; 2150 : 
; 2151 : 	_Nodeptr& _Root() const
; 2152 : 		{	// return root of nonmutable tree
; 2153 : 		return (this->_Parent(this->_Myhead));
; 2154 : 		}
; 2155 : 
; 2156 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2157 : 		{	// promote left node to root of subtree
; 2158 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  000d8	8b 32		 mov	 esi, DWORD PTR [edx]

; 2159 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  000da	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dd	89 0a		 mov	 DWORD PTR [edx], ecx

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  000df	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 2160 : 
; 2161 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  000e2	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e6	75 03		 jne	 SHORT $LN189@Insert_at

; 2162 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  000e8	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN189@Insert_at:

; 2163 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  000eb	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ee	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  000f1	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 2164 : 
; 2165 : 		if (_Wherenode == _Root())

  000f3	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f6	75 0b		 jne	 SHORT $LN188@Insert_at

; 2166 : 			_Root() = _Pnode;

  000f8	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 2171 : 
; 2172 : 		this->_Right(_Pnode) = _Wherenode;

  000fb	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1893 : 					}
; 1894 : 				}
; 1895 : 			else

  000fe	e9 cc 00 00 00	 jmp	 $LN394@Insert_at
$LN188@Insert_at:

; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);

  00103	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 2167 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00106	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00109	75 0b		 jne	 SHORT $LN186@Insert_at

; 2168 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0010b	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 2171 : 
; 2172 : 		this->_Right(_Pnode) = _Wherenode;

  0010e	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1893 : 					}
; 1894 : 				}
; 1895 : 			else

  00111	e9 b9 00 00 00	 jmp	 $LN394@Insert_at
$LN186@Insert_at:

; 2170 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  00116	89 31		 mov	 DWORD PTR [ecx], esi

; 2171 : 
; 2172 : 		this->_Right(_Pnode) = _Wherenode;

  00118	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1893 : 					}
; 1894 : 				}
; 1895 : 			else

  0011b	e9 af 00 00 00	 jmp	 $LN394@Insert_at
$LN8@Insert_at:

; 1896 : 				{	// fixup red-red in right subtree
; 1897 : 				_Wherenode =
; 1898 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1899 : 				if (this->_Color(_Wherenode) == this->_Red)

  00120	80 7a 0c 00	 cmp	 BYTE PTR [edx+12], 0
  00124	75 1d		 jne	 SHORT $LN3@Insert_at
$LN395@Insert_at:

; 1900 : 					{	// parent has two red children, blacken both
; 1901 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  00126	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1902 : 					this->_Color(_Wherenode) = this->_Black;

  0012a	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 1903 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1904 : 						this->_Red;

  0012e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00131	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00134	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 1905 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  00138	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0013b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1906 : 					}
; 1907 : 				else

  0013e	e9 8f 00 00 00	 jmp	 $LN332@Insert_at
$LN3@Insert_at:

; 1908 : 					{	// parent has red and black children
; 1909 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00143	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00145	75 3c		 jne	 SHORT $LN269@Insert_at

; 1910 : 						{	// rotate left child to right
; 1911 : 						_Pnode = this->_Parent(_Pnode);

  00147	8b c1		 mov	 eax, ecx

; 2144 : 		}
; 2145 : 
; 2146 : 	_Nodeptr& _Rmost() const
; 2147 : 		{	// return rightmost node in nonmutable tree
; 2148 : 		return (this->_Right(this->_Myhead));
; 2149 : 		}
; 2150 : 
; 2151 : 	_Nodeptr& _Root() const
; 2152 : 		{	// return root of nonmutable tree
; 2153 : 		return (this->_Parent(this->_Myhead));
; 2154 : 		}
; 2155 : 
; 2156 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2157 : 		{	// promote left node to root of subtree
; 2158 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00149	8b 10		 mov	 edx, DWORD PTR [eax]

; 2159 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  0014b	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0014e	89 08		 mov	 DWORD PTR [eax], ecx

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00150	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 2160 : 
; 2161 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  00153	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00157	75 03		 jne	 SHORT $LN268@Insert_at

; 2162 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00159	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN268@Insert_at:

; 2163 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0015c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0015f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00162	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 2164 : 
; 2165 : 		if (_Wherenode == _Root())

  00164	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00167	75 05		 jne	 SHORT $LN267@Insert_at

; 2166 : 			_Root() = _Pnode;

  00169	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 2167 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  0016c	eb 0f		 jmp	 SHORT $LN264@Insert_at
$LN267@Insert_at:

; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);

  0016e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 2167 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00171	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00174	75 05		 jne	 SHORT $LN265@Insert_at

; 2168 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00176	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 2169 : 		else

  00179	eb 02		 jmp	 SHORT $LN264@Insert_at
$LN265@Insert_at:

; 2170 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0017b	89 11		 mov	 DWORD PTR [ecx], edx
$LN264@Insert_at:

; 2171 : 
; 2172 : 		this->_Right(_Pnode) = _Wherenode;

  0017d	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 2173 : 		this->_Parent(_Wherenode) = _Pnode;

  00180	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN269@Insert_at:

; 1912 : 						_Rrotate(_Pnode);
; 1913 : 						}
; 1914 : 					this->_Color(this->_Parent(_Pnode)) =
; 1915 : 						this->_Black;	// propagate red up

  00183	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00186	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1916 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1917 : 						this->_Red;

  0018a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0018d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00190	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 1918 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  00194	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00197	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 1925 : 
; 1926 : 	template<class _Moveit>
; 1927 : 		void _Copy(const _Myt& _Right,
; 1928 : 			_Moveit _Movefl)
; 1929 : 		{	// copy or move entire tree from _Right
; 1930 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead, _Movefl);
; 1931 : 		this->_Mysize = _Right.size();
; 1932 : 		if (!this->_Isnil(_Root()))
; 1933 : 			{	// nonempty tree, look for new smallest and largest
; 1934 : 			_Lmost() = this->_Min(_Root());
; 1935 : 			_Rmost() = this->_Max(_Root());
; 1936 : 			}
; 1937 : 		else
; 1938 : 			{	// empty tree, just tidy head pointers
; 1939 : 			_Lmost() = this->_Myhead;
; 1940 : 			_Rmost() = this->_Myhead;
; 1941 : 			}
; 1942 : 		}
; 1943 : 
; 1944 : 	template<class _Want_to_move,
; 1945 : 		class _Can_move,
; 1946 : 		class _Is_set,
; 1947 : 		class _Dummy>
; 1948 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, _Want_to_move,
; 1949 : 			_Can_move, _Is_set, _Dummy)
; 1950 : 		{	// copy to new node -- nonmovable
; 1951 : 		return (this->_Buynode(this->_Myval(_Rootnode)));
; 1952 : 		}
; 1953 : 
; 1954 : 	template<class _Dummy>
; 1955 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1956 : 			true_type, true_type, _Dummy)
; 1957 : 		{	// move to new node -- movable, set
; 1958 : 		return (this->_Buynode(
; 1959 : 			_STD forward<value_type>(this->_Myval(_Rootnode))));
; 1960 : 		}
; 1961 : 
; 1962 : 	template<class _Dummy>
; 1963 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1964 : 			true_type, false_type, _Dummy)
; 1965 : 		{	// move to new node -- movable, map
; 1966 : 		return (this->_Buynode(
; 1967 : 			_STD forward<key_type>(const_cast<key_type&>(
; 1968 : 				this->_Myval(_Rootnode).first)),
; 1969 : 			_STD forward<typename value_type::second_type>(this->_Myval(
; 1970 : 				_Rootnode).second)));
; 1971 : 		}
; 1972 : 
; 1973 : 	template<class _Moveit>
; 1974 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1975 : 			_Moveit _Movefl)
; 1976 : 		{	// copy entire subtree, recursively
; 1977 : 		_Nodeptr _Newroot = this->_Myhead;	// point at nil node
; 1978 : 
; 1979 : 		if (!this->_Isnil(_Rootnode))
; 1980 : 			{	// copy or move a node, then any subtrees
; 1981 : 			_Nodeptr _Pnode = _Copy_or_move(_Rootnode, _Movefl,
; 1982 : 				typename is_move_constructible<value_type>::type(),
; 1983 : 				typename is_same<key_type, value_type>::type(), 0);
; 1984 : 			_Pnode->_Parent = _Wherenode;
; 1985 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1986 : 			if (this->_Isnil(_Newroot))
; 1987 : 				_Newroot = _Pnode;	// memorize new root
; 1988 : 
; 1989 : 			_TRY_BEGIN
; 1990 : 			this->_Left(_Pnode) =
; 1991 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 1992 : 			this->_Right(_Pnode) =
; 1993 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 1994 : 			_CATCH_ALL
; 1995 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 1996 : 			_RERAISE;
; 1997 : 			_CATCH_END
; 1998 : 			}
; 1999 : 
; 2000 : 		return (_Newroot);	// return newly constructed tree
; 2001 : 		}
; 2002 : 
; 2003 : 	_Paircc _Eqrange(const key_type& _Keyval) const
; 2004 : 		{	// find leftmost node not less than _Keyval
; 2005 : 		_Nodeptr _Pnode = _Root();
; 2006 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2007 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2008 : 
; 2009 : 		while (!this->_Isnil(_Pnode))
; 2010 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2011 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2012 : 			else
; 2013 : 				{	// _Pnode not less than _Keyval, remember it
; 2014 : 				if (this->_Isnil(_Hinode)
; 2015 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2016 : 						this->_Key(_Pnode)))
; 2017 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2018 : 				_Lonode = _Pnode;
; 2019 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2020 : 				}
; 2021 : 
; 2022 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2023 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2024 : 		while (!this->_Isnil(_Pnode))
; 2025 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2026 : 				{	// _Pnode greater than _Keyval, remember it
; 2027 : 				_Hinode = _Pnode;
; 2028 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2029 : 				}
; 2030 : 			else
; 2031 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2032 : 
; 2033 : 		const_iterator _First = const_iterator(_Lonode, this);
; 2034 : 		const_iterator _Last = const_iterator(_Hinode, this);
; 2035 : 		return (_Paircc(_First, _Last));
; 2036 : 		}
; 2037 : 
; 2038 : 	_Pairii _Eqrange(const key_type& _Keyval)
; 2039 : 		{	// find leftmost node not less than _Keyval
; 2040 : 		_Nodeptr _Pnode = _Root();
; 2041 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2042 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2043 : 
; 2044 : 		while (!this->_Isnil(_Pnode))
; 2045 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2046 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2047 : 			else
; 2048 : 				{	// _Pnode not less than _Keyval, remember it
; 2049 : 				if (this->_Isnil(_Hinode)
; 2050 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2051 : 						 this->_Key(_Pnode)))
; 2052 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2053 : 				_Lonode = _Pnode;
; 2054 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2055 : 				}
; 2056 : 
; 2057 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2058 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2059 : 		while (!this->_Isnil(_Pnode))
; 2060 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2061 : 				{	// _Pnode greater than _Keyval, remember it
; 2062 : 				_Hinode = _Pnode;
; 2063 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2064 : 				}
; 2065 : 			else
; 2066 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2067 : 
; 2068 : 		iterator _First = iterator(_Lonode, this);
; 2069 : 		iterator _Last = iterator(_Hinode, this);
; 2070 : 		return (_Pairii(_First, _Last));
; 2071 : 		}
; 2072 : 
; 2073 : 	void _Erase(_Nodeptr _Rootnode)
; 2074 : 		{	// free entire subtree, recursively
; 2075 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2076 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2077 : 			{	// free subtrees, then node
; 2078 : 			_Erase(this->_Right(_Pnode));
; 2079 : 			_Pnode = this->_Left(_Pnode);
; 2080 : 			this->_Getal().destroy(
; 2081 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2082 : 
; 2083 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2084 : 			}
; 2085 : 		}
; 2086 : 
; 2087 : 	_Nodeptr _Lbound(const key_type& _Keyval) const
; 2088 : 		{	// find leftmost node not less than _Keyval
; 2089 : 		_Nodeptr _Pnode = _Root();
; 2090 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2091 : 
; 2092 : 		while (!this->_Isnil(_Pnode))
; 2093 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2094 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2095 : 			else
; 2096 : 				{	// _Pnode not less than _Keyval, remember it
; 2097 : 				_Wherenode = _Pnode;
; 2098 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2099 : 				}
; 2100 : 
; 2101 : 		return (_Wherenode);	// return best remembered candidate
; 2102 : 		}
; 2103 : 
; 2104 : 	_Nodeptr _Lbound(const key_type& _Keyval)
; 2105 : 		{	// find leftmost node not less than _Keyval
; 2106 : 		_Nodeptr _Pnode = _Root();
; 2107 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2108 : 
; 2109 : 		while (!this->_Isnil(_Pnode))
; 2110 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2111 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2112 : 			else
; 2113 : 				{	// _Pnode not less than _Keyval, remember it
; 2114 : 				_Wherenode = _Pnode;
; 2115 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2116 : 				}
; 2117 : 
; 2118 : 		return (_Wherenode);	// return best remembered candidate
; 2119 : 		}
; 2120 : 
; 2121 : 	_Nodeptr& _Lmost() const
; 2122 : 		{	// return leftmost node in nonmutable tree
; 2123 : 		return (this->_Left(this->_Myhead));
; 2124 : 		}
; 2125 : 
; 2126 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2127 : 		{	// promote right node to root of subtree
; 2128 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  0019a	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 2129 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0019d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019f	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  001a2	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 2130 : 
; 2131 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  001a4	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a8	75 03		 jne	 SHORT $LN331@Insert_at

; 2132 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  001aa	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN331@Insert_at:

; 2133 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  001ad	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001b0	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  001b3	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 2134 : 
; 2135 : 		if (_Wherenode == _Root())

  001b5	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b8	75 05		 jne	 SHORT $LN330@Insert_at

; 2136 : 			_Root() = _Pnode;

  001ba	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 2137 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  001bd	eb 0e		 jmp	 SHORT $LN327@Insert_at
$LN330@Insert_at:

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  001bf	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 2137 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  001c2	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001c4	75 04		 jne	 SHORT $LN328@Insert_at

; 2138 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  001c6	89 31		 mov	 DWORD PTR [ecx], esi

; 2139 : 		else

  001c8	eb 03		 jmp	 SHORT $LN327@Insert_at
$LN328@Insert_at:

; 2140 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  001ca	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN327@Insert_at:

; 2141 : 
; 2142 : 		this->_Left(_Pnode) = _Wherenode;

  001cd	89 16		 mov	 DWORD PTR [esi], edx
$LN394@Insert_at:

; 2143 : 		this->_Parent(_Wherenode) = _Pnode;

  001cf	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN332@Insert_at:

; 1864 : 			}
; 1865 : 
; 1866 : 		for (_Nodeptr _Pnode = _Newnode;
; 1867 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  001d2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001d5	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d9	0f 84 86 fe ff
	ff		 je	 $LL10@Insert_at
  001df	5e		 pop	 esi
$LN9@Insert_at:

; 1919 : 					}
; 1920 : 				}
; 1921 : 
; 1922 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  001e0	8b 07		 mov	 eax, DWORD PTR [edi]
  001e2	5f		 pop	 edi
  001e3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e6	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 44   : 		{	// construct with node pointer _Pnode

  001ea	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001ed	89 18		 mov	 DWORD PTR [eax], ebx
  001ef	5b		 pop	 ebx

; 1923 : 		return (iterator(_Newnode, this));
; 1924 : 		}

  001f0	5d		 pop	 ebp
  001f1	c2 14 00	 ret	 20			; 00000014H
$LN396@Insert_at:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  001f4	ff 75 18	 push	 DWORD PTR __Node$[ebp]
  001f7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001fc	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1839 : 			_Xlength_error("map/set<T> too long");

  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  00204	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN398@Insert_at:
$LN393@Insert_at:
  00209	cc		 int	 3
??$_Insert_at@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAU?$pair@$$CBKPAVCLight@@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_at<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBKPAVCLight@@@std@@@std@@YAAAU?$pair@$$CBKPAVCLight@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBKPAVCLight@@@std@@@std@@YAAAU?$pair@$$CBKPAVCLight@@@0@AAU10@@Z PROC ; std::forward<std::pair<unsigned long const ,CLight *> &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU?$pair@$$CBKPAVCLight@@@std@@@std@@YAAAU?$pair@$$CBKPAVCLight@@@0@AAU10@@Z ENDP ; std::forward<std::pair<unsigned long const ,CLight *> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
_<_Args_2>$ = 20					; size = 4
??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::pair<unsigned long const ,CLight *>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 10		 je	 SHORT $LN19@construct
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple

; 80   : 		{	// construct with argument

  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]

; 81   : 		}
; 82   : 
; 83   : 	template<class _Other>
; 84   : 		_Tuple_val& operator=(_Other&& _Right)
; 85   : 		{	// assign
; 86   : 		_Val = _STD forward<_Other>(_Right);
; 87   : 		return (*this);
; 88   : 		}
; 89   : 
; 90   : 	template<class _Alloc,
; 91   : 		class... _Other>
; 92   : 		_Tuple_val(const _Alloc&,
; 93   : 			typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
; 94   : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 95   : 		: _Val(_STD forward<_Other>(_Arg)...)
; 96   : 		{	// construct with optional arguments, no allocator
; 97   : 		}
; 98   : 
; 99   : 	template<class _Alloc,
; 100  : 		class... _Other>
; 101  : 		_Tuple_val(const _Alloc& _Al,
; 102  : 			typename enable_if<uses_allocator<_Ty, _Alloc>::value
; 103  : 				&& is_constructible<_Ty,
; 104  : 					allocator_arg_t, _Alloc>::value,
; 105  : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 106  : 		: _Val(allocator_arg, _Al, _STD forward<_Other>(_Arg)...)
; 107  : 		{	// construct with optional arguments, leading allocator
; 108  : 		}
; 109  : 
; 110  : 	template<class _Alloc,
; 111  : 		class... _Other>
; 112  : 		_Tuple_val(const _Alloc& _Al,
; 113  : 			typename enable_if<uses_allocator<_Ty, _Alloc>::value
; 114  : 				&& !is_constructible<_Ty,
; 115  : 					allocator_arg_t, _Alloc>::value,
; 116  : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 117  : 		: _Val(_STD forward<_Other>(_Arg)..., _Al)
; 118  : 		{	// construct with optional arguments, trailing allocator
; 119  : 		}
; 120  : 
; 121  : 
; 122  : 	_Ty _Val;
; 123  : 	};
; 124  : 
; 125  : 	// CLASS tuple
; 126  : template<class... _Types>
; 127  : 	class tuple;
; 128  : 
; 129  : template<>
; 130  : 	class tuple<>
; 131  : 	{	// empty tuple
; 132  : public:
; 133  : 	typedef tuple<> _Myt;
; 134  : 
; 135  : 	tuple()
; 136  : 		{	// default construct
; 137  : 		}
; 138  : 
; 139  : 	template<class _Alloc>
; 140  : 		tuple(allocator_arg_t, const _Alloc&) _NOEXCEPT
; 141  : 		{	// default construct, allocator
; 142  : 		}
; 143  : 
; 144  : 	tuple(const tuple&) _NOEXCEPT
; 145  : 		{	// copy construct
; 146  : 		}
; 147  : 
; 148  : 	template<class _Alloc>
; 149  : 		tuple(allocator_arg_t, const _Alloc&, const tuple&) _NOEXCEPT
; 150  : 		{	// copy construct, allocator
; 151  : 		}
; 152  : 
; 153  : 	void swap(_Myt&) _NOEXCEPT
; 154  : 		{	// swap elements
; 155  : 		}
; 156  : 
; 157  : 	bool _Equals(const _Myt&) const _NOEXCEPT
; 158  : 		{	// test if *this == _Right
; 159  : 		return (true);
; 160  : 		}
; 161  : 
; 162  : 	bool _Less(const _Myt&) const _NOEXCEPT
; 163  : 		{	// test if *this < _Right
; 164  : 		return (false);
; 165  : 		}
; 166  : 	};
; 167  : 
; 168  : template<class _This,
; 169  : 	class... _Rest>
; 170  : 	class tuple<_This, _Rest...>
; 171  : 		: private tuple<_Rest...>
; 172  : 	{	// recursive tuple definition
; 173  : public:
; 174  : 	typedef _This _This_type;
; 175  : 	typedef tuple<_This, _Rest...> _Myt;
; 176  : 	typedef tuple<_Rest...> _Mybase;
; 177  : 	static const size_t _Mysize = 1 + sizeof...(_Rest);
; 178  : 
; 179  : 	tuple()
; 180  : 		: _Mybase(),
; 181  : 			_Myfirst()
; 182  : 		{	// construct default
; 183  : 		}
; 184  : 
; 185  : 	template<class... _Rest2>
; 186  : 		explicit tuple(_Tuple_alloc_t, _Rest2&&... _Rest_arg)
; 187  : 			: _Mybase(_STD forward<_Rest2>(_Rest_arg)...),
; 188  : 				_Myfirst(allocator_arg)
; 189  : 		{	// construct smuggled allocator_arg_t element
; 190  : 		}
; 191  : 
; 192  : 	template<class... _Other,
; 193  : 		class = typename _Tuple_enable<
; 194  : 			tuple<const _Other&...>, _Myt>::type>
; 195  : 		tuple(const tuple<_Other...>& _Right)
; 196  : 		: _Mybase(_Right._Get_rest()), _Myfirst(_Right._Myfirst._Val)
; 197  : 		{	// construct by copying same size tuple
; 198  : 		}
; 199  : 
; 200  : 	template<class _Alloc,
; 201  : 		class... _Other,
; 202  : 		class = typename _Tuple_enable<
; 203  : 			tuple<const _Other&...>, _Myt>::type>
; 204  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 205  : 			const tuple<_Other...>& _Right)
; 206  : 		: _Mybase(allocator_arg, _Al, _Right._Get_rest()),
; 207  : 			_Myfirst(_Al, _Tuple_alloc,
; 208  : 				_Right._Myfirst._Val)
; 209  : 		{	// construct by copying same size tuple, allocator
; 210  : 		}
; 211  : 
; 212  : 	explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)
; 213  : 		: _Mybase(_Rest_arg...),
; 214  : 			_Myfirst(_This_arg)
; 215  : 		{	// construct from one or more copied elements
; 216  : 		}
; 217  : 
; 218  : 	template<class _Alloc>
; 219  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 220  : 			const _This& _This_arg, const _Rest&... _Rest_arg)
; 221  : 		: _Mybase(allocator_arg, _Al, _Rest_arg...),
; 222  : 			_Myfirst(_Al, _Tuple_alloc, _This_arg)
; 223  : 		{	// construct from one or more copied elements, allocator
; 224  : 		}
; 225  : 
; 226  : 	template<class _This2,
; 227  : 		class... _Rest2,
; 228  : 		class = typename _Tuple_enable<
; 229  : 			tuple<_This2, _Rest2...>, _Myt>::type>
; 230  : 		explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
; 231  : 		: _Mybase(_STD forward<_Rest2>(_Rest_arg)...),
; 232  : 			_Myfirst(_STD forward<_This2>(_This_arg))
; 233  : 		{	// construct from one or more moved elements
; 234  : 		}
; 235  : 
; 236  : 	template<class _Alloc,
; 237  : 		class _This2,
; 238  : 		class... _Rest2,
; 239  : 		class = typename _Tuple_enable<
; 240  : 			tuple<_This2, _Rest2...>, _Myt>::type>
; 241  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 242  : 			_This2&& _This_arg, _Rest2&&... _Rest_arg)
; 243  : 		: _Mybase(allocator_arg, _Al,
; 244  : 				_STD forward<_Rest2>(_Rest_arg)...),
; 245  : 			_Myfirst(_Al, _Tuple_alloc,
; 246  : 				_STD forward<_This2>(_This_arg))
; 247  : 		{	// construct from one or more moved elements, allocator
; 248  : 		}
; 249  : 
; 250  : 	template<class... _Other,
; 251  : 		class = typename _Tuple_enable<
; 252  : 			tuple<_Other...>, _Myt>::type>
; 253  : 		tuple(tuple<_Other...>&& _Right)
; 254  : 		: _Mybase(_STD forward<typename tuple<_Other...>::_Mybase>
; 255  : 			(_Right._Get_rest())),
; 256  : 			_Myfirst(_STD forward<typename tuple<_Other...>::_This_type>
; 257  : 				(_Right._Myfirst._Val))
; 258  : 		{	// construct by moving same size tuple
; 259  : 		}
; 260  : 
; 261  : 	template<class _Alloc,
; 262  : 		class... _Other,
; 263  : 		class = typename _Tuple_enable<
; 264  : 			tuple<_Other...>, _Myt>::type>
; 265  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 266  : 			tuple<_Other...>&& _Right)
; 267  : 		: _Mybase(allocator_arg, _Al,
; 268  : 				_STD forward<typename tuple<_Other...>::_Mybase>
; 269  : 					(_Right._Get_rest())),
; 270  : 			_Myfirst(_Al, _Tuple_alloc,
; 271  : 				_STD forward<typename tuple<_Other...>::_This_type>
; 272  : 					(_Right._Myfirst._Val))
; 273  : 		{	// construct by moving same size tuple, allocator
; 274  : 		}
; 275  : 
; 276  : 	template<class... _Other>
; 277  : 		_Myt& operator=(const tuple<_Other...>& _Right)
; 278  : 		{	// assign by copying same size tuple
; 279  : 		_Myfirst._Val = _Right._Myfirst._Val;
; 280  : 		(_Mybase&)*this = _Right._Get_rest();
; 281  : 		return (*this);
; 282  : 		}
; 283  : 
; 284  : 	template<class... _Other>
; 285  : 		_Myt& operator=(tuple<_Other...>&& _Right)
; 286  : 		{	// assign by moving same size tuple
; 287  : 		_Myfirst._Val = _STD forward<typename tuple<_Other...>::_This_type>
; 288  : 			(_Right._Myfirst._Val);
; 289  : 		(_Mybase&)*this = _STD forward<typename tuple<_Other...>::_Mybase>
; 290  : 			(_Right._Get_rest());
; 291  : 		return (*this);
; 292  : 		}
; 293  : 
; 294  : 	template<class... _Other>
; 295  : 		bool _Equals(const tuple<_Other...>& _Right) const
; 296  : 		{	// test if *this == _Right
; 297  : 		static_assert(_Mysize == sizeof...(_Other),
; 298  : 			"comparing tuple to object with different size");
; 299  : 		return (_Myfirst._Val == _Right._Myfirst._Val
; 300  : 			&& _Mybase::_Equals(_Right._Get_rest()));
; 301  : 		}
; 302  : 
; 303  : 	template<class... _Other>
; 304  : 		bool _Less(const tuple<_Other...>& _Right) const
; 305  : 		{	// test if *this < _Right
; 306  : 		static_assert(_Mysize == sizeof...(_Other),
; 307  : 			"comparing tuple to object with different size");
; 308  : 		return (_Myfirst._Val < _Right._Myfirst._Val
; 309  : 			|| (!(_Right._Myfirst._Val < _Myfirst._Val)
; 310  : 				&& _Mybase::_Less(_Right._Get_rest())));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc>
; 314  : 		tuple(allocator_arg_t, const _Alloc& _Al)
; 315  : 		: _Mybase(allocator_arg, _Al),
; 316  : 			_Myfirst(_Al, _Tuple_alloc)
; 317  : 		{	// construct default, allocator
; 318  : 		}
; 319  : 
; 320  : 	template<class _Alloc>
; 321  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 322  : 			const _Myt& _Right)
; 323  : 		: _Mybase(allocator_arg, _Al, _Right._Get_rest()),
; 324  : 			_Myfirst(_Al, _Tuple_alloc,
; 325  : 				_Right._Myfirst._Val)
; 326  : 		{	// construct by copying, allocator
; 327  : 		}
; 328  : 
; 329  : 	template<class _First,
; 330  : 		class _Second,
; 331  : 		class = typename _Tuple_enable<
; 332  : 			tuple<const _First&, const _Second&>, _Myt>::type>
; 333  : 		tuple(const pair<_First, _Second>& _Right)
; 334  : 
; 335  : 		: _Mybase(tuple<_Second>(_Right.second)),
; 336  : 			_Myfirst(_Right.first)
; 337  : 		{	// construct by copying pair
; 338  : 		// no static_assert necessary
; 339  : 		}
; 340  : 
; 341  : 	template<class _Alloc,
; 342  : 		class _First,
; 343  : 		class _Second,
; 344  : 		class = typename _Tuple_enable<
; 345  : 			tuple<const _First&, const _Second&>, _Myt>::type>
; 346  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 347  : 			const pair<_First, _Second>& _Right)
; 348  : 
; 349  : 		: _Mybase(allocator_arg, _Al, tuple<_Second>(_Right.second)),
; 350  : 			_Myfirst(_Al, _Tuple_alloc,
; 351  : 				_Right.first)
; 352  : 		{	// construct by copying pair, allocator
; 353  : 		// no static_assert necessary
; 354  : 		}
; 355  : 
; 356  : 	_Myt& operator=(const _Myt& _Right)
; 357  : 		{	// assign
; 358  : 		_Myfirst._Val = _Right._Myfirst._Val;
; 359  : 		(_Mybase&)*this = _Right._Get_rest();
; 360  : 		return (*this);
; 361  : 		}
; 362  : 
; 363  : 	template<class _First,
; 364  : 		class _Second>
; 365  : 		_Myt& operator=(const pair<_First, _Second>& _Right)
; 366  : 		{	// assign by copying pair
; 367  : 		static_assert(_Mysize == 2,
; 368  : 			"assigning to tuple from object with different size");
; 369  : 		_Myfirst._Val = _Right.first;
; 370  : 		(_Mybase&)*this = tuple<_Second>(_Right.second);
; 371  : 		return (*this);
; 372  : 		}
; 373  : 
; 374  : 	template<class _Alloc>
; 375  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 376  : 			_Myt&& _Right)
; 377  : 		: _Mybase(allocator_arg, _Al,
; 378  : 				_STD forward<_Mybase>(_Right._Get_rest())),
; 379  : 			_Myfirst(_Al, _Tuple_alloc,
; 380  : 				_STD forward<_This>(_Right._Myfirst._Val))
; 381  : 		{	// construct by moving, allocator
; 382  : 		}
; 383  : 
; 384  : 	template<class _First,
; 385  : 		class _Second,
; 386  : 		class = typename _Tuple_enable<
; 387  : 			tuple<_First, _Second>, _Myt>::type>
; 388  : 		tuple(pair<_First, _Second>&& _Right)
; 389  : 
; 390  : 		: _Mybase(tuple<_Second>(_STD forward<_Second>(_Right.second))),
; 391  : 			_Myfirst(_STD forward<_First>(_Right.first))
; 392  : 		{	// construct by moving pair
; 393  : 		// no static_assert necessary
; 394  : 		}
; 395  : 
; 396  : 	template<class _Alloc,
; 397  : 		class _First,
; 398  : 		class _Second,
; 399  : 		class = typename _Tuple_enable<
; 400  : 			tuple<_First, _Second>, _Myt>::type>
; 401  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 402  : 			pair<_First, _Second>&& _Right)
; 403  : 
; 404  : 		: _Mybase(allocator_arg, _Al,
; 405  : 				tuple<_Second>(_STD forward<_Second>(_Right.second))),
; 406  : 			_Myfirst(_Al, _Tuple_alloc,
; 407  : 				_STD forward<_First>(_Right.first))
; 408  : 		{	// construct by moving pair, allocator
; 409  : 		// no static_assert necessary
; 410  : 		}
; 411  : 
; 412  : 	_Myt& operator=(_Myt&& _Right)
; 413  : 		_NOEXCEPT_OP(is_nothrow_move_assignable<_This>::value
; 414  : 			&& is_nothrow_move_assignable<_Mybase>::value)
; 415  : 		{	// assign by moving
; 416  : 		_Myfirst = _STD forward<_This>(_Right._Myfirst._Val);
; 417  : 		(_Mybase&)*this = _STD forward<_Mybase>(_Right._Get_rest());
; 418  : 		return (*this);
; 419  : 		}
; 420  : 
; 421  : 	template<class _First,
; 422  : 		class _Second>
; 423  : 		_Myt& operator=(pair<_First, _Second>&& _Right)
; 424  : 		_NOEXCEPT_OP(
; 425  : 			_NOEXCEPT_OP(_Myfirst._Val = _STD forward<_First>(_Right.first))
; 426  : 			&& _NOEXCEPT_OP((_Mybase&)*this =
; 427  : 				tuple<_Second>(_STD forward<_Second>(_Right.second))))
; 428  : 		{	// assign by moving pair
; 429  : 		static_assert(_Mysize == 2,
; 430  : 			"assigning to tuple from object with different size");
; 431  : 		_Myfirst._Val = _STD forward<_First>(_Right.first);
; 432  : 		(_Mybase&)*this =
; 433  : 			tuple<_Second>(_STD forward<_Second>(_Right.second));
; 434  : 		return (*this);
; 435  : 		}
; 436  : 
; 437  : 	_Mybase& _Get_rest()
; 438  : 		{	// get reference to rest of elements
; 439  : 		return (*this);
; 440  : 		}
; 441  : 
; 442  : 	const _Mybase& _Get_rest() const
; 443  : 		{	// get const reference to rest of elements
; 444  : 		return (*this);
; 445  : 		}
; 446  : 
; 447  : 	void swap(tuple& _Right)
; 448  : 		_NOEXCEPT_OP(
; 449  : 			_NOEXCEPT_OP(_Swap_adl(_Myfirst._Val, _Myfirst._Val))
; 450  : 			&& _NOEXCEPT_OP(_Swap_adl((_Mybase&)_Right, (_Mybase&)_Right)))
; 451  : 		{	// swap *this and _Right
; 452  : 		_Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
; 453  : 		_Mybase::swap((_Mybase&)_Right);
; 454  : 		}
; 455  : 
; 456  : 	_Tuple_val<_This> _Myfirst;	// the stored element
; 457  : 	};
; 458  : 
; 459  : 
; 460  : 	// OPERATORS FOR tuple
; 461  : 
; 462  : template<class... _Types1,
; 463  : 	class... _Types2> inline
; 464  : 	bool operator==(const tuple<_Types1...>& _Left,
; 465  : 		const tuple<_Types2...>& _Right)
; 466  : 	{	// test if _Left == _Right
; 467  : 	return (_Left._Equals(_Right));
; 468  : 	}
; 469  : 
; 470  : template<class... _Types1,
; 471  : 	class... _Types2> inline
; 472  : 	bool operator!=(const tuple<_Types1...>& _Left,
; 473  : 		const tuple<_Types2...>& _Right)
; 474  : 	{	// test if _Left != _Right
; 475  : 	return (!(_Left == _Right));
; 476  : 	}
; 477  : 
; 478  : template<class... _Types1,
; 479  : 	class... _Types2> inline
; 480  : 	bool operator<(const tuple<_Types1...>& _Left,
; 481  : 		const tuple<_Types2...>& _Right)
; 482  : 	{	// test if _Left < _Right
; 483  : 	return (_Left._Less(_Right));
; 484  : 	}
; 485  : 
; 486  : template<class... _Types1,
; 487  : 	class... _Types2> inline
; 488  : 	bool operator>=(const tuple<_Types1...>& _Left,
; 489  : 		const tuple<_Types2...>& _Right)
; 490  : 	{	// test if _Left >= _Right
; 491  : 	return (!(_Left < _Right));
; 492  : 	}
; 493  : 
; 494  : template<class... _Types1,
; 495  : 	class... _Types2> inline
; 496  : 	bool operator>(const tuple<_Types1...>& _Left,
; 497  : 		const tuple<_Types2...>& _Right)
; 498  : 	{	// test if _Left > _Right
; 499  : 	return (_Right < _Left);
; 500  : 	}
; 501  : 
; 502  : template<class... _Types1,
; 503  : 	class... _Types2> inline
; 504  : 	bool operator<=(const tuple<_Types1...>& _Left,
; 505  : 		const tuple<_Types2...>& _Right)
; 506  : 	{	// test if _Left <= _Right
; 507  : 	return (!(_Right < _Left));
; 508  : 	}
; 509  : 
; 510  : template<class... _Types> inline
; 511  : 	void swap(tuple<_Types...>& _Left,
; 512  : 		tuple<_Types...>& _Right)
; 513  : 			_NOEXCEPT_OP(_NOEXCEPT_OP(_Left.swap(_Right)))
; 514  : 	{	// swap _Left and _Right
; 515  : 	return (_Left.swap(_Right));
; 516  : 	}
; 517  : 
; 518  : 
; 519  : 	// CLASS tuple_element
; 520  : template<size_t _Index,
; 521  : 	class _Tuple>
; 522  : 	struct tuple_element;
; 523  : 
; 524  : template<class _This,
; 525  : 	class... _Rest>
; 526  : 	struct tuple_element<0, tuple<_This, _Rest...> >
; 527  : 	{	// select first element
; 528  : 	typedef _This type;
; 529  : 	typedef typename add_lvalue_reference<const _This>::type _Ctype;
; 530  : 	typedef typename add_lvalue_reference<_This>::type _Rtype;
; 531  : 	typedef typename add_rvalue_reference<_This>::type _RRtype;
; 532  : 	typedef tuple<_This, _Rest...> _Ttype;
; 533  : 	};
; 534  : 
; 535  : template<size_t _Index,
; 536  : 	class _This,
; 537  : 	class... _Rest>
; 538  : 	struct tuple_element<_Index, tuple<_This, _Rest...> >
; 539  : 		: public tuple_element<_Index - 1, tuple<_Rest...> >
; 540  : 	{	// recursive tuple_element definition
; 541  : 	};
; 542  : 
; 543  : 
; 544  : template<size_t _Index,
; 545  : 	class _Tuple>
; 546  : 	struct tuple_element<_Index, const _Tuple>
; 547  : 	: public tuple_element<_Index, _Tuple>
; 548  : 	{	// tuple_element for const
; 549  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 550  : 	typedef typename add_const<typename _Mybase::type>::type type;
; 551  : 	};
; 552  : 
; 553  : template<size_t _Index,
; 554  : 	class _Tuple>
; 555  : 	struct tuple_element<_Index, volatile _Tuple>
; 556  : 	: public tuple_element<_Index, _Tuple>
; 557  : 	{	// tuple element for volatile
; 558  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 559  : 	typedef typename add_volatile<typename _Mybase::type>::type type;
; 560  : 	};
; 561  : 
; 562  : template<size_t _Index,
; 563  : 	class _Tuple>
; 564  : 	struct tuple_element<_Index, const volatile _Tuple>
; 565  : 	: public tuple_element<_Index, _Tuple>
; 566  : 	{	// tuple_element for const volatile
; 567  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 568  : 	typedef typename add_cv<typename _Mybase::type>::type type;
; 569  : 	};
; 570  : 
; 571  : 	// FUNCTION get
; 572  : template<size_t _Index,
; 573  : 	class... _Types> inline
; 574  : 	typename tuple_element<_Index, tuple<_Types...> >::_Rtype
; 575  : 		get(tuple<_Types...>& _Tuple)
; 576  : 	{	// get reference to _Index element of tuple
; 577  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 578  : 		_Ttype;
; 579  : 	return (((_Ttype&)_Tuple)._Myfirst._Val);
; 580  : 	}
; 581  : 
; 582  : template<size_t _Index,
; 583  : 	class... _Types> inline
; 584  : 	typename tuple_element<_Index, tuple<_Types...> >::_Ctype
; 585  : 		get(const tuple<_Types...>& _Tuple)
; 586  : 	{	// get const reference to _Index element of tuple
; 587  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 588  : 		_Ttype;
; 589  : 	return (((_Ttype&)_Tuple)._Myfirst._Val);
; 590  : 	}
; 591  : 
; 592  : template<size_t _Index,
; 593  : 	class... _Types> inline
; 594  : 	typename tuple_element<_Index, tuple<_Types...> >::_RRtype
; 595  : 		get(tuple<_Types...>&& _Tuple)
; 596  : 	{	// get rvalue reference to _Index element of tuple
; 597  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 598  : 		_Ttype;
; 599  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_RRtype
; 600  : 		_RRtype;
; 601  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
; 602  : 	}
; 603  : 
; 604  : 	// FUNCTION make_tuple
; 605  : template<class... _Types> inline
; 606  : 	tuple<typename _Unrefwrap<_Types>::type...>
; 607  : 		make_tuple(_Types&&... _Args)
; 608  : 	{	// make tuple from elements
; 609  : 	typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
; 610  : 	return (_Ttype(_STD forward<_Types>(_Args)...));
; 611  : 	}
; 612  : 
; 613  : 	// FUNCTION tie
; 614  : template<class... _Types> inline
; 615  : 	tuple<_Types&...>
; 616  : 		tie(_Types&... _Args) _NOEXCEPT
; 617  : 	{	// make tuple from elements
; 618  : 	typedef tuple<_Types&...> _Ttype;
; 619  : 	return (_Ttype(_Args...));
; 620  : 	}
; 621  : 
; 622  : 
; 623  : 	// TEMPLATE FUNCTION forward_as_tuple
; 624  : 
; 625  : template<class... _Types> inline
; 626  : 	tuple<_Types&&...>
; 627  : 		forward_as_tuple(_Types&&... _Args) _NOEXCEPT
; 628  : 	{	// forward arguments in a tuple
; 629  : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));
; 630  : 	}
; 631  : 
; 632  : 
; 633  : 	// TEMPLATE STRUCT _Make_arg_idx AND HELPERS
; 634  : template<class _Arg_idx_type,
; 635  : 	class... _Types>
; 636  : 	struct _Make_arg_idx1
; 637  : 	{	// ends recursion and defines type
; 638  : 	typedef _Arg_idx_type type;
; 639  : 	};
; 640  : 
; 641  : template<size_t... _Indexes,
; 642  : 	class _Ty,
; 643  : 	class... _Types>
; 644  : 	struct _Make_arg_idx1<_Arg_idx<_Indexes...>, _Ty, _Types...>
; 645  : 		: _Make_arg_idx1<_Arg_idx<sizeof...(_Types), _Indexes...>, _Types...>
; 646  : 	{	// counts a type and recurses
; 647  : 	};
; 648  : 
; 649  : template<class... _Types>
; 650  : 	struct _Make_arg_idx
; 651  : 		: _Make_arg_idx1<_Arg_idx<>, _Types...>
; 652  : 	{	// defines type as _Arg_idx<0, 1, 2... (sizeof...(_Types))-1>
; 653  : 	};
; 654  : 
; 655  : template<class _Arg_idx_type1,
; 656  : 	class _Arg_idx_type2>
; 657  : 	struct _Cat_arg_idx;
; 658  : 
; 659  : template<size_t... _Indexes1,
; 660  : 	size_t... _Indexes2>
; 661  : 	struct _Cat_arg_idx<_Arg_idx<_Indexes1...>, _Arg_idx<_Indexes2...> >
; 662  : 	{	// concatenates two _Arg_idx types
; 663  : 	typedef _Arg_idx<_Indexes1..., _Indexes2...> type;
; 664  : 	};
; 665  : 
; 666  : template<size_t _Nx,
; 667  : 	class _Ty>
; 668  : 	struct _Repeat_for
; 669  : 		: integral_constant<size_t, _Nx>
; 670  : 	{	// repeats _Nx for each _Ty in a parameter pack
; 671  : 	};
; 672  : 
; 673  : 	// FUNCTION tuple_cat
; 674  : template<class _Ret,
; 675  : 	class _Kx_arg,
; 676  : 	class _Ix_arg,
; 677  : 	size_t _Ix_next,
; 678  : 	class... _Tuples>
; 679  : 	struct _Tuple_cat2
; 680  : 	{	// determine tuple_cat's return type and _Kx/_Ix indices
; 681  : 	static_assert(sizeof...(_Tuples) == 0,
; 682  : 		"Unsupported tuple_cat arguments.");
; 683  : 	typedef _Ret type;
; 684  : 	typedef _Kx_arg _Kx_arg_idx;
; 685  : 	typedef _Ix_arg _Ix_arg_idx;
; 686  : 	};
; 687  : 
; 688  : template<class... _Types1,
; 689  : 	class _Kx_arg,
; 690  : 	size_t... _Ix,
; 691  : 	size_t _Ix_next,
; 692  : 	class... _Types2,
; 693  : 	class... _Rest>
; 694  : 	struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg, _Arg_idx<_Ix...>, _Ix_next,
; 695  : 		tuple<_Types2...>, _Rest...>
; 696  : 		: _Tuple_cat2<
; 697  : 			tuple<_Types1..., _Types2...>,
; 698  : 			typename _Cat_arg_idx<_Kx_arg,
; 699  : 				typename _Make_arg_idx<_Types2...>::type>::type,
; 700  : 			_Arg_idx<_Ix..., _Repeat_for<_Ix_next, _Types2>::value...>,
; 701  : 			_Ix_next + 1,
; 702  : 			_Rest...>
; 703  : 	{	// determine tuple_cat's return type and _Kx/_Ix indices
; 704  : 	};
; 705  : 
; 706  : template<class... _Tuples>
; 707  : 	struct _Tuple_cat1
; 708  : 		: _Tuple_cat2<tuple<>, _Arg_idx<>, _Arg_idx<>, 0,
; 709  : 			typename decay<_Tuples>::type...>
; 710  : 	{	// prepare to determine tuple_cat's return type and _Kx/_Ix indices
; 711  : 	};
; 712  : 
; 713  : template<class _Ret,
; 714  : 	size_t... _Kx,
; 715  : 	size_t... _Ix,
; 716  : 	class _Ty> inline
; 717  : 	_Ret _Tuple_cat(_Arg_idx<_Kx...>, _Arg_idx<_Ix...>, _Ty&& _Arg)
; 718  : 	{	// concatenate tuples
; 719  : 	return (_Ret(_STD get<_Kx>(_STD get<_Ix>(_STD forward<_Ty>(_Arg)))...));
; 720  : 	}
; 721  : 
; 722  : template<class... _Tuples> inline
; 723  : 	typename _Tuple_cat1<_Tuples...>::type
; 724  : 		tuple_cat(_Tuples&&... _Tpls)
; 725  : 	{	// concatenate tuples
; 726  : 	typedef _Tuple_cat1<_Tuples...> _Cat1;
; 727  : 	return (_Tuple_cat<typename _Cat1::type>(
; 728  : 		typename _Cat1::_Kx_arg_idx(), typename _Cat1::_Ix_arg_idx(),
; 729  : 		_STD forward_as_tuple(_STD forward<_Tuples>(_Tpls)...)));
; 730  : 	}
; 731  : 
; 732  : 
; 733  : 	// TEMPLATE CONSTRUCTOR pair::pair(tuple, tuple, _Arg_idx, _Arg_idx)
; 734  : template<class _Ty1,
; 735  : 	class _Ty2>
; 736  : 	template<class _Tuple1,
; 737  : 		class _Tuple2,
; 738  : 		size_t... _Indexes1,
; 739  : 		size_t... _Indexes2> inline
; 740  : 		pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
; 741  : 			_Tuple2& _Val2,
; 742  : 			_Arg_idx<_Indexes1...>,
; 743  : 			_Arg_idx<_Indexes2...>)
; 744  : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),
; 745  : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)
; 746  : 		{	// construct from pair of tuples

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	89 01		 mov	 DWORD PTR [ecx], eax
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$LN19@construct:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 873  : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
??$construct@U?$pair@$$CBKPAVCLight@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::pair<unsigned long const ,CLight *>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@K@?$allocator@K@std@@QAEXPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@K@?$allocator@K@std@@QAEXPAK@Z PROC		; std::allocator<unsigned long>::destroy<unsigned long>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@K@?$allocator@K@std@@QAEXPAK@Z ENDP		; std::allocator<unsigned long>::destroy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Insertion_sort@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z PROC ; std::_Insertion_sort<CLight * *,LightComp>, COMDAT

; 3025 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3026 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAPAVCLight@@ULightComp@@PAV1@@std@@YAXPAPAVCLight@@0ULightComp@@0@Z ; std::_Insertion_sort1<CLight * *,LightComp,CLight *>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 3027 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Insertion_sort@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ENDP ; std::_Insertion_sort<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z PROC ; std::sort_heap<CLight * *,LightComp>, COMDAT

; 2483 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2484 : 	_DEBUG_RANGE(_First, _Last);
; 2485 : 	_DEBUG_POINTER(_Pred);
; 2486 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2487 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$_Sort_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ; std::_Sort_heap<CLight * *,LightComp>
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2488 : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$sort_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ENDP ; std::sort_heap<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$make_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$make_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z PROC ; std::make_heap<CLight * *,LightComp>, COMDAT

; 2456 : 	{	// make [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2457 : 	_DEBUG_RANGE(_First, _Last);
; 2458 : 	_DEBUG_POINTER(_Pred);
; 2459 : 	if (1 < _Last - _First)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0000b	2b c2		 sub	 eax, edx
  0000d	83 e0 fc	 and	 eax, -4			; fffffffcH
  00010	83 f8 04	 cmp	 eax, 4
  00013	7e 11		 jle	 SHORT $LN1@make_heap

; 2460 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2461 : 			_Dist_type(_First), _Val_type(_First));

  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001c	51		 push	 ecx
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$_Make_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@PAH0@Z ; std::_Make_heap<CLight * *,int,CLight *,LightComp>
  00023	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@make_heap:

; 2462 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$make_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ENDP ; std::make_heap<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAPAVCLight@@ULightComp@@@std@@YA?AU?$pair@PAPAVCLight@@PAPAV1@@0@PAPAVCLight@@0ULightComp@@@Z
_TEXT	SEGMENT
__Gfirst$1$ = -12					; size = 4
tv607 = -8						; size = 4
__Glast$1$ = -8						; size = 4
__Plast$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Unguarded_partition@PAPAVCLight@@ULightComp@@@std@@YA?AU?$pair@PAPAVCLight@@PAPAV1@@0@PAPAVCLight@@0ULightComp@@@Z PROC ; std::_Unguarded_partition<CLight * *,LightComp>, COMDAT

; 3063 : 	{	// partition [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3064 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  00006	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	53		 push	 ebx
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  0000f	2b c3		 sub	 eax, ebx
  00011	c1 f8 02	 sar	 eax, 2
  00014	99		 cdq
  00015	2b c2		 sub	 eax, edx
  00017	56		 push	 esi
  00018	d1 f8		 sar	 eax, 1
  0001a	57		 push	 edi

; 3065 : 	_Median(_First, _Mid, _Last - 1, _Pred);

  0001b	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0001e	8d 3c 83	 lea	 edi, DWORD PTR [ebx+eax*4]
  00021	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00024	50		 push	 eax
  00025	57		 push	 edi
  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 ??$_Median@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ; std::_Median<CLight * *,LightComp>
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 3066 : 	_RanIt _Pfirst = _Mid;
; 3067 : 	_RanIt _Plast = _Pfirst + 1;

  0002f	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
  00032	89 55 fc	 mov	 DWORD PTR __Plast$1$[ebp], edx

; 3071 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00035	3b df		 cmp	 ebx, edi
  00037	73 27		 jae	 SHORT $LN180@Unguarded_
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL29@Unguarded_:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00040	8b 47 fc	 mov	 eax, DWORD PTR [edi-4]
  00043	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  00048	8b 07		 mov	 eax, DWORD PTR [edi]
  0004a	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0004f	0f 2f c1	 comiss	 xmm0, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3071 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00052	77 0c		 ja	 SHORT $LN180@Unguarded_
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00054	0f 2f c8	 comiss	 xmm1, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3071 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00057	77 07		 ja	 SHORT $LN180@Unguarded_

; 3072 : 		--_Pfirst;

  00059	83 c7 fc	 add	 edi, -4			; fffffffcH
  0005c	3b df		 cmp	 ebx, edi
  0005e	72 e0		 jb	 SHORT $LL29@Unguarded_
$LN180@Unguarded_:

; 3075 : 		&& !_Pred(*_Pfirst, *_Plast))

  00060	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00063	3b d1		 cmp	 edx, ecx
  00065	73 24		 jae	 SHORT $LN26@Unguarded_
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00067	8b 07		 mov	 eax, DWORD PTR [edi]
  00069	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  0006e	8b ff		 npad	 2
$LL27@Unguarded_:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00077	0f 2f c8	 comiss	 xmm1, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3075 : 		&& !_Pred(*_Pfirst, *_Plast))

  0007a	77 0c		 ja	 SHORT $LN181@Unguarded_
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0007c	0f 2f c1	 comiss	 xmm0, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3075 : 		&& !_Pred(*_Pfirst, *_Plast))

  0007f	77 07		 ja	 SHORT $LN181@Unguarded_

; 3076 : 		++_Plast;

  00081	83 c2 04	 add	 edx, 4
  00084	3b d1		 cmp	 edx, ecx
  00086	72 e8		 jb	 SHORT $LL27@Unguarded_
$LN181@Unguarded_:
  00088	89 55 fc	 mov	 DWORD PTR __Plast$1$[ebp], edx
$LN26@Unguarded_:

; 3079 : 	_RanIt _Glast = _Pfirst;

  0008b	8b f7		 mov	 esi, edi
  0008d	8b da		 mov	 ebx, edx
  0008f	89 75 f8	 mov	 DWORD PTR __Glast$1$[ebp], esi
$LN185@Unguarded_:

; 3077 : 
; 3078 : 	_RanIt _Gfirst = _Plast;

  00092	89 5d f4	 mov	 DWORD PTR __Gfirst$1$[ebp], ebx
$LL25@Unguarded_:

; 3083 : 		for (; _Gfirst < _Last; ++_Gfirst)

  00095	3b d9		 cmp	 ebx, ecx
  00097	73 40		 jae	 SHORT $LN162@Unguarded_
  00099	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0009c	8d 64 24 00	 npad	 4
$LL23@Unguarded_:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  000a0	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000a2	8b 07		 mov	 eax, DWORD PTR [edi]
  000a4	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  000a9	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  000ae	0f 2f c1	 comiss	 xmm0, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3084 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

  000b1	77 16		 ja	 SHORT $LN22@Unguarded_
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000b3	0f 2f c8	 comiss	 xmm1, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3086 : 			else if (_Pred(*_Gfirst, *_Pfirst))

  000b6	77 18		 ja	 SHORT $LN182@Unguarded_

; 3087 : 				break;
; 3088 : 			else if (_Plast++ != _Gfirst)

  000b8	8b c2		 mov	 eax, edx
  000ba	83 c2 04	 add	 edx, 4
  000bd	3b c3		 cmp	 eax, ebx
  000bf	74 08		 je	 SHORT $LN22@Unguarded_
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  000c1	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]

; 53   : 	_Left = _Move(_Right);

  000c4	89 4a fc	 mov	 DWORD PTR [edx-4], ecx

; 54   : 	_Right = _Move(_Tmp);

  000c7	89 03		 mov	 DWORD PTR [ebx], eax
$LN22@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3083 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000c9	83 c3 04	 add	 ebx, 4
  000cc	3b de		 cmp	 ebx, esi
  000ce	72 d0		 jb	 SHORT $LL23@Unguarded_
$LN182@Unguarded_:
  000d0	8b 75 f8	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  000d3	89 55 fc	 mov	 DWORD PTR __Plast$1$[ebp], edx
  000d6	89 5d f4	 mov	 DWORD PTR __Gfirst$1$[ebp], ebx
$LN162@Unguarded_:

; 3090 : 		for (; _First < _Glast; --_Glast)

  000d9	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  000dc	3b f0		 cmp	 esi, eax
  000de	76 44		 jbe	 SHORT $LN184@Unguarded_
  000e0	8d 4e fc	 lea	 ecx, DWORD PTR [esi-4]
  000e3	8b d8		 mov	 ebx, eax
$LL15@Unguarded_:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  000e5	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000e7	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  000ec	8b 07		 mov	 eax, DWORD PTR [edi]
  000ee	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  000f3	0f 2f c1	 comiss	 xmm0, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3091 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

  000f6	77 14		 ja	 SHORT $LN14@Unguarded_
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000f8	0f 2f c8	 comiss	 xmm1, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3093 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

  000fb	77 19		 ja	 SHORT $LN183@Unguarded_

; 3094 : 				break;
; 3095 : 			else if (--_Pfirst != _Glast - 1)

  000fd	83 ef 04	 sub	 edi, 4
  00100	3b f9		 cmp	 edi, ecx
  00102	74 08		 je	 SHORT $LN14@Unguarded_
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00104	8b 07		 mov	 eax, DWORD PTR [edi]

; 53   : 	_Left = _Move(_Right);

  00106	8b 11		 mov	 edx, DWORD PTR [ecx]
  00108	89 17		 mov	 DWORD PTR [edi], edx

; 54   : 	_Right = _Move(_Tmp);

  0010a	89 01		 mov	 DWORD PTR [ecx], eax
$LN14@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3090 : 		for (; _First < _Glast; --_Glast)

  0010c	83 ee 04	 sub	 esi, 4
  0010f	83 e9 04	 sub	 ecx, 4
  00112	3b de		 cmp	 ebx, esi
  00114	72 cf		 jb	 SHORT $LL15@Unguarded_
$LN183@Unguarded_:
  00116	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 3096 : 				_STD iter_swap(_Pfirst, _Glast - 1);
; 3097 : 		if (_Glast == _First && _Gfirst == _Last)

  00119	3b f0		 cmp	 esi, eax
  0011b	8b 5d f4	 mov	 ebx, DWORD PTR __Gfirst$1$[ebp]
  0011e	8b 55 fc	 mov	 edx, DWORD PTR __Plast$1$[ebp]
  00121	89 75 f8	 mov	 DWORD PTR __Glast$1$[ebp], esi
$LN184@Unguarded_:
  00124	75 37		 jne	 SHORT $LN6@Unguarded_
  00126	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00129	74 75		 je	 SHORT $LN164@Unguarded_

; 3098 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));
; 3099 : 
; 3100 : 		if (_Glast == _First)
; 3101 : 			{	// no room at bottom, rotate pivot upward
; 3102 : 			if (_Plast != _Gfirst)

  0012b	3b d3		 cmp	 edx, ebx
  0012d	74 08		 je	 SHORT $LN108@Unguarded_
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0012f	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 53   : 	_Left = _Move(_Right);

  00131	8b 02		 mov	 eax, DWORD PTR [edx]
  00133	89 07		 mov	 DWORD PTR [edi], eax

; 54   : 	_Right = _Move(_Tmp);

  00135	89 0a		 mov	 DWORD PTR [edx], ecx
$LN108@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3104 : 			++_Plast;

  00137	83 c2 04	 add	 edx, 4

; 3105 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  0013a	8b f3		 mov	 esi, ebx
  0013c	89 55 fc	 mov	 DWORD PTR __Plast$1$[ebp], edx
  0013f	8b d7		 mov	 edx, edi
  00141	83 c7 04	 add	 edi, 4
  00144	83 c3 04	 add	 ebx, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00147	8b 06		 mov	 eax, DWORD PTR [esi]
  00149	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0014b	89 02		 mov	 DWORD PTR [edx], eax

; 29   : 	}

  0014d	8b 55 fc	 mov	 edx, DWORD PTR __Plast$1$[ebp]

; 54   : 	_Right = _Move(_Tmp);

  00150	89 0e		 mov	 DWORD PTR [esi], ecx

; 29   : 	}

  00152	8b 75 f8	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  00155	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00158	e9 35 ff ff ff	 jmp	 $LN185@Unguarded_
$LN6@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3109 : 			if (--_Glast != --_Pfirst)

  0015d	83 ee 04	 sub	 esi, 4
  00160	89 75 f8	 mov	 DWORD PTR __Glast$1$[ebp], esi
  00163	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00166	75 25		 jne	 SHORT $LN3@Unguarded_
  00168	83 ef 04	 sub	 edi, 4
  0016b	3b f7		 cmp	 esi, edi
  0016d	74 08		 je	 SHORT $LN128@Unguarded_
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0016f	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 53   : 	_Left = _Move(_Right);

  00171	8b 07		 mov	 eax, DWORD PTR [edi]
  00173	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  00175	89 0f		 mov	 DWORD PTR [edi], ecx
$LN128@Unguarded_:

; 52   : 	_Ty _Tmp = _Move(_Left);

  00177	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3111 : 			_STD iter_swap(_Pfirst, --_Plast);

  00179	83 ea 04	 sub	 edx, 4
  0017c	89 55 fc	 mov	 DWORD PTR __Plast$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0017f	8b 02		 mov	 eax, DWORD PTR [edx]
  00181	89 07		 mov	 DWORD PTR [edi], eax

; 54   : 	_Right = _Move(_Tmp);

  00183	89 0a		 mov	 DWORD PTR [edx], ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3113 : 		else

  00185	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00188	e9 08 ff ff ff	 jmp	 $LL25@Unguarded_
$LN3@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0018d	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 53   : 	_Left = _Move(_Right);

  0018f	8b 06		 mov	 eax, DWORD PTR [esi]
  00191	89 03		 mov	 DWORD PTR [ebx], eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3114 : 			_STD iter_swap(_Gfirst++, --_Glast);

  00193	83 c3 04	 add	 ebx, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 54   : 	_Right = _Move(_Tmp);

  00196	89 0e		 mov	 DWORD PTR [esi], ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3115 : 		}

  00198	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0019b	e9 f2 fe ff ff	 jmp	 $LN185@Unguarded_
$LN164@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 144  : 		{	// construct from moved values

  001a0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001a3	89 38		 mov	 DWORD PTR [eax], edi
  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi
  001a7	89 50 04	 mov	 DWORD PTR [eax+4], edx
  001aa	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3116 : 	}

  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c3		 ret	 0
??$_Unguarded_partition@PAPAVCLight@@ULightComp@@@std@@YA?AU?$pair@PAPAVCLight@@PAPAV1@@0@PAPAVCLight@@0ULightComp@@@Z ENDP ; std::_Unguarded_partition<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
;	COMDAT ??$?0ABK@?$_Tuple_val@ABK@std@@QAE@ABK@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$?0ABK@?$_Tuple_val@ABK@std@@QAE@ABK@Z PROC		; std::_Tuple_val<unsigned long const &>::_Tuple_val<unsigned long const &><unsigned long const &>, COMDAT
; _this$ = ecx

; 80   : 		{	// construct with argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 81   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??$?0ABK@?$_Tuple_val@ABK@std@@QAE@ABK@Z ENDP		; std::_Tuple_val<unsigned long const &>::_Tuple_val<unsigned long const &><unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >, COMDAT

; 492  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 493  : 	return (_Rechecked(_Dest,
; 494  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 495  : 			_Unchecked(_Dest), _Al)));
; 496  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_move@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN7@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAXPAPAVCLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAXPAPAVCLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CLight *> > >, COMDAT

; 90   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAXPAPAVCLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVCLight@@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAVCLight@@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@@Z PROC ; std::allocator_traits<std::allocator<CLight *> >::destroy<CLight *>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@PAVCLight@@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@@Z ENDP ; std::allocator_traits<std::allocator<CLight *> >::destroy<CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >, COMDAT

; 424  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 425  : 	return (_Rechecked(_Dest,
; 426  : 		_Uninit_copy(_Unchecked(_First), _Unchecked(_Last),
; 427  : 			_Unchecked(_Dest), _Al)));
; 428  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_copy@PAPAVCLight@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<CLight * *,CLight * *,std::_Wrap_alloc<std::allocator<CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_impl@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Copy_impl<CLight * *,CLight * *>, COMDAT

; 2053 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2054 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi

; 2055 : 	_CSTD memmove(&*_Dest, &*_First,
; 2056 : 		_Count * sizeof (*_First));

  0000c	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000f	c1 f8 02	 sar	 eax, 2
  00012	57		 push	 edi
  00013	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2057 : 	return (_Dest + _Count);

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2058 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Copy_impl@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_impl<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCLight@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCLight@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCLight@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCLight@@0@Z PROC ; std::_Ptr_cat<CLight *,CLight *>, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAVCLight@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCLight@@0@Z ENDP ; std::_Ptr_cat<CLight *,CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$?8PAVCLight@@PAV0@@std@@YA_NABV?$allocator@PAVCLight@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8PAVCLight@@PAV0@@std@@YA_NABV?$allocator@PAVCLight@@@0@0@Z PROC ; std::operator==<CLight *,CLight *>, COMDAT

; 661  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 662  : 	}

  00002	c3		 ret	 0
??$?8PAVCLight@@PAV0@@std@@YA_NABV?$allocator@PAVCLight@@@0@0@Z ENDP ; std::operator==<CLight *,CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@PAVCLight@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$allocator@PAVCLight@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0@Z PROC ; std::operator==<std::allocator<CLight *>,std::allocator<CLight *> >, COMDAT

; 893  : 	return (static_cast<_Ty>(_Left) == static_cast<_Other>(_Right));

  00000	b0 01		 mov	 al, 1

; 894  : 	}

  00002	c3		 ret	 0
??$?8V?$allocator@PAVCLight@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0@Z ENDP ; std::operator==<std::allocator<CLight *>,std::allocator<CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAPAK@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAPAK@Z PROC ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long *>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@PAK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAPAK@Z ENDP ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned long *> > >, COMDAT

; 90   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned long *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_def_fill_n@PAKIPAK@std@@YAXPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_def_fill_n@PAKIPAK@std@@YAXPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<unsigned long *,unsigned int,unsigned long *>, COMDAT

; 681  : 	{	// copy _Count * _Valty() to raw _First, using _Al, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN5@Uninit_def
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000e	33 c0		 xor	 eax, eax
  00010	f3 ab		 rep stosd
  00012	5f		 pop	 edi
$LN5@Uninit_def:

; 683  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Uninit_def_fill_n@PAKIPAK@std@@YAXPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<unsigned long *,unsigned int,unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAKPAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAK0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAKPAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAK0@Z PROC ; std::_Ptr_cat<unsigned long *,unsigned long *>, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAKPAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAK0@Z ENDP ; std::_Ptr_cat<unsigned long *,unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAK@std@@YAPAPAKPAPAK@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAK@std@@YAPAPAKPAPAK@Z PROC		; std::_Val_type<unsigned long * *>, COMDAT

; 646  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 647  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAK@std@@YAPAPAKPAPAK@Z ENDP		; std::_Val_type<unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAKPAPAK@std@@YAAAPAPAKAAPAPAKPAPAK@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAKPAPAK@std@@YAAAPAPAKAAPAPAKPAPAK@Z PROC ; std::_Rechecked<unsigned long * *,unsigned long * *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 	return (_Dest);
; 291  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAPAKPAPAK@std@@YAAAPAPAKAAPAPAKPAPAK@Z ENDP ; std::_Rechecked<unsigned long * *,unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PAPAKPAPAKU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PAPAKPAPAKU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z PROC ; std::_Uninit_copy<unsigned long * *,unsigned long * *,std::_Wrap_alloc<std::allocator<unsigned long *> > >, COMDAT

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 416  : 		_Ptr_cat(_First, _Dest)));
; 417  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_copy@PAPAKPAPAKU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ENDP ; std::_Uninit_copy<unsigned long * *,unsigned long * *,std::_Wrap_alloc<std::allocator<unsigned long *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAK@std@@YAPAPAKPAPAK@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAK@std@@YAPAPAKPAPAK@Z PROC		; std::_Unchecked<unsigned long * *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 282  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAPAK@std@@YAPAPAKPAPAK@Z ENDP		; std::_Unchecked<unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$move@AAP6AXPAVCLight@@@Z@std@@YA$$QAP6AXPAVCLight@@@ZAAP6AX0@Z@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAP6AXPAVCLight@@@Z@std@@YA$$QAP6AXPAVCLight@@@ZAAP6AX0@Z@Z PROC ; std::move<void (__cdecl*&)(CLight *)>, COMDAT

; 1519 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1520 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1521 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAP6AXPAVCLight@@@Z@std@@YA$$QAP6AXPAVCLight@@@ZAAP6AX0@Z@Z ENDP ; std::move<void (__cdecl*&)(CLight *)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_For_each@PAPAVCLight@@P6AXPAV1@@Z@std@@YAXPAPAVCLight@@0AAP6AXPAV1@@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 4
??$_For_each@PAPAVCLight@@P6AXPAV1@@Z@std@@YAXPAPAVCLight@@0AAP6AXPAV1@@Z@Z PROC ; std::_For_each<CLight * *,void (__cdecl*)(CLight *)>, COMDAT

; 22   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	83 c3 03	 add	 ebx, 3
  00012	c1 eb 02	 shr	 ebx, 2
  00015	57		 push	 edi
  00016	33 ff		 xor	 edi, edi
  00018	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001b	0f 47 d9	 cmova	 ebx, ecx

; 23   : 	for (; _First != _Last; ++_First)

  0001e	85 db		 test	 ebx, ebx
  00020	74 14		 je	 SHORT $LN1@For_each
$LL3@For_each:

; 24   : 		_Func(*_First);

  00022	8b 45 10	 mov	 eax, DWORD PTR __Func$[ebp]
  00025	ff 36		 push	 DWORD PTR [esi]
  00027	8b 00		 mov	 eax, DWORD PTR [eax]
  00029	ff d0		 call	 eax
  0002b	47		 inc	 edi
  0002c	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b fb		 cmp	 edi, ebx
  00034	75 ec		 jne	 SHORT $LL3@For_each
$LN1@For_each:
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx

; 25   : 	}

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_For_each@PAPAVCLight@@P6AXPAV1@@Z@std@@YAXPAPAVCLight@@0AAP6AXPAV1@@Z@Z ENDP ; std::_For_each<CLight * *,void (__cdecl*)(CLight *)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCLight@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVCLight@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<CLight *> >::construct<CLight *,CLight * const &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAVCLight@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<CLight *> >::construct<CLight *,CLight * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAVCLight@@@std@@YAABQAVCLight@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVCLight@@@std@@YAABQAVCLight@@ABQAV1@@Z PROC ; std::forward<CLight * const &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAVCLight@@@std@@YAABQAVCLight@@ABQAV1@@Z ENDP ; std::forward<CLight * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCLight@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@AAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVCLight@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@AAPAV3@@Z PROC ; std::allocator_traits<std::allocator<CLight *> >::construct<CLight *,CLight * &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAVCLight@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAXAAV?$allocator@PAVCLight@@@1@PAPAVCLight@@AAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<CLight *> >::construct<CLight *,CLight * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAVCLight@@@std@@YAAAPAVCLight@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVCLight@@@std@@YAAAPAVCLight@@AAPAV1@@Z PROC ; std::forward<CLight * &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAVCLight@@@std@@YAAAPAVCLight@@AAPAV1@@Z ENDP ; std::forward<CLight * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$pair@$$CBKPAVCLight@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$pair@$$CBKPAVCLight@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::pair<unsigned long const ,CLight *> >, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$pair@$$CBKPAVCLight@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::pair<unsigned long const ,CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 1527 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1528 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1529 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 8
_this$1$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Next$ = 16						; size = 4
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_hint<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>, COMDAT
; _this$ = ecx

; 1661 : 		iterator _Insert_hint(const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	89 4d ec	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1662 : 			_Valty&& _Val, _Nodety _Newnode)
; 1663 : 		{	// try to insert node using _Where as a hint
; 1664 : 		const_iterator _Next;
; 1665 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1666 : 
; 1667 : 		_TRY_BEGIN
; 1668 : 
; 1669 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1670 : 		if (_Where._Getcont() != this)
; 1671 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1672 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1673 : 
; 1674 : 		if (size() == 0)

  0002e	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	75 29		 jne	 SHORT $LN33@Insert_hin

; 1675 : 			return (_Insert_at(true, this->_Myhead,
; 1676 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree

  0003b	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  0003e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00041	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00044	ff 31		 push	 DWORD PTR [ecx]
  00046	6a 01		 push	 1
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAU?$pair@$$CBKPAVCLight@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_at<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
  0004e	8b c6		 mov	 eax, esi

; 1773 : 		}

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 10 00	 ret	 16			; 00000010H
$LN33@Insert_hin:

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  00064	8b 39		 mov	 edi, DWORD PTR [ecx]

; 336  : 		return (this->_Ptr == _Right._Ptr);

  00066	8b 75 0c	 mov	 esi, DWORD PTR __Where$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  00069	8b 5d 10	 mov	 ebx, DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 336  : 		return (this->_Ptr == _Right._Ptr);

  0006c	3b 37		 cmp	 esi, DWORD PTR [edi]

; 1677 : 		else if (this->_Multi)
; 1678 : 			{	// insert even if duplicate
; 1679 : 			if (_Where == begin())
; 1680 : 				{	// insert at beginning if before first element
; 1681 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1682 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1683 : 					return (_Insert_at(true, _Where._Mynode(),
; 1684 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1685 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1686 : 				}
; 1687 : 			else if (_Where == end())
; 1688 : 				{	// insert at end if after last element
; 1689 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1690 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1691 : 					return (_Insert_at(false, _Rmost(),
; 1692 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1693 : 				}
; 1694 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1695 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1696 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1697 : 					this->_Kfn(_Val),
; 1698 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1699 : 				{	// insert before _Where
; 1700 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1701 : 					return (_Insert_at(false, _Next._Mynode(),
; 1702 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1703 : 				else
; 1704 : 					return (_Insert_at(true, _Where._Mynode(),
; 1705 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1706 : 				}
; 1707 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1708 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1709 : 				&& (++(_Next = _Where) == end()
; 1710 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1711 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1712 : 				{	// insert after _Where
; 1713 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1714 : 					return (_Insert_at(false, _Where._Mynode(),
; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 				else
; 1717 : 					return (_Insert_at(true, _Next._Mynode(),
; 1718 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1719 : 				}
; 1720 : 			else
; 1721 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1722 : 			}
; 1723 : 		else
; 1724 : 			{	// insert only if unique
; 1725 : 			if (_Where == begin())

  0006e	75 31		 jne	 SHORT $LN14@Insert_hin
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  00070	8b 03		 mov	 eax, DWORD PTR [ebx]
  00072	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1727 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  00075	0f 83 40 01 00
	00		 jae	 $LN1@Insert_hin

; 1728 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1729 : 					return (_Insert_at(true, _Where._Mynode(),
; 1730 : 						_STD forward<_Valty>(_Val), _Newnode));

  0007b	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  0007e	53		 push	 ebx
$LN7@Insert_hin:
  0007f	56		 push	 esi
  00080	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00083	6a 01		 push	 1
  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAU?$pair@$$CBKPAVCLight@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_at<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
  0008b	8b c6		 mov	 eax, esi

; 1773 : 		}

  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 10 00	 ret	 16			; 00000010H
$LN14@Insert_hin:

; 336  : 		return (this->_Ptr == _Right._Ptr);

  000a1	3b f7		 cmp	 esi, edi

; 1731 : 				}
; 1732 : 			else if (_Where == end())

  000a3	75 34		 jne	 SHORT $LN11@Insert_hin
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map

; 59   : 		return (_Val.first);

  000a5	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  000a8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000ab	3b 03		 cmp	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1734 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  000ad	0f 83 08 01 00
	00		 jae	 $LN1@Insert_hin

; 1735 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1736 : 					return (_Insert_at(false, _Rmost(),
; 1737 : 						_STD forward<_Valty>(_Val), _Newnode));

  000b3	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  000b6	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  000b9	53		 push	 ebx
  000ba	52		 push	 edx
  000bb	6a 00		 push	 0
  000bd	56		 push	 esi
  000be	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAU?$pair@$$CBKPAVCLight@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_at<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
  000c3	8b c6		 mov	 eax, esi

; 1773 : 		}

  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cf	59		 pop	 ecx
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 10 00	 ret	 16			; 00000010H
$LN11@Insert_hin:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  000d9	8b 03		 mov	 eax, DWORD PTR [ebx]
  000db	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000de	3b c8		 cmp	 ecx, eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1741 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  000e0	76 52		 jbe	 SHORT $LN452@Insert_hin

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  000e2	8d 4d 10	 lea	 ecx, DWORD PTR __Next$[ebp]

; 1741 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  000e5	89 75 10	 mov	 DWORD PTR __Next$[ebp], esi

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  000e8	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator--
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  000ed	8b 45 10	 mov	 eax, DWORD PTR __Next$[ebp]
  000f0	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000f2	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1741 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  000f5	73 36		 jae	 SHORT $LN449@Insert_hin

; 1742 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1743 : 					this->_Kfn(_Val)))
; 1744 : 				{	// insert before _Where
; 1745 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))

  000f7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1746 : 					return (_Insert_at(false, _Next._Mynode(),
; 1747 : 						_STD forward<_Valty>(_Val), _Newnode));

  000fa	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  000fd	53		 push	 ebx
  000fe	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00105	0f 84 74 ff ff
	ff		 je	 $LN7@Insert_hin
  0010b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0010e	50		 push	 eax
  0010f	6a 00		 push	 0
  00111	56		 push	 esi
  00112	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAU?$pair@$$CBKPAVCLight@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_at<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
  00117	8b c6		 mov	 eax, esi

; 1773 : 		}

  00119	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0011c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00123	59		 pop	 ecx
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 10 00	 ret	 16			; 00000010H
$LN449@Insert_hin:
  0012d	8b c1		 mov	 eax, ecx
  0012f	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  00132	3b c8		 cmp	 ecx, eax
$LN452@Insert_hin:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1755 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),

  00134	0f 83 81 00 00
	00		 jae	 $LN1@Insert_hin

; 271  : 		++(*(_Mybase *)this);

  0013a	8d 4d 10	 lea	 ecx, DWORD PTR __Next$[ebp]

; 1755 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),

  0013d	89 75 10	 mov	 DWORD PTR __Next$[ebp], esi

; 271  : 		++(*(_Mybase *)this);

  00140	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++

; 336  : 		return (this->_Ptr == _Right._Ptr);

  00145	8b 45 10	 mov	 eax, DWORD PTR __Next$[ebp]
  00148	3b c7		 cmp	 eax, edi

; 1755 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),

  0014a	74 07		 je	 SHORT $LN3@Insert_hin
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  0014c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0014e	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1755 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),

  00151	73 68		 jae	 SHORT $LN1@Insert_hin
$LN3@Insert_hin:

; 1756 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1757 : 				{	// insert after _Where
; 1758 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))

  00153	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1759 : 					return (_Insert_at(false, _Where._Mynode(),
; 1760 : 						_STD forward<_Valty>(_Val), _Newnode));

  00156	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  00159	53		 push	 ebx
  0015a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0015e	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00161	74 22		 je	 SHORT $LN2@Insert_hin
  00163	56		 push	 esi
  00164	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00167	6a 00		 push	 0
  00169	56		 push	 esi
  0016a	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAU?$pair@$$CBKPAVCLight@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_at<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
  0016f	8b c6		 mov	 eax, esi

; 1773 : 		}

  00171	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00174	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017b	59		 pop	 ecx
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 10 00	 ret	 16			; 00000010H
$LN2@Insert_hin:

; 1761 : 				else
; 1762 : 					return (_Insert_at(true, _Next._Mynode(),
; 1763 : 						_STD forward<_Valty>(_Val), _Newnode));

  00185	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00188	50		 push	 eax
  00189	6a 01		 push	 1
  0018b	56		 push	 esi
  0018c	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAU?$pair@$$CBKPAVCLight@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_at<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
  00191	8b c6		 mov	 eax, esi

; 1773 : 		}

  00193	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00196	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019d	59		 pop	 ecx
  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	5b		 pop	 ebx
  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c2 10 00	 ret	 16			; 00000010H
__catch$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z$0:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  001a7	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  001aa	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001af	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1768 : 		_RERAISE;

  001b2	6a 00		 push	 0
  001b4	6a 00		 push	 0
  001b6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN453@Insert_hin:
$LN1@Insert_hin:

; 1769 : 		_CATCH_END
; 1770 : 
; 1771 : 		return (_Insert_nohint(_Leftish,
; 1772 : 			_STD forward<_Valty>(_Val), _Newnode).first);

  001bb	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  001be	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001c1	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  001c4	53		 push	 ebx
  001c5	6a 00		 push	 0
  001c7	50		 push	 eax
  001c8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001cf	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_nohint<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
  001d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001d9	89 08		 mov	 DWORD PTR [eax], ecx

; 1773 : 		}

  001db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e5	59		 pop	 ecx
  001e6	5f		 pop	 edi
  001e7	5e		 pop	 esi
  001e8	5b		 pop	 ebx
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c2 10 00	 ret	 16			; 00000010H
$LN451@Insert_hin:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_hint<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
_<_Val_1>$ = 12						; size = 4
_<_Val_2>$ = 16						; size = 4
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z PROC ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Buynode<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 923  : 		_Nodeptr _Buynode(_Valty&&... _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 924  : 		{	// allocate a node with defaults and set links and value
; 925  : 		_Nodeptr _Pnode = _Buynode0();

  00003	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Buynode0

; 604  : 		return ((reference)_Pnode->_Myval);

  00008	8d 50 10	 lea	 edx, DWORD PTR [eax+16]

; 926  : 
; 927  : 		this->_Color(_Pnode) = this->_Red;

  0000b	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00011	85 d2		 test	 edx, edx
  00013	74 10		 je	 SHORT $LN42@Buynode
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple

; 80   : 		{	// construct with argument

  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_1>$[ebp]
  00018	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 81   : 		}
; 82   : 
; 83   : 	template<class _Other>
; 84   : 		_Tuple_val& operator=(_Other&& _Right)
; 85   : 		{	// assign
; 86   : 		_Val = _STD forward<_Other>(_Right);
; 87   : 		return (*this);
; 88   : 		}
; 89   : 
; 90   : 	template<class _Alloc,
; 91   : 		class... _Other>
; 92   : 		_Tuple_val(const _Alloc&,
; 93   : 			typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
; 94   : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 95   : 		: _Val(_STD forward<_Other>(_Arg)...)
; 96   : 		{	// construct with optional arguments, no allocator
; 97   : 		}
; 98   : 
; 99   : 	template<class _Alloc,
; 100  : 		class... _Other>
; 101  : 		_Tuple_val(const _Alloc& _Al,
; 102  : 			typename enable_if<uses_allocator<_Ty, _Alloc>::value
; 103  : 				&& is_constructible<_Ty,
; 104  : 					allocator_arg_t, _Alloc>::value,
; 105  : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 106  : 		: _Val(allocator_arg, _Al, _STD forward<_Other>(_Arg)...)
; 107  : 		{	// construct with optional arguments, leading allocator
; 108  : 		}
; 109  : 
; 110  : 	template<class _Alloc,
; 111  : 		class... _Other>
; 112  : 		_Tuple_val(const _Alloc& _Al,
; 113  : 			typename enable_if<uses_allocator<_Ty, _Alloc>::value
; 114  : 				&& !is_constructible<_Ty,
; 115  : 					allocator_arg_t, _Alloc>::value,
; 116  : 				_Tuple_alloc_t>::type, _Other&&... _Arg)
; 117  : 		: _Val(_STD forward<_Other>(_Arg)..., _Al)
; 118  : 		{	// construct with optional arguments, trailing allocator
; 119  : 		}
; 120  : 
; 121  : 
; 122  : 	_Ty _Val;
; 123  : 	};
; 124  : 
; 125  : 	// CLASS tuple
; 126  : template<class... _Types>
; 127  : 	class tuple;
; 128  : 
; 129  : template<>
; 130  : 	class tuple<>
; 131  : 	{	// empty tuple
; 132  : public:
; 133  : 	typedef tuple<> _Myt;
; 134  : 
; 135  : 	tuple()
; 136  : 		{	// default construct
; 137  : 		}
; 138  : 
; 139  : 	template<class _Alloc>
; 140  : 		tuple(allocator_arg_t, const _Alloc&) _NOEXCEPT
; 141  : 		{	// default construct, allocator
; 142  : 		}
; 143  : 
; 144  : 	tuple(const tuple&) _NOEXCEPT
; 145  : 		{	// copy construct
; 146  : 		}
; 147  : 
; 148  : 	template<class _Alloc>
; 149  : 		tuple(allocator_arg_t, const _Alloc&, const tuple&) _NOEXCEPT
; 150  : 		{	// copy construct, allocator
; 151  : 		}
; 152  : 
; 153  : 	void swap(_Myt&) _NOEXCEPT
; 154  : 		{	// swap elements
; 155  : 		}
; 156  : 
; 157  : 	bool _Equals(const _Myt&) const _NOEXCEPT
; 158  : 		{	// test if *this == _Right
; 159  : 		return (true);
; 160  : 		}
; 161  : 
; 162  : 	bool _Less(const _Myt&) const _NOEXCEPT
; 163  : 		{	// test if *this < _Right
; 164  : 		return (false);
; 165  : 		}
; 166  : 	};
; 167  : 
; 168  : template<class _This,
; 169  : 	class... _Rest>
; 170  : 	class tuple<_This, _Rest...>
; 171  : 		: private tuple<_Rest...>
; 172  : 	{	// recursive tuple definition
; 173  : public:
; 174  : 	typedef _This _This_type;
; 175  : 	typedef tuple<_This, _Rest...> _Myt;
; 176  : 	typedef tuple<_Rest...> _Mybase;
; 177  : 	static const size_t _Mysize = 1 + sizeof...(_Rest);
; 178  : 
; 179  : 	tuple()
; 180  : 		: _Mybase(),
; 181  : 			_Myfirst()
; 182  : 		{	// construct default
; 183  : 		}
; 184  : 
; 185  : 	template<class... _Rest2>
; 186  : 		explicit tuple(_Tuple_alloc_t, _Rest2&&... _Rest_arg)
; 187  : 			: _Mybase(_STD forward<_Rest2>(_Rest_arg)...),
; 188  : 				_Myfirst(allocator_arg)
; 189  : 		{	// construct smuggled allocator_arg_t element
; 190  : 		}
; 191  : 
; 192  : 	template<class... _Other,
; 193  : 		class = typename _Tuple_enable<
; 194  : 			tuple<const _Other&...>, _Myt>::type>
; 195  : 		tuple(const tuple<_Other...>& _Right)
; 196  : 		: _Mybase(_Right._Get_rest()), _Myfirst(_Right._Myfirst._Val)
; 197  : 		{	// construct by copying same size tuple
; 198  : 		}
; 199  : 
; 200  : 	template<class _Alloc,
; 201  : 		class... _Other,
; 202  : 		class = typename _Tuple_enable<
; 203  : 			tuple<const _Other&...>, _Myt>::type>
; 204  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 205  : 			const tuple<_Other...>& _Right)
; 206  : 		: _Mybase(allocator_arg, _Al, _Right._Get_rest()),
; 207  : 			_Myfirst(_Al, _Tuple_alloc,
; 208  : 				_Right._Myfirst._Val)
; 209  : 		{	// construct by copying same size tuple, allocator
; 210  : 		}
; 211  : 
; 212  : 	explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)
; 213  : 		: _Mybase(_Rest_arg...),
; 214  : 			_Myfirst(_This_arg)
; 215  : 		{	// construct from one or more copied elements
; 216  : 		}
; 217  : 
; 218  : 	template<class _Alloc>
; 219  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 220  : 			const _This& _This_arg, const _Rest&... _Rest_arg)
; 221  : 		: _Mybase(allocator_arg, _Al, _Rest_arg...),
; 222  : 			_Myfirst(_Al, _Tuple_alloc, _This_arg)
; 223  : 		{	// construct from one or more copied elements, allocator
; 224  : 		}
; 225  : 
; 226  : 	template<class _This2,
; 227  : 		class... _Rest2,
; 228  : 		class = typename _Tuple_enable<
; 229  : 			tuple<_This2, _Rest2...>, _Myt>::type>
; 230  : 		explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
; 231  : 		: _Mybase(_STD forward<_Rest2>(_Rest_arg)...),
; 232  : 			_Myfirst(_STD forward<_This2>(_This_arg))
; 233  : 		{	// construct from one or more moved elements
; 234  : 		}
; 235  : 
; 236  : 	template<class _Alloc,
; 237  : 		class _This2,
; 238  : 		class... _Rest2,
; 239  : 		class = typename _Tuple_enable<
; 240  : 			tuple<_This2, _Rest2...>, _Myt>::type>
; 241  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 242  : 			_This2&& _This_arg, _Rest2&&... _Rest_arg)
; 243  : 		: _Mybase(allocator_arg, _Al,
; 244  : 				_STD forward<_Rest2>(_Rest_arg)...),
; 245  : 			_Myfirst(_Al, _Tuple_alloc,
; 246  : 				_STD forward<_This2>(_This_arg))
; 247  : 		{	// construct from one or more moved elements, allocator
; 248  : 		}
; 249  : 
; 250  : 	template<class... _Other,
; 251  : 		class = typename _Tuple_enable<
; 252  : 			tuple<_Other...>, _Myt>::type>
; 253  : 		tuple(tuple<_Other...>&& _Right)
; 254  : 		: _Mybase(_STD forward<typename tuple<_Other...>::_Mybase>
; 255  : 			(_Right._Get_rest())),
; 256  : 			_Myfirst(_STD forward<typename tuple<_Other...>::_This_type>
; 257  : 				(_Right._Myfirst._Val))
; 258  : 		{	// construct by moving same size tuple
; 259  : 		}
; 260  : 
; 261  : 	template<class _Alloc,
; 262  : 		class... _Other,
; 263  : 		class = typename _Tuple_enable<
; 264  : 			tuple<_Other...>, _Myt>::type>
; 265  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 266  : 			tuple<_Other...>&& _Right)
; 267  : 		: _Mybase(allocator_arg, _Al,
; 268  : 				_STD forward<typename tuple<_Other...>::_Mybase>
; 269  : 					(_Right._Get_rest())),
; 270  : 			_Myfirst(_Al, _Tuple_alloc,
; 271  : 				_STD forward<typename tuple<_Other...>::_This_type>
; 272  : 					(_Right._Myfirst._Val))
; 273  : 		{	// construct by moving same size tuple, allocator
; 274  : 		}
; 275  : 
; 276  : 	template<class... _Other>
; 277  : 		_Myt& operator=(const tuple<_Other...>& _Right)
; 278  : 		{	// assign by copying same size tuple
; 279  : 		_Myfirst._Val = _Right._Myfirst._Val;
; 280  : 		(_Mybase&)*this = _Right._Get_rest();
; 281  : 		return (*this);
; 282  : 		}
; 283  : 
; 284  : 	template<class... _Other>
; 285  : 		_Myt& operator=(tuple<_Other...>&& _Right)
; 286  : 		{	// assign by moving same size tuple
; 287  : 		_Myfirst._Val = _STD forward<typename tuple<_Other...>::_This_type>
; 288  : 			(_Right._Myfirst._Val);
; 289  : 		(_Mybase&)*this = _STD forward<typename tuple<_Other...>::_Mybase>
; 290  : 			(_Right._Get_rest());
; 291  : 		return (*this);
; 292  : 		}
; 293  : 
; 294  : 	template<class... _Other>
; 295  : 		bool _Equals(const tuple<_Other...>& _Right) const
; 296  : 		{	// test if *this == _Right
; 297  : 		static_assert(_Mysize == sizeof...(_Other),
; 298  : 			"comparing tuple to object with different size");
; 299  : 		return (_Myfirst._Val == _Right._Myfirst._Val
; 300  : 			&& _Mybase::_Equals(_Right._Get_rest()));
; 301  : 		}
; 302  : 
; 303  : 	template<class... _Other>
; 304  : 		bool _Less(const tuple<_Other...>& _Right) const
; 305  : 		{	// test if *this < _Right
; 306  : 		static_assert(_Mysize == sizeof...(_Other),
; 307  : 			"comparing tuple to object with different size");
; 308  : 		return (_Myfirst._Val < _Right._Myfirst._Val
; 309  : 			|| (!(_Right._Myfirst._Val < _Myfirst._Val)
; 310  : 				&& _Mybase::_Less(_Right._Get_rest())));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc>
; 314  : 		tuple(allocator_arg_t, const _Alloc& _Al)
; 315  : 		: _Mybase(allocator_arg, _Al),
; 316  : 			_Myfirst(_Al, _Tuple_alloc)
; 317  : 		{	// construct default, allocator
; 318  : 		}
; 319  : 
; 320  : 	template<class _Alloc>
; 321  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 322  : 			const _Myt& _Right)
; 323  : 		: _Mybase(allocator_arg, _Al, _Right._Get_rest()),
; 324  : 			_Myfirst(_Al, _Tuple_alloc,
; 325  : 				_Right._Myfirst._Val)
; 326  : 		{	// construct by copying, allocator
; 327  : 		}
; 328  : 
; 329  : 	template<class _First,
; 330  : 		class _Second,
; 331  : 		class = typename _Tuple_enable<
; 332  : 			tuple<const _First&, const _Second&>, _Myt>::type>
; 333  : 		tuple(const pair<_First, _Second>& _Right)
; 334  : 
; 335  : 		: _Mybase(tuple<_Second>(_Right.second)),
; 336  : 			_Myfirst(_Right.first)
; 337  : 		{	// construct by copying pair
; 338  : 		// no static_assert necessary
; 339  : 		}
; 340  : 
; 341  : 	template<class _Alloc,
; 342  : 		class _First,
; 343  : 		class _Second,
; 344  : 		class = typename _Tuple_enable<
; 345  : 			tuple<const _First&, const _Second&>, _Myt>::type>
; 346  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 347  : 			const pair<_First, _Second>& _Right)
; 348  : 
; 349  : 		: _Mybase(allocator_arg, _Al, tuple<_Second>(_Right.second)),
; 350  : 			_Myfirst(_Al, _Tuple_alloc,
; 351  : 				_Right.first)
; 352  : 		{	// construct by copying pair, allocator
; 353  : 		// no static_assert necessary
; 354  : 		}
; 355  : 
; 356  : 	_Myt& operator=(const _Myt& _Right)
; 357  : 		{	// assign
; 358  : 		_Myfirst._Val = _Right._Myfirst._Val;
; 359  : 		(_Mybase&)*this = _Right._Get_rest();
; 360  : 		return (*this);
; 361  : 		}
; 362  : 
; 363  : 	template<class _First,
; 364  : 		class _Second>
; 365  : 		_Myt& operator=(const pair<_First, _Second>& _Right)
; 366  : 		{	// assign by copying pair
; 367  : 		static_assert(_Mysize == 2,
; 368  : 			"assigning to tuple from object with different size");
; 369  : 		_Myfirst._Val = _Right.first;
; 370  : 		(_Mybase&)*this = tuple<_Second>(_Right.second);
; 371  : 		return (*this);
; 372  : 		}
; 373  : 
; 374  : 	template<class _Alloc>
; 375  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 376  : 			_Myt&& _Right)
; 377  : 		: _Mybase(allocator_arg, _Al,
; 378  : 				_STD forward<_Mybase>(_Right._Get_rest())),
; 379  : 			_Myfirst(_Al, _Tuple_alloc,
; 380  : 				_STD forward<_This>(_Right._Myfirst._Val))
; 381  : 		{	// construct by moving, allocator
; 382  : 		}
; 383  : 
; 384  : 	template<class _First,
; 385  : 		class _Second,
; 386  : 		class = typename _Tuple_enable<
; 387  : 			tuple<_First, _Second>, _Myt>::type>
; 388  : 		tuple(pair<_First, _Second>&& _Right)
; 389  : 
; 390  : 		: _Mybase(tuple<_Second>(_STD forward<_Second>(_Right.second))),
; 391  : 			_Myfirst(_STD forward<_First>(_Right.first))
; 392  : 		{	// construct by moving pair
; 393  : 		// no static_assert necessary
; 394  : 		}
; 395  : 
; 396  : 	template<class _Alloc,
; 397  : 		class _First,
; 398  : 		class _Second,
; 399  : 		class = typename _Tuple_enable<
; 400  : 			tuple<_First, _Second>, _Myt>::type>
; 401  : 		tuple(allocator_arg_t, const _Alloc& _Al,
; 402  : 			pair<_First, _Second>&& _Right)
; 403  : 
; 404  : 		: _Mybase(allocator_arg, _Al,
; 405  : 				tuple<_Second>(_STD forward<_Second>(_Right.second))),
; 406  : 			_Myfirst(_Al, _Tuple_alloc,
; 407  : 				_STD forward<_First>(_Right.first))
; 408  : 		{	// construct by moving pair, allocator
; 409  : 		// no static_assert necessary
; 410  : 		}
; 411  : 
; 412  : 	_Myt& operator=(_Myt&& _Right)
; 413  : 		_NOEXCEPT_OP(is_nothrow_move_assignable<_This>::value
; 414  : 			&& is_nothrow_move_assignable<_Mybase>::value)
; 415  : 		{	// assign by moving
; 416  : 		_Myfirst = _STD forward<_This>(_Right._Myfirst._Val);
; 417  : 		(_Mybase&)*this = _STD forward<_Mybase>(_Right._Get_rest());
; 418  : 		return (*this);
; 419  : 		}
; 420  : 
; 421  : 	template<class _First,
; 422  : 		class _Second>
; 423  : 		_Myt& operator=(pair<_First, _Second>&& _Right)
; 424  : 		_NOEXCEPT_OP(
; 425  : 			_NOEXCEPT_OP(_Myfirst._Val = _STD forward<_First>(_Right.first))
; 426  : 			&& _NOEXCEPT_OP((_Mybase&)*this =
; 427  : 				tuple<_Second>(_STD forward<_Second>(_Right.second))))
; 428  : 		{	// assign by moving pair
; 429  : 		static_assert(_Mysize == 2,
; 430  : 			"assigning to tuple from object with different size");
; 431  : 		_Myfirst._Val = _STD forward<_First>(_Right.first);
; 432  : 		(_Mybase&)*this =
; 433  : 			tuple<_Second>(_STD forward<_Second>(_Right.second));
; 434  : 		return (*this);
; 435  : 		}
; 436  : 
; 437  : 	_Mybase& _Get_rest()
; 438  : 		{	// get reference to rest of elements
; 439  : 		return (*this);
; 440  : 		}
; 441  : 
; 442  : 	const _Mybase& _Get_rest() const
; 443  : 		{	// get const reference to rest of elements
; 444  : 		return (*this);
; 445  : 		}
; 446  : 
; 447  : 	void swap(tuple& _Right)
; 448  : 		_NOEXCEPT_OP(
; 449  : 			_NOEXCEPT_OP(_Swap_adl(_Myfirst._Val, _Myfirst._Val))
; 450  : 			&& _NOEXCEPT_OP(_Swap_adl((_Mybase&)_Right, (_Mybase&)_Right)))
; 451  : 		{	// swap *this and _Right
; 452  : 		_Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
; 453  : 		_Mybase::swap((_Mybase&)_Right);
; 454  : 		}
; 455  : 
; 456  : 	_Tuple_val<_This> _Myfirst;	// the stored element
; 457  : 	};
; 458  : 
; 459  : 
; 460  : 	// OPERATORS FOR tuple
; 461  : 
; 462  : template<class... _Types1,
; 463  : 	class... _Types2> inline
; 464  : 	bool operator==(const tuple<_Types1...>& _Left,
; 465  : 		const tuple<_Types2...>& _Right)
; 466  : 	{	// test if _Left == _Right
; 467  : 	return (_Left._Equals(_Right));
; 468  : 	}
; 469  : 
; 470  : template<class... _Types1,
; 471  : 	class... _Types2> inline
; 472  : 	bool operator!=(const tuple<_Types1...>& _Left,
; 473  : 		const tuple<_Types2...>& _Right)
; 474  : 	{	// test if _Left != _Right
; 475  : 	return (!(_Left == _Right));
; 476  : 	}
; 477  : 
; 478  : template<class... _Types1,
; 479  : 	class... _Types2> inline
; 480  : 	bool operator<(const tuple<_Types1...>& _Left,
; 481  : 		const tuple<_Types2...>& _Right)
; 482  : 	{	// test if _Left < _Right
; 483  : 	return (_Left._Less(_Right));
; 484  : 	}
; 485  : 
; 486  : template<class... _Types1,
; 487  : 	class... _Types2> inline
; 488  : 	bool operator>=(const tuple<_Types1...>& _Left,
; 489  : 		const tuple<_Types2...>& _Right)
; 490  : 	{	// test if _Left >= _Right
; 491  : 	return (!(_Left < _Right));
; 492  : 	}
; 493  : 
; 494  : template<class... _Types1,
; 495  : 	class... _Types2> inline
; 496  : 	bool operator>(const tuple<_Types1...>& _Left,
; 497  : 		const tuple<_Types2...>& _Right)
; 498  : 	{	// test if _Left > _Right
; 499  : 	return (_Right < _Left);
; 500  : 	}
; 501  : 
; 502  : template<class... _Types1,
; 503  : 	class... _Types2> inline
; 504  : 	bool operator<=(const tuple<_Types1...>& _Left,
; 505  : 		const tuple<_Types2...>& _Right)
; 506  : 	{	// test if _Left <= _Right
; 507  : 	return (!(_Right < _Left));
; 508  : 	}
; 509  : 
; 510  : template<class... _Types> inline
; 511  : 	void swap(tuple<_Types...>& _Left,
; 512  : 		tuple<_Types...>& _Right)
; 513  : 			_NOEXCEPT_OP(_NOEXCEPT_OP(_Left.swap(_Right)))
; 514  : 	{	// swap _Left and _Right
; 515  : 	return (_Left.swap(_Right));
; 516  : 	}
; 517  : 
; 518  : 
; 519  : 	// CLASS tuple_element
; 520  : template<size_t _Index,
; 521  : 	class _Tuple>
; 522  : 	struct tuple_element;
; 523  : 
; 524  : template<class _This,
; 525  : 	class... _Rest>
; 526  : 	struct tuple_element<0, tuple<_This, _Rest...> >
; 527  : 	{	// select first element
; 528  : 	typedef _This type;
; 529  : 	typedef typename add_lvalue_reference<const _This>::type _Ctype;
; 530  : 	typedef typename add_lvalue_reference<_This>::type _Rtype;
; 531  : 	typedef typename add_rvalue_reference<_This>::type _RRtype;
; 532  : 	typedef tuple<_This, _Rest...> _Ttype;
; 533  : 	};
; 534  : 
; 535  : template<size_t _Index,
; 536  : 	class _This,
; 537  : 	class... _Rest>
; 538  : 	struct tuple_element<_Index, tuple<_This, _Rest...> >
; 539  : 		: public tuple_element<_Index - 1, tuple<_Rest...> >
; 540  : 	{	// recursive tuple_element definition
; 541  : 	};
; 542  : 
; 543  : 
; 544  : template<size_t _Index,
; 545  : 	class _Tuple>
; 546  : 	struct tuple_element<_Index, const _Tuple>
; 547  : 	: public tuple_element<_Index, _Tuple>
; 548  : 	{	// tuple_element for const
; 549  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 550  : 	typedef typename add_const<typename _Mybase::type>::type type;
; 551  : 	};
; 552  : 
; 553  : template<size_t _Index,
; 554  : 	class _Tuple>
; 555  : 	struct tuple_element<_Index, volatile _Tuple>
; 556  : 	: public tuple_element<_Index, _Tuple>
; 557  : 	{	// tuple element for volatile
; 558  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 559  : 	typedef typename add_volatile<typename _Mybase::type>::type type;
; 560  : 	};
; 561  : 
; 562  : template<size_t _Index,
; 563  : 	class _Tuple>
; 564  : 	struct tuple_element<_Index, const volatile _Tuple>
; 565  : 	: public tuple_element<_Index, _Tuple>
; 566  : 	{	// tuple_element for const volatile
; 567  : 	typedef tuple_element<_Index, _Tuple> _Mybase;
; 568  : 	typedef typename add_cv<typename _Mybase::type>::type type;
; 569  : 	};
; 570  : 
; 571  : 	// FUNCTION get
; 572  : template<size_t _Index,
; 573  : 	class... _Types> inline
; 574  : 	typename tuple_element<_Index, tuple<_Types...> >::_Rtype
; 575  : 		get(tuple<_Types...>& _Tuple)
; 576  : 	{	// get reference to _Index element of tuple
; 577  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 578  : 		_Ttype;
; 579  : 	return (((_Ttype&)_Tuple)._Myfirst._Val);
; 580  : 	}
; 581  : 
; 582  : template<size_t _Index,
; 583  : 	class... _Types> inline
; 584  : 	typename tuple_element<_Index, tuple<_Types...> >::_Ctype
; 585  : 		get(const tuple<_Types...>& _Tuple)
; 586  : 	{	// get const reference to _Index element of tuple
; 587  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 588  : 		_Ttype;
; 589  : 	return (((_Ttype&)_Tuple)._Myfirst._Val);
; 590  : 	}
; 591  : 
; 592  : template<size_t _Index,
; 593  : 	class... _Types> inline
; 594  : 	typename tuple_element<_Index, tuple<_Types...> >::_RRtype
; 595  : 		get(tuple<_Types...>&& _Tuple)
; 596  : 	{	// get rvalue reference to _Index element of tuple
; 597  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 598  : 		_Ttype;
; 599  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_RRtype
; 600  : 		_RRtype;
; 601  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
; 602  : 	}
; 603  : 
; 604  : 	// FUNCTION make_tuple
; 605  : template<class... _Types> inline
; 606  : 	tuple<typename _Unrefwrap<_Types>::type...>
; 607  : 		make_tuple(_Types&&... _Args)
; 608  : 	{	// make tuple from elements
; 609  : 	typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
; 610  : 	return (_Ttype(_STD forward<_Types>(_Args)...));
; 611  : 	}
; 612  : 
; 613  : 	// FUNCTION tie
; 614  : template<class... _Types> inline
; 615  : 	tuple<_Types&...>
; 616  : 		tie(_Types&... _Args) _NOEXCEPT
; 617  : 	{	// make tuple from elements
; 618  : 	typedef tuple<_Types&...> _Ttype;
; 619  : 	return (_Ttype(_Args...));
; 620  : 	}
; 621  : 
; 622  : 
; 623  : 	// TEMPLATE FUNCTION forward_as_tuple
; 624  : 
; 625  : template<class... _Types> inline
; 626  : 	tuple<_Types&&...>
; 627  : 		forward_as_tuple(_Types&&... _Args) _NOEXCEPT
; 628  : 	{	// forward arguments in a tuple
; 629  : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));
; 630  : 	}
; 631  : 
; 632  : 
; 633  : 	// TEMPLATE STRUCT _Make_arg_idx AND HELPERS
; 634  : template<class _Arg_idx_type,
; 635  : 	class... _Types>
; 636  : 	struct _Make_arg_idx1
; 637  : 	{	// ends recursion and defines type
; 638  : 	typedef _Arg_idx_type type;
; 639  : 	};
; 640  : 
; 641  : template<size_t... _Indexes,
; 642  : 	class _Ty,
; 643  : 	class... _Types>
; 644  : 	struct _Make_arg_idx1<_Arg_idx<_Indexes...>, _Ty, _Types...>
; 645  : 		: _Make_arg_idx1<_Arg_idx<sizeof...(_Types), _Indexes...>, _Types...>
; 646  : 	{	// counts a type and recurses
; 647  : 	};
; 648  : 
; 649  : template<class... _Types>
; 650  : 	struct _Make_arg_idx
; 651  : 		: _Make_arg_idx1<_Arg_idx<>, _Types...>
; 652  : 	{	// defines type as _Arg_idx<0, 1, 2... (sizeof...(_Types))-1>
; 653  : 	};
; 654  : 
; 655  : template<class _Arg_idx_type1,
; 656  : 	class _Arg_idx_type2>
; 657  : 	struct _Cat_arg_idx;
; 658  : 
; 659  : template<size_t... _Indexes1,
; 660  : 	size_t... _Indexes2>
; 661  : 	struct _Cat_arg_idx<_Arg_idx<_Indexes1...>, _Arg_idx<_Indexes2...> >
; 662  : 	{	// concatenates two _Arg_idx types
; 663  : 	typedef _Arg_idx<_Indexes1..., _Indexes2...> type;
; 664  : 	};
; 665  : 
; 666  : template<size_t _Nx,
; 667  : 	class _Ty>
; 668  : 	struct _Repeat_for
; 669  : 		: integral_constant<size_t, _Nx>
; 670  : 	{	// repeats _Nx for each _Ty in a parameter pack
; 671  : 	};
; 672  : 
; 673  : 	// FUNCTION tuple_cat
; 674  : template<class _Ret,
; 675  : 	class _Kx_arg,
; 676  : 	class _Ix_arg,
; 677  : 	size_t _Ix_next,
; 678  : 	class... _Tuples>
; 679  : 	struct _Tuple_cat2
; 680  : 	{	// determine tuple_cat's return type and _Kx/_Ix indices
; 681  : 	static_assert(sizeof...(_Tuples) == 0,
; 682  : 		"Unsupported tuple_cat arguments.");
; 683  : 	typedef _Ret type;
; 684  : 	typedef _Kx_arg _Kx_arg_idx;
; 685  : 	typedef _Ix_arg _Ix_arg_idx;
; 686  : 	};
; 687  : 
; 688  : template<class... _Types1,
; 689  : 	class _Kx_arg,
; 690  : 	size_t... _Ix,
; 691  : 	size_t _Ix_next,
; 692  : 	class... _Types2,
; 693  : 	class... _Rest>
; 694  : 	struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg, _Arg_idx<_Ix...>, _Ix_next,
; 695  : 		tuple<_Types2...>, _Rest...>
; 696  : 		: _Tuple_cat2<
; 697  : 			tuple<_Types1..., _Types2...>,
; 698  : 			typename _Cat_arg_idx<_Kx_arg,
; 699  : 				typename _Make_arg_idx<_Types2...>::type>::type,
; 700  : 			_Arg_idx<_Ix..., _Repeat_for<_Ix_next, _Types2>::value...>,
; 701  : 			_Ix_next + 1,
; 702  : 			_Rest...>
; 703  : 	{	// determine tuple_cat's return type and _Kx/_Ix indices
; 704  : 	};
; 705  : 
; 706  : template<class... _Tuples>
; 707  : 	struct _Tuple_cat1
; 708  : 		: _Tuple_cat2<tuple<>, _Arg_idx<>, _Arg_idx<>, 0,
; 709  : 			typename decay<_Tuples>::type...>
; 710  : 	{	// prepare to determine tuple_cat's return type and _Kx/_Ix indices
; 711  : 	};
; 712  : 
; 713  : template<class _Ret,
; 714  : 	size_t... _Kx,
; 715  : 	size_t... _Ix,
; 716  : 	class _Ty> inline
; 717  : 	_Ret _Tuple_cat(_Arg_idx<_Kx...>, _Arg_idx<_Ix...>, _Ty&& _Arg)
; 718  : 	{	// concatenate tuples
; 719  : 	return (_Ret(_STD get<_Kx>(_STD get<_Ix>(_STD forward<_Ty>(_Arg)))...));
; 720  : 	}
; 721  : 
; 722  : template<class... _Tuples> inline
; 723  : 	typename _Tuple_cat1<_Tuples...>::type
; 724  : 		tuple_cat(_Tuples&&... _Tpls)
; 725  : 	{	// concatenate tuples
; 726  : 	typedef _Tuple_cat1<_Tuples...> _Cat1;
; 727  : 	return (_Tuple_cat<typename _Cat1::type>(
; 728  : 		typename _Cat1::_Kx_arg_idx(), typename _Cat1::_Ix_arg_idx(),
; 729  : 		_STD forward_as_tuple(_STD forward<_Tuples>(_Tpls)...)));
; 730  : 	}
; 731  : 
; 732  : 
; 733  : 	// TEMPLATE CONSTRUCTOR pair::pair(tuple, tuple, _Arg_idx, _Arg_idx)
; 734  : template<class _Ty1,
; 735  : 	class _Ty2>
; 736  : 	template<class _Tuple1,
; 737  : 		class _Tuple2,
; 738  : 		size_t... _Indexes1,
; 739  : 		size_t... _Indexes2> inline
; 740  : 		pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
; 741  : 			_Tuple2& _Val2,
; 742  : 			_Arg_idx<_Indexes1...>,
; 743  : 			_Arg_idx<_Indexes2...>)
; 744  : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),
; 745  : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)
; 746  : 		{	// construct from pair of tuples

  0001a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001c	89 0a		 mov	 DWORD PTR [edx], ecx
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$LN42@Buynode:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 940  : 		}

  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ENDP ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Buynode<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@V?$tuple@$$$V@std@@@std@@YA$$QAV?$tuple@$$$V@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@$$$V@std@@@std@@YA$$QAV?$tuple@$$$V@0@AAV10@@Z PROC ; std::forward<std::tuple<> >, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$tuple@$$$V@std@@@std@@YA$$QAV?$tuple@$$$V@0@AAV10@@Z ENDP ; std::forward<std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@V?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z PROC ; std::forward<std::tuple<unsigned long const &> >, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ENDP ; std::forward<std::tuple<unsigned long const &> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z PROC ; std::forward<std::piecewise_construct_t const &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ENDP ; std::forward<std::piecewise_construct_t const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
;	COMDAT ??$?0ABKPAPAX@?$tuple@ABK@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0ABKPAPAX@?$tuple@ABK@std@@QAE@$$QAV01@@Z PROC	; std::tuple<unsigned long const &>::tuple<unsigned long const &><unsigned long const &,void * *>, COMDAT
; _this$ = ecx

; 258  : 		{	// construct by moving same size tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   : 		{	// construct with argument

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 259  : 		}

  0000a	8b c1		 mov	 eax, ecx
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??$?0ABKPAPAX@?$tuple@ABK@std@@QAE@$$QAV01@@Z ENDP	; std::tuple<unsigned long const &>::tuple<unsigned long const &><unsigned long const &,void * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@K@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAK@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@K@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAK@Z PROC ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@K@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAK@Z ENDP ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@KABK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAKABK@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@KABK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAKABK@Z PROC ; std::allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@KABK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAKABK@Z ENDP ; std::allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@ABK@std@@YAABKABK@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABK@std@@YAABKABK@Z PROC			; std::forward<unsigned long const &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABK@std@@YAABKABK@Z ENDP			; std::forward<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAPAVCLight@@HULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z
_TEXT	SEGMENT
__Mid$1 = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort@PAPAVCLight@@HULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z PROC ; std::_Sort<CLight * *,int,LightComp>, COMDAT

; 3122 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 3123 : 	_Diff _Count;
; 3124 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00008	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000b	8b c6		 mov	 eax, esi
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00011	2b c7		 sub	 eax, edi
  00013	c1 f8 02	 sar	 eax, 2
  00016	83 f8 20	 cmp	 eax, 32			; 00000020H
  00019	7e 72		 jle	 SHORT $LN3@Sort
  0001b	8b 5d 10	 mov	 ebx, DWORD PTR __Ideal$[ebp]
  0001e	8b ff		 npad	 2
$LL7@Sort:
  00020	85 db		 test	 ebx, ebx
  00022	0f 8e 80 00 00
	00		 jle	 $LN6@Sort

; 3125 : 		{	// divide and conquer by quicksort
; 3126 : 		pair<_RanIt, _RanIt> _Mid =
; 3127 : 			_Unguarded_partition(_First, _Last, _Pred);

  00028	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0002b	8d 45 f8	 lea	 eax, DWORD PTR __Mid$1[ebp]
  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Unguarded_partition@PAPAVCLight@@ULightComp@@@std@@YA?AU?$pair@PAPAVCLight@@PAPAV1@@0@PAPAVCLight@@0ULightComp@@@Z ; std::_Unguarded_partition<CLight * *,LightComp>

; 3128 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

  00036	8b c3		 mov	 eax, ebx
  00038	83 c4 10	 add	 esp, 16			; 00000010H
  0003b	99		 cdq

; 3129 : 
; 3130 : 		if (_Mid.first - _First < _Last - _Mid.second)

  0003c	8b ce		 mov	 ecx, esi
  0003e	2b c2		 sub	 eax, edx
  00040	8b d8		 mov	 ebx, eax

; 3131 : 			{	// loop on second half
; 3132 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

  00042	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00045	d1 fb		 sar	 ebx, 1
  00047	8b c3		 mov	 eax, ebx
  00049	99		 cdq
  0004a	2b c2		 sub	 eax, edx
  0004c	8b 55 fc	 mov	 edx, DWORD PTR __Mid$1[ebp+4]
  0004f	d1 f8		 sar	 eax, 1
  00051	2b ca		 sub	 ecx, edx
  00053	03 d8		 add	 ebx, eax
  00055	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00058	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  0005b	2b c7		 sub	 eax, edi
  0005d	83 e0 fc	 and	 eax, -4			; fffffffcH
  00060	53		 push	 ebx
  00061	3b c1		 cmp	 eax, ecx
  00063	7d 0f		 jge	 SHORT $LN5@Sort
  00065	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  00068	50		 push	 eax
  00069	57		 push	 edi
  0006a	e8 00 00 00 00	 call	 ??$_Sort@PAPAVCLight@@HULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort<CLight * *,int,LightComp>

; 3133 : 			_First = _Mid.second;

  0006f	8b 7d fc	 mov	 edi, DWORD PTR __Mid$1[ebp+4]

; 3134 : 			}
; 3135 : 		else

  00072	eb 0a		 jmp	 SHORT $LN34@Sort
$LN5@Sort:

; 3136 : 			{	// loop on first half
; 3137 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  00074	56		 push	 esi
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ??$_Sort@PAPAVCLight@@HULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort<CLight * *,int,LightComp>

; 3138 : 			_Last = _Mid.first;

  0007b	8b 75 f8	 mov	 esi, DWORD PTR __Mid$1[ebp]
$LN34@Sort:

; 3136 : 			{	// loop on first half
; 3137 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  0007e	8b c6		 mov	 eax, esi
  00080	83 c4 10	 add	 esp, 16			; 00000010H
  00083	2b c7		 sub	 eax, edi
  00085	c1 f8 02	 sar	 eax, 2
  00088	83 f8 20	 cmp	 eax, 32			; 00000020H
  0008b	7f 93		 jg	 SHORT $LL7@Sort
$LN3@Sort:

; 3143 : 		{	// heap sort if too many divisions
; 3144 : 		_STD make_heap(_First, _Last, _Pred);
; 3145 : 		_STD sort_heap(_First, _Last, _Pred);
; 3146 : 		}
; 3147 : 	else if (1 < _Count)

  0008d	83 f8 01	 cmp	 eax, 1
  00090	7e 0f		 jle	 SHORT $LN27@Sort

; 2488 : 	}
; 2489 : 
; 2490 : 		// TEMPLATE FUNCTION sort_heap
; 2491 : template<class _RanIt> inline
; 2492 : 	void sort_heap(_RanIt _First, _RanIt _Last)
; 2493 : 	{	// order heap by repeatedly popping, using operator<
; 2494 : 	_STD sort_heap(_First, _Last, less<>());
; 2495 : 	}
; 2496 : 
; 2497 : 		// TEMPLATE FUNCTION lower_bound WITH PRED
; 2498 : template<class _FwdIt,
; 2499 : 	class _Ty,
; 2500 : 	class _Diff,
; 2501 : 	class _Pr> inline
; 2502 : 	_FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last,
; 2503 : 		const _Ty& _Val, _Pr _Pred, _Diff *)
; 2504 : 	{	// find first element not before _Val, using _Pred
; 2505 : 	_Diff _Count = 0;
; 2506 : 	_Distance(_First, _Last, _Count);
; 2507 : 
; 2508 : 	while (0 < _Count)
; 2509 : 		{	// divide and conquer, find half that contains answer
; 2510 : 		_Diff _Count2 = _Count / 2;
; 2511 : 		_FwdIt _Mid = _First;
; 2512 : 		_STD advance(_Mid, _Count2);
; 2513 : 
; 2514 : 		if (_Pred(*_Mid, _Val))
; 2515 : //		if (_DEBUG_LT_PRED(_Pred, *_Mid, _Val))
; 2516 : 			{	// try top half
; 2517 : 			_First = ++_Mid;
; 2518 : 			_Count -= _Count2 + 1;
; 2519 : 			}
; 2520 : 		else
; 2521 : 			_Count = _Count2;
; 2522 : 		}
; 2523 : 	return (_First);
; 2524 : 	}
; 2525 : 
; 2526 : template<class _FwdIt,
; 2527 : 	class _Ty,
; 2528 : 	class _Pr> inline
; 2529 : 	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
; 2530 : 		const _Ty& _Val, _Pr _Pred)
; 2531 : 	{	// find first element not before _Val, using _Pred
; 2532 : //	_DEBUG_ORDER_PRED(_First, _Last, _Pred);
; 2533 : 	return (_Rechecked(_First,
; 2534 : 		_Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
; 2535 : 			_Dist_type(_First))));
; 2536 : 	}
; 2537 : 
; 2538 : 		// TEMPLATE FUNCTION lower_bound
; 2539 : template<class _FwdIt,
; 2540 : 	class _Ty> inline
; 2541 : 	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2542 : 	{	// find first element not before _Val, using operator<
; 2543 : 	return (_STD lower_bound(_First, _Last, _Val, less<>()));
; 2544 : 	}
; 2545 : 
; 2546 : 		// TEMPLATE FUNCTION upper_bound WITH PRED
; 2547 : template<class _FwdIt,
; 2548 : 	class _Ty,
; 2549 : 	class _Diff,
; 2550 : 	class _Pr> inline
; 2551 : 	_FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last,
; 2552 : 		const _Ty& _Val, _Pr _Pred, _Diff *)
; 2553 : 	{	// find first element that _Val is before, using _Pred
; 2554 : 	_Diff _Count = 0;
; 2555 : 	_Distance(_First, _Last, _Count);
; 2556 : 
; 2557 : 	while (0 < _Count)
; 2558 : 		{	// divide and conquer, find half that contains answer
; 2559 : 		_Diff _Count2 = _Count / 2;
; 2560 : 		_FwdIt _Mid = _First;
; 2561 : 		_STD advance(_Mid, _Count2);
; 2562 : 
; 2563 : 		if (!_Pred(_Val, *_Mid))
; 2564 : //		if (!_DEBUG_LT_PRED(_Pred, _Val, *_Mid))
; 2565 : 			{	// try top half
; 2566 : 			_First = ++_Mid;
; 2567 : 			_Count -= _Count2 + 1;
; 2568 : 			}
; 2569 : 		else
; 2570 : 			_Count = _Count2;
; 2571 : 		}
; 2572 : 	return (_First);
; 2573 : 	}
; 2574 : 
; 2575 : template<class _FwdIt,
; 2576 : 	class _Ty,
; 2577 : 	class _Pr> inline
; 2578 : 	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
; 2579 : 		const _Ty& _Val, _Pr _Pred)
; 2580 : 	{	// find first element that _Val is before, using _Pred
; 2581 : //	_DEBUG_ORDER_PRED(_First, _Last, _Pred);
; 2582 : 	return (_Rechecked(_First,
; 2583 : 		_Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
; 2584 : 			_Dist_type(_First))));
; 2585 : 	}
; 2586 : 
; 2587 : 		// TEMPLATE FUNCTION upper_bound
; 2588 : template<class _FwdIt,
; 2589 : 	class _Ty> inline
; 2590 : 	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2591 : 	{	// find first element that _Val is before, using operator<
; 2592 : 	return (_STD upper_bound(_First, _Last, _Val, less<>()));
; 2593 : 	}
; 2594 : 
; 2595 : 		// TEMPLATE FUNCTION equal_range WITH PRED
; 2596 : template<class _FwdIt,
; 2597 : 	class _Ty,
; 2598 : 	class _Diff,
; 2599 : 	class _Pr> inline
; 2600 : 	pair<_FwdIt, _FwdIt>
; 2601 : 		_Equal_range(_FwdIt _First, _FwdIt _Last,
; 2602 : 			const _Ty& _Val, _Pr _Pred, _Diff *)
; 2603 : 	{	// find range equivalent to _Val, using _Pred
; 2604 : 	_Diff _Count = 0;
; 2605 : 	_Distance(_First, _Last, _Count);
; 2606 : 
; 2607 : 	while (0 < _Count)
; 2608 : 		{	// divide and conquer, check midpoint
; 2609 : 		_Diff _Count2 = _Count / 2;
; 2610 : 		_FwdIt _Mid = _First;
; 2611 : 		_STD advance(_Mid, _Count2);
; 2612 : 
; 2613 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, _Val))
; 2614 : 			{	// range begins above _Mid, loop
; 2615 : 			_First = ++_Mid;
; 2616 : 			_Count -= _Count2 + 1;
; 2617 : 			}
; 2618 : 		else if (_Pred(_Val, *_Mid))
; 2619 : 			_Count = _Count2;	// range in first half, loop
; 2620 : 		else
; 2621 : 			{	// range straddles _Mid, find each end and return
; 2622 : 			_FwdIt _First2 = _STD lower_bound(_First, _Mid, _Val, _Pred);
; 2623 : 			_STD advance(_First, _Count);
; 2624 : 			_FwdIt _Last2 = _STD upper_bound(++_Mid, _First, _Val, _Pred);
; 2625 : 			return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
; 2626 : 			}
; 2627 : 		}
; 2628 : 
; 2629 : 	return (pair<_FwdIt, _FwdIt>(_First, _First));	// empty range
; 2630 : 	}
; 2631 : 
; 2632 : template<class _FwdIt,
; 2633 : 	class _Ty,
; 2634 : 	class _Pr> inline
; 2635 : 	pair<_FwdIt, _FwdIt>
; 2636 : 		equal_range(_FwdIt _First, _FwdIt _Last,
; 2637 : 			const _Ty& _Val, _Pr _Pred)
; 2638 : 	{	// find range equivalent to _Val, using _Pred
; 2639 : 	_DEBUG_ORDER_PRED(_First, _Last, _Pred);
; 2640 : 	pair<_UNCHECKED_TYPE(_FwdIt), _UNCHECKED_TYPE(_FwdIt)> _Ans(
; 2641 : 		_Equal_range(_Unchecked(_First), _Unchecked(_Last),
; 2642 : 			_Val, _Pred, _Dist_type(_First)));
; 2643 : 	return (pair<_FwdIt, _FwdIt>(
; 2644 : 		_Rechecked(_First, _Ans.first),
; 2645 : 		_Rechecked(_Last, _Ans.second)));
; 2646 : 	}
; 2647 : 
; 2648 : 		// TEMPLATE FUNCTION equal_range
; 2649 : template<class _FwdIt,
; 2650 : 	class _Ty> inline
; 2651 : 	pair<_FwdIt, _FwdIt>
; 2652 : 		equal_range(_FwdIt _First, _FwdIt _Last,
; 2653 : 			const _Ty& _Val)
; 2654 : 	{	// find range equivalent to _Val, using operator<
; 2655 : 	return (_STD equal_range(_First, _Last, _Val, less<>()));
; 2656 : 	}
; 2657 : 
; 2658 : 		// TEMPLATE FUNCTION binary_search WITH PRED
; 2659 : template<class _FwdIt,
; 2660 : 	class _Ty,
; 2661 : 	class _Pr> inline
; 2662 : 	bool binary_search(_FwdIt _First, _FwdIt _Last,
; 2663 : 		const _Ty& _Val, _Pr _Pred)
; 2664 : 	{	// test if _Val equivalent to some element, using _Pred
; 2665 : 	_First = _STD lower_bound(_First, _Last, _Val, _Pred);
; 2666 : 	return (_First != _Last && !_Pred(_Val, *_First));
; 2667 : 	}
; 2668 : 
; 2669 : 		// TEMPLATE FUNCTION binary_search
; 2670 : template<class _FwdIt,
; 2671 : 	class _Ty> inline
; 2672 : 	bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2673 : 	{	// test if _Val equivalent to some element, using operator<
; 2674 : 	return (_STD binary_search(_First, _Last, _Val, less<>()));
; 2675 : 	}
; 2676 : 
; 2677 : 		// TEMPLATE FUNCTION merge WITH PRED
; 2678 : template<class _InIt1,
; 2679 : 	class _InIt2,
; 2680 : 	class _OutIt,
; 2681 : 	class _Pr> inline
; 2682 : 	_OutIt _Merge0(_InIt1 _First1, _InIt1 _Last1,
; 2683 : 		_InIt2 _First2, _InIt2 _Last2,
; 2684 : 		_OutIt _Dest, _Pr _Pred)
; 2685 : 	{	// copy merging ranges, both using _Pred
; 2686 : 	if (_First1 != _Last1 && _First2 != _Last2)
; 2687 : 		for (; ; )
; 2688 : 			{	// merge either first or second
; 2689 : 			if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 2690 : 				{	// merge first
; 2691 : 				*_Dest++ = *_First2++;
; 2692 : 				if (_First2 == _Last2)
; 2693 : 					break;
; 2694 : 				}
; 2695 : 			else
; 2696 : 				{	// merge second
; 2697 : 				*_Dest++ = *_First1++;
; 2698 : 				if (_First1 == _Last1)
; 2699 : 					break;
; 2700 : 				}
; 2701 : 			}
; 2702 : 
; 2703 : 	_Dest = _Copy_impl(_First1, _Last1, _Dest);	// copy any tail
; 2704 : 	return (_Copy_impl(_First2, _Last2, _Dest));
; 2705 : 	}
; 2706 : 
; 2707 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2708 : template<class _InIt1,
; 2709 : 	class _InIt2,
; 2710 : 	class _OutIt,
; 2711 : 	class _Pr> inline
; 2712 : 	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
; 2713 : 		_InIt2 _First2, _InIt2 _Last2,
; 2714 : 		_OutIt _Dest, _Pr _Pred)
; 2715 : 	{	// copy merging ranges, both using _Pred
; 2716 : 	return (_Merge0(_Unchecked(_First1), _Unchecked(_Last1),
; 2717 : 		_Unchecked(_First2), _Unchecked(_Last2),
; 2718 : 		_Dest, _Pred));
; 2719 : 	}
; 2720 : 
; 2721 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2722 : template<class _InIt1,
; 2723 : 	class _InIt2,
; 2724 : 	class _OutIt,
; 2725 : 	class _Pr> inline
; 2726 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2727 : 		_InIt2 _First2, _InIt2 _Last2,
; 2728 : 		_OutIt _Dest, _Pr _Pred, input_iterator_tag,
; 2729 : 		input_iterator_tag, _Mutable_iterator_tag)
; 2730 : 	{	// copy merging ranges, both using _Pred, arbitrary iterators
; 2731 : 	return (_Merge0(_First1, _Last1,
; 2732 : 		_First2, _Last2,
; 2733 : 		_Dest, _Pred));
; 2734 : 	}
; 2735 : 
; 2736 : template<class _InIt1,
; 2737 : 	class _InIt2,
; 2738 : 	class _OutIt,
; 2739 : 	class _Pr> inline
; 2740 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2741 : 		_InIt2 _First2, _InIt2 _Last2,
; 2742 : 		_OutIt _Dest, _Pr _Pred, random_access_iterator_tag,
; 2743 : 		random_access_iterator_tag, random_access_iterator_tag)
; 2744 : 	{	// copy merging ranges, both using _Pred, random-access iterators
; 2745 : 	_OutIt _Ans = _Dest + (_Last1 - _First1)
; 2746 : 		+ (_Last2 - _First2);	// also checks range
; 2747 : 	_Merge0(_First1, _Last1,
; 2748 : 		_First2, _Last2,
; 2749 : 		_Dest, _Pred);
; 2750 : 	return (_Ans);
; 2751 : 	}
; 2752 : 
; 2753 : template<class _InIt1,
; 2754 : 	class _InIt2,
; 2755 : 	class _OutIt,
; 2756 : 	class _Pr> inline
; 2757 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2758 : 		_InIt2 _First2, _InIt2 _Last2,
; 2759 : 		_OutIt _Dest, _Pr _Pred, true_type)
; 2760 : 	{	// copy merging ranges, both using _Pred, checked dest
; 2761 : 	return (_Merge2(_First1, _Last1,
; 2762 : 		_First2, _Last2,
; 2763 : 		_Dest, _Pred, _Iter_cat(_First1),
; 2764 : 		_Iter_cat(_First2), _Iter_cat(_Dest)));
; 2765 : 	}
; 2766 : 
; 2767 : template<class _InIt1,
; 2768 : 	class _InIt2,
; 2769 : 	class _OutIt,
; 2770 : 	class _Pr> inline
; 2771 : _SCL_INSECURE_DEPRECATE
; 2772 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2773 : 		_InIt2 _First2, _InIt2 _Last2,
; 2774 : 		_OutIt _Dest, _Pr _Pred, false_type)
; 2775 : 	{	// copy merging ranges, both using _Pred, unchecked dest
; 2776 : 	return (_Merge2(_First1, _Last1,
; 2777 : 		_First2, _Last2,
; 2778 : 		_Dest, _Pred, _Iter_cat(_First1),
; 2779 : 		_Iter_cat(_First2), _Iter_cat(_Dest)));
; 2780 : 	}
; 2781 : 
; 2782 : template<class _InIt1,
; 2783 : 	class _InIt2,
; 2784 : 	class _OutIt,
; 2785 : 	class _Pr> inline
; 2786 : 	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
; 2787 : 		_InIt2 _First2, _InIt2 _Last2,
; 2788 : 		_OutIt _Dest, _Pr _Pred)
; 2789 : 	{	// copy merging ranges, both using _Pred
; 2790 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2791 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2792 : 	_DEBUG_POINTER(_Dest);
; 2793 : 	_DEBUG_POINTER(_Pred);
; 2794 : 	return (_Merge2(_Unchecked(_First1), _Unchecked(_Last1),
; 2795 : 		_Unchecked(_First2), _Unchecked(_Last2),
; 2796 : 		_Dest, _Pred, _Is_checked(_Dest)));
; 2797 : 	}
; 2798 : 
; 2799 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2800 : template<class _InIt1,
; 2801 : 	class _InIt2,
; 2802 : 	class _OutTy,
; 2803 : 	size_t _OutSize,
; 2804 : 	class _Pr> inline
; 2805 : 	_OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
; 2806 : 		_InIt2 _First2, _InIt2 _Last2,
; 2807 : 		_OutTy (&_Dest)[_OutSize], _Pr _Pred)
; 2808 : 	{	// copy merging ranges, both using _Pred, array dest
; 2809 : 	return (_Unchecked(
; 2810 : 		_STD merge(_First1, _Last1,
; 2811 : 			_First2, _Last2,
; 2812 : 			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
; 2813 : 	}
; 2814 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2815 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2816 : 
; 2817 : 		// TEMPLATE FUNCTION merge
; 2818 : template<class _InIt1,
; 2819 : 	class _InIt2,
; 2820 : 	class _OutIt> inline
; 2821 : 	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
; 2822 : 		_InIt2 _First2, _InIt2 _Last2,
; 2823 : 		_OutIt _Dest)
; 2824 : 	{	// copy merging ranges, both using operator<
; 2825 : 	return (_STD merge(_First1, _Last1, _First2, _Last2, _Dest,
; 2826 : 		less<>()));
; 2827 : 	}
; 2828 : 
; 2829 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2830 : template<class _InIt1,
; 2831 : 	class _InIt2,
; 2832 : 	class _OutTy,
; 2833 : 	size_t _OutSize> inline
; 2834 : 	_OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
; 2835 : 		_InIt2 _First2, _InIt2 _Last2,
; 2836 : 		_OutTy (&_Dest)[_OutSize])
; 2837 : 	{	// copy merging ranges, both using operator<, array dest
; 2838 : 	return (_STD merge(_First1, _Last1, _First2, _Last2, _Dest,
; 2839 : 		less<>()));
; 2840 : 	}
; 2841 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2842 : 
; 2843 : 		// TEMPLATE FUNCTION inplace_merge WITH PRED
; 2844 : template<class _BidIt1,
; 2845 : 	class _BidIt2,
; 2846 : 	class _BidIt3,
; 2847 : 	class _Pr> inline
; 2848 : 	_BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,
; 2849 : 		_BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred)
; 2850 : 	{	// merge backwards to _Dest, using _Pred
; 2851 : 	if (_First1 != _Last1 && _First2 != _Last2)
; 2852 : 		for (; ; )
; 2853 : 			{	// merge either first or second
; 2854 : 			if (_DEBUG_LT_PRED(_Pred, *--_Last2, *--_Last1))
; 2855 : 				{	// merge first
; 2856 : 				*--_Dest = _Move(*_Last1);
; 2857 : 				++_Last2;
; 2858 : 				if (_First1 == _Last1)
; 2859 : 					break;
; 2860 : 				}
; 2861 : 			else
; 2862 : 				{	// merge second
; 2863 : 				*--_Dest = _Move(*_Last2);
; 2864 : 				++_Last1;
; 2865 : 				if (_First2 == _Last2)
; 2866 : 					break;
; 2867 : 				}
; 2868 : 			}
; 2869 : 
; 2870 : 	_Dest = _Move_backward(_First2, _Last2, _Dest);	// move any tail
; 2871 : 	return (_Move_backward(_First1, _Last1, _Dest));
; 2872 : 	}
; 2873 : 
; 2874 : template<class _InIt1,
; 2875 : 	class _InIt2,
; 2876 : 	class _OutIt,
; 2877 : 	class _Pr> inline
; 2878 : 	_OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,
; 2879 : 		_InIt2 _First2, _InIt2 _Last2,
; 2880 : 		_OutIt _Dest, _Pr _Pred)
; 2881 : 	{	// move merging ranges, both using _Pred
; 2882 : 	if (_First1 != _Last1 && _First2 != _Last2)
; 2883 : 		for (; ; )
; 2884 : 			{	// merge either first or second
; 2885 : 			if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 2886 : 				{	// merge first
; 2887 : 				*_Dest++ = _Move(*_First2++);
; 2888 : 				if (_First2 == _Last2)
; 2889 : 					break;
; 2890 : 				}
; 2891 : 			else
; 2892 : 				{	// merge second
; 2893 : 				*_Dest++ = _Move(*_First1++);
; 2894 : 				if (_First1 == _Last1)
; 2895 : 					break;
; 2896 : 				}
; 2897 : 			}
; 2898 : 
; 2899 : 	_Dest = _Move(_First1, _Last1, _Dest);	// move any tail
; 2900 : 	return (_Move(_First2, _Last2, _Dest));
; 2901 : 	}
; 2902 : 
; 2903 : template<class _BidIt,
; 2904 : 	class _Diff,
; 2905 : 	class _Ty,
; 2906 : 	class _Pr> inline
; 2907 : 	void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
; 2908 : 		_Diff _Count1, _Diff _Count2,
; 2909 : 			_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
; 2910 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred
; 2911 : 	if (_Count1 == 0 || _Count2 == 0)
; 2912 : 		;	// do nothing
; 2913 : 	else if (_Count1 + _Count2 == 2)
; 2914 : 		{	// order two one-element partitions
; 2915 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))
; 2916 : 			_STD iter_swap(_First, _Mid);
; 2917 : 		}
; 2918 : 	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
; 2919 : 		{	// buffer left partition, then merge
; 2920 : 		_Move(_First, _Mid, _Tempbuf._Init());
; 2921 : 		_Merge(_Tempbuf._First(), _Tempbuf._Last(),
; 2922 : 			_Mid, _Last, _First, _Pred);
; 2923 : 		}
; 2924 : 	else if (_Count2 <= _Tempbuf._Maxlen())
; 2925 : 		{	// buffer right partition, then merge
; 2926 : 		_Move(_Mid, _Last, _Tempbuf._Init());
; 2927 : 		_Merge_backward(_First, _Mid,
; 2928 : 			_Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred);
; 2929 : 		}
; 2930 : 	else
; 2931 : 		{	// buffer too small, divide and conquer
; 2932 : 		_BidIt _Firstn, _Lastn;
; 2933 : 		_Diff _Count1n, _Count2n;
; 2934 : 		if (_Count2 < _Count1)
; 2935 : 			{	// left larger, cut it in half and partition right to match
; 2936 : 			_Count1n = _Count1 / 2, _Count2n = 0;
; 2937 : 			_Firstn = _First;
; 2938 : 			_STD advance(_Firstn, _Count1n);
; 2939 : 			_Lastn = _STD lower_bound(_Mid, _Last, *_Firstn, _Pred);
; 2940 : 			_Distance(_Mid, _Lastn, _Count2n);
; 2941 : 			}
; 2942 : 		else
; 2943 : 			{	// right larger, cut it in half and partition left to match
; 2944 : 			_Count1n = 0, _Count2n = _Count2 / 2;
; 2945 : 			_Lastn = _Mid;
; 2946 : 			_STD advance(_Lastn, _Count2n);
; 2947 : 			_Firstn = _STD upper_bound(_First, _Mid, *_Lastn, _Pred);
; 2948 : 			_Distance(_First, _Firstn, _Count1n);
; 2949 : 			}
; 2950 : 		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
; 2951 : 			_Count1 - _Count1n, _Count2n, _Tempbuf);	// rearrange middle
; 2952 : 		_Buffered_merge(_First, _Firstn, _Midn,
; 2953 : 			_Count1n, _Count2n, _Tempbuf, _Pred);	// merge each new part
; 2954 : 		_Buffered_merge(_Midn, _Lastn, _Last,
; 2955 : 			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);
; 2956 : 		}
; 2957 : 	}
; 2958 : 
; 2959 : template<class _BidIt,
; 2960 : 	class _Diff,
; 2961 : 	class _Ty,
; 2962 : 	class _Pr> inline
; 2963 : 	void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred,
; 2964 : 		_Diff *, _Ty *)
; 2965 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred
; 2966 : 	_Diff _Count1 = 0;
; 2967 : 	_Distance(_First, _Mid, _Count1);
; 2968 : 	_Diff _Count2 = 0;
; 2969 : 	_Distance(_Mid, _Last, _Count2);
; 2970 : 	_Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
; 2971 : 	_Buffered_merge(_First, _Mid, _Last,
; 2972 : 		_Count1, _Count2, _Tempbuf, _Pred);
; 2973 : 	}
; 2974 : 
; 2975 : template<class _BidIt,
; 2976 : 	class _Pr> inline
; 2977 : 	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
; 2978 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred
; 2979 : 	_DEBUG_ORDER_PRED(_First, _Mid, _Pred);
; 2980 : 	_DEBUG_ORDER_PRED(_Mid, _Last, _Pred);
; 2981 : 	if (_First != _Mid && _Mid != _Last)
; 2982 : 		_Inplace_merge(
; 2983 : 			_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
; 2984 : 			_Dist_type(_First), _Val_type(_First));
; 2985 : 	}
; 2986 : 
; 2987 : 		// TEMPLATE FUNCTION inplace_merge
; 2988 : template<class _BidIt> inline
; 2989 : 	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
; 2990 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using operator<
; 2991 : 	_STD inplace_merge(_First, _Mid, _Last, less<>());
; 2992 : 	}
; 2993 : 
; 2994 : 		// TEMPLATE FUNCTION sort WITH PRED
; 2995 : template<class _BidIt,
; 2996 : 	class _Pr,
; 2997 : 	class _Ty> inline
; 2998 : 	void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Pr _Pred, _Ty *)
; 2999 : 	{	// insertion sort [_First, _Last), using _Pred
; 3000 : 	if (_First != _Last)
; 3001 : 		for (_BidIt _Next = _First; ++_Next != _Last; )
; 3002 : 			{	// order next element
; 3003 : 			_BidIt _Next1 = _Next;
; 3004 : 			_Ty _Val = _Move(*_Next);
; 3005 : 
; 3006 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))
; 3007 : 				{	// found new earliest element, move to front
; 3008 : 				_Move_backward(_First, _Next, ++_Next1);
; 3009 : 				*_First = _Move(_Val);
; 3010 : 				}
; 3011 : 			else
; 3012 : 				{	// look for insertion point after first
; 3013 : 				for (_BidIt _First1 = _Next1;
; 3014 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3015 : 					_Next1 = _First1)
; 3016 : 					*_Next1 = _Move(*_First1);	// move hole down
; 3017 : 				*_Next1 = _Move(_Val);	// insert element in hole
; 3018 : 				}
; 3019 : 			}
; 3020 : 	}
; 3021 : 
; 3022 : template<class _BidIt,
; 3023 : 	class _Pr> inline
; 3024 : 	void _Insertion_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
; 3025 : 	{	// insertion sort [_First, _Last), using _Pred
; 3026 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00092	6a 00		 push	 0
  00094	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00097	56		 push	 esi
  00098	57		 push	 edi
  00099	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAPAVCLight@@ULightComp@@PAV1@@std@@YAXPAPAVCLight@@0ULightComp@@0@Z ; std::_Insertion_sort1<CLight * *,LightComp,CLight *>
  0009e	83 c4 10	 add	 esp, 16			; 00000010H
$LN27@Sort:
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx

; 3148 : 		_Insertion_sort(_First, _Last, _Pred);	// small
; 3149 : 	}

  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
$LN6@Sort:

; 3139 : 			}
; 3140 : 		}
; 3141 : 
; 3142 : 	if (_ISORT_MAX < _Count)

  000a8	83 f8 20	 cmp	 eax, 32			; 00000020H
  000ab	7e e0		 jle	 SHORT $LN3@Sort

; 2459 : 	if (1 < _Last - _First)

  000ad	8b c6		 mov	 eax, esi
  000af	2b c7		 sub	 eax, edi
  000b1	83 e0 fc	 and	 eax, -4			; fffffffcH
  000b4	83 f8 04	 cmp	 eax, 4
  000b7	7e 11		 jle	 SHORT $LN10@Sort

; 2460 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2461 : 			_Dist_type(_First), _Val_type(_First));

  000b9	6a 00		 push	 0
  000bb	6a 00		 push	 0
  000bd	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000c0	56		 push	 esi
  000c1	57		 push	 edi
  000c2	e8 00 00 00 00	 call	 ??$_Make_heap@PAPAVCLight@@HPAV1@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@PAH0@Z ; std::_Make_heap<CLight * *,int,CLight *,LightComp>
  000c7	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@Sort:

; 2462 : 	}
; 2463 : 
; 2464 : 		// TEMPLATE FUNCTION make_heap
; 2465 : template<class _RanIt> inline
; 2466 : 	void make_heap(_RanIt _First, _RanIt _Last)
; 2467 : 	{	// make [_First, _Last) into a heap, using operator<
; 2468 : 	_STD make_heap(_First, _Last, less<>());
; 2469 : 	}
; 2470 : 
; 2471 : 		// TEMPLATE FUNCTION sort_heap WITH PRED
; 2472 : template<class _RanIt,
; 2473 : 	class _Pr> inline
; 2474 : 	void _Sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
; 2475 : 	{	// order heap by repeatedly popping, using _Pred
; 2476 : 	for (; 1 < _Last - _First; --_Last)
; 2477 : 		_Pop_heap(_First, _Last, _Pred);
; 2478 : 	}
; 2479 : 
; 2480 : template<class _RanIt,
; 2481 : 	class _Pr> inline
; 2482 : 	void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
; 2483 : 	{	// order heap by repeatedly popping, using _Pred
; 2484 : 	_DEBUG_RANGE(_First, _Last);
; 2485 : 	_DEBUG_POINTER(_Pred);
; 2486 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2487 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  000ca	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000cd	56		 push	 esi
  000ce	57		 push	 edi
  000cf	e8 00 00 00 00	 call	 ??$_Sort_heap@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0ULightComp@@@Z ; std::_Sort_heap<CLight * *,LightComp>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx

; 3148 : 		_Insertion_sort(_First, _Last, _Pred);	// small
; 3149 : 	}

  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
??$_Sort@PAPAVCLight@@HULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ENDP ; std::_Sort<CLight * *,int,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CLight *> > >, COMDAT

; 395  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 396  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 397  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@YAPAPAVCLight@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@IPAU10@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@IPAU10@@Z PROC ; std::_Allocate<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 21		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00011	77 15		 ja	 SHORT $LN1@Allocate
  00013	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00016	c1 e0 03	 shl	 eax, 3
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00028	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002d	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Allocate@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 03	 shl	 eax, 3
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVCLight@@@std@@YAPAPAVCLight@@IPAPAV1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCLight@@@std@@YAPAPAVCLight@@IPAPAV1@@Z PROC ; std::_Allocate<CLight *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@PAVCLight@@@std@@YAPAPAVCLight@@IPAPAV1@@Z ENDP ; std::_Allocate<CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAK@std@@YAPAPAKIPAPAK@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAK@std@@YAPAPAKIPAPAK@Z PROC		; std::_Allocate<unsigned long *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@PAK@std@@YAPAPAKIPAPAK@Z ENDP		; std::_Allocate<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEPAPAVCLight@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEPAPAVCLight@@PAPAV2@00@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Umove<CLight * *>, COMDAT
; _this$ = ecx

; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1649 : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEPAPAVCLight@@PAPAV2@00@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Umove<CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBKPAVCLight@@@?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@SAABKABU?$pair@$$CBKPAVCLight@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBKPAVCLight@@@?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@SAABKABU?$pair@$$CBKPAVCLight@@@1@@Z PROC ; std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0>::_Kfn<unsigned long const ,CLight *>, COMDAT

; 57   : 		static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 58   : 		{	// extract key from element value
; 59   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 60   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBKPAVCLight@@@?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@SAABKABU?$pair@$$CBKPAVCLight@@@1@@Z ENDP ; std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0>::_Kfn<unsigned long const ,CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN11@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 03	 shl	 eax, 3
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 03	 shl	 eax, 3
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@K@std@@YAPAKIPAK@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@K@std@@YAPAKIPAK@Z PROC			; std::_Allocate<unsigned long>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@K@std@@YAPAKIPAK@Z ENDP			; std::_Allocate<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAXPAPAVCLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAXPAPAVCLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CLight *> > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@@std@@YAXPAPAVCLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVCLight@@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAVCLight@@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@@Z PROC ; std::_Wrap_alloc<std::allocator<CLight *> >::destroy<CLight *>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAVCLight@@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@@Z ENDP ; std::_Wrap_alloc<std::allocator<CLight *> >::destroy<CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEPAPAVCLight@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEPAPAVCLight@@PAPAV2@00@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Ucopy<CLight * *>, COMDAT
; _this$ = ecx

; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1641 : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEPAPAVCLight@@PAPAV2@00@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Ucopy<CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_impl@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z PROC ; std::_Copy_impl<CLight * *,CLight * *>, COMDAT

; 2064 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2054 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi

; 2055 : 	_CSTD memmove(&*_Dest, &*_First,
; 2056 : 		_Count * sizeof (*_First));

  0000c	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000f	c1 f8 02	 sar	 eax, 2
  00012	57		 push	 edi
  00013	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2057 : 	return (_Dest + _Count);

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2065 : 	return (_Copy_impl(_First, _Last,
; 2066 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2067 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Copy_impl@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ENDP ; std::_Copy_impl<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$?9V?$allocator@PAVCLight@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9V?$allocator@PAVCLight@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0@Z PROC ; std::operator!=<std::allocator<CLight *>,std::allocator<CLight *> >, COMDAT

; 901  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 902  : 	}

  00002	c3		 ret	 0
??$?9V?$allocator@PAVCLight@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@0@0@Z ENDP ; std::operator!=<std::allocator<CLight *>,std::allocator<CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAPAK@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long *>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAPAK@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned long *> > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned long *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n@PAPAKIU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_default_fill_n@PAPAKIU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<unsigned long * *,unsigned int,std::_Wrap_alloc<std::allocator<unsigned long *> > >, COMDAT

; 690  : 	{	// copy _Count * _Val_type(_First)() to raw _First, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN11@Uninitiali
  0000a	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  0000b	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000e	33 c0		 xor	 eax, eax
  00010	f3 ab		 rep stosd
  00012	5f		 pop	 edi
$LN11@Uninitiali:

; 691  : 	_Uninit_def_fill_n(_First, _Count, _Al,
; 692  : 		_Val_type(_First), _Ptr_cat(_First, _First));
; 693  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Uninitialized_default_fill_n@PAPAKIU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAXPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<unsigned long * *,unsigned int,std::_Wrap_alloc<std::allocator<unsigned long *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPAKPAPAKU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAKPAPAKU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z PROC ; std::_Uninitialized_copy<unsigned long * *,unsigned long * *,std::_Wrap_alloc<std::allocator<unsigned long *> > >, COMDAT

; 424  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 425  : 	return (_Rechecked(_Dest,
; 426  : 		_Uninit_copy(_Unchecked(_First), _Unchecked(_Last),
; 427  : 			_Unchecked(_Dest), _Al)));
; 428  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_copy@PAPAKPAPAKU?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ENDP ; std::_Uninitialized_copy<unsigned long * *,unsigned long * *,std::_Wrap_alloc<std::allocator<unsigned long *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z PROC ; std::allocator<unsigned long *>::allocator<unsigned long *><unsigned long>, COMDAT
; _this$ = ecx

; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z ENDP ; std::allocator<unsigned long *>::allocator<unsigned long *><unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long *> >::_Wrap_alloc<std::allocator<unsigned long *> ><std::_Wrap_alloc<std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 818  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long *> >::_Wrap_alloc<std::allocator<unsigned long *> ><std::_Wrap_alloc<std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAVCLight@@@std@@@std@@SAPAU?$pair@$$CBKPAVCLight@@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAVCLight@@@std@@@std@@SAPAU?$pair@$$CBKPAVCLight@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<unsigned long const ,CLight *> *>::pointer_to, COMDAT

; 233  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 235  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAVCLight@@@std@@@std@@SAPAU?$pair@$$CBKPAVCLight@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<unsigned long const ,CLight *> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@P6AXPAVCLight@@@Z@std@@YAP6AXPAVCLight@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@1P6AX0@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 4
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@P6AXPAVCLight@@@Z@std@@YAP6AXPAVCLight@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@1P6AX0@Z@Z PROC ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >,void (__cdecl*)(CLight *)>, COMDAT

; 30   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	56		 push	 esi

; 31   : 	_DEBUG_RANGE(_First, _Last);
; 32   : 	_DEBUG_POINTER(_Func);
; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	83 c3 03	 add	 ebx, 3
  00012	c1 eb 02	 shr	 ebx, 2
  00015	57		 push	 edi
  00016	33 ff		 xor	 edi, edi
  00018	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001b	0f 47 d9	 cmova	 ebx, ecx

; 23   : 	for (; _First != _Last; ++_First)

  0001e	85 db		 test	 ebx, ebx
  00020	74 10		 je	 SHORT $LN22@for_each
$LL13@for_each:

; 24   : 		_Func(*_First);

  00022	ff 36		 push	 DWORD PTR [esi]
  00024	ff 55 10	 call	 DWORD PTR __Func$[ebp]
  00027	47		 inc	 edi
  00028	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b fb		 cmp	 edi, ebx
  00030	75 f0		 jne	 SHORT $LL13@for_each
$LN22@for_each:

; 34   : 
; 35   : 	return (_STD move(_Func));

  00032	8b 45 10	 mov	 eax, DWORD PTR __Func$[ebp]
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx

; 36   : 	}

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@P6AXPAVCLight@@@Z@std@@YAP6AXPAVCLight@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@1P6AX0@Z@Z ENDP ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >,void (__cdecl*)(CLight *)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCLight@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@ABQAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCLight@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CLight *> >::construct<CLight *,CLight * const &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCLight@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CLight *> >::construct<CLight *,CLight * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCLight@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCLight@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@AAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CLight *> >::construct<CLight *,CLight * &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCLight@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@AAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CLight *> >::construct<CLight *,CLight * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
;	COMDAT ??$addressof@QAVCLight@@@std@@YAPBQAVCLight@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVCLight@@@std@@YAPBQAVCLight@@ABQAV1@@Z PROC ; std::addressof<CLight * const>, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAVCLight@@@std@@YAPBQAVCLight@@ABQAV1@@Z ENDP ; std::addressof<CLight * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::pair<unsigned long const ,CLight *> >, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBKPAVCLight@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBKPAVCLight@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::destroy<std::pair<unsigned long const ,CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBKPAVCLight@@@std@@@std@@YAPAU?$pair@$$CBKPAVCLight@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBKPAVCLight@@@std@@@std@@YAPAU?$pair@$$CBKPAVCLight@@@0@AAU10@@Z PROC ; std::addressof<std::pair<unsigned long const ,CLight *> >, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBKPAVCLight@@@std@@@std@@YAPAU?$pair@$$CBKPAVCLight@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<unsigned long const ,CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);
; 53   : 	_Left = _Move(_Right);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  00009	53		 push	 ebx
  0000a	8a 01		 mov	 al, BYTE PTR [ecx]
  0000c	8a 1a		 mov	 bl, BYTE PTR [edx]
  0000e	88 02		 mov	 BYTE PTR [edx], al

; 54   : 	_Right = _Move(_Tmp);

  00010	88 19		 mov	 BYTE PTR [ecx], bl
  00012	5b		 pop	 ebx

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
_<_Val_1>$ = 20						; size = 4
_<_Val_2>$ = 24						; size = 4
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 1182 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1183 : 		{	// insert value_type(_Val...) at _Where
; 1184 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  00004	ff 75 18	 push	 DWORD PTR _<_Val_2>$[ebp]
  00007	8b f9		 mov	 edi, ecx
  00009	ff 75 14	 push	 DWORD PTR _<_Val_1>$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR _<_Val_0>$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Buynode<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >

; 1185 : 		return (_Insert_hint(_Where,
; 1186 : 			this->_Myval(_Newnode), _Newnode));

  00014	50		 push	 eax

; 604  : 		return ((reference)_Pnode->_Myval);

  00015	83 c0 10	 add	 eax, 16			; 00000010H

; 1185 : 		return (_Insert_hint(_Where,
; 1186 : 			this->_Myval(_Newnode), _Newnode));

  00018	8b cf		 mov	 ecx, edi
  0001a	50		 push	 eax
  0001b	ff 75 0c	 push	 DWORD PTR __Where$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_hint<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00029	5f		 pop	 edi

; 1187 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 14 00	 ret	 20			; 00000014H
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
;	COMDAT ?_Get_rest@?$tuple@ABK@std@@QAEAAV?$tuple@$$$V@2@XZ
_TEXT	SEGMENT
?_Get_rest@?$tuple@ABK@std@@QAEAAV?$tuple@$$$V@2@XZ PROC ; std::tuple<unsigned long const &>::_Get_rest, COMDAT
; _this$ = ecx

; 439  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 440  : 		}

  00002	c3		 ret	 0
?_Get_rest@?$tuple@ABK@std@@QAEAAV?$tuple@$$$V@2@XZ ENDP ; std::tuple<unsigned long const &>::_Get_rest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
;	COMDAT ??0?$tuple@ABK@std@@QAE@ABK@Z
_TEXT	SEGMENT
__This_arg$ = 8						; size = 4
??0?$tuple@ABK@std@@QAE@ABK@Z PROC			; std::tuple<unsigned long const &>::tuple<unsigned long const &>, COMDAT
; _this$ = ecx

; 215  : 		{	// construct from one or more copied elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   : 		{	// construct with argument

  00003	8b 45 08	 mov	 eax, DWORD PTR __This_arg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 216  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$tuple@ABK@std@@QAE@ABK@Z ENDP			; std::tuple<unsigned long const &>::tuple<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
;	COMDAT ??$forward_as_tuple@ABK@std@@YA?AV?$tuple@ABK@0@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_<_Args_0>$ = 12					; size = 4
??$forward_as_tuple@ABK@std@@YA?AV?$tuple@ABK@0@ABK@Z PROC ; std::forward_as_tuple<unsigned long const &>, COMDAT

; 628  : 	{	// forward arguments in a tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   : 		{	// construct with argument

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 629  : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));
; 630  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$forward_as_tuple@ABK@std@@YA?AV?$tuple@ABK@0@ABK@Z ENDP ; std::forward_as_tuple<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@K@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@K@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAK@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@K@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAK@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@KABK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@KABK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKABK@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@KABK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKABK@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]

; 119  : 		{	// copy an iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN13@Deque_iter

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN13@Deque_iter

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@Deque_iter:
  00023	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00026	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00029	8b c1		 mov	 eax, ecx
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator-, COMDAT
; _this$ = ecx

; 655  : 		{	// return this - integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi

; 119  : 		{	// copy an iterator

  00006	33 f6		 xor	 esi, esi

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00008	85 c0		 test	 eax, eax
  0000a	74 08		 je	 SHORT $LN15@operator

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  0000c	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0000e	85 c0		 test	 eax, eax
  00010	74 02		 je	 SHORT $LN15@operator

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00012	8b 30		 mov	 esi, DWORD PTR [eax]
$LN15@operator:

; 119  : 		{	// copy an iterator

  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 639  : 		this->_Myoff += _Off;

  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	2b 55 0c	 sub	 edx, DWORD PTR __Off$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 119  : 		{	// copy an iterator

  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00023	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0002a	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 125  : 		if (_Myproxy == _Right._Myproxy)

  0002d	85 f6		 test	 esi, esi
  0002f	74 0a		 je	 SHORT $LN35@operator

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  00033	85 c9		 test	 ecx, ecx
  00035	74 04		 je	 SHORT $LN35@operator

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00037	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00039	89 08		 mov	 DWORD PTR [eax], ecx
$LN35@operator:
  0003b	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 658  : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator-=, COMDAT
; _this$ = ecx

; 650  : 		{	// decrement by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  : 		this->_Myoff += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	29 41 08	 sub	 DWORD PTR [ecx+8], eax

; 651  : 		return (*this += -_Off);

  00009	8b c1		 mov	 eax, ecx

; 652  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator+=, COMDAT
; _this$ = ecx

; 638  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  : 		this->_Myoff += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	01 41 08	 add	 DWORD PTR [ecx+8], eax

; 640  : 		return (*this);

  00009	8b c1		 mov	 eax, ecx

; 641  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEAAKXZ
_TEXT	SEGMENT
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEAAKXZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	85 c0		 test	 eax, eax
  00005	75 04		 jne	 SHORT $LN7@operator
  00007	33 f6		 xor	 esi, esi
  00009	eb 02		 jmp	 SHORT $LN8@operator
$LN7@operator:
  0000b	8b 30		 mov	 esi, DWORD PTR [eax]
$LN8@operator:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00010	8b ca		 mov	 ecx, edx
  00012	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 343  : 		size_type _Off = _Myoff % _DEQUESIZ;

  00015	83 e2 03	 and	 edx, 3

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00018	48		 dec	 eax
  00019	c1 e9 02	 shr	 ecx, 2
  0001c	23 c8		 and	 ecx, eax

; 344  : 		return (_Mycont->_Map[_Block][_Off]);

  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	5e		 pop	 esi
  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00025	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 603  : 		return ((reference)**(_Mybase *)this);
; 604  : 		}

  00028	c3		 ret	 0
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEAAKXZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx

; 585  : 		{	// construct with offset _Off in *_Pdeque

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 149  : 		if (_Parent == 0)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]

; 114  : 		{	// construct orphaned iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 149  : 		if (_Parent == 0)

  00013	85 c0		 test	 eax, eax
  00015	74 04		 je	 SHORT $LN13@Deque_iter

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00017	8b 00		 mov	 eax, DWORD PTR [eax]
  00019	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@Deque_iter:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 305  : 		_Myoff = _Off;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0001e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 586  : 		}

  00021	8b c1		 mov	 eax, ecx
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]

; 119  : 		{	// copy an iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN11@Deque_cons

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN11@Deque_cons

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@Deque_cons:
  00023	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00026	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00029	8b c1		 mov	 eax, ecx
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@@Z
_TEXT	SEGMENT
__Pdeque$ = 8						; size = 4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Setcont, COMDAT
; _this$ = ecx

; 530  : 		{	// set container pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 149  : 		if (_Parent == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pdeque$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 04		 je	 SHORT $LN3@Setcont

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@Setcont:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 532  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Setcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEABKXZ
_TEXT	SEGMENT
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEABKXZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	85 c0		 test	 eax, eax
  00005	75 04		 jne	 SHORT $LN5@operator
  00007	33 f6		 xor	 esi, esi
  00009	eb 02		 jmp	 SHORT $LN6@operator
$LN5@operator:
  0000b	8b 30		 mov	 esi, DWORD PTR [eax]
$LN6@operator:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00010	8b ca		 mov	 ecx, edx
  00012	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 323  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 324  : 
; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (_Mycont == 0
; 327  : 			|| this->_Myoff < _Mycont->_Myoff
; 328  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 329  : 		{	// report error
; 330  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 331  : 		_SCL_SECURE_OUT_OF_RANGE;
; 332  : 		}
; 333  : 
; 334  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 335  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 336  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 337  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 338  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 339  : 
; 340  : 		_Analysis_assume_(_Mycont != 0);
; 341  : 
; 342  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 343  : 		size_type _Off = _Myoff % _DEQUESIZ;

  00015	83 e2 03	 and	 edx, 3

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00018	48		 dec	 eax
  00019	c1 e9 02	 shr	 ecx, 2
  0001c	23 c8		 and	 ecx, eax

; 344  : 		return (_Mycont->_Map[_Block][_Off]);

  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	5e		 pop	 esi
  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00025	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 345  : 		}

  00028	c3		 ret	 0
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEABKXZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx

; 302  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 149  : 		if (_Parent == 0)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]

; 114  : 		{	// construct orphaned iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 149  : 		if (_Parent == 0)

  00013	85 c0		 test	 eax, eax
  00015	74 04		 je	 SHORT $LN11@Deque_cons

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00017	8b 00		 mov	 eax, DWORD PTR [eax]
  00019	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@Deque_cons:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 305  : 		_Myoff = _Off;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0001e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 306  : 		}

  00021	8b c1		 mov	 eax, ecx
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@ULightComp@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@0ULightComp@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@ULightComp@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@0ULightComp@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >,LightComp>, COMDAT

; 3154 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000b	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3157 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  0000d	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00010	c1 fa 02	 sar	 edx, 2
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3157 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00013	52		 push	 edx
  00014	51		 push	 ecx
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$_Sort@PAPAVCLight@@HULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort<CLight * *,int,LightComp>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 3158 : 	}

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@ULightComp@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@0@0ULightComp@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-, COMDAT
; _this$ = ecx

; 382  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	c1 f8 02	 sar	 eax, 2

; 383  : 		return (*(_Mybase *)this - _Right);
; 384  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-, COMDAT
; _this$ = ecx

; 376  : 		{	// return this - integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		_Ptr += _Off;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	c1 e0 02	 shl	 eax, 2
  0000b	2b c8		 sub	 ecx, eax

; 377  : 		_Myiter _Tmp = *this;
; 378  : 		return (_Tmp -= _Off);

  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 379  : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-=, COMDAT
; _this$ = ecx

; 371  : 		{	// decrement by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		_Ptr += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	f7 d8		 neg	 eax
  00008	c1 e0 02	 shl	 eax, 2
  0000b	01 01		 add	 DWORD PTR [ecx], eax

; 372  : 		return (*this += -_Off);

  0000d	8b c1		 mov	 eax, ecx

; 373  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator+=, COMDAT
; _this$ = ecx

; 359  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		_Ptr += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	c1 e0 02	 shl	 eax, 2
  00009	01 01		 add	 DWORD PTR [ecx], eax

; 360  : 		*(_Mybase *)this += _Off;
; 361  : 		return (*this);

  0000b	8b c1		 mov	 eax, ecx

; 362  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEAAPAVCLight@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEAAPAVCLight@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator*, COMDAT
; _this$ = ecx

; 324  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 325  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEAAPAVCLight@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEPAPAVCLight@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEPAPAVCLight@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Unchecked, COMDAT
; _this$ = ecx

; 319  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 320  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEPAPAVCLight@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAE@PAPAVCLight@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAE@PAPAVCLight@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >, COMDAT
; _this$ = ecx

; 306  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 307  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAE@PAPAVCLight@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Compat, COMDAT
; _this$ = ecx

; 255  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-, COMDAT
; _this$ = ecx

; 192  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	c1 f8 02	 sar	 eax, 2

; 195  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator+=, COMDAT
; _this$ = ecx

; 153  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	c1 e0 02	 shl	 eax, 2
  00009	01 01		 add	 DWORD PTR [ecx], eax

; 171  : 		return (*this);

  0000b	8b c1		 mov	 eax, ecx

; 172  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEABQAVCLight@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEABQAVCLight@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QBEABQAVCLight@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAE@PAPAVCLight@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAE@PAPAVCLight@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@std@@QAE@PAPAVCLight@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ??RLightComp@@QBE_NPBVCLight@@0@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
_r$ = 12						; size = 4
??RLightComp@@QBE_NPBVCLight@@0@Z PROC			; LightComp::operator(), COMDAT
; _this$ = ecx

; 95   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00003	8b 45 0c	 mov	 eax, DWORD PTR _r$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _l$[ebp]
  00009	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0000e	33 c0		 xor	 eax, eax
  00010	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
  00014	0f 97 c0	 seta	 al

; 97   : 	}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??RLightComp@@QBE_NPBVCLight@@0@Z ENDP			; LightComp::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator--, COMDAT
; _this$ = ecx

; 424  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator--

; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 427  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator++, COMDAT
; _this$ = ecx

; 411  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 271  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++

; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 414  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAVCLight@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAVCLight@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator->, COMDAT
; _this$ = ecx

; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAVCLight@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAVCLight@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAVCLight@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator*, COMDAT
; _this$ = ecx

; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAVCLight@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >, COMDAT
; _this$ = ecx

; 384  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 385  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator!=, COMDAT
; _this$ = ecx

; 340  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 336  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 341  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 336  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 341  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 342  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator==, COMDAT
; _this$ = ecx

; 322  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 337  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator--, COMDAT
; _this$ = ecx

; 283  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator--

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 312  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator++, COMDAT
; _this$ = ecx

; 276  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 277  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 271  : 		++(*(_Mybase *)this);

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++

; 278  : 		++*this;
; 279  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 280  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator++, COMDAT
; _this$ = ecx

; 256  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 273  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAVCLight@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAVCLight@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator*, COMDAT
; _this$ = ecx

; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAVCLight@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 215  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with null node pointer

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 210  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 123  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 124  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

  00000	8b d1		 mov	 edx, ecx

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 85   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	74 08		 je	 SHORT $LN8@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	89 02		 mov	 DWORD PTR [edx], eax

; 100  : 			}
; 101  : 		return (*this);

  0000f	8b c2		 mov	 eax, edx

; 102  : 		}

  00011	c3		 ret	 0
$LN8@operator:

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00014	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00018	75 19		 jne	 SHORT $LN40@operator

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  0001a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))

  0001d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00021	75 36		 jne	 SHORT $LN21@operator
$LL22@operator:

; 610  : 			_Pnode = _Right(_Pnode);

  00023	8b c8		 mov	 ecx, eax

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))

  00028	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002c	74 f5		 je	 SHORT $LL22@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002e	89 0a		 mov	 DWORD PTR [edx], ecx

; 100  : 			}
; 101  : 		return (*this);

  00030	8b c2		 mov	 eax, edx

; 102  : 		}

  00032	c3		 ret	 0
$LN40@operator:

; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0003a	75 15		 jne	 SHORT $LN3@operator
  0003c	8d 64 24 00	 npad	 4
$LL4@operator:
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00044	75 0b		 jne	 SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 0a		 mov	 DWORD PTR [edx], ecx
  00048	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004f	74 ef		 je	 SHORT $LL4@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00057	75 02		 jne	 SHORT $LN47@operator
$LN21@operator:

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  00059	89 0a		 mov	 DWORD PTR [edx], ecx
$LN47@operator:

; 100  : 			}
; 101  : 		return (*this);

  0005b	8b c2		 mov	 eax, edx

; 102  : 		}

  0005d	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

  00000	8b d1		 mov	 edx, ecx

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	75 42		 jne	 SHORT $LN41@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00011	75 1c		 jne	 SHORT $LN34@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00013	8b 01		 mov	 eax, DWORD PTR [ecx]

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))
; 610  : 			_Pnode = _Right(_Pnode);
; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	75 0f		 jne	 SHORT $LN17@operator
  0001b	eb 03 8d 49 00	 npad	 5
$LL18@operator:

; 617  : 			_Pnode = _Left(_Pnode);

  00020	8b c8		 mov	 ecx, eax

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00022	8b 01		 mov	 eax, DWORD PTR [ecx]

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))
; 610  : 			_Pnode = _Right(_Pnode);
; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))

  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 f6		 je	 SHORT $LL18@operator
$LN17@operator:

; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

  0002a	89 0a		 mov	 DWORD PTR [edx], ecx

; 72   : 			}
; 73   : 		return (*this);

  0002c	8b c2		 mov	 eax, edx

; 74   : 		}

  0002e	c3		 ret	 0
$LN34@operator:

; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00036	75 12		 jne	 SHORT $LN1@operator
$LL2@operator:
  00038	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0003d	75 0b		 jne	 SHORT $LN1@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003f	89 02		 mov	 DWORD PTR [edx], eax
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00048	74 ee		 je	 SHORT $LL2@operator
$LN1@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  0004a	89 02		 mov	 DWORD PTR [edx], eax
$LN41@operator:

; 72   : 			}
; 73   : 		return (*this);

  0004c	8b c2		 mov	 eax, edx

; 74   : 		}

  0004e	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with null node pointer

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 40   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ PROC ; CSingleton<CStateManager>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ ENDP ; CSingleton<CStateManager>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLightManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLightManager@@UAEPAXI@Z PROC			; CLightManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLightManager@@UAE@XZ ; CLightManager::~CLightManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCLightManager@@UAEPAXI@Z ENDP			; CLightManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z PROC		; CDynamicPool<CLight>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 18   : 		{

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCLight@@@@6B@
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  0000c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000f	85 c0		 test	 eax, eax
  00011	74 1e		 je	 SHORT $LN8@scalar
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00019	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  0001c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1630 : 			this->_Mylast = pointer();

  00023	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1631 : 			this->_Myend = pointer();

  0002a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN8@scalar:

; 1623 : 		if (this->_Myfirst != pointer())

  00031	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00034	85 c0		 test	 eax, eax
  00036	74 1e		 je	 SHORT $LN21@scalar
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00041	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1630 : 			this->_Mylast = pointer();

  00048	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1631 : 			this->_Myend = pointer();

  0004f	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN21@scalar:
  00056	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005a	74 09		 je	 SHORT $LN32@scalar
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00062	83 c4 04	 add	 esp, 4
$LN32@scalar:
  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z ENDP		; CDynamicPool<CLight>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z PROC	; CDynamicPool<CLight>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z ENDP	; CDynamicPool<CLight>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
;	COMDAT ?FreeAll@?$CDynamicPool@VCLight@@@@QAEXXZ
_TEXT	SEGMENT
?FreeAll@?$CDynamicPool@VCLight@@@@QAEXXZ PROC		; CDynamicPool<CLight>::FreeAll, COMDAT
; _this$ = ecx

; 85   : 			m_kVct_pkFree=m_kVct_pkData;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??4?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CLight *,std::allocator<CLight *> >::operator=

; 86   : 		}

  0000c	c3		 ret	 0
?FreeAll@?$CDynamicPool@VCLight@@@@QAEXXZ ENDP		; CDynamicPool<CLight>::FreeAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
;	COMDAT ?Free@?$CDynamicPool@VCLight@@@@QAEXPAVCLight@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Free@?$CDynamicPool@VCLight@@@@QAEXPAVCLight@@@Z PROC	; CDynamicPool<CLight>::Free, COMDAT
; _this$ = ecx

; 76   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 77   : #ifdef DYNAMIC_POOL_STRICT
; 78   : 			assert(__IsValidData(pkData));
; 79   : 			assert(!__IsFreeData(pkData));
; 80   : #endif
; 81   : 			m_kVct_pkFree.push_back(pkData);

  00003	8d 45 08	 lea	 eax, DWORD PTR _pkData$[ebp]
  00006	83 c1 10	 add	 ecx, 16			; 00000010H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXABQAVCLight@@@Z ; std::vector<CLight *,std::allocator<CLight *> >::push_back

; 82   : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?Free@?$CDynamicPool@VCLight@@@@QAEXPAVCLight@@@Z ENDP	; CDynamicPool<CLight>::Free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
;	COMDAT ?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ PROC	; CDynamicPool<CLight>::Alloc, COMDAT
; _this$ = ecx

; 62   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1158 : 		return (this->_Myfirst == this->_Mylast);

  00026	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00029	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  0002c	75 52		 jne	 SHORT $LN1@Alloc

; 64   : 			{
; 65   : 				T* pkNewData=new T;

  0002e	68 f4 00 00 00	 push	 244			; 000000f4H
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00038	83 c4 04	 add	 esp, 4
  0003b	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	85 c0		 test	 eax, eax
  00047	74 09		 je	 SHORT $LN4@Alloc
  00049	8b c8		 mov	 ecx, eax
  0004b	e8 00 00 00 00	 call	 ??0CLight@@QAE@XZ	; CLight::CLight
  00050	eb 02		 jmp	 SHORT $LN5@Alloc
$LN4@Alloc:
  00052	33 c0		 xor	 eax, eax
$LN5@Alloc:
  00054	89 45 f0	 mov	 DWORD PTR _pkNewData$3[ebp], eax

; 66   : 				m_kVct_pkData.push_back(pkNewData);

  00057	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0005a	8d 45 f0	 lea	 eax, DWORD PTR _pkNewData$3[ebp]
  0005d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXABQAVCLight@@@Z ; std::vector<CLight *,std::allocator<CLight *> >::push_back

; 67   : 				++m_uUsedCapacity;

  0006a	ff 46 20	 inc	 DWORD PTR [esi+32]

; 68   : 				return pkNewData;

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _pkNewData$3[ebp]

; 74   : 		}

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5e		 pop	 esi
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN1@Alloc:

; 69   : 			}
; 70   : 
; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  00080	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00083	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1282 : 		--this->_Mylast;

  00086	83 46 14 fc	 add	 DWORD PTR [esi+20], -4	; fffffffcH
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 74   : 		}

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5e		 pop	 esi
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ ENDP	; CDynamicPool<CLight>::Alloc
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
;	COMDAT ?Destroy@?$CDynamicPool@VCLight@@@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Destroy@?$CDynamicPool@VCLight@@@@QAEXXZ PROC		; CDynamicPool<CLight>::Destroy, COMDAT
; _this$ = ecx

; 38   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00008	33 d2		 xor	 edx, edx
  0000a	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1025 : 		return (iterator(this->_Myfirst, this));

  0000b	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000e	2b de		 sub	 ebx, esi
  00010	83 c3 03	 add	 ebx, 3
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 38   : 		{

  00013	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00016	c1 eb 02	 shr	 ebx, 2
  00019	57		 push	 edi
  0001a	33 ff		 xor	 edi, edi
  0001c	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  0001f	0f 47 da	 cmova	 ebx, edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  00022	85 db		 test	 ebx, ebx
  00024	74 15		 je	 SHORT $LN29@Destroy
$LL31@Destroy:

; 24   : 		_Func(*_First);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z ; CDynamicPool<CLight>::Delete
  0002d	47		 inc	 edi
  0002e	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  00031	83 c4 04	 add	 esp, 4
  00034	3b fb		 cmp	 edi, ebx
  00036	75 ee		 jne	 SHORT $LL31@Destroy
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN29@Destroy:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  0003b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003e	5f		 pop	 edi
  0003f	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00042	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00045	5e		 pop	 esi
  00046	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00049	5b		 pop	 ebx
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 53   : 		}

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?Destroy@?$CDynamicPool@VCLight@@@@QAEXXZ ENDP		; CDynamicPool<CLight>::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
;	COMDAT ??1?$CDynamicPool@VCLight@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCLight@@@@UAE@XZ PROC		; CDynamicPool<CLight>::~CDynamicPool<CLight>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCLight@@@@6B@
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 1e		 je	 SHORT $LN7@CDynamicPo
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00019	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1630 : 			this->_Mylast = pointer();

  00020	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1631 : 			this->_Myend = pointer();

  00027	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN7@CDynamicPo:

; 1623 : 		if (this->_Myfirst != pointer())

  0002e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00031	85 c0		 test	 eax, eax
  00033	74 1e		 je	 SHORT $LN20@CDynamicPo
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  0003e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1630 : 			this->_Mylast = pointer();

  00045	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1631 : 			this->_Myend = pointer();

  0004c	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN20@CDynamicPo:
  00053	5e		 pop	 esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 26   : 		}

  00054	c3		 ret	 0
??1?$CDynamicPool@VCLight@@@@UAE@XZ ENDP		; CDynamicPool<CLight>::~CDynamicPool<CLight>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
;	COMDAT ??0?$CDynamicPool@VCLight@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CDynamicPool@VCLight@@@@QAE@XZ PROC		; CDynamicPool<CLight>::CDynamicPool<CLight>, COMDAT
; _this$ = ecx

; 11   : 		CDynamicPool()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CDynamicPool@VCLight@@@@6B@

; 16   : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 482  : 		_Myfirst = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 483  : 		_Mylast = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 484  : 		_Myend = pointer();

  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 482  : 		_Myfirst = pointer();

  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 483  : 		_Mylast = pointer();

  00024	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 484  : 		_Myend = pointer();

  0002b	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 14   : 			m_uInitCapacity=0;

  00032	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 15   : 			m_uUsedCapacity=0;

  00039	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 16   : 		}

  00040	c3		 ret	 0
??0?$CDynamicPool@VCLight@@@@QAE@XZ ENDP		; CDynamicPool<CLight>::CDynamicPool<CLight>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?ReleaseLightID@CLightManager@@IAEXK@Z
_TEXT	SEGMENT
_LightID$ = 8						; size = 4
?ReleaseLightID@CLightManager@@IAEXK@Z PROC		; CLightManager::ReleaseLightID, COMDAT
; _this$ = ecx

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 160  : 	m_NonUsingLightIDDeque.push_back(LightID);

  00003	8d 45 08	 lea	 eax, DWORD PTR _LightID$[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?push_back@?$deque@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::push_back

; 161  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?ReleaseLightID@CLightManager@@IAEXK@Z ENDP		; CLightManager::ReleaseLightID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?NewLightID@CLightManager@@IAEKXZ
_TEXT	SEGMENT
$T1 = -24						; size = 12
$T2 = -12						; size = 12
?NewLightID@CLightManager@@IAEKXZ PROC			; CLightManager::NewLightID, COMDAT
; _this$ = ecx

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1362 : 		return (this->_Mysize == 0);

  00006	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 148  : 	if (!m_NonUsingLightIDDeque.empty())

  0000a	74 51		 je	 SHORT $LN1@NewLightID
  0000c	56		 push	 esi
  0000d	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1416 : 		return (*(end() - 1));

  0000e	6a 01		 push	 1
  00010	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  00013	50		 push	 eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 150  : 		TLightID id = m_NonUsingLightIDDeque.back();

  00014	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1416 : 		return (*(end() - 1));

  00017	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0001a	8b ce		 mov	 ecx, esi
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?end@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ ; std::deque<unsigned long,std::allocator<unsigned long> >::end
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator-
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00029	8b 38		 mov	 edi, DWORD PTR [eax]
  0002b	85 ff		 test	 edi, edi
  0002d	74 02		 je	 SHORT $LN15@NewLightID
$LN14@NewLightID:
  0002f	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN15@NewLightID:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00031	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00034	8b ca		 mov	 ecx, edx
  00036	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 343  : 		size_type _Off = _Myoff % _DEQUESIZ;

  00039	83 e2 03	 and	 edx, 3

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003c	48		 dec	 eax
  0003d	c1 e9 02	 shr	 ecx, 2
  00040	23 c8		 and	 ecx, eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 150  : 		TLightID id = m_NonUsingLightIDDeque.back();

  00042	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00045	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00048	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1491 : 		if (--this->_Mysize == 0)

  0004b	ff 4e 10	 dec	 DWORD PTR [esi+16]
  0004e	75 07		 jne	 SHORT $LN18@NewLightID

; 1492 : 			this->_Myoff = 0;

  00050	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN18@NewLightID:
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 156  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN1@NewLightID:

; 151  : 		m_NonUsingLightIDDeque.pop_back();
; 152  : 		return (id);
; 153  : 	}
; 154  : 
; 155  : 	return m_dwSkipIndex + m_LightMap.size();

  0005d	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  00060	03 41 24	 add	 eax, DWORD PTR [ecx+36]

; 156  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?NewLightID@CLightManager@@IAEKXZ ENDP			; CLightManager::NewLightID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEXPAPAVCLight@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEXPAPAVCLight@@0@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1781 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEXPAPAVCLight@@0@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEXXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Xlen, COMDAT
; _this$ = ecx

; 1754 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEXXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Tidy, COMDAT
; _this$ = ecx

; 1622 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN1@Tidy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Tidy:
  00026	5e		 pop	 esi

; 1632 : 			}
; 1633 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Reserve, COMDAT
; _this$ = ecx

; 1612 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000c	2b c6		 sub	 eax, esi
  0000e	57		 push	 edi

; 1613 : 		if (_Unused_capacity() < _Count)

  0000f	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00012	c1 f8 02	 sar	 eax, 2

; 1613 : 		if (_Unused_capacity() < _Count)

  00015	3b c7		 cmp	 eax, edi
  00017	73 49		 jae	 SHORT $LN2@Reserve

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00019	2b 31		 sub	 esi, DWORD PTR [ecx]
  0001b	53		 push	 ebx

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  0001c	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00021	c1 fe 02	 sar	 esi, 2

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00024	8b c3		 mov	 eax, ebx
  00026	2b c6		 sub	 eax, esi
  00028	3b c7		 cmp	 eax, edi
  0002a	72 3c		 jb	 SHORT $LN43@Reserve

; 1010 : 		return (this->_Myend - this->_Myfirst);

  0002c	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0002e	03 f7		 add	 esi, edi

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00030	c1 fa 02	 sar	 edx, 2

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00033	8b c2		 mov	 eax, edx
  00035	d1 e8		 shr	 eax, 1
  00037	2b d8		 sub	 ebx, eax
  00039	3b da		 cmp	 ebx, edx
  0003b	5b		 pop	 ebx
  0003c	73 12		 jae	 SHORT $LN27@Reserve
  0003e	33 d2		 xor	 edx, edx

; 1576 : 		if (_Capacity < _Count)

  00040	3b d6		 cmp	 edx, esi
  00042	5f		 pop	 edi
  00043	0f 42 d6	 cmovb	 edx, esi
  00046	5e		 pop	 esi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00047	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1618 : 			}
; 1619 : 		}

  0004a	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0004b	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Reallocate
$LN27@Reserve:

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00050	03 d0		 add	 edx, eax

; 1576 : 		if (_Capacity < _Count)

  00052	3b d6		 cmp	 edx, esi
  00054	5f		 pop	 edi
  00055	0f 42 d6	 cmovb	 edx, esi
  00058	5e		 pop	 esi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00059	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1618 : 			}
; 1619 : 		}

  0005c	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0005d	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Reallocate
$LN2@Reserve:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 1618 : 			}
; 1619 : 		}

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
$LN43@Reserve:

; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())
; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);
; 1629 : 			this->_Myfirst = pointer();
; 1630 : 			this->_Mylast = pointer();
; 1631 : 			this->_Myend = pointer();
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 	template<class _Iter>
; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());
; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));
; 1641 : 		}
; 1642 : 
; 1643 : 	template<class _Iter>
; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1645 : 		{	// move initializing [_First, _Last), using allocator
; 1646 : 		_Alty _Alval(this->_Getal());
; 1647 : 		return (_Uninitialized_move(_First, _Last,
; 1648 : 			_Ptr, _Alval));
; 1649 : 		}
; 1650 : 
; 1651 : 	iterator _Insert_n(const_iterator _Where,
; 1652 : 		size_type _Count, const value_type& _Val)
; 1653 : 		{	// insert _Count * _Val at _Where
; 1654 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1655 : 		if (_VICONT(_Where) != this
; 1656 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1657 : 			|| this->_Mylast < _VIPTR(_Where))
; 1658 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1659 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1660 : 
; 1661 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1662 : 		if (_Count == 0)
; 1663 : 			;
; 1664 : 		else if (_Unused_capacity() < _Count)
; 1665 : 			{	// not enough room, reallocate
; 1666 : 			if (max_size() - size() < _Count)
; 1667 : 				_Xlen();	// result too long
; 1668 : 
; 1669 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1670 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1671 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1672 : 			int _Ncopied = 0;
; 1673 : 
; 1674 : 			_TRY_BEGIN
; 1675 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1676 : 				_STD addressof(_Val));	// add new stuff
; 1677 : 			++_Ncopied;
; 1678 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1679 : 				_Newvec);	// copy prefix
; 1680 : 			++_Ncopied;
; 1681 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1682 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1683 : 			_CATCH_ALL
; 1684 : 			if (1 < _Ncopied)
; 1685 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1686 : 			if (0 < _Ncopied)
; 1687 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1688 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1689 : 			_RERAISE;
; 1690 : 			_CATCH_END
; 1691 : 
; 1692 : 			_Count += size();
; 1693 : 			if (this->_Myfirst != pointer())
; 1694 : 				{	// destroy and deallocate old array
; 1695 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1696 : 				this->_Getal().deallocate(this->_Myfirst,
; 1697 : 					this->_Myend - this->_Myfirst);
; 1698 : 				}
; 1699 : 
; 1700 : 			this->_Orphan_all();
; 1701 : 			this->_Myend = _Newvec + _Capacity;
; 1702 : 			this->_Mylast = _Newvec + _Count;
; 1703 : 			this->_Myfirst = _Newvec;
; 1704 : 			}
; 1705 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1706 : 			< _Count)
; 1707 : 			{	// new stuff spills off end
; 1708 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1709 : 
; 1710 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1711 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1712 : 
; 1713 : 			_TRY_BEGIN
; 1714 : 			_Ufill(this->_Mylast,
; 1715 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1716 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1717 : 			_CATCH_ALL
; 1718 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1719 : 				this->_Mylast + _Count);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			this->_Mylast += _Count;
; 1724 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1725 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1726 : 				_Tmp);	// insert up to old end
; 1727 : 			}
; 1728 : 		else
; 1729 : 			{	// new stuff can all be assigned
; 1730 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1731 : 
; 1732 : 			pointer _Oldend = this->_Mylast;
; 1733 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1734 : 				this->_Mylast);	// copy suffix
; 1735 : 
; 1736 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1737 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1738 : 				_Oldend);	// copy hole
; 1739 : 			_STD fill(_VIPTR(_Where),
; 1740 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1741 : 			}
; 1742 : 		return (begin() + _Off);
; 1743 : 		}
; 1744 : 
; 1745 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1746 : 		{	// copy initializing _Count * _Val, using allocator
; 1747 : 		_Alty _Alval(this->_Getal());
; 1748 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1749 : 		return (_Ptr + _Count);
; 1750 : 		}
; 1751 : 
; 1752 : 	__declspec(noreturn) void _Xlen() const
; 1753 : 		{	// report a length_error
; 1754 : 		_Xlength_error("vector<T> too long");

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0006d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN45@Reserve:
$LN42@Reserve:
  00072	cc		 int	 3
?_Reserve@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$1$ = 8						; size = 4
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1587 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi

; 23   : 	void *_Ptr = 0;

  00008	33 f6		 xor	 esi, esi
  0000a	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1587 : 		{	// move to array of exactly _Count elements

  0000b	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  0000d	85 db		 test	 ebx, ebx
  0000f	74 1e		 je	 SHORT $LN16@Reallocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00011	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00017	77 5d		 ja	 SHORT $LN61@Reallocate
  00019	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	8b f0		 mov	 esi, eax
  00028	83 c4 04	 add	 esp, 4
  0002b	85 f6		 test	 esi, esi
  0002d	74 47		 je	 SHORT $LN61@Reallocate
$LN16@Reallocate:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0002f	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00031	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00034	2b c1		 sub	 eax, ecx

; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00036	83 e0 fc	 and	 eax, -4			; fffffffcH
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00041	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00046	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00049	2b c1		 sub	 eax, ecx
  0004b	c1 f8 02	 sar	 eax, 2
  0004e	89 45 08	 mov	 DWORD PTR __Size$1$[ebp], eax

; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())

  00051	85 c9		 test	 ecx, ecx
  00053	74 09		 je	 SHORT $LN56@Reallocate
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005b	83 c4 04	 add	 esp, 4
$LN56@Reallocate:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1606 : 		this->_Myend = _Ptr + _Count;

  0005e	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;

  00061	89 37		 mov	 DWORD PTR [edi], esi
  00063	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00066	8b 45 08	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00069	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  0006c	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 1609 : 		}

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
$LN61@Reallocate:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00076	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN63@Reallocate:
$LN60@Reallocate:
  0007b	cc		 int	 3
?_Reallocate@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBE_NPBQAVCLight@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBE_NPBQAVCLight@@@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Inside, COMDAT
; _this$ = ecx

; 1582 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1584 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1584 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBE_NPBQAVCLight@@@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEII@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1571 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00006	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1010 : 		return (this->_Myend - this->_Myfirst);

  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000d	c1 fa 02	 sar	 edx, 2

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00010	8b ca		 mov	 ecx, edx
  00012	d1 e9		 shr	 ecx, 1
  00014	2b c1		 sub	 eax, ecx
  00016	3b c2		 cmp	 eax, edx
  00018	73 0f		 jae	 SHORT $LN4@Grow_to
  0001a	33 d2		 xor	 edx, edx

; 1576 : 		if (_Capacity < _Count)

  0001c	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  0001f	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00023	8b c2		 mov	 eax, edx

; 1579 : 		}

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN4@Grow_to:

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00029	03 d1		 add	 edx, ecx

; 1576 : 		if (_Capacity < _Count)

  0002b	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  0002e	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00032	8b c2		 mov	 eax, edx

; 1579 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IBEII@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXPAPAVCLight@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXPAPAVCLight@@0@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Destroy, COMDAT
; _this$ = ecx

; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXPAPAVCLight@@0@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Buy, COMDAT
; _this$ = ecx

; 1546 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00016	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN4@Buy

; 1552 : 			return (false);

  00021	32 c0		 xor	 al, al
  00023	5e		 pop	 esi

; 1562 : 		}

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN4@Buy:

; 1553 : 		else if (max_size() < _Capacity)

  00028	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0002d	77 27		 ja	 SHORT $LN35@Buy
  0002f	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00030	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	85 c0		 test	 eax, eax
  00042	74 1c		 je	 SHORT $LN26@Buy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1558 : 			this->_Mylast = this->_Myfirst;

  00044	89 06		 mov	 DWORD PTR [esi], eax
  00046	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;

  00049	03 c7		 add	 eax, edi
  0004b	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1560 : 			}
; 1561 : 		return (true);

  0004e	b0 01		 mov	 al, 1
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi

; 1562 : 		}

  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
$LN35@Buy:

; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())
; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);
; 1629 : 			this->_Myfirst = pointer();
; 1630 : 			this->_Mylast = pointer();
; 1631 : 			this->_Myend = pointer();
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 	template<class _Iter>
; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());
; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));
; 1641 : 		}
; 1642 : 
; 1643 : 	template<class _Iter>
; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1645 : 		{	// move initializing [_First, _Last), using allocator
; 1646 : 		_Alty _Alval(this->_Getal());
; 1647 : 		return (_Uninitialized_move(_First, _Last,
; 1648 : 			_Ptr, _Alval));
; 1649 : 		}
; 1650 : 
; 1651 : 	iterator _Insert_n(const_iterator _Where,
; 1652 : 		size_type _Count, const value_type& _Val)
; 1653 : 		{	// insert _Count * _Val at _Where
; 1654 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1655 : 		if (_VICONT(_Where) != this
; 1656 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1657 : 			|| this->_Mylast < _VIPTR(_Where))
; 1658 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1659 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1660 : 
; 1661 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1662 : 		if (_Count == 0)
; 1663 : 			;
; 1664 : 		else if (_Unused_capacity() < _Count)
; 1665 : 			{	// not enough room, reallocate
; 1666 : 			if (max_size() - size() < _Count)
; 1667 : 				_Xlen();	// result too long
; 1668 : 
; 1669 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1670 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1671 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1672 : 			int _Ncopied = 0;
; 1673 : 
; 1674 : 			_TRY_BEGIN
; 1675 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1676 : 				_STD addressof(_Val));	// add new stuff
; 1677 : 			++_Ncopied;
; 1678 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1679 : 				_Newvec);	// copy prefix
; 1680 : 			++_Ncopied;
; 1681 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1682 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1683 : 			_CATCH_ALL
; 1684 : 			if (1 < _Ncopied)
; 1685 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1686 : 			if (0 < _Ncopied)
; 1687 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1688 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1689 : 			_RERAISE;
; 1690 : 			_CATCH_END
; 1691 : 
; 1692 : 			_Count += size();
; 1693 : 			if (this->_Myfirst != pointer())
; 1694 : 				{	// destroy and deallocate old array
; 1695 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1696 : 				this->_Getal().deallocate(this->_Myfirst,
; 1697 : 					this->_Myend - this->_Myfirst);
; 1698 : 				}
; 1699 : 
; 1700 : 			this->_Orphan_all();
; 1701 : 			this->_Myend = _Newvec + _Capacity;
; 1702 : 			this->_Mylast = _Newvec + _Count;
; 1703 : 			this->_Myfirst = _Newvec;
; 1704 : 			}
; 1705 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1706 : 			< _Count)
; 1707 : 			{	// new stuff spills off end
; 1708 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1709 : 
; 1710 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1711 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1712 : 
; 1713 : 			_TRY_BEGIN
; 1714 : 			_Ufill(this->_Mylast,
; 1715 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1716 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1717 : 			_CATCH_ALL
; 1718 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1719 : 				this->_Mylast + _Count);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			this->_Mylast += _Count;
; 1724 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1725 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1726 : 				_Tmp);	// insert up to old end
; 1727 : 			}
; 1728 : 		else
; 1729 : 			{	// new stuff can all be assigned
; 1730 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1731 : 
; 1732 : 			pointer _Oldend = this->_Mylast;
; 1733 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1734 : 				this->_Mylast);	// copy suffix
; 1735 : 
; 1736 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1737 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1738 : 				_Oldend);	// copy hole
; 1739 : 			_STD fill(_VIPTR(_Where),
; 1740 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1741 : 			}
; 1742 : 		return (begin() + _Off);
; 1743 : 		}
; 1744 : 
; 1745 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1746 : 		{	// copy initializing _Count * _Val, using allocator
; 1747 : 		_Alty _Alval(this->_Getal());
; 1748 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1749 : 		return (_Ptr + _Count);
; 1750 : 		}
; 1751 : 
; 1752 : 	__declspec(noreturn) void _Xlen() const
; 1753 : 		{	// report a length_error
; 1754 : 		_Xlength_error("vector<T> too long");

  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0005b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN37@Buy:
$LN26@Buy:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00060	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN38@Buy:
$LN34@Buy:
  00065	cc		 int	 3
?_Buy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Buy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?clear@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::clear, COMDAT
; _this$ = ecx

; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1511 : 		}

  00005	c3		 ret	 0
?clear@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?pop_back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::pop_back, COMDAT
; _this$ = ecx

; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;

  00000	83 41 04 fc	 add	 DWORD PTR [ecx+4], -4	; fffffffcH

; 1283 : 		}

  00004	c3		 ret	 0
?pop_back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXABQAVCLight@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXABQAVCLight@@@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::push_back, COMDAT
; _this$ = ecx

; 1243 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 31		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 2b		 ja	 SHORT $LN4@push_back

; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 1247 : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 1248 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Reserve
$LN3@push_back:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 2a		 je	 SHORT $LN49@push_back
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00036	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1261 : 			++this->_Mylast;

  00038	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 1262 : 			}
; 1263 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN4@push_back:

; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)

  00042	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00045	75 09		 jne	 SHORT $LN1@push_back

; 1257 : 				_Reserve(1);

  00047	6a 01		 push	 1
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Reserve
$LN1@push_back:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	85 c9		 test	 ecx, ecx
  00055	74 04		 je	 SHORT $LN49@push_back
  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	89 01		 mov	 DWORD PTR [ecx], eax
$LN49@push_back:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1261 : 			++this->_Mylast;

  0005b	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 1262 : 			}
; 1263 : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?push_back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXABQAVCLight@@@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAPAVCLight@@XZ
_TEXT	SEGMENT
?back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAPAVCLight@@XZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::back, COMDAT
; _this$ = ecx

; 170  : 		_Ptr += _Off;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e8 04	 sub	 eax, 4

; 1234 : 		return (*(end() - 1));
; 1235 : 		}

  00006	c3		 ret	 0
?back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAPAVCLight@@XZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??A?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAPAVCLight@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAPAVCLight@@I@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::operator[], COMDAT
; _this$ = ecx

; 1197 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00008	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1210 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAPAVCLight@@I@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?empty@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBE_NXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::empty, COMDAT
; _this$ = ecx

; 1158 : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1159 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBE_NXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::max_size, COMDAT
; _this$ = ecx

; 1153 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1154 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::size, COMDAT
; _this$ = ecx

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1149 : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?end@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@2@XZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::end, COMDAT
; _this$ = ecx

; 1034 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@2@XZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@2@XZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::begin, COMDAT
; _this$ = ecx

; 1024 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@@2@XZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1015 : 		return (this->_Myend - this->_Mylast);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 1016 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::capacity, COMDAT
; _this$ = ecx

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1011 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??4?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv651 = -4						; size = 4
__Right$ = 8						; size = 4
??4?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::operator=, COMDAT
; _this$ = ecx

; 949  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 950  : 		if (this != &_Right)

  00006	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	3b de		 cmp	 ebx, esi
  0000d	0f 84 f3 00 00
	00		 je	 $LN124@operator

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);

  00013	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00016	57		 push	 edi
  00017	8b 3e		 mov	 edi, DWORD PTR [esi]
  00019	3b f8		 cmp	 edi, eax

; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())

  0001b	75 10		 jne	 SHORT $LN9@operator

; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;

  0001d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001f	5f		 pop	 edi

; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  00020	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);

  00023	8b c3		 mov	 eax, ebx
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx

; 996  : 		}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN9@operator:

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0002d	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00030	8b d0		 mov	 edx, eax
  00032	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00034	2b d7		 sub	 edx, edi
  00036	2b f1		 sub	 esi, ecx
  00038	c1 fa 02	 sar	 edx, 2
  0003b	c1 fe 02	 sar	 esi, 2
  0003e	89 75 fc	 mov	 DWORD PTR tv651[ebp], esi

; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())

  00041	3b d6		 cmp	 edx, esi
  00043	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00046	77 2b		 ja	 SHORT $LN7@operator
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2054 : 	ptrdiff_t _Count = _Last - _First;

  00048	2b c7		 sub	 eax, edi

; 2056 : 		_Count * sizeof (*_First));

  0004a	83 e0 fc	 and	 eax, -4			; fffffffcH
  0004d	50		 push	 eax
  0004e	57		 push	 edi
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2056 : 		_Count * sizeof (*_First));

  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0005b	2b 0e		 sub	 ecx, DWORD PTR [esi]

; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();

  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0005f	c1 f9 02	 sar	 ecx, 2
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();

  00064	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  00067	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);

  0006a	8b c3		 mov	 eax, ebx
  0006c	5b		 pop	 ebx

; 996  : 		}

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN7@operator:

; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);

  00073	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00076	2b c1		 sub	 eax, ecx
  00078	c1 f8 02	 sar	 eax, 2

; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())

  0007b	3b d0		 cmp	 edx, eax
  0007d	77 43		 ja	 SHORT $LN5@operator

; 972  : 				pointer _Ptr = _Right._Myfirst + size();

  0007f	8b 45 fc	 mov	 eax, DWORD PTR tv651[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2054 : 	ptrdiff_t _Count = _Last - _First;

  00082	8b 16		 mov	 edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 972  : 				pointer _Ptr = _Right._Myfirst + size();

  00084	8d 3c 87	 lea	 edi, DWORD PTR [edi+eax*4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2054 : 	ptrdiff_t _Count = _Last - _First;

  00087	8b c7		 mov	 eax, edi
  00089	2b c2		 sub	 eax, edx

; 2056 : 		_Count * sizeof (*_First));

  0008b	83 e0 fc	 and	 eax, -4			; fffffffcH
  0008e	50		 push	 eax
  0008f	52		 push	 edx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00096	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00099	2b c7		 sub	 eax, edi
  0009b	c1 f8 02	 sar	 eax, 2

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0009e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  000a5	56		 push	 esi
  000a6	57		 push	 edi
  000a7	ff 73 04	 push	 DWORD PTR [ebx+4]
  000aa	e8 00 00 00 00	 call	 _memmove
  000af	83 c4 18	 add	 esp, 24			; 00000018H
  000b2	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  000b4	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);

  000b7	8b c3		 mov	 eax, ebx
  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx

; 996  : 		}

  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 04 00	 ret	 4
$LN5@operator:

; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())

  000c2	85 c9		 test	 ecx, ecx
  000c4	74 09		 je	 SHORT $LN101@operator
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000c6	51		 push	 ecx
  000c7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000cc	83 c4 04	 add	 esp, 4
$LN101@operator:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  000cf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))

  000d2	8b cb		 mov	 ecx, ebx

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  000d4	2b 06		 sub	 eax, DWORD PTR [esi]
  000d6	c1 f8 02	 sar	 eax, 2

; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))

  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 ?_Buy@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAE_NI@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Buy
  000df	84 c0		 test	 al, al
  000e1	74 22		 je	 SHORT $LN123@operator

; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);

  000e3	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  000e5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e8	2b c1		 sub	 eax, ecx
  000ea	c1 f8 02	 sar	 eax, 2

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000ed	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  000f4	56		 push	 esi
  000f5	51		 push	 ecx
  000f6	ff 33		 push	 DWORD PTR [ebx]
  000f8	e8 00 00 00 00	 call	 _memmove
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00100	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  00102	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN123@operator:
  00105	5f		 pop	 edi
$LN124@operator:
  00106	5e		 pop	 esi

; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);

  00107	8b c3		 mov	 eax, ebx
  00109	5b		 pop	 ebx

; 996  : 		}

  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 04 00	 ret	 4
??4?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??1?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::~vector<CLight *,std::allocator<CLight *> >, COMDAT
; _this$ = ecx

; 944  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);
; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN3@vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@vector:
  00026	5e		 pop	 esi

; 945  : 		_Tidy();
; 946  : 		}

  00027	c3		 ret	 0
??1?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::~vector<CLight *,std::allocator<CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::vector<CLight *,std::allocator<CLight *> >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 681  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 681  : 		}

  00016	c3		 ret	 0
??0?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::vector<CLight *,std::allocator<CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >::_Getal, COMDAT
; _this$ = ecx

; 641  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 643  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ?_Change_alloc@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Change_alloc@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@2@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >::_Change_alloc, COMDAT
; _this$ = ecx

; 594  : 		}

  00000	c2 04 00	 ret	 4
?_Change_alloc@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@2@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >::_Change_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCLight@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCLight@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCLight@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >::_Vector_alloc<0,std::_Vec_base_types<CLight *,std::allocator<CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CLight *> >::_Vector_val<std::_Simple_types<CLight *> >, COMDAT
; _this$ = ecx

; 481  : 		{	// initialize values
; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 483  : 		_Mylast = pointer();
; 484  : 		_Myend = pointer();
; 485  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAVCLight@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CLight *> >::_Vector_val<std::_Simple_types<CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CLight *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CLight *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CLight *> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEXPAPAVCLight@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CLight *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEPAPAVCLight@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEPAPAVCLight@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CLight *> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAEPAPAVCLight@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CLight *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CLight *> >::_Wrap_alloc<std::allocator<CLight *> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@PAVCLight@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CLight *> >::_Wrap_alloc<std::allocator<CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAIABV?$allocator@PAVCLight@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAIABV?$allocator@PAVCLight@@@2@@Z PROC ; std::allocator_traits<std::allocator<CLight *> >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@PAVCLight@@@std@@@std@@SAIABV?$allocator@PAVCLight@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CLight *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVCLight@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVCLight@@@std@@QBEIXZ PROC	; std::allocator<CLight *>::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVCLight@@@std@@QBEIXZ ENDP	; std::allocator<CLight *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@ABQAV3@@Z PROC ; std::allocator<CLight *>::construct, COMDAT
; _this$ = ecx

; 592  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 594  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@ABQAV3@@Z ENDP ; std::allocator<CLight *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCLight@@@std@@QAEPAPAVCLight@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCLight@@@std@@QAEPAPAVCLight@@I@Z PROC ; std::allocator<CLight *>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@PAVCLight@@@std@@QAEPAPAVCLight@@I@Z ENDP ; std::allocator<CLight *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@I@Z PROC ; std::allocator<CLight *>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCLight@@@std@@QAEXPAPAVCLight@@I@Z ENDP ; std::allocator<CLight *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCLight@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVCLight@@@std@@QAE@ABV01@@Z PROC	; std::allocator<CLight *>::allocator<CLight *>, COMDAT
; _this$ = ecx

; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@PAVCLight@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<CLight *>::allocator<CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCLight@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVCLight@@@std@@QAE@XZ PROC		; std::allocator<CLight *>::allocator<CLight *>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAVCLight@@@std@@QAE@XZ ENDP		; std::allocator<CLight *>::allocator<CLight *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??1?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >::~map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2230 : 		erase(begin(), end());

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >::~map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map
;	COMDAT ??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
$T2 = 8							; size = 4
__Keyval$ = 8						; size = 4
$T3 = 11						; size = 1
??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z PROC ; std::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >::operator[], COMDAT
; _this$ = ecx

; 225  : 		{	// find element matching _Keyval or insert with default mapped

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2109 : 		while (!this->_Isnil(_Pnode))

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  0000c	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 1187 : 		}
; 1188 : 
; 1189 : 
; 1190 : 	~_Tree() _NOEXCEPT
; 1191 : 		{	// destroy tree
; 1192 : 		_Tidy();
; 1193 : 		}
; 1194 : 
; 1195 : 	_Myt& operator=(const _Myt& _Right)
; 1196 : 		{	// replace contents from _Right
; 1197 : 		if (this != &_Right)
; 1198 : 			{	// different, assign it
; 1199 : 			clear();
; 1200 : 			if (this->_Getal() != _Right._Getal()
; 1201 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1202 : 				this->_Change_alloc(_Right._Getal());
; 1203 : 
; 1204 : 			this->_Setcomp(_Right._Getcomp());
; 1205 : 			_Copy(_Right, false_type());
; 1206 : 			}
; 1207 : 		return (*this);
; 1208 : 		}
; 1209 : 
; 1210 : 	iterator begin() _NOEXCEPT
; 1211 : 		{	// return iterator for beginning of mutable sequence
; 1212 : 		return (iterator(_Lmost(), this));
; 1213 : 		}
; 1214 : 
; 1215 : 	const_iterator begin() const _NOEXCEPT
; 1216 : 		{	// return iterator for beginning of nonmutable sequence
; 1217 : 		return (const_iterator(_Lmost(), this));
; 1218 : 		}
; 1219 : 
; 1220 : 	iterator end() _NOEXCEPT
; 1221 : 		{	// return iterator for end of mutable sequence
; 1222 : 		return (iterator(this->_Myhead, this));
; 1223 : 		}
; 1224 : 
; 1225 : 	const_iterator end() const _NOEXCEPT
; 1226 : 		{	// return iterator for end of nonmutable sequence
; 1227 : 		return (const_iterator(this->_Myhead, this));
; 1228 : 		}
; 1229 : 
; 1230 : 	reverse_iterator rbegin() _NOEXCEPT
; 1231 : 		{	// return iterator for beginning of reversed mutable sequence
; 1232 : 		return (reverse_iterator(end()));
; 1233 : 		}
; 1234 : 
; 1235 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1236 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1237 : 		return (const_reverse_iterator(end()));
; 1238 : 		}
; 1239 : 
; 1240 : 	reverse_iterator rend() _NOEXCEPT
; 1241 : 		{	// return iterator for end of reversed mutable sequence
; 1242 : 		return (reverse_iterator(begin()));
; 1243 : 		}
; 1244 : 
; 1245 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1246 : 		{	// return iterator for end of reversed nonmutable sequence
; 1247 : 		return (const_reverse_iterator(begin()));
; 1248 : 		}
; 1249 : 
; 1250 : 	const_iterator cbegin() const _NOEXCEPT
; 1251 : 		{	// return iterator for beginning of nonmutable sequence
; 1252 : 		return (((const _Myt *)this)->begin());
; 1253 : 		}
; 1254 : 
; 1255 : 	const_iterator cend() const _NOEXCEPT
; 1256 : 		{	// return iterator for end of nonmutable sequence
; 1257 : 		return (((const _Myt *)this)->end());
; 1258 : 		}
; 1259 : 
; 1260 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1261 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1262 : 		return (((const _Myt *)this)->rbegin());
; 1263 : 		}
; 1264 : 
; 1265 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1266 : 		{	// return iterator for end of reversed nonmutable sequence
; 1267 : 		return (((const _Myt *)this)->rend());
; 1268 : 		}
; 1269 : 
; 1270 : 	size_type size() const _NOEXCEPT
; 1271 : 		{	// return length of sequence
; 1272 : 		return (this->_Mysize);
; 1273 : 		}
; 1274 : 
; 1275 : 	size_type max_size() const _NOEXCEPT
; 1276 : 		{	// return maximum possible length of sequence
; 1277 : 		return (this->_Getal().max_size());
; 1278 : 		}
; 1279 : 
; 1280 : 	bool empty() const _NOEXCEPT
; 1281 : 		{	// return true only if sequence is empty
; 1282 : 		return (size() == 0);
; 1283 : 		}
; 1284 : 
; 1285 : 	allocator_type get_allocator() const _NOEXCEPT
; 1286 : 		{	// return allocator object for values
; 1287 : 		return (this->_Getal());
; 1288 : 		}
; 1289 : 
; 1290 : 	key_compare key_comp() const
; 1291 : 		{	// return object for comparing keys
; 1292 : 		return (this->_Getcomp());
; 1293 : 		}
; 1294 : 
; 1295 : 	value_compare value_comp() const
; 1296 : 		{	// return object for comparing values
; 1297 : 		return (value_compare(key_comp()));
; 1298 : 		}
; 1299 : 
; 1300 : 	_Pairib insert(const value_type& _Val)
; 1301 : 		{	// try to insert node with value _Val, favoring right side
; 1302 : 		return (_Insert_nohint(false,
; 1303 : 			_Val, _Nil_obj));
; 1304 : 		}
; 1305 : 
; 1306 : 	iterator insert(const_iterator _Where,
; 1307 : 		const value_type& _Val)
; 1308 : 		{	// try to insert node with value _Val using _Where as a hint
; 1309 : 		return (_Insert_hint(_Where,
; 1310 : 			_Val, _Nil_obj));
; 1311 : 		}
; 1312 : 
; 1313 : 	template<class _Iter>
; 1314 : 		void insert(_Iter _First, _Iter _Last)
; 1315 : 		{	// insert [_First, _Last) one at a time
; 1316 : 		_DEBUG_RANGE(_First, _Last);
; 1317 : 		for (; _First != _Last; ++_First)
; 1318 : 
; 1319 : 			emplace_hint(end(), *_First);
; 1320 : 		}
; 1321 : 
; 1322 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1323 : 		{	// insert initializer_list
; 1324 : 		insert(_Ilist.begin(), _Ilist.end());
; 1325 : 		}
; 1326 : 
; 1327 : 	iterator erase(const_iterator _Where)
; 1328 : 		{	// erase element at _Where
; 1329 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1330 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1331 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1332 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1333 : 		++_Where;	// save successor iterator for return
; 1334 : 		_Orphan_ptr(*this, _Erasednode);
; 1335 : 
; 1336 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1337 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1338 : 		++_Where;	// save successor iterator for return
; 1339 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1340 : 
; 1341 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1342 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1343 : 		_Nodeptr _Pnode = _Erasednode;
; 1344 : 
; 1345 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1346 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1347 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1348 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1349 : 		else
; 1350 : 			{	// two subtrees, must lift successor node to replace erased
; 1351 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1352 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1353 : 			}
; 1354 : 
; 1355 : 		if (_Pnode == _Erasednode)
; 1356 : 			{	// at most one subtree, relink it
; 1357 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1358 : 			if (!this->_Isnil(_Fixnode))
; 1359 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1360 : 
; 1361 : 			if (_Root() == _Erasednode)
; 1362 : 				_Root() = _Fixnode;	// link down from root
; 1363 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1364 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1365 : 			else
; 1366 : 				this->_Right(_Fixnodeparent) =
; 1367 : 					_Fixnode;	// link down to right
; 1368 : 
; 1369 : 			if (_Lmost() == _Erasednode)
; 1370 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1371 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1372 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1373 : 
; 1374 : 			if (_Rmost() == _Erasednode)
; 1375 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1376 : 					? _Fixnodeparent	// largest is parent of erased node
; 1377 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1378 : 			}
; 1379 : 		else
; 1380 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1381 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1382 : 				_Pnode;	// link left up
; 1383 : 			this->_Left(_Pnode) =
; 1384 : 				this->_Left(_Erasednode);	// link successor down
; 1385 : 
; 1386 : 			if (_Pnode == this->_Right(_Erasednode))
; 1387 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1388 : 			else
; 1389 : 				{	// successor further down, link in place of erased
; 1390 : 				_Fixnodeparent =
; 1391 : 					this->_Parent(_Pnode);	// parent is successor's
; 1392 : 				if (!this->_Isnil(_Fixnode))
; 1393 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1394 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1395 : 				this->_Right(_Pnode) =
; 1396 : 					this->_Right(_Erasednode);	// link next down
; 1397 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1398 : 					_Pnode;	// right up
; 1399 : 				}
; 1400 : 
; 1401 : 			if (_Root() == _Erasednode)
; 1402 : 				_Root() = _Pnode;	// link down from root
; 1403 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1404 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1405 : 					_Pnode;	// link down to left
; 1406 : 			else
; 1407 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1408 : 					_Pnode;	// link down to right
; 1409 : 
; 1410 : 			this->_Parent(_Pnode) =
; 1411 : 				this->_Parent(_Erasednode);	// link successor up
; 1412 : 			_STD swap(this->_Color(_Pnode),
; 1413 : 				this->_Color(_Erasednode));	// recolor it
; 1414 : 			}
; 1415 : 
; 1416 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1417 : 			{	// erasing black link, must recolor/rebalance tree
; 1418 : 			for (; _Fixnode != _Root()
; 1419 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1420 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1421 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1422 : 					{	// fixup left subtree
; 1423 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1424 : 					if (this->_Color(_Pnode) == this->_Red)
; 1425 : 						{	// rotate red up from right subtree
; 1426 : 						this->_Color(_Pnode) = this->_Black;
; 1427 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1428 : 						_Lrotate(_Fixnodeparent);
; 1429 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1430 : 						}
; 1431 : 
; 1432 : 					if (this->_Isnil(_Pnode))
; 1433 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1434 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1435 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1436 : 						{	// redden right subtree with black children
; 1437 : 						this->_Color(_Pnode) = this->_Red;
; 1438 : 						_Fixnode = _Fixnodeparent;
; 1439 : 						}
; 1440 : 					else
; 1441 : 						{	// must rearrange right subtree
; 1442 : 						if (this->_Color(this->_Right(_Pnode))
; 1443 : 							== this->_Black)
; 1444 : 							{	// rotate red up from left sub-subtree
; 1445 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1446 : 							this->_Color(_Pnode) = this->_Red;
; 1447 : 							_Rrotate(_Pnode);
; 1448 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1449 : 							}
; 1450 : 
; 1451 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1452 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1453 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1454 : 						_Lrotate(_Fixnodeparent);
; 1455 : 						break;	// tree now recolored/rebalanced
; 1456 : 						}
; 1457 : 					}
; 1458 : 				else
; 1459 : 					{	// fixup right subtree
; 1460 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1461 : 					if (this->_Color(_Pnode) == this->_Red)
; 1462 : 						{	// rotate red up from left subtree
; 1463 : 						this->_Color(_Pnode) = this->_Black;
; 1464 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1465 : 						_Rrotate(_Fixnodeparent);
; 1466 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1467 : 						}
; 1468 : 
; 1469 : 					if (this->_Isnil(_Pnode))
; 1470 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1471 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1472 : 						this->_Black
; 1473 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1474 : 						{	// redden left subtree with black children
; 1475 : 						this->_Color(_Pnode) = this->_Red;
; 1476 : 						_Fixnode = _Fixnodeparent;
; 1477 : 						}
; 1478 : 					else
; 1479 : 						{	// must rearrange left subtree
; 1480 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1481 : 							{	// rotate red up from right sub-subtree
; 1482 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1483 : 							this->_Color(_Pnode) = this->_Red;
; 1484 : 							_Lrotate(_Pnode);
; 1485 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1486 : 							}
; 1487 : 
; 1488 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1489 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1490 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1491 : 						_Rrotate(_Fixnodeparent);
; 1492 : 						break;	// tree now recolored/rebalanced
; 1493 : 						}
; 1494 : 					}
; 1495 : 
; 1496 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1497 : 			}
; 1498 : 
; 1499 : 		this->_Getal().destroy(
; 1500 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1501 : 
; 1502 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1503 : 
; 1504 : 		if (0 < this->_Mysize)
; 1505 : 			--this->_Mysize;
; 1506 : 
; 1507 : 		return (iterator(_Where._Ptr, this));	// return successor iterator
; 1508 : 		}
; 1509 : 
; 1510 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1511 : 		{	// erase [_First, _Last)
; 1512 : 		if (_First == begin() && _Last == end())
; 1513 : 			{	// erase all
; 1514 : 			clear();
; 1515 : 			return (begin());
; 1516 : 			}
; 1517 : 		else
; 1518 : 			{	// partial erase, one at a time
; 1519 : 			while (_First != _Last)
; 1520 : 				erase(_First++);
; 1521 : 			return (iterator(_First._Ptr, this));
; 1522 : 			}
; 1523 : 		}
; 1524 : 
; 1525 : 	size_type erase(const key_type& _Keyval)
; 1526 : 		{	// erase and count all that match _Keyval
; 1527 : 		_Pairii _Where = equal_range(_Keyval);
; 1528 : 		size_type _Num = 0;
; 1529 : 		_Distance(_Where.first, _Where.second, _Num);
; 1530 : 		erase(_Where.first, _Where.second);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	void clear() _NOEXCEPT
; 1535 : 		{	// erase all
; 1536 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1537 : 		this->_Orphan_ptr(*this, 0);
; 1538 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 
; 1540 : 		_Erase(_Root());
; 1541 : 		_Root() = this->_Myhead;
; 1542 : 		_Lmost() = this->_Myhead;
; 1543 : 		_Rmost() = this->_Myhead;
; 1544 : 		this->_Mysize = 0;
; 1545 : 		}
; 1546 : 
; 1547 : 	iterator find(const key_type& _Keyval)
; 1548 : 		{	// find an element in mutable sequence that matches _Keyval
; 1549 : 		iterator _Where = lower_bound(_Keyval);
; 1550 : 		return (_Where == end()
; 1551 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1552 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1553 : 					? end() : _Where);
; 1554 : 		}
; 1555 : 
; 1556 : 	const_iterator find(const key_type& _Keyval) const
; 1557 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1558 : 		const_iterator _Where = lower_bound(_Keyval);
; 1559 : 		return (_Where == end()
; 1560 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1561 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1562 : 					? end() : _Where);
; 1563 : 		}
; 1564 : 
; 1565 : 	size_type count(const key_type& _Keyval) const
; 1566 : 		{	// count all elements that match _Keyval
; 1567 : 		_Paircc _Ans = equal_range(_Keyval);
; 1568 : 		size_type _Num = 0;
; 1569 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1570 : 		return (_Num);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator lower_bound(const key_type& _Keyval)
; 1574 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1575 : 		return (iterator(_Lbound(_Keyval), this));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1579 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1580 : 		return (const_iterator(_Lbound(_Keyval), this));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator upper_bound(const key_type& _Keyval)
; 1584 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1585 : 		return (iterator(_Ubound(_Keyval), this));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1589 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1590 : 		return (const_iterator(_Ubound(_Keyval), this));
; 1591 : 		}
; 1592 : 
; 1593 : 	_Pairii equal_range(const key_type& _Keyval)
; 1594 : 		{	// find range equivalent to _Keyval in mutable tree
; 1595 : 		return (_Eqrange(_Keyval));
; 1596 : 		}
; 1597 : 
; 1598 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1599 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1600 : 		return (_Eqrange(_Keyval));
; 1601 : 		}
; 1602 : 
; 1603 : 	void swap(_Myt& _Right)
; 1604 : 		{	// exchange contents with _Right
; 1605 : 		if (this == &_Right)
; 1606 : 			;	// same object, do nothing
; 1607 : 		else if (this->_Getal() == _Right._Getal())
; 1608 : 			{	// same allocator, swap control information
; 1609 : 			this->_Swap_all(_Right);
; 1610 : 			this->_Swapcomp(_Right._Getcomp());
; 1611 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1612 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1613 : 			}
; 1614 : 
; 1615 : 		else if (_Alty::propagate_on_container_swap::value)
; 1616 : 			{	// swap allocators and control information
; 1617 : 			this->_Swap_alloc(_Right);
; 1618 : 			this->_Swapcomp(_Right._Getcomp());
; 1619 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1620 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1621 : 			}
; 1622 : 
; 1623 : 		else
; 1624 : 			{	// containers are incompatible
; 1625 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1626 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1627 : 
; 1628 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1629 : 			_XSTD terminate();
; 1630 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1631 : 			}
; 1632 : 		}
; 1633 : 
; 1634 : protected:
; 1635 : 	template<class _Valty>
; 1636 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1637 : 		{	// node exists, just return it
; 1638 : 		return (_Node);
; 1639 : 		}
; 1640 : 
; 1641 : 	template<class _Valty>
; 1642 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1643 : 		{	// node doesn't exist, make it
; 1644 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1645 : 		}
; 1646 : 
; 1647 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1648 : 		{	// node exists, destroy it
; 1649 : 		this->_Getal().destroy(
; 1650 : 			_STD addressof(this->_Myval(_Newnode)));
; 1651 : 
; 1652 : 		this->_Getal().deallocate(_Newnode, 1);
; 1653 : 		}
; 1654 : 
; 1655 : 	void _Destroy_if_not_nil(_Nil)
; 1656 : 		{	// node doesn't exist, do nothing
; 1657 : 		}
; 1658 : 
; 1659 : 	template<class _Valty,
; 1660 : 		class _Nodety>
; 1661 : 		iterator _Insert_hint(const_iterator _Where,
; 1662 : 			_Valty&& _Val, _Nodety _Newnode)
; 1663 : 		{	// try to insert node using _Where as a hint
; 1664 : 		const_iterator _Next;
; 1665 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1666 : 
; 1667 : 		_TRY_BEGIN
; 1668 : 
; 1669 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1670 : 		if (_Where._Getcont() != this)
; 1671 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1672 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1673 : 
; 1674 : 		if (size() == 0)
; 1675 : 			return (_Insert_at(true, this->_Myhead,
; 1676 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1677 : 		else if (this->_Multi)
; 1678 : 			{	// insert even if duplicate
; 1679 : 			if (_Where == begin())
; 1680 : 				{	// insert at beginning if before first element
; 1681 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1682 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1683 : 					return (_Insert_at(true, _Where._Mynode(),
; 1684 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1685 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1686 : 				}
; 1687 : 			else if (_Where == end())
; 1688 : 				{	// insert at end if after last element
; 1689 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1690 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1691 : 					return (_Insert_at(false, _Rmost(),
; 1692 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1693 : 				}
; 1694 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1695 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1696 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1697 : 					this->_Kfn(_Val),
; 1698 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1699 : 				{	// insert before _Where
; 1700 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1701 : 					return (_Insert_at(false, _Next._Mynode(),
; 1702 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1703 : 				else
; 1704 : 					return (_Insert_at(true, _Where._Mynode(),
; 1705 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1706 : 				}
; 1707 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1708 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1709 : 				&& (++(_Next = _Where) == end()
; 1710 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1711 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1712 : 				{	// insert after _Where
; 1713 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1714 : 					return (_Insert_at(false, _Where._Mynode(),
; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 				else
; 1717 : 					return (_Insert_at(true, _Next._Mynode(),
; 1718 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1719 : 				}
; 1720 : 			else
; 1721 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1722 : 			}
; 1723 : 		else
; 1724 : 			{	// insert only if unique
; 1725 : 			if (_Where == begin())
; 1726 : 				{	// insert at beginning if before first element
; 1727 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1729 : 					return (_Insert_at(true, _Where._Mynode(),
; 1730 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1731 : 				}
; 1732 : 			else if (_Where == end())
; 1733 : 				{	// insert at end if after last element
; 1734 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1735 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1736 : 					return (_Insert_at(false, _Rmost(),
; 1737 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1738 : 				}
; 1739 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1740 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1741 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1742 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1743 : 					this->_Kfn(_Val)))
; 1744 : 				{	// insert before _Where
; 1745 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1746 : 					return (_Insert_at(false, _Next._Mynode(),
; 1747 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1748 : 				else
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1753 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1754 : 				&& (++(_Next = _Where) == end()
; 1755 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1756 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1757 : 				{	// insert after _Where
; 1758 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1759 : 					return (_Insert_at(false, _Where._Mynode(),
; 1760 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1761 : 				else
; 1762 : 					return (_Insert_at(true, _Next._Mynode(),
; 1763 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1764 : 				}
; 1765 : 			}
; 1766 : 		_CATCH_ALL
; 1767 : 		_Destroy_if_not_nil(_Newnode);
; 1768 : 		_RERAISE;
; 1769 : 		_CATCH_END
; 1770 : 
; 1771 : 		return (_Insert_nohint(_Leftish,
; 1772 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1773 : 		}
; 1774 : 
; 1775 : 	template<class _Valty,
; 1776 : 		class _Nodety>
; 1777 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1778 : 			_Valty&& _Val, _Nodety _Newnode)
; 1779 : 		{	// try to insert node, on left if _Leftish
; 1780 : 		_TRY_BEGIN
; 1781 : 		_Nodeptr _Trynode = _Root();
; 1782 : 		_Nodeptr _Wherenode = this->_Myhead;
; 1783 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1784 : 
; 1785 : 		while (!this->_Isnil(_Trynode))
; 1786 : 			{	// look for leaf to insert before (_Addleft) or after
; 1787 : 			_Wherenode = _Trynode;
; 1788 : 			if (_Leftish)
; 1789 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1790 : 					this->_Key(_Trynode),
; 1791 : 					this->_Kfn(_Val));	// favor left end
; 1792 : 			else
; 1793 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1794 : 					this->_Kfn(_Val),
; 1795 : 					this->_Key(_Trynode));	// favor right end
; 1796 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1797 : 				: this->_Right(_Trynode);
; 1798 : 			}
; 1799 : 
; 1800 : 		if (this->_Multi)
; 1801 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1802 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1803 : 		else
; 1804 : 			{	// insert only if unique
; 1805 : 			iterator _Where = iterator(_Wherenode, this);
; 1806 : 			if (!_Addleft)
; 1807 : 				;	// need to test if insert after is okay
; 1808 : 			else if (_Where == begin())
; 1809 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1810 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1811 : 			else
; 1812 : 				--_Where;	// need to test if insert before is okay
; 1813 : 
; 1814 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1815 : 				this->_Key(_Where._Mynode()),
; 1816 : 				this->_Kfn(_Val)))
; 1817 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1818 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1819 : 			else
; 1820 : 				{	// duplicate, don't insert
; 1821 : 				_Destroy_if_not_nil(_Newnode);
; 1822 : 				return (_Pairib(_Where, false));
; 1823 : 				}
; 1824 : 			}
; 1825 : 		_CATCH_ALL
; 1826 : 		_Destroy_if_not_nil(_Newnode);
; 1827 : 		_RERAISE;
; 1828 : 		_CATCH_END
; 1829 : 		}
; 1830 : 
; 1831 : 	template<class _Valty,
; 1832 : 		class _Nodety>
; 1833 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1834 : 		_Valty&& _Val, _Nodety _Node)
; 1835 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1836 : 		if (max_size() - 1 <= this->_Mysize)
; 1837 : 			{	// tree would get too big, fail
; 1838 : 			_Destroy_if_not_nil(_Node);
; 1839 : 			_Xlength_error("map/set<T> too long");
; 1840 : 			}
; 1841 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1842 : 			_STD forward<_Valty>(_Val));
; 1843 : 
; 1844 : 		++this->_Mysize;
; 1845 : 		_Newnode->_Parent = _Wherenode;
; 1846 : 
; 1847 : 		if (_Wherenode == this->_Myhead)
; 1848 : 			{	// first node in tree, just set head values
; 1849 : 			_Root() = _Newnode;
; 1850 : 			_Lmost() = _Newnode;
; 1851 : 			_Rmost() = _Newnode;
; 1852 : 			}
; 1853 : 		else if (_Addleft)
; 1854 : 			{	// add to left of _Wherenode
; 1855 : 			this->_Left(_Wherenode) = _Newnode;
; 1856 : 			if (_Wherenode == _Lmost())
; 1857 : 				_Lmost() = _Newnode;
; 1858 : 			}
; 1859 : 		else
; 1860 : 			{	// add to right of _Wherenode
; 1861 : 			this->_Right(_Wherenode) = _Newnode;
; 1862 : 			if (_Wherenode == _Rmost())
; 1863 : 				_Rmost() = _Newnode;
; 1864 : 			}
; 1865 : 
; 1866 : 		for (_Nodeptr _Pnode = _Newnode;
; 1867 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1868 : 			if (this->_Parent(_Pnode)
; 1869 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1870 : 				{	// fixup red-red in left subtree
; 1871 : 				_Wherenode =
; 1872 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1873 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1874 : 					{	// parent has two red children, blacken both
; 1875 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1876 : 					this->_Color(_Wherenode) = this->_Black;
; 1877 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1878 : 						= this->_Red;
; 1879 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1880 : 					}
; 1881 : 				else
; 1882 : 					{	// parent has red and black children
; 1883 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1884 : 						{	// rotate right child to left
; 1885 : 						_Pnode = this->_Parent(_Pnode);
; 1886 : 						_Lrotate(_Pnode);
; 1887 : 						}
; 1888 : 					this->_Color(this->_Parent(_Pnode)) =
; 1889 : 						this->_Black;	// propagate red up
; 1890 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1891 : 						this->_Red;
; 1892 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 					}
; 1894 : 				}
; 1895 : 			else
; 1896 : 				{	// fixup red-red in right subtree
; 1897 : 				_Wherenode =
; 1898 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1899 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1900 : 					{	// parent has two red children, blacken both
; 1901 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1902 : 					this->_Color(_Wherenode) = this->_Black;
; 1903 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1904 : 						this->_Red;
; 1905 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1906 : 					}
; 1907 : 				else
; 1908 : 					{	// parent has red and black children
; 1909 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1910 : 						{	// rotate left child to right
; 1911 : 						_Pnode = this->_Parent(_Pnode);
; 1912 : 						_Rrotate(_Pnode);
; 1913 : 						}
; 1914 : 					this->_Color(this->_Parent(_Pnode)) =
; 1915 : 						this->_Black;	// propagate red up
; 1916 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1917 : 						this->_Red;
; 1918 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 					}
; 1920 : 				}
; 1921 : 
; 1922 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1923 : 		return (iterator(_Newnode, this));
; 1924 : 		}
; 1925 : 
; 1926 : 	template<class _Moveit>
; 1927 : 		void _Copy(const _Myt& _Right,
; 1928 : 			_Moveit _Movefl)
; 1929 : 		{	// copy or move entire tree from _Right
; 1930 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead, _Movefl);
; 1931 : 		this->_Mysize = _Right.size();
; 1932 : 		if (!this->_Isnil(_Root()))
; 1933 : 			{	// nonempty tree, look for new smallest and largest
; 1934 : 			_Lmost() = this->_Min(_Root());
; 1935 : 			_Rmost() = this->_Max(_Root());
; 1936 : 			}
; 1937 : 		else
; 1938 : 			{	// empty tree, just tidy head pointers
; 1939 : 			_Lmost() = this->_Myhead;
; 1940 : 			_Rmost() = this->_Myhead;
; 1941 : 			}
; 1942 : 		}
; 1943 : 
; 1944 : 	template<class _Want_to_move,
; 1945 : 		class _Can_move,
; 1946 : 		class _Is_set,
; 1947 : 		class _Dummy>
; 1948 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, _Want_to_move,
; 1949 : 			_Can_move, _Is_set, _Dummy)
; 1950 : 		{	// copy to new node -- nonmovable
; 1951 : 		return (this->_Buynode(this->_Myval(_Rootnode)));
; 1952 : 		}
; 1953 : 
; 1954 : 	template<class _Dummy>
; 1955 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1956 : 			true_type, true_type, _Dummy)
; 1957 : 		{	// move to new node -- movable, set
; 1958 : 		return (this->_Buynode(
; 1959 : 			_STD forward<value_type>(this->_Myval(_Rootnode))));
; 1960 : 		}
; 1961 : 
; 1962 : 	template<class _Dummy>
; 1963 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1964 : 			true_type, false_type, _Dummy)
; 1965 : 		{	// move to new node -- movable, map
; 1966 : 		return (this->_Buynode(
; 1967 : 			_STD forward<key_type>(const_cast<key_type&>(
; 1968 : 				this->_Myval(_Rootnode).first)),
; 1969 : 			_STD forward<typename value_type::second_type>(this->_Myval(
; 1970 : 				_Rootnode).second)));
; 1971 : 		}
; 1972 : 
; 1973 : 	template<class _Moveit>
; 1974 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1975 : 			_Moveit _Movefl)
; 1976 : 		{	// copy entire subtree, recursively
; 1977 : 		_Nodeptr _Newroot = this->_Myhead;	// point at nil node
; 1978 : 
; 1979 : 		if (!this->_Isnil(_Rootnode))
; 1980 : 			{	// copy or move a node, then any subtrees
; 1981 : 			_Nodeptr _Pnode = _Copy_or_move(_Rootnode, _Movefl,
; 1982 : 				typename is_move_constructible<value_type>::type(),
; 1983 : 				typename is_same<key_type, value_type>::type(), 0);
; 1984 : 			_Pnode->_Parent = _Wherenode;
; 1985 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1986 : 			if (this->_Isnil(_Newroot))
; 1987 : 				_Newroot = _Pnode;	// memorize new root
; 1988 : 
; 1989 : 			_TRY_BEGIN
; 1990 : 			this->_Left(_Pnode) =
; 1991 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 1992 : 			this->_Right(_Pnode) =
; 1993 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 1994 : 			_CATCH_ALL
; 1995 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 1996 : 			_RERAISE;
; 1997 : 			_CATCH_END
; 1998 : 			}
; 1999 : 
; 2000 : 		return (_Newroot);	// return newly constructed tree
; 2001 : 		}
; 2002 : 
; 2003 : 	_Paircc _Eqrange(const key_type& _Keyval) const
; 2004 : 		{	// find leftmost node not less than _Keyval
; 2005 : 		_Nodeptr _Pnode = _Root();
; 2006 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2007 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2008 : 
; 2009 : 		while (!this->_Isnil(_Pnode))
; 2010 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2011 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2012 : 			else
; 2013 : 				{	// _Pnode not less than _Keyval, remember it
; 2014 : 				if (this->_Isnil(_Hinode)
; 2015 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2016 : 						this->_Key(_Pnode)))
; 2017 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2018 : 				_Lonode = _Pnode;
; 2019 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2020 : 				}
; 2021 : 
; 2022 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2023 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2024 : 		while (!this->_Isnil(_Pnode))
; 2025 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2026 : 				{	// _Pnode greater than _Keyval, remember it
; 2027 : 				_Hinode = _Pnode;
; 2028 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2029 : 				}
; 2030 : 			else
; 2031 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2032 : 
; 2033 : 		const_iterator _First = const_iterator(_Lonode, this);
; 2034 : 		const_iterator _Last = const_iterator(_Hinode, this);
; 2035 : 		return (_Paircc(_First, _Last));
; 2036 : 		}
; 2037 : 
; 2038 : 	_Pairii _Eqrange(const key_type& _Keyval)
; 2039 : 		{	// find leftmost node not less than _Keyval
; 2040 : 		_Nodeptr _Pnode = _Root();
; 2041 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2042 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2043 : 
; 2044 : 		while (!this->_Isnil(_Pnode))
; 2045 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2046 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2047 : 			else
; 2048 : 				{	// _Pnode not less than _Keyval, remember it
; 2049 : 				if (this->_Isnil(_Hinode)
; 2050 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2051 : 						 this->_Key(_Pnode)))
; 2052 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2053 : 				_Lonode = _Pnode;
; 2054 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2055 : 				}
; 2056 : 
; 2057 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2058 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2059 : 		while (!this->_Isnil(_Pnode))
; 2060 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2061 : 				{	// _Pnode greater than _Keyval, remember it
; 2062 : 				_Hinode = _Pnode;
; 2063 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2064 : 				}
; 2065 : 			else
; 2066 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2067 : 
; 2068 : 		iterator _First = iterator(_Lonode, this);
; 2069 : 		iterator _Last = iterator(_Hinode, this);
; 2070 : 		return (_Pairii(_First, _Last));
; 2071 : 		}
; 2072 : 
; 2073 : 	void _Erase(_Nodeptr _Rootnode)
; 2074 : 		{	// free entire subtree, recursively
; 2075 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2076 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2077 : 			{	// free subtrees, then node
; 2078 : 			_Erase(this->_Right(_Pnode));
; 2079 : 			_Pnode = this->_Left(_Pnode);
; 2080 : 			this->_Getal().destroy(
; 2081 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2082 : 
; 2083 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2084 : 			}
; 2085 : 		}
; 2086 : 
; 2087 : 	_Nodeptr _Lbound(const key_type& _Keyval) const
; 2088 : 		{	// find leftmost node not less than _Keyval
; 2089 : 		_Nodeptr _Pnode = _Root();
; 2090 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2091 : 
; 2092 : 		while (!this->_Isnil(_Pnode))
; 2093 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2094 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2095 : 			else
; 2096 : 				{	// _Pnode not less than _Keyval, remember it
; 2097 : 				_Wherenode = _Pnode;
; 2098 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2099 : 				}
; 2100 : 
; 2101 : 		return (_Wherenode);	// return best remembered candidate
; 2102 : 		}
; 2103 : 
; 2104 : 	_Nodeptr _Lbound(const key_type& _Keyval)
; 2105 : 		{	// find leftmost node not less than _Keyval
; 2106 : 		_Nodeptr _Pnode = _Root();
; 2107 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails

  0000e	8b f7		 mov	 esi, edi
  00010	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 2109 : 		while (!this->_Isnil(_Pnode))

  00013	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00017	75 1b		 jne	 SHORT $LN9@operator
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	eb 03 8d 49 00	 npad	 5
$LL10@operator:
  00020	39 50 10	 cmp	 DWORD PTR [eax+16], edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2110 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))

  00023	73 05		 jae	 SHORT $LN8@operator

; 2111 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2112 : 			else

  00028	eb 04		 jmp	 SHORT $LN7@operator
$LN8@operator:

; 2113 : 				{	// _Pnode not less than _Keyval, remember it
; 2114 : 				_Wherenode = _Pnode;

  0002a	8b f0		 mov	 esi, eax

; 2115 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@operator:

; 2109 : 		while (!this->_Isnil(_Pnode))

  0002e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00032	74 ec		 je	 SHORT $LL10@operator
$LN9@operator:

; 336  : 		return (this->_Ptr == _Right._Ptr);

  00034	3b f7		 cmp	 esi, edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map

; 228  : 			|| this->_Getcomp()(_Keyval, this->_Key(_Where._Mynode())))

  00036	74 13		 je	 SHORT $LN1@operator
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map

; 228  : 			|| this->_Getcomp()(_Keyval, this->_Key(_Where._Mynode())))

  0003d	72 0c		 jb	 SHORT $LN1@operator

; 234  : 
; 235  : 
; 236  : 		return (_Where->second);

  0003f	5f		 pop	 edi
  00040	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 237  : 		}

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN1@operator:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1184 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  0004b	8d 45 0b	 lea	 eax, DWORD PTR $T3[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple

; 80   : 		{	// construct with argument

  0004e	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1184 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  00051	50		 push	 eax
  00052	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  00055	8b cb		 mov	 ecx, ebx
  00057	50		 push	 eax
  00058	68 00 00 00 00	 push	 OFFSET _piecewise_construct
  0005d	e8 00 00 00 00	 call	 ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$$V@2@@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$$V@1@@Z ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Buynode<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >

; 1185 : 		return (_Insert_hint(_Where,
; 1186 : 			this->_Myval(_Newnode), _Newnode));

  00062	50		 push	 eax

; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);

  00063	83 c0 10	 add	 eax, 16			; 00000010H

; 1185 : 		return (_Insert_hint(_Where,
; 1186 : 			this->_Myval(_Newnode), _Newnode));

  00066	8b cb		 mov	 ecx, ebx
  00068	50		 push	 eax
  00069	56		 push	 esi
  0006a	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@$$CBKPAVCLight@@@std@@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKPAVCLight@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Insert_hint<std::pair<unsigned long const ,CLight *> &,std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> *>
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map

; 233  : 				tuple<>());

  00073	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi

; 234  : 
; 235  : 
; 236  : 		return (_Where->second);

  00078	83 c0 14	 add	 eax, 20			; 00000014H
  0007b	5b		 pop	 ebx

; 237  : 		}

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z ENDP ; std::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map
;	COMDAT ??0?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >, COMDAT
; _this$ = ecx

; 95   : 		{	// construct empty map from defaults

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 569  : 		this->_Myhead = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 570  : 		this->_Mysize = 0;

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))
; 610  : 			_Pnode = _Right(_Pnode);
; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))
; 617  : 			_Pnode = _Left(_Pnode);
; 618  : 		return (_Pnode);
; 619  : 		}
; 620  : 
; 621  : 	_Nodeptr _Myhead;	// pointer to head node
; 622  : 	size_type _Mysize;	// number of elements
; 623  : 	};
; 624  : 
; 625  : 		// TEMPLATE CLASS _Tree_alloc
; 626  : template<bool _Al_has_storage,
; 627  : 	class _Alloc_types>
; 628  : 	class _Tree_alloc
; 629  : 		: public _Tree_val<typename _Alloc_types::_Val_types>
; 630  : 	{	// base class for tree to hold allocator with storage
; 631  : public:
; 632  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 633  : 
; 634  : 	typedef _Tree_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 635  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 636  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 637  : 	typedef typename _Alloc_types::_Node _Node;
; 638  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 639  : 
; 640  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 641  : 	_Tree_alloc(const _Alloc& _Al = _Alloc())
; 642  : 		: _Alnod(_Al)
; 643  : 		{	// construct head node, allocator from _Al
; 644  : 		this->_Myhead = _Buyheadnode();
; 645  : 		}
; 646  : 
; 647  : 	~_Tree_alloc() _NOEXCEPT
; 648  : 		{	// destroy head node
; 649  : 		_Freeheadnode(this->_Myhead);
; 650  : 		}
; 651  : 
; 652  : 	void _Change_alloc(const _Alty& _Al)
; 653  : 		{	// replace old allocator
; 654  : 		this->_Alnod = _Al;
; 655  : 		}
; 656  : 
; 657  : 	void _Swap_alloc(_Myt& _Right)
; 658  : 		{	// swap allocators
; 659  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 660  : 		}
; 661  : 
; 662  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 663  : 	_Tree_alloc(const _Alloc& _Al = _Alloc())
; 664  : 		: _Alnod(_Al)
; 665  : 		{	// construct allocators from _Al
; 666  : 		this->_Myhead = _Buyheadnode();
; 667  : 		_TRY_BEGIN
; 668  : 		_Alloc_proxy();
; 669  : 		_CATCH_ALL
; 670  : 		_Freeheadnode(this->_Myhead);
; 671  : 		_RERAISE;
; 672  : 		_CATCH_END
; 673  : 		}
; 674  : 
; 675  : 	~_Tree_alloc() _NOEXCEPT
; 676  : 		{	// destroy proxy
; 677  : 		_Freeheadnode(this->_Myhead);
; 678  : 		_Free_proxy();
; 679  : 		}
; 680  : 
; 681  : 	void _Change_alloc(const _Alty& _Al)
; 682  : 		{	// replace old allocator
; 683  : 		_Free_proxy();
; 684  : 		this->_Alnod = _Al;
; 685  : 		_Alloc_proxy();
; 686  : 		}
; 687  : 
; 688  : 	void _Swap_alloc(_Myt& _Right)
; 689  : 		{	// swap allocators
; 690  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 691  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 692  : 		}
; 693  : 
; 694  : 	void _Alloc_proxy()
; 695  : 		{	// construct proxy from _Alnod
; 696  : 		typename _Alty::template rebind<_Container_proxy>::other
; 697  : 			_Alproxy(this->_Alnod);
; 698  : 		this->_Myproxy = _Alproxy.allocate(1);
; 699  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 700  : 		this->_Myproxy->_Mycont = this;
; 701  : 		}
; 702  : 
; 703  : 	void _Free_proxy()
; 704  : 		{	// destroy proxy
; 705  : 		typename _Alty::template rebind<_Container_proxy>::other
; 706  : 			_Alproxy(this->_Alnod);
; 707  : 		this->_Orphan_all();
; 708  : 		_Alproxy.destroy(this->_Myproxy);
; 709  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 710  : 		this->_Myproxy = 0;
; 711  : 		}
; 712  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 713  : 
; 714  : 	_Nodeptr _Buyheadnode()
; 715  : 		{	// get head node using current allocator
; 716  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 717  : 
; 718  : 		_TRY_BEGIN
; 719  : 		this->_Alnod.construct(
; 720  : 			_STD addressof(this->_Left(_Pnode)), _Pnode);
; 721  : 		this->_Alnod.construct(
; 722  : 			_STD addressof(this->_Parent(_Pnode)), _Pnode);
; 723  : 		this->_Alnod.construct(
; 724  : 			_STD addressof(this->_Right(_Pnode)), _Pnode);
; 725  : 		_CATCH_ALL
; 726  : 		this->_Alnod.deallocate(_Pnode, 1);
; 727  : 		_RERAISE;
; 728  : 		_CATCH_END
; 729  : 
; 730  : 		this->_Color(_Pnode) = this->_Black;
; 731  : 		this->_Isnil(_Pnode) = true;
; 732  : 		return (_Pnode);
; 733  : 		}
; 734  : 
; 735  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 736  : 		{	// free head node using current allocator
; 737  : 		this->_Alnod.destroy(
; 738  : 			_STD addressof(this->_Left(_Pnode)));
; 739  : 		this->_Alnod.destroy(
; 740  : 			_STD addressof(this->_Parent(_Pnode)));
; 741  : 		this->_Alnod.destroy(
; 742  : 			_STD addressof(this->_Right(_Pnode)));
; 743  : 		this->_Alnod.deallocate(_Pnode, 1);
; 744  : 		}
; 745  : 
; 746  : 	_Alty& _Getal()
; 747  : 		{	// get reference to allocator
; 748  : 		return (this->_Alnod);
; 749  : 		}
; 750  : 
; 751  : 	const _Alty& _Getal() const
; 752  : 		{	// get reference to allocator
; 753  : 		return (this->_Alnod);
; 754  : 		}
; 755  : 	};
; 756  : 
; 757  : 		// TEMPLATE CLASS _Tree_alloc
; 758  : template<class _Alloc_types>
; 759  : 	class _Tree_alloc<false, _Alloc_types>
; 760  : 		: public _Tree_val<typename _Alloc_types::_Val_types>
; 761  : 	{	// base class for tree to hold allocator with no storage
; 762  : public:
; 763  : 	typedef _Tree_alloc<false, _Alloc_types> _Myt;
; 764  : 	typedef _Tree_val<typename _Alloc_types::_Val_types> _Mybase;
; 765  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 766  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 767  : 	typedef typename _Alloc_types::_Node _Node;
; 768  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 769  : 
; 770  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 771  : 	_Tree_alloc(const _Alloc& = _Alloc())
; 772  : 		{	// construct head node, allocator from _Al
; 773  : 		this->_Myhead = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map

; 96   : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c3		 ret	 0
??0?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Key, COMDAT
; _this$ = ecx

; 2239 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\map

; 59   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2241 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKPAVCLight@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKPAVCLight@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2234 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2235 : 		return (_Traits::_Kfn(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 2236 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKPAVCLight@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2229 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2230 : 		erase(begin(), end());

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	50		 push	 eax
  00007	ff 30		 push	 DWORD PTR [eax]
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase

; 2231 : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2157 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2158 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 2159 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 584  : 		return ((char&)_Pnode->_Isnil);

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 2160 : 
; 2161 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN5@Rrotate

; 2162 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN5@Rrotate:

; 2163 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2164 : 
; 2165 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN4@Rrotate

; 2166 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2171 : 
; 2172 : 		this->_Right(_Pnode) = _Wherenode;

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2173 : 		this->_Parent(_Wherenode) = _Pnode;

  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi

; 2174 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN4@Rrotate:

; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2167 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN2@Rrotate

; 2168 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2171 : 
; 2172 : 		this->_Right(_Pnode) = _Wherenode;

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2173 : 		this->_Parent(_Wherenode) = _Pnode;

  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi

; 2174 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN2@Rrotate:

; 2169 : 		else
; 2170 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 2171 : 
; 2172 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2173 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi

; 2174 : 		}

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Root, COMDAT
; _this$ = ecx

; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 04	 add	 eax, 4

; 2153 : 		return (this->_Parent(this->_Myhead));
; 2154 : 		}

  00005	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 599  : 		return ((_Nodepref)_Pnode->_Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 2148 : 		return (this->_Right(this->_Myhead));
; 2149 : 		}

  00005	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 2127 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi

; 2128 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 2129 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 584  : 		return ((char&)_Pnode->_Isnil);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]

; 2130 : 
; 2131 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN5@Lrotate

; 2132 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN5@Lrotate:

; 2133 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2134 : 
; 2135 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN4@Lrotate

; 2136 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2141 : 
; 2142 : 		this->_Left(_Pnode) = _Wherenode;

  0002a	89 16		 mov	 DWORD PTR [esi], edx

; 2143 : 		this->_Parent(_Wherenode) = _Pnode;

  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi

; 2144 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN4@Lrotate:

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2137 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN2@Lrotate

; 2138 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 2141 : 
; 2142 : 		this->_Left(_Pnode) = _Wherenode;

  0003d	89 16		 mov	 DWORD PTR [esi], edx

; 2143 : 		this->_Parent(_Wherenode) = _Pnode;

  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi

; 2144 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN2@Lrotate:

; 2139 : 		else
; 2140 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2141 : 
; 2142 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 16		 mov	 DWORD PTR [esi], edx

; 2143 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi

; 2144 : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2123 : 		return (this->_Left(this->_Myhead));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2124 : 		}

  00002	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@ABK@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 2105 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 2106 : 		_Nodeptr _Pnode = _Root();

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2107 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2108 : 
; 2109 : 		while (!this->_Isnil(_Pnode))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN32@Lbound
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL4@Lbound:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2110 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))

  00016	73 05		 jae	 SHORT $LN2@Lbound

; 2111 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2112 : 			else

  0001b	eb 04		 jmp	 SHORT $LN1@Lbound
$LN2@Lbound:

; 2113 : 				{	// _Pnode not less than _Keyval, remember it
; 2114 : 				_Wherenode = _Pnode;

  0001d	8b d0		 mov	 edx, eax

; 2115 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@Lbound:

; 2107 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2108 : 
; 2109 : 		while (!this->_Isnil(_Pnode))

  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL4@Lbound
$LN32@Lbound:

; 2116 : 				}
; 2117 : 
; 2118 : 		return (_Wherenode);	// return best remembered candidate

  00027	8b c2		 mov	 eax, edx

; 2119 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lbound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2074 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2075 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b f7		 mov	 esi, edi

; 2076 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 1d		 jne	 SHORT $LN1@Erase
$LL3@Erase:

; 2077 : 			{	// free subtrees, then node
; 2078 : 			_Erase(this->_Right(_Pnode));

  00013	ff 76 08	 push	 DWORD PTR [esi+8]
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Erase

; 2079 : 			_Pnode = this->_Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2076 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00028	8b fe		 mov	 edi, esi
  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e3		 je	 SHORT $LL3@Erase
$LN1@Erase:
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx

; 2080 : 			this->_Getal().destroy(
; 2081 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2082 : 
; 2083 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2084 : 			}
; 2085 : 		}

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Newnode$ = 8						; size = 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Destroy_if_not_nil, COMDAT
; _this$ = ecx

; 1648 : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Newnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1653 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Destroy_if_not_nil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1574 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1577 : 
; 1578 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1579 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1580 : 		return (const_iterator(_Lbound(_Keyval), this));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator upper_bound(const key_type& _Keyval)
; 1584 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1585 : 		return (iterator(_Ubound(_Keyval), this));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1589 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1590 : 		return (const_iterator(_Ubound(_Keyval), this));
; 1591 : 		}
; 1592 : 
; 1593 : 	_Pairii equal_range(const key_type& _Keyval)
; 1594 : 		{	// find range equivalent to _Keyval in mutable tree
; 1595 : 		return (_Eqrange(_Keyval));
; 1596 : 		}
; 1597 : 
; 1598 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1599 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1600 : 		return (_Eqrange(_Keyval));
; 1601 : 		}
; 1602 : 
; 1603 : 	void swap(_Myt& _Right)
; 1604 : 		{	// exchange contents with _Right
; 1605 : 		if (this == &_Right)
; 1606 : 			;	// same object, do nothing
; 1607 : 		else if (this->_Getal() == _Right._Getal())
; 1608 : 			{	// same allocator, swap control information
; 1609 : 			this->_Swap_all(_Right);
; 1610 : 			this->_Swapcomp(_Right._Getcomp());
; 1611 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1612 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1613 : 			}
; 1614 : 
; 1615 : 		else if (_Alty::propagate_on_container_swap::value)
; 1616 : 			{	// swap allocators and control information
; 1617 : 			this->_Swap_alloc(_Right);
; 1618 : 			this->_Swapcomp(_Right._Getcomp());
; 1619 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1620 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1621 : 			}
; 1622 : 
; 1623 : 		else
; 1624 : 			{	// containers are incompatible
; 1625 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1626 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1627 : 
; 1628 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1629 : 			_XSTD terminate();
; 1630 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1631 : 			}
; 1632 : 		}
; 1633 : 
; 1634 : protected:
; 1635 : 	template<class _Valty>
; 1636 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1637 : 		{	// node exists, just return it
; 1638 : 		return (_Node);
; 1639 : 		}
; 1640 : 
; 1641 : 	template<class _Valty>
; 1642 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1643 : 		{	// node doesn't exist, make it
; 1644 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1645 : 		}
; 1646 : 
; 1647 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1648 : 		{	// node exists, destroy it
; 1649 : 		this->_Getal().destroy(
; 1650 : 			_STD addressof(this->_Myval(_Newnode)));
; 1651 : 
; 1652 : 		this->_Getal().deallocate(_Newnode, 1);
; 1653 : 		}
; 1654 : 
; 1655 : 	void _Destroy_if_not_nil(_Nil)
; 1656 : 		{	// node doesn't exist, do nothing
; 1657 : 		}
; 1658 : 
; 1659 : 	template<class _Valty,
; 1660 : 		class _Nodety>
; 1661 : 		iterator _Insert_hint(const_iterator _Where,
; 1662 : 			_Valty&& _Val, _Nodety _Newnode)
; 1663 : 		{	// try to insert node using _Where as a hint
; 1664 : 		const_iterator _Next;
; 1665 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1666 : 
; 1667 : 		_TRY_BEGIN
; 1668 : 
; 1669 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1670 : 		if (_Where._Getcont() != this)
; 1671 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1672 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1673 : 
; 1674 : 		if (size() == 0)
; 1675 : 			return (_Insert_at(true, this->_Myhead,
; 1676 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1677 : 		else if (this->_Multi)
; 1678 : 			{	// insert even if duplicate
; 1679 : 			if (_Where == begin())
; 1680 : 				{	// insert at beginning if before first element
; 1681 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1682 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1683 : 					return (_Insert_at(true, _Where._Mynode(),
; 1684 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1685 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1686 : 				}
; 1687 : 			else if (_Where == end())
; 1688 : 				{	// insert at end if after last element
; 1689 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1690 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1691 : 					return (_Insert_at(false, _Rmost(),
; 1692 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1693 : 				}
; 1694 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1695 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1696 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1697 : 					this->_Kfn(_Val),
; 1698 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1699 : 				{	// insert before _Where
; 1700 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1701 : 					return (_Insert_at(false, _Next._Mynode(),
; 1702 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1703 : 				else
; 1704 : 					return (_Insert_at(true, _Where._Mynode(),
; 1705 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1706 : 				}
; 1707 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1708 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1709 : 				&& (++(_Next = _Where) == end()
; 1710 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1711 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1712 : 				{	// insert after _Where
; 1713 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1714 : 					return (_Insert_at(false, _Where._Mynode(),
; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 				else
; 1717 : 					return (_Insert_at(true, _Next._Mynode(),
; 1718 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1719 : 				}
; 1720 : 			else
; 1721 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1722 : 			}
; 1723 : 		else
; 1724 : 			{	// insert only if unique
; 1725 : 			if (_Where == begin())
; 1726 : 				{	// insert at beginning if before first element
; 1727 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1729 : 					return (_Insert_at(true, _Where._Mynode(),
; 1730 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1731 : 				}
; 1732 : 			else if (_Where == end())
; 1733 : 				{	// insert at end if after last element
; 1734 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1735 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1736 : 					return (_Insert_at(false, _Rmost(),
; 1737 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1738 : 				}
; 1739 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1740 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1741 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1742 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1743 : 					this->_Kfn(_Val)))
; 1744 : 				{	// insert before _Where
; 1745 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1746 : 					return (_Insert_at(false, _Next._Mynode(),
; 1747 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1748 : 				else
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1753 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1754 : 				&& (++(_Next = _Where) == end()
; 1755 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1756 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1757 : 				{	// insert after _Where
; 1758 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1759 : 					return (_Insert_at(false, _Where._Mynode(),
; 1760 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1761 : 				else
; 1762 : 					return (_Insert_at(true, _Next._Mynode(),
; 1763 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1764 : 				}
; 1765 : 			}
; 1766 : 		_CATCH_ALL
; 1767 : 		_Destroy_if_not_nil(_Newnode);
; 1768 : 		_RERAISE;
; 1769 : 		_CATCH_END
; 1770 : 
; 1771 : 		return (_Insert_nohint(_Leftish,
; 1772 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1773 : 		}
; 1774 : 
; 1775 : 	template<class _Valty,
; 1776 : 		class _Nodety>
; 1777 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1778 : 			_Valty&& _Val, _Nodety _Newnode)
; 1779 : 		{	// try to insert node, on left if _Leftish
; 1780 : 		_TRY_BEGIN
; 1781 : 		_Nodeptr _Trynode = _Root();
; 1782 : 		_Nodeptr _Wherenode = this->_Myhead;
; 1783 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1784 : 
; 1785 : 		while (!this->_Isnil(_Trynode))
; 1786 : 			{	// look for leaf to insert before (_Addleft) or after
; 1787 : 			_Wherenode = _Trynode;
; 1788 : 			if (_Leftish)
; 1789 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1790 : 					this->_Key(_Trynode),
; 1791 : 					this->_Kfn(_Val));	// favor left end
; 1792 : 			else
; 1793 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1794 : 					this->_Kfn(_Val),
; 1795 : 					this->_Key(_Trynode));	// favor right end
; 1796 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1797 : 				: this->_Right(_Trynode);
; 1798 : 			}
; 1799 : 
; 1800 : 		if (this->_Multi)
; 1801 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1802 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1803 : 		else
; 1804 : 			{	// insert only if unique
; 1805 : 			iterator _Where = iterator(_Wherenode, this);
; 1806 : 			if (!_Addleft)
; 1807 : 				;	// need to test if insert after is okay
; 1808 : 			else if (_Where == begin())
; 1809 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1810 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1811 : 			else
; 1812 : 				--_Where;	// need to test if insert before is okay
; 1813 : 
; 1814 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1815 : 				this->_Key(_Where._Mynode()),
; 1816 : 				this->_Kfn(_Val)))
; 1817 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1818 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1819 : 			else
; 1820 : 				{	// duplicate, don't insert
; 1821 : 				_Destroy_if_not_nil(_Newnode);
; 1822 : 				return (_Pairib(_Where, false));
; 1823 : 				}
; 1824 : 			}
; 1825 : 		_CATCH_ALL
; 1826 : 		_Destroy_if_not_nil(_Newnode);
; 1827 : 		_RERAISE;
; 1828 : 		_CATCH_END
; 1829 : 		}
; 1830 : 
; 1831 : 	template<class _Valty,
; 1832 : 		class _Nodety>
; 1833 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1834 : 		_Valty&& _Val, _Nodety _Node)
; 1835 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1836 : 		if (max_size() - 1 <= this->_Mysize)
; 1837 : 			{	// tree would get too big, fail
; 1838 : 			_Destroy_if_not_nil(_Node);
; 1839 : 			_Xlength_error("map/set<T> too long");
; 1840 : 			}
; 1841 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1842 : 			_STD forward<_Valty>(_Val));
; 1843 : 
; 1844 : 		++this->_Mysize;
; 1845 : 		_Newnode->_Parent = _Wherenode;
; 1846 : 
; 1847 : 		if (_Wherenode == this->_Myhead)
; 1848 : 			{	// first node in tree, just set head values
; 1849 : 			_Root() = _Newnode;
; 1850 : 			_Lmost() = _Newnode;
; 1851 : 			_Rmost() = _Newnode;
; 1852 : 			}
; 1853 : 		else if (_Addleft)
; 1854 : 			{	// add to left of _Wherenode
; 1855 : 			this->_Left(_Wherenode) = _Newnode;
; 1856 : 			if (_Wherenode == _Lmost())
; 1857 : 				_Lmost() = _Newnode;
; 1858 : 			}
; 1859 : 		else
; 1860 : 			{	// add to right of _Wherenode
; 1861 : 			this->_Right(_Wherenode) = _Newnode;
; 1862 : 			if (_Wherenode == _Rmost())
; 1863 : 				_Rmost() = _Newnode;
; 1864 : 			}
; 1865 : 
; 1866 : 		for (_Nodeptr _Pnode = _Newnode;
; 1867 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1868 : 			if (this->_Parent(_Pnode)
; 1869 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1870 : 				{	// fixup red-red in left subtree
; 1871 : 				_Wherenode =
; 1872 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1873 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1874 : 					{	// parent has two red children, blacken both
; 1875 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1876 : 					this->_Color(_Wherenode) = this->_Black;
; 1877 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1878 : 						= this->_Red;
; 1879 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1880 : 					}
; 1881 : 				else
; 1882 : 					{	// parent has red and black children
; 1883 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1884 : 						{	// rotate right child to left
; 1885 : 						_Pnode = this->_Parent(_Pnode);
; 1886 : 						_Lrotate(_Pnode);
; 1887 : 						}
; 1888 : 					this->_Color(this->_Parent(_Pnode)) =
; 1889 : 						this->_Black;	// propagate red up
; 1890 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1891 : 						this->_Red;
; 1892 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 					}
; 1894 : 				}
; 1895 : 			else
; 1896 : 				{	// fixup red-red in right subtree
; 1897 : 				_Wherenode =
; 1898 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1899 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1900 : 					{	// parent has two red children, blacken both
; 1901 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1902 : 					this->_Color(_Wherenode) = this->_Black;
; 1903 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1904 : 						this->_Red;
; 1905 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1906 : 					}
; 1907 : 				else
; 1908 : 					{	// parent has red and black children
; 1909 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1910 : 						{	// rotate left child to right
; 1911 : 						_Pnode = this->_Parent(_Pnode);
; 1912 : 						_Rrotate(_Pnode);
; 1913 : 						}
; 1914 : 					this->_Color(this->_Parent(_Pnode)) =
; 1915 : 						this->_Black;	// propagate red up
; 1916 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1917 : 						this->_Red;
; 1918 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 					}
; 1920 : 				}
; 1921 : 
; 1922 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1923 : 		return (iterator(_Newnode, this));
; 1924 : 		}
; 1925 : 
; 1926 : 	template<class _Moveit>
; 1927 : 		void _Copy(const _Myt& _Right,
; 1928 : 			_Moveit _Movefl)
; 1929 : 		{	// copy or move entire tree from _Right
; 1930 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead, _Movefl);
; 1931 : 		this->_Mysize = _Right.size();
; 1932 : 		if (!this->_Isnil(_Root()))
; 1933 : 			{	// nonempty tree, look for new smallest and largest
; 1934 : 			_Lmost() = this->_Min(_Root());
; 1935 : 			_Rmost() = this->_Max(_Root());
; 1936 : 			}
; 1937 : 		else
; 1938 : 			{	// empty tree, just tidy head pointers
; 1939 : 			_Lmost() = this->_Myhead;
; 1940 : 			_Rmost() = this->_Myhead;
; 1941 : 			}
; 1942 : 		}
; 1943 : 
; 1944 : 	template<class _Want_to_move,
; 1945 : 		class _Can_move,
; 1946 : 		class _Is_set,
; 1947 : 		class _Dummy>
; 1948 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, _Want_to_move,
; 1949 : 			_Can_move, _Is_set, _Dummy)
; 1950 : 		{	// copy to new node -- nonmovable
; 1951 : 		return (this->_Buynode(this->_Myval(_Rootnode)));
; 1952 : 		}
; 1953 : 
; 1954 : 	template<class _Dummy>
; 1955 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1956 : 			true_type, true_type, _Dummy)
; 1957 : 		{	// move to new node -- movable, set
; 1958 : 		return (this->_Buynode(
; 1959 : 			_STD forward<value_type>(this->_Myval(_Rootnode))));
; 1960 : 		}
; 1961 : 
; 1962 : 	template<class _Dummy>
; 1963 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1964 : 			true_type, false_type, _Dummy)
; 1965 : 		{	// move to new node -- movable, map
; 1966 : 		return (this->_Buynode(
; 1967 : 			_STD forward<key_type>(const_cast<key_type&>(
; 1968 : 				this->_Myval(_Rootnode).first)),
; 1969 : 			_STD forward<typename value_type::second_type>(this->_Myval(
; 1970 : 				_Rootnode).second)));
; 1971 : 		}
; 1972 : 
; 1973 : 	template<class _Moveit>
; 1974 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1975 : 			_Moveit _Movefl)
; 1976 : 		{	// copy entire subtree, recursively
; 1977 : 		_Nodeptr _Newroot = this->_Myhead;	// point at nil node
; 1978 : 
; 1979 : 		if (!this->_Isnil(_Rootnode))
; 1980 : 			{	// copy or move a node, then any subtrees
; 1981 : 			_Nodeptr _Pnode = _Copy_or_move(_Rootnode, _Movefl,
; 1982 : 				typename is_move_constructible<value_type>::type(),
; 1983 : 				typename is_same<key_type, value_type>::type(), 0);
; 1984 : 			_Pnode->_Parent = _Wherenode;
; 1985 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1986 : 			if (this->_Isnil(_Newroot))
; 1987 : 				_Newroot = _Pnode;	// memorize new root
; 1988 : 
; 1989 : 			_TRY_BEGIN
; 1990 : 			this->_Left(_Pnode) =
; 1991 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 1992 : 			this->_Right(_Pnode) =
; 1993 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 1994 : 			_CATCH_ALL
; 1995 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 1996 : 			_RERAISE;
; 1997 : 			_CATCH_END
; 1998 : 			}
; 1999 : 
; 2000 : 		return (_Newroot);	// return newly constructed tree
; 2001 : 		}
; 2002 : 
; 2003 : 	_Paircc _Eqrange(const key_type& _Keyval) const
; 2004 : 		{	// find leftmost node not less than _Keyval
; 2005 : 		_Nodeptr _Pnode = _Root();
; 2006 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2007 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2008 : 
; 2009 : 		while (!this->_Isnil(_Pnode))
; 2010 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2011 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2012 : 			else
; 2013 : 				{	// _Pnode not less than _Keyval, remember it
; 2014 : 				if (this->_Isnil(_Hinode)
; 2015 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2016 : 						this->_Key(_Pnode)))
; 2017 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2018 : 				_Lonode = _Pnode;
; 2019 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2020 : 				}
; 2021 : 
; 2022 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2023 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2024 : 		while (!this->_Isnil(_Pnode))
; 2025 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2026 : 				{	// _Pnode greater than _Keyval, remember it
; 2027 : 				_Hinode = _Pnode;
; 2028 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2029 : 				}
; 2030 : 			else
; 2031 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2032 : 
; 2033 : 		const_iterator _First = const_iterator(_Lonode, this);
; 2034 : 		const_iterator _Last = const_iterator(_Hinode, this);
; 2035 : 		return (_Paircc(_First, _Last));
; 2036 : 		}
; 2037 : 
; 2038 : 	_Pairii _Eqrange(const key_type& _Keyval)
; 2039 : 		{	// find leftmost node not less than _Keyval
; 2040 : 		_Nodeptr _Pnode = _Root();
; 2041 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2042 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2043 : 
; 2044 : 		while (!this->_Isnil(_Pnode))
; 2045 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2046 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2047 : 			else
; 2048 : 				{	// _Pnode not less than _Keyval, remember it
; 2049 : 				if (this->_Isnil(_Hinode)
; 2050 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2051 : 						 this->_Key(_Pnode)))
; 2052 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2053 : 				_Lonode = _Pnode;
; 2054 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2055 : 				}
; 2056 : 
; 2057 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2058 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2059 : 		while (!this->_Isnil(_Pnode))
; 2060 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2061 : 				{	// _Pnode greater than _Keyval, remember it
; 2062 : 				_Hinode = _Pnode;
; 2063 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2064 : 				}
; 2065 : 			else
; 2066 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2067 : 
; 2068 : 		iterator _First = iterator(_Lonode, this);
; 2069 : 		iterator _Last = iterator(_Hinode, this);
; 2070 : 		return (_Pairii(_First, _Last));
; 2071 : 		}
; 2072 : 
; 2073 : 	void _Erase(_Nodeptr _Rootnode)
; 2074 : 		{	// free entire subtree, recursively
; 2075 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2076 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2077 : 			{	// free subtrees, then node
; 2078 : 			_Erase(this->_Right(_Pnode));
; 2079 : 			_Pnode = this->_Left(_Pnode);
; 2080 : 			this->_Getal().destroy(
; 2081 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2082 : 
; 2083 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2084 : 			}
; 2085 : 		}
; 2086 : 
; 2087 : 	_Nodeptr _Lbound(const key_type& _Keyval) const
; 2088 : 		{	// find leftmost node not less than _Keyval
; 2089 : 		_Nodeptr _Pnode = _Root();
; 2090 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2091 : 
; 2092 : 		while (!this->_Isnil(_Pnode))
; 2093 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2094 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2095 : 			else
; 2096 : 				{	// _Pnode not less than _Keyval, remember it
; 2097 : 				_Wherenode = _Pnode;
; 2098 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2099 : 				}
; 2100 : 
; 2101 : 		return (_Wherenode);	// return best remembered candidate
; 2102 : 		}
; 2103 : 
; 2104 : 	_Nodeptr _Lbound(const key_type& _Keyval)
; 2105 : 		{	// find leftmost node not less than _Keyval
; 2106 : 		_Nodeptr _Pnode = _Root();

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2107 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2108 : 
; 2109 : 		while (!this->_Isnil(_Pnode))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN42@lower_boun
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL6@lower_boun:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2110 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))

  00016	73 05		 jae	 SHORT $LN4@lower_boun

; 2111 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2112 : 			else

  0001b	eb 04		 jmp	 SHORT $LN3@lower_boun
$LN4@lower_boun:

; 2113 : 				{	// _Pnode not less than _Keyval, remember it
; 2114 : 				_Wherenode = _Pnode;

  0001d	8b d0		 mov	 edx, eax

; 2115 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@lower_boun:

; 2107 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2108 : 
; 2109 : 		while (!this->_Isnil(_Pnode))

  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL6@lower_boun
$LN42@lower_boun:

; 44   : 		{	// construct with node pointer _Pnode

  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 10		 mov	 DWORD PTR [eax], edx

; 1575 : 		return (iterator(_Lbound(_Keyval), this));
; 1576 : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T1 = 12						; size = 4
$T2 = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::find, COMDAT
; _this$ = ecx

; 1548 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00004	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1555 : 
; 1556 : 	const_iterator find(const key_type& _Keyval) const
; 1557 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1558 : 		const_iterator _Where = lower_bound(_Keyval);
; 1559 : 		return (_Where == end()
; 1560 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1561 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1562 : 					? end() : _Where);
; 1563 : 		}
; 1564 : 
; 1565 : 	size_type count(const key_type& _Keyval) const
; 1566 : 		{	// count all elements that match _Keyval
; 1567 : 		_Paircc _Ans = equal_range(_Keyval);
; 1568 : 		size_type _Num = 0;
; 1569 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1570 : 		return (_Num);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator lower_bound(const key_type& _Keyval)
; 1574 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1575 : 		return (iterator(_Lbound(_Keyval), this));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1579 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1580 : 		return (const_iterator(_Lbound(_Keyval), this));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator upper_bound(const key_type& _Keyval)
; 1584 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1585 : 		return (iterator(_Ubound(_Keyval), this));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1589 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1590 : 		return (const_iterator(_Ubound(_Keyval), this));
; 1591 : 		}
; 1592 : 
; 1593 : 	_Pairii equal_range(const key_type& _Keyval)
; 1594 : 		{	// find range equivalent to _Keyval in mutable tree
; 1595 : 		return (_Eqrange(_Keyval));
; 1596 : 		}
; 1597 : 
; 1598 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1599 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1600 : 		return (_Eqrange(_Keyval));
; 1601 : 		}
; 1602 : 
; 1603 : 	void swap(_Myt& _Right)
; 1604 : 		{	// exchange contents with _Right
; 1605 : 		if (this == &_Right)
; 1606 : 			;	// same object, do nothing
; 1607 : 		else if (this->_Getal() == _Right._Getal())
; 1608 : 			{	// same allocator, swap control information
; 1609 : 			this->_Swap_all(_Right);
; 1610 : 			this->_Swapcomp(_Right._Getcomp());
; 1611 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1612 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1613 : 			}
; 1614 : 
; 1615 : 		else if (_Alty::propagate_on_container_swap::value)
; 1616 : 			{	// swap allocators and control information
; 1617 : 			this->_Swap_alloc(_Right);
; 1618 : 			this->_Swapcomp(_Right._Getcomp());
; 1619 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1620 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1621 : 			}
; 1622 : 
; 1623 : 		else
; 1624 : 			{	// containers are incompatible
; 1625 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1626 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1627 : 
; 1628 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1629 : 			_XSTD terminate();
; 1630 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1631 : 			}
; 1632 : 		}
; 1633 : 
; 1634 : protected:
; 1635 : 	template<class _Valty>
; 1636 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1637 : 		{	// node exists, just return it
; 1638 : 		return (_Node);
; 1639 : 		}
; 1640 : 
; 1641 : 	template<class _Valty>
; 1642 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1643 : 		{	// node doesn't exist, make it
; 1644 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1645 : 		}
; 1646 : 
; 1647 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1648 : 		{	// node exists, destroy it
; 1649 : 		this->_Getal().destroy(
; 1650 : 			_STD addressof(this->_Myval(_Newnode)));
; 1651 : 
; 1652 : 		this->_Getal().deallocate(_Newnode, 1);
; 1653 : 		}
; 1654 : 
; 1655 : 	void _Destroy_if_not_nil(_Nil)
; 1656 : 		{	// node doesn't exist, do nothing
; 1657 : 		}
; 1658 : 
; 1659 : 	template<class _Valty,
; 1660 : 		class _Nodety>
; 1661 : 		iterator _Insert_hint(const_iterator _Where,
; 1662 : 			_Valty&& _Val, _Nodety _Newnode)
; 1663 : 		{	// try to insert node using _Where as a hint
; 1664 : 		const_iterator _Next;
; 1665 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1666 : 
; 1667 : 		_TRY_BEGIN
; 1668 : 
; 1669 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1670 : 		if (_Where._Getcont() != this)
; 1671 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1672 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1673 : 
; 1674 : 		if (size() == 0)
; 1675 : 			return (_Insert_at(true, this->_Myhead,
; 1676 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1677 : 		else if (this->_Multi)
; 1678 : 			{	// insert even if duplicate
; 1679 : 			if (_Where == begin())
; 1680 : 				{	// insert at beginning if before first element
; 1681 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1682 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1683 : 					return (_Insert_at(true, _Where._Mynode(),
; 1684 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1685 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1686 : 				}
; 1687 : 			else if (_Where == end())
; 1688 : 				{	// insert at end if after last element
; 1689 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1690 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1691 : 					return (_Insert_at(false, _Rmost(),
; 1692 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1693 : 				}
; 1694 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1695 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1696 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1697 : 					this->_Kfn(_Val),
; 1698 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1699 : 				{	// insert before _Where
; 1700 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1701 : 					return (_Insert_at(false, _Next._Mynode(),
; 1702 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1703 : 				else
; 1704 : 					return (_Insert_at(true, _Where._Mynode(),
; 1705 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1706 : 				}
; 1707 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1708 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1709 : 				&& (++(_Next = _Where) == end()
; 1710 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1711 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1712 : 				{	// insert after _Where
; 1713 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1714 : 					return (_Insert_at(false, _Where._Mynode(),
; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 				else
; 1717 : 					return (_Insert_at(true, _Next._Mynode(),
; 1718 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1719 : 				}
; 1720 : 			else
; 1721 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1722 : 			}
; 1723 : 		else
; 1724 : 			{	// insert only if unique
; 1725 : 			if (_Where == begin())
; 1726 : 				{	// insert at beginning if before first element
; 1727 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1729 : 					return (_Insert_at(true, _Where._Mynode(),
; 1730 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1731 : 				}
; 1732 : 			else if (_Where == end())
; 1733 : 				{	// insert at end if after last element
; 1734 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1735 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1736 : 					return (_Insert_at(false, _Rmost(),
; 1737 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1738 : 				}
; 1739 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1740 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1741 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1742 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1743 : 					this->_Kfn(_Val)))
; 1744 : 				{	// insert before _Where
; 1745 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1746 : 					return (_Insert_at(false, _Next._Mynode(),
; 1747 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1748 : 				else
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1753 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1754 : 				&& (++(_Next = _Where) == end()
; 1755 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1756 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1757 : 				{	// insert after _Where
; 1758 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1759 : 					return (_Insert_at(false, _Where._Mynode(),
; 1760 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1761 : 				else
; 1762 : 					return (_Insert_at(true, _Next._Mynode(),
; 1763 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1764 : 				}
; 1765 : 			}
; 1766 : 		_CATCH_ALL
; 1767 : 		_Destroy_if_not_nil(_Newnode);
; 1768 : 		_RERAISE;
; 1769 : 		_CATCH_END
; 1770 : 
; 1771 : 		return (_Insert_nohint(_Leftish,
; 1772 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1773 : 		}
; 1774 : 
; 1775 : 	template<class _Valty,
; 1776 : 		class _Nodety>
; 1777 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1778 : 			_Valty&& _Val, _Nodety _Newnode)
; 1779 : 		{	// try to insert node, on left if _Leftish
; 1780 : 		_TRY_BEGIN
; 1781 : 		_Nodeptr _Trynode = _Root();
; 1782 : 		_Nodeptr _Wherenode = this->_Myhead;
; 1783 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1784 : 
; 1785 : 		while (!this->_Isnil(_Trynode))
; 1786 : 			{	// look for leaf to insert before (_Addleft) or after
; 1787 : 			_Wherenode = _Trynode;
; 1788 : 			if (_Leftish)
; 1789 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1790 : 					this->_Key(_Trynode),
; 1791 : 					this->_Kfn(_Val));	// favor left end
; 1792 : 			else
; 1793 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1794 : 					this->_Kfn(_Val),
; 1795 : 					this->_Key(_Trynode));	// favor right end
; 1796 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1797 : 				: this->_Right(_Trynode);
; 1798 : 			}
; 1799 : 
; 1800 : 		if (this->_Multi)
; 1801 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1802 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1803 : 		else
; 1804 : 			{	// insert only if unique
; 1805 : 			iterator _Where = iterator(_Wherenode, this);
; 1806 : 			if (!_Addleft)
; 1807 : 				;	// need to test if insert after is okay
; 1808 : 			else if (_Where == begin())
; 1809 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1810 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1811 : 			else
; 1812 : 				--_Where;	// need to test if insert before is okay
; 1813 : 
; 1814 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1815 : 				this->_Key(_Where._Mynode()),
; 1816 : 				this->_Kfn(_Val)))
; 1817 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1818 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1819 : 			else
; 1820 : 				{	// duplicate, don't insert
; 1821 : 				_Destroy_if_not_nil(_Newnode);
; 1822 : 				return (_Pairib(_Where, false));
; 1823 : 				}
; 1824 : 			}
; 1825 : 		_CATCH_ALL
; 1826 : 		_Destroy_if_not_nil(_Newnode);
; 1827 : 		_RERAISE;
; 1828 : 		_CATCH_END
; 1829 : 		}
; 1830 : 
; 1831 : 	template<class _Valty,
; 1832 : 		class _Nodety>
; 1833 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1834 : 		_Valty&& _Val, _Nodety _Node)
; 1835 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1836 : 		if (max_size() - 1 <= this->_Mysize)
; 1837 : 			{	// tree would get too big, fail
; 1838 : 			_Destroy_if_not_nil(_Node);
; 1839 : 			_Xlength_error("map/set<T> too long");
; 1840 : 			}
; 1841 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1842 : 			_STD forward<_Valty>(_Val));
; 1843 : 
; 1844 : 		++this->_Mysize;
; 1845 : 		_Newnode->_Parent = _Wherenode;
; 1846 : 
; 1847 : 		if (_Wherenode == this->_Myhead)
; 1848 : 			{	// first node in tree, just set head values
; 1849 : 			_Root() = _Newnode;
; 1850 : 			_Lmost() = _Newnode;
; 1851 : 			_Rmost() = _Newnode;
; 1852 : 			}
; 1853 : 		else if (_Addleft)
; 1854 : 			{	// add to left of _Wherenode
; 1855 : 			this->_Left(_Wherenode) = _Newnode;
; 1856 : 			if (_Wherenode == _Lmost())
; 1857 : 				_Lmost() = _Newnode;
; 1858 : 			}
; 1859 : 		else
; 1860 : 			{	// add to right of _Wherenode
; 1861 : 			this->_Right(_Wherenode) = _Newnode;
; 1862 : 			if (_Wherenode == _Rmost())
; 1863 : 				_Rmost() = _Newnode;
; 1864 : 			}
; 1865 : 
; 1866 : 		for (_Nodeptr _Pnode = _Newnode;
; 1867 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1868 : 			if (this->_Parent(_Pnode)
; 1869 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1870 : 				{	// fixup red-red in left subtree
; 1871 : 				_Wherenode =
; 1872 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1873 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1874 : 					{	// parent has two red children, blacken both
; 1875 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1876 : 					this->_Color(_Wherenode) = this->_Black;
; 1877 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1878 : 						= this->_Red;
; 1879 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1880 : 					}
; 1881 : 				else
; 1882 : 					{	// parent has red and black children
; 1883 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1884 : 						{	// rotate right child to left
; 1885 : 						_Pnode = this->_Parent(_Pnode);
; 1886 : 						_Lrotate(_Pnode);
; 1887 : 						}
; 1888 : 					this->_Color(this->_Parent(_Pnode)) =
; 1889 : 						this->_Black;	// propagate red up
; 1890 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1891 : 						this->_Red;
; 1892 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 					}
; 1894 : 				}
; 1895 : 			else
; 1896 : 				{	// fixup red-red in right subtree
; 1897 : 				_Wherenode =
; 1898 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1899 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1900 : 					{	// parent has two red children, blacken both
; 1901 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1902 : 					this->_Color(_Wherenode) = this->_Black;
; 1903 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1904 : 						this->_Red;
; 1905 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1906 : 					}
; 1907 : 				else
; 1908 : 					{	// parent has red and black children
; 1909 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1910 : 						{	// rotate left child to right
; 1911 : 						_Pnode = this->_Parent(_Pnode);
; 1912 : 						_Rrotate(_Pnode);
; 1913 : 						}
; 1914 : 					this->_Color(this->_Parent(_Pnode)) =
; 1915 : 						this->_Black;	// propagate red up
; 1916 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1917 : 						this->_Red;
; 1918 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 					}
; 1920 : 				}
; 1921 : 
; 1922 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1923 : 		return (iterator(_Newnode, this));
; 1924 : 		}
; 1925 : 
; 1926 : 	template<class _Moveit>
; 1927 : 		void _Copy(const _Myt& _Right,
; 1928 : 			_Moveit _Movefl)
; 1929 : 		{	// copy or move entire tree from _Right
; 1930 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead, _Movefl);
; 1931 : 		this->_Mysize = _Right.size();
; 1932 : 		if (!this->_Isnil(_Root()))
; 1933 : 			{	// nonempty tree, look for new smallest and largest
; 1934 : 			_Lmost() = this->_Min(_Root());
; 1935 : 			_Rmost() = this->_Max(_Root());
; 1936 : 			}
; 1937 : 		else
; 1938 : 			{	// empty tree, just tidy head pointers
; 1939 : 			_Lmost() = this->_Myhead;
; 1940 : 			_Rmost() = this->_Myhead;
; 1941 : 			}
; 1942 : 		}
; 1943 : 
; 1944 : 	template<class _Want_to_move,
; 1945 : 		class _Can_move,
; 1946 : 		class _Is_set,
; 1947 : 		class _Dummy>
; 1948 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, _Want_to_move,
; 1949 : 			_Can_move, _Is_set, _Dummy)
; 1950 : 		{	// copy to new node -- nonmovable
; 1951 : 		return (this->_Buynode(this->_Myval(_Rootnode)));
; 1952 : 		}
; 1953 : 
; 1954 : 	template<class _Dummy>
; 1955 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1956 : 			true_type, true_type, _Dummy)
; 1957 : 		{	// move to new node -- movable, set
; 1958 : 		return (this->_Buynode(
; 1959 : 			_STD forward<value_type>(this->_Myval(_Rootnode))));
; 1960 : 		}
; 1961 : 
; 1962 : 	template<class _Dummy>
; 1963 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1964 : 			true_type, false_type, _Dummy)
; 1965 : 		{	// move to new node -- movable, map
; 1966 : 		return (this->_Buynode(
; 1967 : 			_STD forward<key_type>(const_cast<key_type&>(
; 1968 : 				this->_Myval(_Rootnode).first)),
; 1969 : 			_STD forward<typename value_type::second_type>(this->_Myval(
; 1970 : 				_Rootnode).second)));
; 1971 : 		}
; 1972 : 
; 1973 : 	template<class _Moveit>
; 1974 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1975 : 			_Moveit _Movefl)
; 1976 : 		{	// copy entire subtree, recursively
; 1977 : 		_Nodeptr _Newroot = this->_Myhead;	// point at nil node
; 1978 : 
; 1979 : 		if (!this->_Isnil(_Rootnode))
; 1980 : 			{	// copy or move a node, then any subtrees
; 1981 : 			_Nodeptr _Pnode = _Copy_or_move(_Rootnode, _Movefl,
; 1982 : 				typename is_move_constructible<value_type>::type(),
; 1983 : 				typename is_same<key_type, value_type>::type(), 0);
; 1984 : 			_Pnode->_Parent = _Wherenode;
; 1985 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1986 : 			if (this->_Isnil(_Newroot))
; 1987 : 				_Newroot = _Pnode;	// memorize new root
; 1988 : 
; 1989 : 			_TRY_BEGIN
; 1990 : 			this->_Left(_Pnode) =
; 1991 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 1992 : 			this->_Right(_Pnode) =
; 1993 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 1994 : 			_CATCH_ALL
; 1995 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 1996 : 			_RERAISE;
; 1997 : 			_CATCH_END
; 1998 : 			}
; 1999 : 
; 2000 : 		return (_Newroot);	// return newly constructed tree
; 2001 : 		}
; 2002 : 
; 2003 : 	_Paircc _Eqrange(const key_type& _Keyval) const
; 2004 : 		{	// find leftmost node not less than _Keyval
; 2005 : 		_Nodeptr _Pnode = _Root();
; 2006 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2007 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2008 : 
; 2009 : 		while (!this->_Isnil(_Pnode))
; 2010 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2011 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2012 : 			else
; 2013 : 				{	// _Pnode not less than _Keyval, remember it
; 2014 : 				if (this->_Isnil(_Hinode)
; 2015 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2016 : 						this->_Key(_Pnode)))
; 2017 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2018 : 				_Lonode = _Pnode;
; 2019 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2020 : 				}
; 2021 : 
; 2022 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2023 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2024 : 		while (!this->_Isnil(_Pnode))
; 2025 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2026 : 				{	// _Pnode greater than _Keyval, remember it
; 2027 : 				_Hinode = _Pnode;
; 2028 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2029 : 				}
; 2030 : 			else
; 2031 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2032 : 
; 2033 : 		const_iterator _First = const_iterator(_Lonode, this);
; 2034 : 		const_iterator _Last = const_iterator(_Hinode, this);
; 2035 : 		return (_Paircc(_First, _Last));
; 2036 : 		}
; 2037 : 
; 2038 : 	_Pairii _Eqrange(const key_type& _Keyval)
; 2039 : 		{	// find leftmost node not less than _Keyval
; 2040 : 		_Nodeptr _Pnode = _Root();
; 2041 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2042 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2043 : 
; 2044 : 		while (!this->_Isnil(_Pnode))
; 2045 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2046 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2047 : 			else
; 2048 : 				{	// _Pnode not less than _Keyval, remember it
; 2049 : 				if (this->_Isnil(_Hinode)
; 2050 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2051 : 						 this->_Key(_Pnode)))
; 2052 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2053 : 				_Lonode = _Pnode;
; 2054 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2055 : 				}
; 2056 : 
; 2057 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2058 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2059 : 		while (!this->_Isnil(_Pnode))
; 2060 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2061 : 				{	// _Pnode greater than _Keyval, remember it
; 2062 : 				_Hinode = _Pnode;
; 2063 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2064 : 				}
; 2065 : 			else
; 2066 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2067 : 
; 2068 : 		iterator _First = iterator(_Lonode, this);
; 2069 : 		iterator _Last = iterator(_Hinode, this);
; 2070 : 		return (_Pairii(_First, _Last));
; 2071 : 		}
; 2072 : 
; 2073 : 	void _Erase(_Nodeptr _Rootnode)
; 2074 : 		{	// free entire subtree, recursively
; 2075 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2076 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2077 : 			{	// free subtrees, then node
; 2078 : 			_Erase(this->_Right(_Pnode));
; 2079 : 			_Pnode = this->_Left(_Pnode);
; 2080 : 			this->_Getal().destroy(
; 2081 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2082 : 
; 2083 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2084 : 			}
; 2085 : 		}
; 2086 : 
; 2087 : 	_Nodeptr _Lbound(const key_type& _Keyval) const
; 2088 : 		{	// find leftmost node not less than _Keyval
; 2089 : 		_Nodeptr _Pnode = _Root();
; 2090 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2091 : 
; 2092 : 		while (!this->_Isnil(_Pnode))
; 2093 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2094 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2095 : 			else
; 2096 : 				{	// _Pnode not less than _Keyval, remember it
; 2097 : 				_Wherenode = _Pnode;
; 2098 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2099 : 				}
; 2100 : 
; 2101 : 		return (_Wherenode);	// return best remembered candidate
; 2102 : 		}
; 2103 : 
; 2104 : 	_Nodeptr _Lbound(const key_type& _Keyval)
; 2105 : 		{	// find leftmost node not less than _Keyval
; 2106 : 		_Nodeptr _Pnode = _Root();
; 2107 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails

  00006	8b ce		 mov	 ecx, esi
  00008	57		 push	 edi

; 2108 : 
; 2109 : 		while (!this->_Isnil(_Pnode))

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00013	75 16		 jne	 SHORT $LN9@find
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  00015	8b 17		 mov	 edx, DWORD PTR [edi]
$LL10@find:
  00017	39 50 10	 cmp	 DWORD PTR [eax+16], edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2110 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))

  0001a	73 05		 jae	 SHORT $LN8@find

; 2111 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  0001c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2112 : 			else

  0001f	eb 04		 jmp	 SHORT $LN7@find
$LN8@find:

; 2113 : 				{	// _Pnode not less than _Keyval, remember it
; 2114 : 				_Wherenode = _Pnode;

  00021	8b c8		 mov	 ecx, eax

; 2115 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00023	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@find:

; 2108 : 
; 2109 : 		while (!this->_Isnil(_Pnode))

  00025	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00029	74 ec		 je	 SHORT $LL10@find
$LN9@find:

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  0002b	3b ce		 cmp	 ecx, esi

; 1553 : 					? end() : _Where);

  0002d	74 0a		 je	 SHORT $LN3@find
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1553 : 					? end() : _Where);

  00031	89 4d 0c	 mov	 DWORD PTR $T1[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  00034	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1553 : 					? end() : _Where);

  00037	73 03		 jae	 SHORT $LN82@find
$LN3@find:

; 44   : 		{	// construct with node pointer _Pnode

  00039	89 75 0c	 mov	 DWORD PTR $T2[ebp], esi
$LN82@find:

; 1553 : 					? end() : _Where);

  0003c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003f	8d 4d 0c	 lea	 ecx, DWORD PTR $T2[ebp]
  00042	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	89 08		 mov	 DWORD PTR [eax], ecx

; 1554 : 		}

  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::clear, COMDAT
; _this$ = ecx

; 1535 : 		{	// erase all

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 1536 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1537 : 		this->_Orphan_ptr(*this, 0);
; 1538 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 
; 1540 : 		_Erase(_Root());

  00005	8b 07		 mov	 eax, DWORD PTR [edi]
  00007	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 1546 : 
; 1547 : 	iterator find(const key_type& _Keyval)
; 1548 : 		{	// find an element in mutable sequence that matches _Keyval
; 1549 : 		iterator _Where = lower_bound(_Keyval);
; 1550 : 		return (_Where == end()
; 1551 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1552 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1553 : 					? end() : _Where);
; 1554 : 		}
; 1555 : 
; 1556 : 	const_iterator find(const key_type& _Keyval) const
; 1557 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1558 : 		const_iterator _Where = lower_bound(_Keyval);
; 1559 : 		return (_Where == end()
; 1560 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1561 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1562 : 					? end() : _Where);
; 1563 : 		}
; 1564 : 
; 1565 : 	size_type count(const key_type& _Keyval) const
; 1566 : 		{	// count all elements that match _Keyval
; 1567 : 		_Paircc _Ans = equal_range(_Keyval);
; 1568 : 		size_type _Num = 0;
; 1569 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1570 : 		return (_Num);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator lower_bound(const key_type& _Keyval)
; 1574 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1575 : 		return (iterator(_Lbound(_Keyval), this));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1579 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1580 : 		return (const_iterator(_Lbound(_Keyval), this));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator upper_bound(const key_type& _Keyval)
; 1584 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1585 : 		return (iterator(_Ubound(_Keyval), this));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1589 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1590 : 		return (const_iterator(_Ubound(_Keyval), this));
; 1591 : 		}
; 1592 : 
; 1593 : 	_Pairii equal_range(const key_type& _Keyval)
; 1594 : 		{	// find range equivalent to _Keyval in mutable tree
; 1595 : 		return (_Eqrange(_Keyval));
; 1596 : 		}
; 1597 : 
; 1598 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1599 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1600 : 		return (_Eqrange(_Keyval));
; 1601 : 		}
; 1602 : 
; 1603 : 	void swap(_Myt& _Right)
; 1604 : 		{	// exchange contents with _Right
; 1605 : 		if (this == &_Right)
; 1606 : 			;	// same object, do nothing
; 1607 : 		else if (this->_Getal() == _Right._Getal())
; 1608 : 			{	// same allocator, swap control information
; 1609 : 			this->_Swap_all(_Right);
; 1610 : 			this->_Swapcomp(_Right._Getcomp());
; 1611 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1612 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1613 : 			}
; 1614 : 
; 1615 : 		else if (_Alty::propagate_on_container_swap::value)
; 1616 : 			{	// swap allocators and control information
; 1617 : 			this->_Swap_alloc(_Right);
; 1618 : 			this->_Swapcomp(_Right._Getcomp());
; 1619 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1620 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1621 : 			}
; 1622 : 
; 1623 : 		else
; 1624 : 			{	// containers are incompatible
; 1625 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1626 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1627 : 
; 1628 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1629 : 			_XSTD terminate();
; 1630 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1631 : 			}
; 1632 : 		}
; 1633 : 
; 1634 : protected:
; 1635 : 	template<class _Valty>
; 1636 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1637 : 		{	// node exists, just return it
; 1638 : 		return (_Node);
; 1639 : 		}
; 1640 : 
; 1641 : 	template<class _Valty>
; 1642 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1643 : 		{	// node doesn't exist, make it
; 1644 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1645 : 		}
; 1646 : 
; 1647 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1648 : 		{	// node exists, destroy it
; 1649 : 		this->_Getal().destroy(
; 1650 : 			_STD addressof(this->_Myval(_Newnode)));
; 1651 : 
; 1652 : 		this->_Getal().deallocate(_Newnode, 1);
; 1653 : 		}
; 1654 : 
; 1655 : 	void _Destroy_if_not_nil(_Nil)
; 1656 : 		{	// node doesn't exist, do nothing
; 1657 : 		}
; 1658 : 
; 1659 : 	template<class _Valty,
; 1660 : 		class _Nodety>
; 1661 : 		iterator _Insert_hint(const_iterator _Where,
; 1662 : 			_Valty&& _Val, _Nodety _Newnode)
; 1663 : 		{	// try to insert node using _Where as a hint
; 1664 : 		const_iterator _Next;
; 1665 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1666 : 
; 1667 : 		_TRY_BEGIN
; 1668 : 
; 1669 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1670 : 		if (_Where._Getcont() != this)
; 1671 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1672 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1673 : 
; 1674 : 		if (size() == 0)
; 1675 : 			return (_Insert_at(true, this->_Myhead,
; 1676 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1677 : 		else if (this->_Multi)
; 1678 : 			{	// insert even if duplicate
; 1679 : 			if (_Where == begin())
; 1680 : 				{	// insert at beginning if before first element
; 1681 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1682 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1683 : 					return (_Insert_at(true, _Where._Mynode(),
; 1684 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1685 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1686 : 				}
; 1687 : 			else if (_Where == end())
; 1688 : 				{	// insert at end if after last element
; 1689 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1690 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1691 : 					return (_Insert_at(false, _Rmost(),
; 1692 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1693 : 				}
; 1694 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1695 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1696 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1697 : 					this->_Kfn(_Val),
; 1698 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1699 : 				{	// insert before _Where
; 1700 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1701 : 					return (_Insert_at(false, _Next._Mynode(),
; 1702 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1703 : 				else
; 1704 : 					return (_Insert_at(true, _Where._Mynode(),
; 1705 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1706 : 				}
; 1707 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1708 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1709 : 				&& (++(_Next = _Where) == end()
; 1710 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1711 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1712 : 				{	// insert after _Where
; 1713 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1714 : 					return (_Insert_at(false, _Where._Mynode(),
; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 				else
; 1717 : 					return (_Insert_at(true, _Next._Mynode(),
; 1718 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1719 : 				}
; 1720 : 			else
; 1721 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1722 : 			}
; 1723 : 		else
; 1724 : 			{	// insert only if unique
; 1725 : 			if (_Where == begin())
; 1726 : 				{	// insert at beginning if before first element
; 1727 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1729 : 					return (_Insert_at(true, _Where._Mynode(),
; 1730 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1731 : 				}
; 1732 : 			else if (_Where == end())
; 1733 : 				{	// insert at end if after last element
; 1734 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1735 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1736 : 					return (_Insert_at(false, _Rmost(),
; 1737 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1738 : 				}
; 1739 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1740 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1741 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1742 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1743 : 					this->_Kfn(_Val)))
; 1744 : 				{	// insert before _Where
; 1745 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1746 : 					return (_Insert_at(false, _Next._Mynode(),
; 1747 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1748 : 				else
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1753 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1754 : 				&& (++(_Next = _Where) == end()
; 1755 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1756 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1757 : 				{	// insert after _Where
; 1758 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1759 : 					return (_Insert_at(false, _Where._Mynode(),
; 1760 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1761 : 				else
; 1762 : 					return (_Insert_at(true, _Next._Mynode(),
; 1763 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1764 : 				}
; 1765 : 			}
; 1766 : 		_CATCH_ALL
; 1767 : 		_Destroy_if_not_nil(_Newnode);
; 1768 : 		_RERAISE;
; 1769 : 		_CATCH_END
; 1770 : 
; 1771 : 		return (_Insert_nohint(_Leftish,
; 1772 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1773 : 		}
; 1774 : 
; 1775 : 	template<class _Valty,
; 1776 : 		class _Nodety>
; 1777 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1778 : 			_Valty&& _Val, _Nodety _Newnode)
; 1779 : 		{	// try to insert node, on left if _Leftish
; 1780 : 		_TRY_BEGIN
; 1781 : 		_Nodeptr _Trynode = _Root();
; 1782 : 		_Nodeptr _Wherenode = this->_Myhead;
; 1783 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1784 : 
; 1785 : 		while (!this->_Isnil(_Trynode))
; 1786 : 			{	// look for leaf to insert before (_Addleft) or after
; 1787 : 			_Wherenode = _Trynode;
; 1788 : 			if (_Leftish)
; 1789 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1790 : 					this->_Key(_Trynode),
; 1791 : 					this->_Kfn(_Val));	// favor left end
; 1792 : 			else
; 1793 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1794 : 					this->_Kfn(_Val),
; 1795 : 					this->_Key(_Trynode));	// favor right end
; 1796 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1797 : 				: this->_Right(_Trynode);
; 1798 : 			}
; 1799 : 
; 1800 : 		if (this->_Multi)
; 1801 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1802 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1803 : 		else
; 1804 : 			{	// insert only if unique
; 1805 : 			iterator _Where = iterator(_Wherenode, this);
; 1806 : 			if (!_Addleft)
; 1807 : 				;	// need to test if insert after is okay
; 1808 : 			else if (_Where == begin())
; 1809 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1810 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1811 : 			else
; 1812 : 				--_Where;	// need to test if insert before is okay
; 1813 : 
; 1814 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1815 : 				this->_Key(_Where._Mynode()),
; 1816 : 				this->_Kfn(_Val)))
; 1817 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1818 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1819 : 			else
; 1820 : 				{	// duplicate, don't insert
; 1821 : 				_Destroy_if_not_nil(_Newnode);
; 1822 : 				return (_Pairib(_Where, false));
; 1823 : 				}
; 1824 : 			}
; 1825 : 		_CATCH_ALL
; 1826 : 		_Destroy_if_not_nil(_Newnode);
; 1827 : 		_RERAISE;
; 1828 : 		_CATCH_END
; 1829 : 		}
; 1830 : 
; 1831 : 	template<class _Valty,
; 1832 : 		class _Nodety>
; 1833 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1834 : 		_Valty&& _Val, _Nodety _Node)
; 1835 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1836 : 		if (max_size() - 1 <= this->_Mysize)
; 1837 : 			{	// tree would get too big, fail
; 1838 : 			_Destroy_if_not_nil(_Node);
; 1839 : 			_Xlength_error("map/set<T> too long");
; 1840 : 			}
; 1841 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1842 : 			_STD forward<_Valty>(_Val));
; 1843 : 
; 1844 : 		++this->_Mysize;
; 1845 : 		_Newnode->_Parent = _Wherenode;
; 1846 : 
; 1847 : 		if (_Wherenode == this->_Myhead)
; 1848 : 			{	// first node in tree, just set head values
; 1849 : 			_Root() = _Newnode;
; 1850 : 			_Lmost() = _Newnode;
; 1851 : 			_Rmost() = _Newnode;
; 1852 : 			}
; 1853 : 		else if (_Addleft)
; 1854 : 			{	// add to left of _Wherenode
; 1855 : 			this->_Left(_Wherenode) = _Newnode;
; 1856 : 			if (_Wherenode == _Lmost())
; 1857 : 				_Lmost() = _Newnode;
; 1858 : 			}
; 1859 : 		else
; 1860 : 			{	// add to right of _Wherenode
; 1861 : 			this->_Right(_Wherenode) = _Newnode;
; 1862 : 			if (_Wherenode == _Rmost())
; 1863 : 				_Rmost() = _Newnode;
; 1864 : 			}
; 1865 : 
; 1866 : 		for (_Nodeptr _Pnode = _Newnode;
; 1867 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1868 : 			if (this->_Parent(_Pnode)
; 1869 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1870 : 				{	// fixup red-red in left subtree
; 1871 : 				_Wherenode =
; 1872 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1873 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1874 : 					{	// parent has two red children, blacken both
; 1875 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1876 : 					this->_Color(_Wherenode) = this->_Black;
; 1877 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1878 : 						= this->_Red;
; 1879 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1880 : 					}
; 1881 : 				else
; 1882 : 					{	// parent has red and black children
; 1883 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1884 : 						{	// rotate right child to left
; 1885 : 						_Pnode = this->_Parent(_Pnode);
; 1886 : 						_Lrotate(_Pnode);
; 1887 : 						}
; 1888 : 					this->_Color(this->_Parent(_Pnode)) =
; 1889 : 						this->_Black;	// propagate red up
; 1890 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1891 : 						this->_Red;
; 1892 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 					}
; 1894 : 				}
; 1895 : 			else
; 1896 : 				{	// fixup red-red in right subtree
; 1897 : 				_Wherenode =
; 1898 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1899 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1900 : 					{	// parent has two red children, blacken both
; 1901 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1902 : 					this->_Color(_Wherenode) = this->_Black;
; 1903 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1904 : 						this->_Red;
; 1905 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1906 : 					}
; 1907 : 				else
; 1908 : 					{	// parent has red and black children
; 1909 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1910 : 						{	// rotate left child to right
; 1911 : 						_Pnode = this->_Parent(_Pnode);
; 1912 : 						_Rrotate(_Pnode);
; 1913 : 						}
; 1914 : 					this->_Color(this->_Parent(_Pnode)) =
; 1915 : 						this->_Black;	// propagate red up
; 1916 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1917 : 						this->_Red;
; 1918 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 					}
; 1920 : 				}
; 1921 : 
; 1922 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1923 : 		return (iterator(_Newnode, this));
; 1924 : 		}
; 1925 : 
; 1926 : 	template<class _Moveit>
; 1927 : 		void _Copy(const _Myt& _Right,
; 1928 : 			_Moveit _Movefl)
; 1929 : 		{	// copy or move entire tree from _Right
; 1930 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead, _Movefl);
; 1931 : 		this->_Mysize = _Right.size();
; 1932 : 		if (!this->_Isnil(_Root()))
; 1933 : 			{	// nonempty tree, look for new smallest and largest
; 1934 : 			_Lmost() = this->_Min(_Root());
; 1935 : 			_Rmost() = this->_Max(_Root());
; 1936 : 			}
; 1937 : 		else
; 1938 : 			{	// empty tree, just tidy head pointers
; 1939 : 			_Lmost() = this->_Myhead;
; 1940 : 			_Rmost() = this->_Myhead;
; 1941 : 			}
; 1942 : 		}
; 1943 : 
; 1944 : 	template<class _Want_to_move,
; 1945 : 		class _Can_move,
; 1946 : 		class _Is_set,
; 1947 : 		class _Dummy>
; 1948 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, _Want_to_move,
; 1949 : 			_Can_move, _Is_set, _Dummy)
; 1950 : 		{	// copy to new node -- nonmovable
; 1951 : 		return (this->_Buynode(this->_Myval(_Rootnode)));
; 1952 : 		}
; 1953 : 
; 1954 : 	template<class _Dummy>
; 1955 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1956 : 			true_type, true_type, _Dummy)
; 1957 : 		{	// move to new node -- movable, set
; 1958 : 		return (this->_Buynode(
; 1959 : 			_STD forward<value_type>(this->_Myval(_Rootnode))));
; 1960 : 		}
; 1961 : 
; 1962 : 	template<class _Dummy>
; 1963 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1964 : 			true_type, false_type, _Dummy)
; 1965 : 		{	// move to new node -- movable, map
; 1966 : 		return (this->_Buynode(
; 1967 : 			_STD forward<key_type>(const_cast<key_type&>(
; 1968 : 				this->_Myval(_Rootnode).first)),
; 1969 : 			_STD forward<typename value_type::second_type>(this->_Myval(
; 1970 : 				_Rootnode).second)));
; 1971 : 		}
; 1972 : 
; 1973 : 	template<class _Moveit>
; 1974 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1975 : 			_Moveit _Movefl)
; 1976 : 		{	// copy entire subtree, recursively
; 1977 : 		_Nodeptr _Newroot = this->_Myhead;	// point at nil node
; 1978 : 
; 1979 : 		if (!this->_Isnil(_Rootnode))
; 1980 : 			{	// copy or move a node, then any subtrees
; 1981 : 			_Nodeptr _Pnode = _Copy_or_move(_Rootnode, _Movefl,
; 1982 : 				typename is_move_constructible<value_type>::type(),
; 1983 : 				typename is_same<key_type, value_type>::type(), 0);
; 1984 : 			_Pnode->_Parent = _Wherenode;
; 1985 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1986 : 			if (this->_Isnil(_Newroot))
; 1987 : 				_Newroot = _Pnode;	// memorize new root
; 1988 : 
; 1989 : 			_TRY_BEGIN
; 1990 : 			this->_Left(_Pnode) =
; 1991 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 1992 : 			this->_Right(_Pnode) =
; 1993 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 1994 : 			_CATCH_ALL
; 1995 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 1996 : 			_RERAISE;
; 1997 : 			_CATCH_END
; 1998 : 			}
; 1999 : 
; 2000 : 		return (_Newroot);	// return newly constructed tree
; 2001 : 		}
; 2002 : 
; 2003 : 	_Paircc _Eqrange(const key_type& _Keyval) const
; 2004 : 		{	// find leftmost node not less than _Keyval
; 2005 : 		_Nodeptr _Pnode = _Root();
; 2006 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2007 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2008 : 
; 2009 : 		while (!this->_Isnil(_Pnode))
; 2010 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2011 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2012 : 			else
; 2013 : 				{	// _Pnode not less than _Keyval, remember it
; 2014 : 				if (this->_Isnil(_Hinode)
; 2015 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2016 : 						this->_Key(_Pnode)))
; 2017 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2018 : 				_Lonode = _Pnode;
; 2019 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2020 : 				}
; 2021 : 
; 2022 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2023 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2024 : 		while (!this->_Isnil(_Pnode))
; 2025 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2026 : 				{	// _Pnode greater than _Keyval, remember it
; 2027 : 				_Hinode = _Pnode;
; 2028 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2029 : 				}
; 2030 : 			else
; 2031 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2032 : 
; 2033 : 		const_iterator _First = const_iterator(_Lonode, this);
; 2034 : 		const_iterator _Last = const_iterator(_Hinode, this);
; 2035 : 		return (_Paircc(_First, _Last));
; 2036 : 		}
; 2037 : 
; 2038 : 	_Pairii _Eqrange(const key_type& _Keyval)
; 2039 : 		{	// find leftmost node not less than _Keyval
; 2040 : 		_Nodeptr _Pnode = _Root();
; 2041 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2042 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2043 : 
; 2044 : 		while (!this->_Isnil(_Pnode))
; 2045 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2046 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2047 : 			else
; 2048 : 				{	// _Pnode not less than _Keyval, remember it
; 2049 : 				if (this->_Isnil(_Hinode)
; 2050 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2051 : 						 this->_Key(_Pnode)))
; 2052 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2053 : 				_Lonode = _Pnode;
; 2054 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2055 : 				}
; 2056 : 
; 2057 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2058 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2059 : 		while (!this->_Isnil(_Pnode))
; 2060 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2061 : 				{	// _Pnode greater than _Keyval, remember it
; 2062 : 				_Hinode = _Pnode;
; 2063 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2064 : 				}
; 2065 : 			else
; 2066 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2067 : 
; 2068 : 		iterator _First = iterator(_Lonode, this);
; 2069 : 		iterator _Last = iterator(_Hinode, this);
; 2070 : 		return (_Pairii(_First, _Last));
; 2071 : 		}
; 2072 : 
; 2073 : 	void _Erase(_Nodeptr _Rootnode)
; 2074 : 		{	// free entire subtree, recursively
; 2075 : 		for (_Nodeptr _Pnode = _Rootnode;

  0000a	8b f3		 mov	 esi, ebx

; 2076 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0000c	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00010	75 1d		 jne	 SHORT $LN7@clear
$LL9@clear:

; 2077 : 			{	// free subtrees, then node
; 2078 : 			_Erase(this->_Right(_Pnode));

  00012	ff 76 08	 push	 DWORD PTR [esi+8]
  00015	8b cf		 mov	 ecx, edi
  00017	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Erase

; 2079 : 			_Pnode = this->_Left(_Pnode);

  0001c	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0001e	53		 push	 ebx
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00024	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2076 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00027	8b de		 mov	 ebx, esi
  00029	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002d	74 e3		 je	 SHORT $LL9@clear
$LN7@clear:

; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]

; 1541 : 		_Root() = this->_Myhead;

  00031	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1542 : 		_Lmost() = this->_Myhead;

  00034	8b 07		 mov	 eax, DWORD PTR [edi]
  00036	89 00		 mov	 DWORD PTR [eax], eax

; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);

  00038	8b 07		 mov	 eax, DWORD PTR [edi]

; 1543 : 		_Rmost() = this->_Myhead;

  0003a	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1544 : 		this->_Mysize = 0;

  0003d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx

; 1545 : 		}

  00047	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase, COMDAT
; _this$ = ecx

; 1511 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  00004	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 1512 : 		if (_First == begin() && _Last == end())

  00007	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  0000e	8b 37		 mov	 esi, DWORD PTR [edi]

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  00010	3b 06		 cmp	 eax, DWORD PTR [esi]

; 1512 : 		if (_First == begin() && _Last == end())

  00012	75 1a		 jne	 SHORT $LN97@erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  00014	3b d6		 cmp	 edx, esi

; 1512 : 		if (_First == begin() && _Last == end())

  00016	75 16		 jne	 SHORT $LN97@erase

; 1513 : 			{	// erase all
; 1514 : 			clear();

  00018	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::clear

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  0001d	8b 07		 mov	 eax, DWORD PTR [edi]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi

; 44   : 		{	// construct with node pointer _Pnode

  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	89 08		 mov	 DWORD PTR [eax], ecx

; 1522 : 			}
; 1523 : 		}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
$LN97@erase:

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  0002e	3b c2		 cmp	 eax, edx

; 1515 : 			return (begin());
; 1516 : 			}
; 1517 : 		else
; 1518 : 			{	// partial erase, one at a time
; 1519 : 			while (_First != _Last)

  00030	74 5d		 je	 SHORT $LN1@erase
$LL2@erase:

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;

  00036	8b c8		 mov	 ecx, eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00038	75 41		 jne	 SHORT $LN59@erase

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  0003a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0003d	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00041	75 19		 jne	 SHORT $LN99@erase

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00043	8b 02		 mov	 eax, DWORD PTR [edx]

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))
; 610  : 			_Pnode = _Right(_Pnode);
; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))

  00045	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00049	75 2d		 jne	 SHORT $LN109@erase
  0004b	eb 03 8d 49 00	 npad	 5
$LL74@erase:

; 617  : 			_Pnode = _Left(_Pnode);

  00050	8b d0		 mov	 edx, eax

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00052	8b 02		 mov	 eax, DWORD PTR [edx]

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))
; 610  : 			_Pnode = _Right(_Pnode);
; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))

  00054	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00058	74 f6		 je	 SHORT $LL74@erase

; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  0005a	eb 1c		 jmp	 SHORT $LN109@erase
$LN99@erase:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0005c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005f	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00063	75 13		 jne	 SHORT $LN109@erase
$LL58@erase:
  00065	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00068	75 0e		 jne	 SHORT $LN109@erase

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0006a	8b c2		 mov	 eax, edx
  0006c	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  0006f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00072	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00076	74 ed		 je	 SHORT $LL58@erase
$LN109@erase:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00078	89 55 0c	 mov	 DWORD PTR __First$[ebp], edx
$LN59@erase:

; 1520 : 				erase(_First++);

  0007b	51		 push	 ecx
  0007c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0007f	8b cf		 mov	 ecx, edi
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  00087	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0008a	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]

; 1515 : 			return (begin());
; 1516 : 			}
; 1517 : 		else
; 1518 : 			{	// partial erase, one at a time
; 1519 : 			while (_First != _Last)

  0008d	75 a3		 jne	 SHORT $LL2@erase
$LN1@erase:

; 44   : 		{	// construct with node pointer _Pnode

  0008f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	89 01		 mov	 DWORD PTR [ecx], eax

; 1521 : 			return (iterator(_First._Ptr, this));

  00096	8b c1		 mov	 eax, ecx

; 1522 : 			}
; 1523 : 		}

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv848 = -8						; size = 4
tv827 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase, COMDAT
; _this$ = ecx

; 1328 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1328 : 		{	// erase element at _Where

  0000b	8b d9		 mov	 ebx, ecx

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00011	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1329 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1330 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1331 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1332 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1333 : 		++_Where;	// save successor iterator for return
; 1334 : 		_Orphan_ptr(*this, _Erasednode);
; 1335 : 
; 1336 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1337 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1338 : 		++_Where;	// save successor iterator for return
; 1339 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1340 : 
; 1341 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1342 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1343 : 		_Nodeptr _Pnode = _Erasednode;
; 1344 : 
; 1345 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0001e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00022	74 05		 je	 SHORT $LN39@erase

; 1346 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00024	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 1347 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00027	eb 1b		 jmp	 SHORT $LN322@erase
$LN39@erase:
  00029	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00030	74 04		 je	 SHORT $LN37@erase

; 1348 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00032	8b fe		 mov	 edi, esi

; 1349 : 		else

  00034	eb 0e		 jmp	 SHORT $LN322@erase
$LN37@erase:

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00036	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]

; 1350 : 			{	// two subtrees, must lift successor node to replace erased
; 1351 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1352 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00039	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]

; 1353 : 			}
; 1354 : 
; 1355 : 		if (_Pnode == _Erasednode)

  0003c	3b d1		 cmp	 edx, ecx
  0003e	0f 85 83 00 00
	00		 jne	 $LN35@erase
$LN322@erase:

; 1356 : 			{	// at most one subtree, relink it
; 1357 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1358 : 			if (!this->_Isnil(_Fixnode))

  00044	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00048	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004b	75 03		 jne	 SHORT $LN34@erase

; 1359 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  0004d	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase:

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1360 : 
; 1361 : 			if (_Root() == _Erasednode)

  00052	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00055	75 05		 jne	 SHORT $LN33@erase

; 1362 : 				_Root() = _Fixnode;	// link down from root

  00057	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1363 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  0005a	eb 0b		 jmp	 SHORT $LN30@erase
$LN33@erase:
  0005c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005e	75 04		 jne	 SHORT $LN31@erase

; 1364 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  00060	89 3e		 mov	 DWORD PTR [esi], edi

; 1365 : 			else

  00062	eb 03		 jmp	 SHORT $LN30@erase
$LN31@erase:

; 1366 : 				this->_Right(_Fixnodeparent) =
; 1367 : 					_Fixnode;	// link down to right

  00064	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase:

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  00067	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1368 : 
; 1369 : 			if (_Lmost() == _Erasednode)

  00069	39 08		 cmp	 DWORD PTR [eax], ecx
  0006b	75 22		 jne	 SHORT $LN29@erase

; 1370 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1371 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1372 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  0006d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00071	74 04		 je	 SHORT $LN42@erase
  00073	8b d6		 mov	 edx, esi
  00075	eb 16		 jmp	 SHORT $LN43@erase
$LN42@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00077	8b 07		 mov	 eax, DWORD PTR [edi]

; 1370 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1371 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1372 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  00079	8b d7		 mov	 edx, edi

; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))

  0007b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007f	75 0a		 jne	 SHORT $LN92@erase
$LL93@erase:

; 617  : 			_Pnode = _Left(_Pnode);

  00081	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00083	8b 02		 mov	 eax, DWORD PTR [edx]

; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))

  00085	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00089	74 f6		 je	 SHORT $LL93@erase
$LN92@erase:
  0008b	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN43@erase:

; 1370 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1371 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1372 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  0008d	89 10		 mov	 DWORD PTR [eax], edx
$LN29@erase:

; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1373 : 
; 1374 : 			if (_Rmost() == _Erasednode)

  00091	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  00094	0f 85 8b 00 00
	00		 jne	 $LN180@erase

; 1375 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1376 : 					? _Fixnodeparent	// largest is parent of erased node
; 1377 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@erase
  000a0	8b d6		 mov	 edx, esi
  000a2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1378 : 			}
; 1379 : 		else

  000a5	e9 7b 00 00 00	 jmp	 $LN180@erase
$LN44@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 1375 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1376 : 					? _Fixnodeparent	// largest is parent of erased node
; 1377 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000ad	8b d7		 mov	 edx, edi

; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN112@erase
$LL113@erase:

; 610  : 			_Pnode = _Right(_Pnode);

  000b5	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  000b7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))

  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL113@erase
$LN112@erase:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1375 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1376 : 					? _Fixnodeparent	// largest is parent of erased node
; 1377 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000c2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1378 : 			}
; 1379 : 		else

  000c5	eb 5e		 jmp	 SHORT $LN180@erase
$LN35@erase:

; 1380 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1381 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1382 : 				_Pnode;	// link left up

  000c7	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1383 : 			this->_Left(_Pnode) =
; 1384 : 				this->_Left(_Erasednode);	// link successor down

  000ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cc	89 02		 mov	 DWORD PTR [edx], eax

; 1385 : 
; 1386 : 			if (_Pnode == this->_Right(_Erasednode))

  000ce	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000d1	75 04		 jne	 SHORT $LN26@erase

; 1387 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000d3	8b f2		 mov	 esi, edx

; 1388 : 			else

  000d5	eb 1a		 jmp	 SHORT $LN25@erase
$LN26@erase:

; 1389 : 				{	// successor further down, link in place of erased
; 1390 : 				_Fixnodeparent =
; 1391 : 					this->_Parent(_Pnode);	// parent is successor's
; 1392 : 				if (!this->_Isnil(_Fixnode))

  000d7	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000db	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  000de	75 03		 jne	 SHORT $LN24@erase

; 1393 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000e0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase:

; 1394 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000e3	89 3e		 mov	 DWORD PTR [esi], edi

; 1395 : 				this->_Right(_Pnode) =
; 1396 : 					this->_Right(_Erasednode);	// link next down

  000e5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000e8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1397 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1398 : 					_Pnode;	// right up

  000eb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ee	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN25@erase:

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  000f1	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1399 : 				}
; 1400 : 
; 1401 : 			if (_Root() == _Erasednode)

  000f3	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  000f6	75 05		 jne	 SHORT $LN23@erase

; 1402 : 				_Root() = _Pnode;	// link down from root

  000f8	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1403 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000fb	eb 0e		 jmp	 SHORT $LN20@erase
$LN23@erase:

; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  000fd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1403 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  00100	39 08		 cmp	 DWORD PTR [eax], ecx
  00102	75 04		 jne	 SHORT $LN21@erase

; 1404 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1405 : 					_Pnode;	// link down to left

  00104	89 10		 mov	 DWORD PTR [eax], edx

; 1406 : 			else

  00106	eb 03		 jmp	 SHORT $LN20@erase
$LN21@erase:

; 1407 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1408 : 					_Pnode;	// link down to right

  00108	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN20@erase:

; 1409 : 
; 1410 : 			this->_Parent(_Pnode) =
; 1411 : 				this->_Parent(_Erasednode);	// link successor up

  0010b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0010e	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00111	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00114	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00117	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011a	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 54   : 	_Right = _Move(_Tmp);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00120	88 48 0c	 mov	 BYTE PTR [eax+12], cl
  00123	8b c8		 mov	 ecx, eax
$LN180@erase:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1416 : 		if (this->_Color(_Erasednode) == this->_Black)

  00125	80 79 0c 01	 cmp	 BYTE PTR [ecx+12], 1
  00129	0f 85 12 01 00
	00		 jne	 $LN19@erase

; 1417 : 			{	// erasing black link, must recolor/rebalance tree
; 1418 : 			for (; _Fixnode != _Root()
; 1419 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1420 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 03 01 00
	00		 je	 $LN16@erase
  0013a	8d 9b 00 00 00
	00		 npad	 6
$LL18@erase:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	0f 85 f0 00 00
	00		 jne	 $LN325@erase

; 1421 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  0014a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014c	3b f9		 cmp	 edi, ecx
  0014e	75 70		 jne	 SHORT $LN15@erase

; 1422 : 					{	// fixup left subtree
; 1423 : 					_Pnode = this->_Right(_Fixnodeparent);

  00150	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1424 : 					if (this->_Color(_Pnode) == this->_Red)

  00153	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00157	75 13		 jne	 SHORT $LN14@erase

; 1425 : 						{	// rotate red up from right subtree
; 1426 : 						this->_Color(_Pnode) = this->_Black;

  00159	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1427 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1428 : 						_Lrotate(_Fixnodeparent);

  0015d	8b cb		 mov	 ecx, ebx
  0015f	56		 push	 esi
  00160	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00164	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lrotate

; 1429 : 						_Pnode = this->_Right(_Fixnodeparent);

  00169	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN14@erase:

; 1430 : 						}
; 1431 : 
; 1432 : 					if (this->_Isnil(_Pnode))

  0016c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00170	0f 85 7d 00 00
	00		 jne	 $LN326@erase

; 1433 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1434 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1435 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00176	8b 01		 mov	 eax, DWORD PTR [ecx]
  00178	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0017c	75 09		 jne	 SHORT $LN11@erase
  0017e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00181	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00185	74 68		 je	 SHORT $LN327@erase
$LN11@erase:

; 1436 : 						{	// redden right subtree with black children
; 1437 : 						this->_Color(_Pnode) = this->_Red;
; 1438 : 						_Fixnode = _Fixnodeparent;
; 1439 : 						}
; 1440 : 					else
; 1441 : 						{	// must rearrange right subtree
; 1442 : 						if (this->_Color(this->_Right(_Pnode))
; 1443 : 							== this->_Black)

  00187	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0018a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0018e	75 15		 jne	 SHORT $LN9@erase

; 1444 : 							{	// rotate red up from left sub-subtree
; 1445 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1446 : 							this->_Color(_Pnode) = this->_Red;
; 1447 : 							_Rrotate(_Pnode);

  00192	51		 push	 ecx
  00193	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00197	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0019b	8b cb		 mov	 ecx, ebx
  0019d	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Rrotate

; 1448 : 							_Pnode = this->_Right(_Fixnodeparent);

  001a2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN9@erase:

; 1449 : 							}
; 1450 : 
; 1451 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  001a5	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001a8	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1452 : 						this->_Color(_Fixnodeparent) = this->_Black;

  001ab	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1453 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  001af	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1454 : 						_Lrotate(_Fixnodeparent);

  001b2	8b cb		 mov	 ecx, ebx
  001b4	56		 push	 esi
  001b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001b9	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lrotate

; 1455 : 						break;	// tree now recolored/rebalanced

  001be	eb 7a		 jmp	 SHORT $LN325@erase
$LN15@erase:

; 1456 : 						}
; 1457 : 					}
; 1458 : 				else
; 1459 : 					{	// fixup right subtree
; 1460 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1461 : 					if (this->_Color(_Pnode) == this->_Red)

  001c0	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001c4	75 12		 jne	 SHORT $LN7@erase

; 1462 : 						{	// rotate red up from left subtree
; 1463 : 						this->_Color(_Pnode) = this->_Black;

  001c6	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1464 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1465 : 						_Rrotate(_Fixnodeparent);

  001ca	8b cb		 mov	 ecx, ebx
  001cc	56		 push	 esi
  001cd	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  001d1	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Rrotate

; 1466 : 						_Pnode = this->_Left(_Fixnodeparent);

  001d6	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN7@erase:

; 1467 : 						}
; 1468 : 
; 1469 : 					if (this->_Isnil(_Pnode))

  001d8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001dc	75 15		 jne	 SHORT $LN326@erase

; 1470 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1471 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1472 : 						this->_Black
; 1473 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001de	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e1	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e5	75 1e		 jne	 SHORT $LN4@erase
  001e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ed	75 16		 jne	 SHORT $LN4@erase
$LN327@erase:

; 1474 : 						{	// redden left subtree with black children
; 1475 : 						this->_Color(_Pnode) = this->_Red;

  001ef	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN326@erase:

; 1417 : 			{	// erasing black link, must recolor/rebalance tree
; 1418 : 			for (; _Fixnode != _Root()
; 1419 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1420 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001f3	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1476 : 						_Fixnode = _Fixnodeparent;

  001f5	8b fe		 mov	 edi, esi
  001f7	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001fa	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001fd	0f 85 3d ff ff
	ff		 jne	 $LL18@erase

; 1417 : 			{	// erasing black link, must recolor/rebalance tree
; 1418 : 			for (; _Fixnode != _Root()
; 1419 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1420 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  00203	eb 35		 jmp	 SHORT $LN325@erase
$LN4@erase:

; 1477 : 						}
; 1478 : 					else
; 1479 : 						{	// must rearrange left subtree
; 1480 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  00205	8b 01		 mov	 eax, DWORD PTR [ecx]
  00207	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0020b	75 15		 jne	 SHORT $LN2@erase

; 1481 : 							{	// rotate red up from right sub-subtree
; 1482 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  0020d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1483 : 							this->_Color(_Pnode) = this->_Red;
; 1484 : 							_Lrotate(_Pnode);

  00210	51		 push	 ecx
  00211	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00215	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00219	8b cb		 mov	 ecx, ebx
  0021b	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Lrotate

; 1485 : 							_Pnode = this->_Left(_Fixnodeparent);

  00220	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN2@erase:

; 1486 : 							}
; 1487 : 
; 1488 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00222	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00225	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1489 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00228	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1490 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  0022c	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1491 : 						_Rrotate(_Fixnodeparent);

  0022e	8b cb		 mov	 ecx, ebx
  00230	56		 push	 esi
  00231	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00235	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Rrotate
$LN325@erase:
  0023a	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN16@erase:

; 1492 : 						break;	// tree now recolored/rebalanced
; 1493 : 						}
; 1494 : 					}
; 1495 : 
; 1496 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0023d	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN19@erase:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00241	51		 push	 ecx
  00242	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1504 : 		if (0 < this->_Mysize)

  00247	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0024a	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 44   : 		{	// construct with node pointer _Pnode

  0024d	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]

; 1504 : 		if (0 < this->_Mysize)

  00250	85 c0		 test	 eax, eax
  00252	74 04		 je	 SHORT $LN324@erase

; 1505 : 			--this->_Mysize;

  00254	48		 dec	 eax
  00255	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN324@erase:

; 44   : 		{	// construct with node pointer _Pnode

  00258	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0025b	5f		 pop	 edi
  0025c	5e		 pop	 esi
  0025d	5b		 pop	 ebx
  0025e	89 08		 mov	 DWORD PTR [eax], ecx

; 1506 : 
; 1507 : 		return (iterator(_Where._Ptr, this));	// return successor iterator
; 1508 : 		}

  00260	8b e5		 mov	 esp, ebp
  00262	5d		 pop	 ebp
  00263	c2 08 00	 ret	 8
?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1277 : 		return (this->_Getal().max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1278 : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::size, COMDAT
; _this$ = ecx

; 1272 : 		return (this->_Mysize);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1273 : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::end, COMDAT
; _this$ = ecx

; 1221 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1222 : 		return (iterator(this->_Myhead, this));
; 1223 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::begin, COMDAT
; _this$ = ecx

; 1211 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 44   : 		{	// construct with node pointer _Pnode

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1212 : 		return (iterator(_Lmost(), this));
; 1213 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >, COMDAT
; _this$ = ecx

; 1191 : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1194 : 
; 1195 : 	_Myt& operator=(const _Myt& _Right)
; 1196 : 		{	// replace contents from _Right
; 1197 : 		if (this != &_Right)
; 1198 : 			{	// different, assign it
; 1199 : 			clear();
; 1200 : 			if (this->_Getal() != _Right._Getal()
; 1201 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1202 : 				this->_Change_alloc(_Right._Getal());
; 1203 : 
; 1204 : 			this->_Setcomp(_Right._Getcomp());
; 1205 : 			_Copy(_Right, false_type());
; 1206 : 			}
; 1207 : 		return (*this);
; 1208 : 		}
; 1209 : 
; 1210 : 	iterator begin() _NOEXCEPT
; 1211 : 		{	// return iterator for beginning of mutable sequence
; 1212 : 		return (iterator(_Lmost(), this));
; 1213 : 		}
; 1214 : 
; 1215 : 	const_iterator begin() const _NOEXCEPT
; 1216 : 		{	// return iterator for beginning of nonmutable sequence
; 1217 : 		return (const_iterator(_Lmost(), this));
; 1218 : 		}
; 1219 : 
; 1220 : 	iterator end() _NOEXCEPT
; 1221 : 		{	// return iterator for end of mutable sequence
; 1222 : 		return (iterator(this->_Myhead, this));
; 1223 : 		}
; 1224 : 
; 1225 : 	const_iterator end() const _NOEXCEPT
; 1226 : 		{	// return iterator for end of nonmutable sequence
; 1227 : 		return (const_iterator(this->_Myhead, this));
; 1228 : 		}
; 1229 : 
; 1230 : 	reverse_iterator rbegin() _NOEXCEPT
; 1231 : 		{	// return iterator for beginning of reversed mutable sequence
; 1232 : 		return (reverse_iterator(end()));
; 1233 : 		}
; 1234 : 
; 1235 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1236 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1237 : 		return (const_reverse_iterator(end()));
; 1238 : 		}
; 1239 : 
; 1240 : 	reverse_iterator rend() _NOEXCEPT
; 1241 : 		{	// return iterator for end of reversed mutable sequence
; 1242 : 		return (reverse_iterator(begin()));
; 1243 : 		}
; 1244 : 
; 1245 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1246 : 		{	// return iterator for end of reversed nonmutable sequence
; 1247 : 		return (const_reverse_iterator(begin()));
; 1248 : 		}
; 1249 : 
; 1250 : 	const_iterator cbegin() const _NOEXCEPT
; 1251 : 		{	// return iterator for beginning of nonmutable sequence
; 1252 : 		return (((const _Myt *)this)->begin());
; 1253 : 		}
; 1254 : 
; 1255 : 	const_iterator cend() const _NOEXCEPT
; 1256 : 		{	// return iterator for end of nonmutable sequence
; 1257 : 		return (((const _Myt *)this)->end());
; 1258 : 		}
; 1259 : 
; 1260 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1261 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1262 : 		return (((const _Myt *)this)->rbegin());
; 1263 : 		}
; 1264 : 
; 1265 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1266 : 		{	// return iterator for end of reversed nonmutable sequence
; 1267 : 		return (((const _Myt *)this)->rend());
; 1268 : 		}
; 1269 : 
; 1270 : 	size_type size() const _NOEXCEPT
; 1271 : 		{	// return length of sequence
; 1272 : 		return (this->_Mysize);
; 1273 : 		}
; 1274 : 
; 1275 : 	size_type max_size() const _NOEXCEPT
; 1276 : 		{	// return maximum possible length of sequence
; 1277 : 		return (this->_Getal().max_size());
; 1278 : 		}
; 1279 : 
; 1280 : 	bool empty() const _NOEXCEPT
; 1281 : 		{	// return true only if sequence is empty
; 1282 : 		return (size() == 0);
; 1283 : 		}
; 1284 : 
; 1285 : 	allocator_type get_allocator() const _NOEXCEPT
; 1286 : 		{	// return allocator object for values
; 1287 : 		return (this->_Getal());
; 1288 : 		}
; 1289 : 
; 1290 : 	key_compare key_comp() const
; 1291 : 		{	// return object for comparing keys
; 1292 : 		return (this->_Getcomp());
; 1293 : 		}
; 1294 : 
; 1295 : 	value_compare value_comp() const
; 1296 : 		{	// return object for comparing values
; 1297 : 		return (value_compare(key_comp()));
; 1298 : 		}
; 1299 : 
; 1300 : 	_Pairib insert(const value_type& _Val)
; 1301 : 		{	// try to insert node with value _Val, favoring right side
; 1302 : 		return (_Insert_nohint(false,
; 1303 : 			_Val, _Nil_obj));
; 1304 : 		}
; 1305 : 
; 1306 : 	iterator insert(const_iterator _Where,
; 1307 : 		const value_type& _Val)
; 1308 : 		{	// try to insert node with value _Val using _Where as a hint
; 1309 : 		return (_Insert_hint(_Where,
; 1310 : 			_Val, _Nil_obj));
; 1311 : 		}
; 1312 : 
; 1313 : 	template<class _Iter>
; 1314 : 		void insert(_Iter _First, _Iter _Last)
; 1315 : 		{	// insert [_First, _Last) one at a time
; 1316 : 		_DEBUG_RANGE(_First, _Last);
; 1317 : 		for (; _First != _Last; ++_First)
; 1318 : 
; 1319 : 			emplace_hint(end(), *_First);
; 1320 : 		}
; 1321 : 
; 1322 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1323 : 		{	// insert initializer_list
; 1324 : 		insert(_Ilist.begin(), _Ilist.end());
; 1325 : 		}
; 1326 : 
; 1327 : 	iterator erase(const_iterator _Where)
; 1328 : 		{	// erase element at _Where
; 1329 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1330 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1331 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1332 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1333 : 		++_Where;	// save successor iterator for return
; 1334 : 		_Orphan_ptr(*this, _Erasednode);
; 1335 : 
; 1336 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1337 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1338 : 		++_Where;	// save successor iterator for return
; 1339 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1340 : 
; 1341 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1342 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1343 : 		_Nodeptr _Pnode = _Erasednode;
; 1344 : 
; 1345 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1346 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1347 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1348 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1349 : 		else
; 1350 : 			{	// two subtrees, must lift successor node to replace erased
; 1351 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1352 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1353 : 			}
; 1354 : 
; 1355 : 		if (_Pnode == _Erasednode)
; 1356 : 			{	// at most one subtree, relink it
; 1357 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1358 : 			if (!this->_Isnil(_Fixnode))
; 1359 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1360 : 
; 1361 : 			if (_Root() == _Erasednode)
; 1362 : 				_Root() = _Fixnode;	// link down from root
; 1363 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1364 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1365 : 			else
; 1366 : 				this->_Right(_Fixnodeparent) =
; 1367 : 					_Fixnode;	// link down to right
; 1368 : 
; 1369 : 			if (_Lmost() == _Erasednode)
; 1370 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1371 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1372 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1373 : 
; 1374 : 			if (_Rmost() == _Erasednode)
; 1375 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1376 : 					? _Fixnodeparent	// largest is parent of erased node
; 1377 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1378 : 			}
; 1379 : 		else
; 1380 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1381 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1382 : 				_Pnode;	// link left up
; 1383 : 			this->_Left(_Pnode) =
; 1384 : 				this->_Left(_Erasednode);	// link successor down
; 1385 : 
; 1386 : 			if (_Pnode == this->_Right(_Erasednode))
; 1387 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1388 : 			else
; 1389 : 				{	// successor further down, link in place of erased
; 1390 : 				_Fixnodeparent =
; 1391 : 					this->_Parent(_Pnode);	// parent is successor's
; 1392 : 				if (!this->_Isnil(_Fixnode))
; 1393 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1394 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1395 : 				this->_Right(_Pnode) =
; 1396 : 					this->_Right(_Erasednode);	// link next down
; 1397 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1398 : 					_Pnode;	// right up
; 1399 : 				}
; 1400 : 
; 1401 : 			if (_Root() == _Erasednode)
; 1402 : 				_Root() = _Pnode;	// link down from root
; 1403 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1404 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1405 : 					_Pnode;	// link down to left
; 1406 : 			else
; 1407 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1408 : 					_Pnode;	// link down to right
; 1409 : 
; 1410 : 			this->_Parent(_Pnode) =
; 1411 : 				this->_Parent(_Erasednode);	// link successor up
; 1412 : 			_STD swap(this->_Color(_Pnode),
; 1413 : 				this->_Color(_Erasednode));	// recolor it
; 1414 : 			}
; 1415 : 
; 1416 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1417 : 			{	// erasing black link, must recolor/rebalance tree
; 1418 : 			for (; _Fixnode != _Root()
; 1419 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1420 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1421 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1422 : 					{	// fixup left subtree
; 1423 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1424 : 					if (this->_Color(_Pnode) == this->_Red)
; 1425 : 						{	// rotate red up from right subtree
; 1426 : 						this->_Color(_Pnode) = this->_Black;
; 1427 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1428 : 						_Lrotate(_Fixnodeparent);
; 1429 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1430 : 						}
; 1431 : 
; 1432 : 					if (this->_Isnil(_Pnode))
; 1433 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1434 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1435 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1436 : 						{	// redden right subtree with black children
; 1437 : 						this->_Color(_Pnode) = this->_Red;
; 1438 : 						_Fixnode = _Fixnodeparent;
; 1439 : 						}
; 1440 : 					else
; 1441 : 						{	// must rearrange right subtree
; 1442 : 						if (this->_Color(this->_Right(_Pnode))
; 1443 : 							== this->_Black)
; 1444 : 							{	// rotate red up from left sub-subtree
; 1445 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1446 : 							this->_Color(_Pnode) = this->_Red;
; 1447 : 							_Rrotate(_Pnode);
; 1448 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1449 : 							}
; 1450 : 
; 1451 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1452 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1453 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1454 : 						_Lrotate(_Fixnodeparent);
; 1455 : 						break;	// tree now recolored/rebalanced
; 1456 : 						}
; 1457 : 					}
; 1458 : 				else
; 1459 : 					{	// fixup right subtree
; 1460 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1461 : 					if (this->_Color(_Pnode) == this->_Red)
; 1462 : 						{	// rotate red up from left subtree
; 1463 : 						this->_Color(_Pnode) = this->_Black;
; 1464 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1465 : 						_Rrotate(_Fixnodeparent);
; 1466 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1467 : 						}
; 1468 : 
; 1469 : 					if (this->_Isnil(_Pnode))
; 1470 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1471 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1472 : 						this->_Black
; 1473 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1474 : 						{	// redden left subtree with black children
; 1475 : 						this->_Color(_Pnode) = this->_Red;
; 1476 : 						_Fixnode = _Fixnodeparent;
; 1477 : 						}
; 1478 : 					else
; 1479 : 						{	// must rearrange left subtree
; 1480 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1481 : 							{	// rotate red up from right sub-subtree
; 1482 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1483 : 							this->_Color(_Pnode) = this->_Red;
; 1484 : 							_Lrotate(_Pnode);
; 1485 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1486 : 							}
; 1487 : 
; 1488 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1489 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1490 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1491 : 						_Rrotate(_Fixnodeparent);
; 1492 : 						break;	// tree now recolored/rebalanced
; 1493 : 						}
; 1494 : 					}
; 1495 : 
; 1496 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1497 : 			}
; 1498 : 
; 1499 : 		this->_Getal().destroy(
; 1500 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1501 : 
; 1502 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1503 : 
; 1504 : 		if (0 < this->_Mysize)
; 1505 : 			--this->_Mysize;
; 1506 : 
; 1507 : 		return (iterator(_Where._Ptr, this));	// return successor iterator
; 1508 : 		}
; 1509 : 
; 1510 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1511 : 		{	// erase [_First, _Last)
; 1512 : 		if (_First == begin() && _Last == end())
; 1513 : 			{	// erase all
; 1514 : 			clear();
; 1515 : 			return (begin());
; 1516 : 			}
; 1517 : 		else
; 1518 : 			{	// partial erase, one at a time
; 1519 : 			while (_First != _Last)
; 1520 : 				erase(_First++);
; 1521 : 			return (iterator(_First._Ptr, this));
; 1522 : 			}
; 1523 : 		}
; 1524 : 
; 1525 : 	size_type erase(const key_type& _Keyval)
; 1526 : 		{	// erase and count all that match _Keyval
; 1527 : 		_Pairii _Where = equal_range(_Keyval);
; 1528 : 		size_type _Num = 0;
; 1529 : 		_Distance(_Where.first, _Where.second, _Num);
; 1530 : 		erase(_Where.first, _Where.second);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	void clear() _NOEXCEPT
; 1535 : 		{	// erase all
; 1536 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1537 : 		this->_Orphan_ptr(*this, 0);
; 1538 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 
; 1540 : 		_Erase(_Root());
; 1541 : 		_Root() = this->_Myhead;
; 1542 : 		_Lmost() = this->_Myhead;
; 1543 : 		_Rmost() = this->_Myhead;
; 1544 : 		this->_Mysize = 0;
; 1545 : 		}
; 1546 : 
; 1547 : 	iterator find(const key_type& _Keyval)
; 1548 : 		{	// find an element in mutable sequence that matches _Keyval
; 1549 : 		iterator _Where = lower_bound(_Keyval);
; 1550 : 		return (_Where == end()
; 1551 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1552 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1553 : 					? end() : _Where);
; 1554 : 		}
; 1555 : 
; 1556 : 	const_iterator find(const key_type& _Keyval) const
; 1557 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1558 : 		const_iterator _Where = lower_bound(_Keyval);
; 1559 : 		return (_Where == end()
; 1560 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1561 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1562 : 					? end() : _Where);
; 1563 : 		}
; 1564 : 
; 1565 : 	size_type count(const key_type& _Keyval) const
; 1566 : 		{	// count all elements that match _Keyval
; 1567 : 		_Paircc _Ans = equal_range(_Keyval);
; 1568 : 		size_type _Num = 0;
; 1569 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1570 : 		return (_Num);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator lower_bound(const key_type& _Keyval)
; 1574 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1575 : 		return (iterator(_Lbound(_Keyval), this));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1579 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1580 : 		return (const_iterator(_Lbound(_Keyval), this));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator upper_bound(const key_type& _Keyval)
; 1584 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1585 : 		return (iterator(_Ubound(_Keyval), this));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1589 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1590 : 		return (const_iterator(_Ubound(_Keyval), this));
; 1591 : 		}
; 1592 : 
; 1593 : 	_Pairii equal_range(const key_type& _Keyval)
; 1594 : 		{	// find range equivalent to _Keyval in mutable tree
; 1595 : 		return (_Eqrange(_Keyval));
; 1596 : 		}
; 1597 : 
; 1598 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1599 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1600 : 		return (_Eqrange(_Keyval));
; 1601 : 		}
; 1602 : 
; 1603 : 	void swap(_Myt& _Right)
; 1604 : 		{	// exchange contents with _Right
; 1605 : 		if (this == &_Right)
; 1606 : 			;	// same object, do nothing
; 1607 : 		else if (this->_Getal() == _Right._Getal())
; 1608 : 			{	// same allocator, swap control information
; 1609 : 			this->_Swap_all(_Right);
; 1610 : 			this->_Swapcomp(_Right._Getcomp());
; 1611 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1612 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1613 : 			}
; 1614 : 
; 1615 : 		else if (_Alty::propagate_on_container_swap::value)
; 1616 : 			{	// swap allocators and control information
; 1617 : 			this->_Swap_alloc(_Right);
; 1618 : 			this->_Swapcomp(_Right._Getcomp());
; 1619 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1620 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1621 : 			}
; 1622 : 
; 1623 : 		else
; 1624 : 			{	// containers are incompatible
; 1625 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1626 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1627 : 
; 1628 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1629 : 			_XSTD terminate();
; 1630 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1631 : 			}
; 1632 : 		}
; 1633 : 
; 1634 : protected:
; 1635 : 	template<class _Valty>
; 1636 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1637 : 		{	// node exists, just return it
; 1638 : 		return (_Node);
; 1639 : 		}
; 1640 : 
; 1641 : 	template<class _Valty>
; 1642 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1643 : 		{	// node doesn't exist, make it
; 1644 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1645 : 		}
; 1646 : 
; 1647 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1648 : 		{	// node exists, destroy it
; 1649 : 		this->_Getal().destroy(
; 1650 : 			_STD addressof(this->_Myval(_Newnode)));
; 1651 : 
; 1652 : 		this->_Getal().deallocate(_Newnode, 1);
; 1653 : 		}
; 1654 : 
; 1655 : 	void _Destroy_if_not_nil(_Nil)
; 1656 : 		{	// node doesn't exist, do nothing
; 1657 : 		}
; 1658 : 
; 1659 : 	template<class _Valty,
; 1660 : 		class _Nodety>
; 1661 : 		iterator _Insert_hint(const_iterator _Where,
; 1662 : 			_Valty&& _Val, _Nodety _Newnode)
; 1663 : 		{	// try to insert node using _Where as a hint
; 1664 : 		const_iterator _Next;
; 1665 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1666 : 
; 1667 : 		_TRY_BEGIN
; 1668 : 
; 1669 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1670 : 		if (_Where._Getcont() != this)
; 1671 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1672 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1673 : 
; 1674 : 		if (size() == 0)
; 1675 : 			return (_Insert_at(true, this->_Myhead,
; 1676 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1677 : 		else if (this->_Multi)
; 1678 : 			{	// insert even if duplicate
; 1679 : 			if (_Where == begin())
; 1680 : 				{	// insert at beginning if before first element
; 1681 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1682 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1683 : 					return (_Insert_at(true, _Where._Mynode(),
; 1684 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1685 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1686 : 				}
; 1687 : 			else if (_Where == end())
; 1688 : 				{	// insert at end if after last element
; 1689 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1690 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1691 : 					return (_Insert_at(false, _Rmost(),
; 1692 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1693 : 				}
; 1694 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1695 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1696 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1697 : 					this->_Kfn(_Val),
; 1698 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1699 : 				{	// insert before _Where
; 1700 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1701 : 					return (_Insert_at(false, _Next._Mynode(),
; 1702 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1703 : 				else
; 1704 : 					return (_Insert_at(true, _Where._Mynode(),
; 1705 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1706 : 				}
; 1707 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1708 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1709 : 				&& (++(_Next = _Where) == end()
; 1710 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1711 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1712 : 				{	// insert after _Where
; 1713 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1714 : 					return (_Insert_at(false, _Where._Mynode(),
; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 				else
; 1717 : 					return (_Insert_at(true, _Next._Mynode(),
; 1718 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1719 : 				}
; 1720 : 			else
; 1721 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1722 : 			}
; 1723 : 		else
; 1724 : 			{	// insert only if unique
; 1725 : 			if (_Where == begin())
; 1726 : 				{	// insert at beginning if before first element
; 1727 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1729 : 					return (_Insert_at(true, _Where._Mynode(),
; 1730 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1731 : 				}
; 1732 : 			else if (_Where == end())
; 1733 : 				{	// insert at end if after last element
; 1734 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1735 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1736 : 					return (_Insert_at(false, _Rmost(),
; 1737 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1738 : 				}
; 1739 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1740 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1741 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1742 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1743 : 					this->_Kfn(_Val)))
; 1744 : 				{	// insert before _Where
; 1745 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1746 : 					return (_Insert_at(false, _Next._Mynode(),
; 1747 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1748 : 				else
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1753 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1754 : 				&& (++(_Next = _Where) == end()
; 1755 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1756 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1757 : 				{	// insert after _Where
; 1758 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1759 : 					return (_Insert_at(false, _Where._Mynode(),
; 1760 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1761 : 				else
; 1762 : 					return (_Insert_at(true, _Next._Mynode(),
; 1763 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1764 : 				}
; 1765 : 			}
; 1766 : 		_CATCH_ALL
; 1767 : 		_Destroy_if_not_nil(_Newnode);
; 1768 : 		_RERAISE;
; 1769 : 		_CATCH_END
; 1770 : 
; 1771 : 		return (_Insert_nohint(_Leftish,
; 1772 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1773 : 		}
; 1774 : 
; 1775 : 	template<class _Valty,
; 1776 : 		class _Nodety>
; 1777 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1778 : 			_Valty&& _Val, _Nodety _Newnode)
; 1779 : 		{	// try to insert node, on left if _Leftish
; 1780 : 		_TRY_BEGIN
; 1781 : 		_Nodeptr _Trynode = _Root();
; 1782 : 		_Nodeptr _Wherenode = this->_Myhead;
; 1783 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1784 : 
; 1785 : 		while (!this->_Isnil(_Trynode))
; 1786 : 			{	// look for leaf to insert before (_Addleft) or after
; 1787 : 			_Wherenode = _Trynode;
; 1788 : 			if (_Leftish)
; 1789 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1790 : 					this->_Key(_Trynode),
; 1791 : 					this->_Kfn(_Val));	// favor left end
; 1792 : 			else
; 1793 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1794 : 					this->_Kfn(_Val),
; 1795 : 					this->_Key(_Trynode));	// favor right end
; 1796 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1797 : 				: this->_Right(_Trynode);
; 1798 : 			}
; 1799 : 
; 1800 : 		if (this->_Multi)
; 1801 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1802 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1803 : 		else
; 1804 : 			{	// insert only if unique
; 1805 : 			iterator _Where = iterator(_Wherenode, this);
; 1806 : 			if (!_Addleft)
; 1807 : 				;	// need to test if insert after is okay
; 1808 : 			else if (_Where == begin())
; 1809 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1810 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1811 : 			else
; 1812 : 				--_Where;	// need to test if insert before is okay
; 1813 : 
; 1814 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1815 : 				this->_Key(_Where._Mynode()),
; 1816 : 				this->_Kfn(_Val)))
; 1817 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1818 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1819 : 			else
; 1820 : 				{	// duplicate, don't insert
; 1821 : 				_Destroy_if_not_nil(_Newnode);
; 1822 : 				return (_Pairib(_Where, false));
; 1823 : 				}
; 1824 : 			}
; 1825 : 		_CATCH_ALL
; 1826 : 		_Destroy_if_not_nil(_Newnode);
; 1827 : 		_RERAISE;
; 1828 : 		_CATCH_END
; 1829 : 		}
; 1830 : 
; 1831 : 	template<class _Valty,
; 1832 : 		class _Nodety>
; 1833 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1834 : 		_Valty&& _Val, _Nodety _Node)
; 1835 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1836 : 		if (max_size() - 1 <= this->_Mysize)
; 1837 : 			{	// tree would get too big, fail
; 1838 : 			_Destroy_if_not_nil(_Node);
; 1839 : 			_Xlength_error("map/set<T> too long");
; 1840 : 			}
; 1841 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1842 : 			_STD forward<_Valty>(_Val));
; 1843 : 
; 1844 : 		++this->_Mysize;
; 1845 : 		_Newnode->_Parent = _Wherenode;
; 1846 : 
; 1847 : 		if (_Wherenode == this->_Myhead)
; 1848 : 			{	// first node in tree, just set head values
; 1849 : 			_Root() = _Newnode;
; 1850 : 			_Lmost() = _Newnode;
; 1851 : 			_Rmost() = _Newnode;
; 1852 : 			}
; 1853 : 		else if (_Addleft)
; 1854 : 			{	// add to left of _Wherenode
; 1855 : 			this->_Left(_Wherenode) = _Newnode;
; 1856 : 			if (_Wherenode == _Lmost())
; 1857 : 				_Lmost() = _Newnode;
; 1858 : 			}
; 1859 : 		else
; 1860 : 			{	// add to right of _Wherenode
; 1861 : 			this->_Right(_Wherenode) = _Newnode;
; 1862 : 			if (_Wherenode == _Rmost())
; 1863 : 				_Rmost() = _Newnode;
; 1864 : 			}
; 1865 : 
; 1866 : 		for (_Nodeptr _Pnode = _Newnode;
; 1867 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1868 : 			if (this->_Parent(_Pnode)
; 1869 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1870 : 				{	// fixup red-red in left subtree
; 1871 : 				_Wherenode =
; 1872 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1873 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1874 : 					{	// parent has two red children, blacken both
; 1875 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1876 : 					this->_Color(_Wherenode) = this->_Black;
; 1877 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1878 : 						= this->_Red;
; 1879 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1880 : 					}
; 1881 : 				else
; 1882 : 					{	// parent has red and black children
; 1883 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1884 : 						{	// rotate right child to left
; 1885 : 						_Pnode = this->_Parent(_Pnode);
; 1886 : 						_Lrotate(_Pnode);
; 1887 : 						}
; 1888 : 					this->_Color(this->_Parent(_Pnode)) =
; 1889 : 						this->_Black;	// propagate red up
; 1890 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1891 : 						this->_Red;
; 1892 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 					}
; 1894 : 				}
; 1895 : 			else
; 1896 : 				{	// fixup red-red in right subtree
; 1897 : 				_Wherenode =
; 1898 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1899 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1900 : 					{	// parent has two red children, blacken both
; 1901 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1902 : 					this->_Color(_Wherenode) = this->_Black;
; 1903 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1904 : 						this->_Red;
; 1905 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1906 : 					}
; 1907 : 				else
; 1908 : 					{	// parent has red and black children
; 1909 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1910 : 						{	// rotate left child to right
; 1911 : 						_Pnode = this->_Parent(_Pnode);
; 1912 : 						_Rrotate(_Pnode);
; 1913 : 						}
; 1914 : 					this->_Color(this->_Parent(_Pnode)) =
; 1915 : 						this->_Black;	// propagate red up
; 1916 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1917 : 						this->_Red;
; 1918 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 					}
; 1920 : 				}
; 1921 : 
; 1922 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1923 : 		return (iterator(_Newnode, this));
; 1924 : 		}
; 1925 : 
; 1926 : 	template<class _Moveit>
; 1927 : 		void _Copy(const _Myt& _Right,
; 1928 : 			_Moveit _Movefl)
; 1929 : 		{	// copy or move entire tree from _Right
; 1930 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead, _Movefl);
; 1931 : 		this->_Mysize = _Right.size();
; 1932 : 		if (!this->_Isnil(_Root()))
; 1933 : 			{	// nonempty tree, look for new smallest and largest
; 1934 : 			_Lmost() = this->_Min(_Root());
; 1935 : 			_Rmost() = this->_Max(_Root());
; 1936 : 			}
; 1937 : 		else
; 1938 : 			{	// empty tree, just tidy head pointers
; 1939 : 			_Lmost() = this->_Myhead;
; 1940 : 			_Rmost() = this->_Myhead;
; 1941 : 			}
; 1942 : 		}
; 1943 : 
; 1944 : 	template<class _Want_to_move,
; 1945 : 		class _Can_move,
; 1946 : 		class _Is_set,
; 1947 : 		class _Dummy>
; 1948 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, _Want_to_move,
; 1949 : 			_Can_move, _Is_set, _Dummy)
; 1950 : 		{	// copy to new node -- nonmovable
; 1951 : 		return (this->_Buynode(this->_Myval(_Rootnode)));
; 1952 : 		}
; 1953 : 
; 1954 : 	template<class _Dummy>
; 1955 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1956 : 			true_type, true_type, _Dummy)
; 1957 : 		{	// move to new node -- movable, set
; 1958 : 		return (this->_Buynode(
; 1959 : 			_STD forward<value_type>(this->_Myval(_Rootnode))));
; 1960 : 		}
; 1961 : 
; 1962 : 	template<class _Dummy>
; 1963 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1964 : 			true_type, false_type, _Dummy)
; 1965 : 		{	// move to new node -- movable, map
; 1966 : 		return (this->_Buynode(
; 1967 : 			_STD forward<key_type>(const_cast<key_type&>(
; 1968 : 				this->_Myval(_Rootnode).first)),
; 1969 : 			_STD forward<typename value_type::second_type>(this->_Myval(
; 1970 : 				_Rootnode).second)));
; 1971 : 		}
; 1972 : 
; 1973 : 	template<class _Moveit>
; 1974 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1975 : 			_Moveit _Movefl)
; 1976 : 		{	// copy entire subtree, recursively
; 1977 : 		_Nodeptr _Newroot = this->_Myhead;	// point at nil node
; 1978 : 
; 1979 : 		if (!this->_Isnil(_Rootnode))
; 1980 : 			{	// copy or move a node, then any subtrees
; 1981 : 			_Nodeptr _Pnode = _Copy_or_move(_Rootnode, _Movefl,
; 1982 : 				typename is_move_constructible<value_type>::type(),
; 1983 : 				typename is_same<key_type, value_type>::type(), 0);
; 1984 : 			_Pnode->_Parent = _Wherenode;
; 1985 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1986 : 			if (this->_Isnil(_Newroot))
; 1987 : 				_Newroot = _Pnode;	// memorize new root
; 1988 : 
; 1989 : 			_TRY_BEGIN
; 1990 : 			this->_Left(_Pnode) =
; 1991 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 1992 : 			this->_Right(_Pnode) =
; 1993 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 1994 : 			_CATCH_ALL
; 1995 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 1996 : 			_RERAISE;
; 1997 : 			_CATCH_END
; 1998 : 			}
; 1999 : 
; 2000 : 		return (_Newroot);	// return newly constructed tree
; 2001 : 		}
; 2002 : 
; 2003 : 	_Paircc _Eqrange(const key_type& _Keyval) const
; 2004 : 		{	// find leftmost node not less than _Keyval
; 2005 : 		_Nodeptr _Pnode = _Root();
; 2006 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2007 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2008 : 
; 2009 : 		while (!this->_Isnil(_Pnode))
; 2010 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2011 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2012 : 			else
; 2013 : 				{	// _Pnode not less than _Keyval, remember it
; 2014 : 				if (this->_Isnil(_Hinode)
; 2015 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2016 : 						this->_Key(_Pnode)))
; 2017 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2018 : 				_Lonode = _Pnode;
; 2019 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2020 : 				}
; 2021 : 
; 2022 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2023 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2024 : 		while (!this->_Isnil(_Pnode))
; 2025 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2026 : 				{	// _Pnode greater than _Keyval, remember it
; 2027 : 				_Hinode = _Pnode;
; 2028 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2029 : 				}
; 2030 : 			else
; 2031 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2032 : 
; 2033 : 		const_iterator _First = const_iterator(_Lonode, this);
; 2034 : 		const_iterator _Last = const_iterator(_Hinode, this);
; 2035 : 		return (_Paircc(_First, _Last));
; 2036 : 		}
; 2037 : 
; 2038 : 	_Pairii _Eqrange(const key_type& _Keyval)
; 2039 : 		{	// find leftmost node not less than _Keyval
; 2040 : 		_Nodeptr _Pnode = _Root();
; 2041 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2042 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2043 : 
; 2044 : 		while (!this->_Isnil(_Pnode))
; 2045 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2046 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2047 : 			else
; 2048 : 				{	// _Pnode not less than _Keyval, remember it
; 2049 : 				if (this->_Isnil(_Hinode)
; 2050 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2051 : 						 this->_Key(_Pnode)))
; 2052 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2053 : 				_Lonode = _Pnode;
; 2054 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2055 : 				}
; 2056 : 
; 2057 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2058 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2059 : 		while (!this->_Isnil(_Pnode))
; 2060 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2061 : 				{	// _Pnode greater than _Keyval, remember it
; 2062 : 				_Hinode = _Pnode;
; 2063 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2064 : 				}
; 2065 : 			else
; 2066 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2067 : 
; 2068 : 		iterator _First = iterator(_Lonode, this);
; 2069 : 		iterator _Last = iterator(_Hinode, this);
; 2070 : 		return (_Pairii(_First, _Last));
; 2071 : 		}
; 2072 : 
; 2073 : 	void _Erase(_Nodeptr _Rootnode)
; 2074 : 		{	// free entire subtree, recursively
; 2075 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2076 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2077 : 			{	// free subtrees, then node
; 2078 : 			_Erase(this->_Right(_Pnode));
; 2079 : 			_Pnode = this->_Left(_Pnode);
; 2080 : 			this->_Getal().destroy(
; 2081 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2082 : 
; 2083 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2084 : 			}
; 2085 : 		}
; 2086 : 
; 2087 : 	_Nodeptr _Lbound(const key_type& _Keyval) const
; 2088 : 		{	// find leftmost node not less than _Keyval
; 2089 : 		_Nodeptr _Pnode = _Root();
; 2090 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2091 : 
; 2092 : 		while (!this->_Isnil(_Pnode))
; 2093 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2094 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2095 : 			else
; 2096 : 				{	// _Pnode not less than _Keyval, remember it
; 2097 : 				_Wherenode = _Pnode;
; 2098 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2099 : 				}
; 2100 : 
; 2101 : 		return (_Wherenode);	// return best remembered candidate
; 2102 : 		}
; 2103 : 
; 2104 : 	_Nodeptr _Lbound(const key_type& _Keyval)
; 2105 : 		{	// find leftmost node not less than _Keyval
; 2106 : 		_Nodeptr _Pnode = _Root();
; 2107 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2108 : 
; 2109 : 		while (!this->_Isnil(_Pnode))
; 2110 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2111 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2112 : 			else
; 2113 : 				{	// _Pnode not less than _Keyval, remember it
; 2114 : 				_Wherenode = _Pnode;
; 2115 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2116 : 				}
; 2117 : 
; 2118 : 		return (_Wherenode);	// return best remembered candidate
; 2119 : 		}
; 2120 : 
; 2121 : 	_Nodeptr& _Lmost() const
; 2122 : 		{	// return leftmost node in nonmutable tree
; 2123 : 		return (this->_Left(this->_Myhead));
; 2124 : 		}
; 2125 : 
; 2126 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2127 : 		{	// promote right node to root of subtree
; 2128 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2129 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2130 : 
; 2131 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2132 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2133 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2134 : 
; 2135 : 		if (_Wherenode == _Root())
; 2136 : 			_Root() = _Pnode;
; 2137 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2138 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2139 : 		else
; 2140 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2141 : 
; 2142 : 		this->_Left(_Pnode) = _Wherenode;
; 2143 : 		this->_Parent(_Wherenode) = _Pnode;
; 2144 : 		}
; 2145 : 
; 2146 : 	_Nodeptr& _Rmost() const
; 2147 : 		{	// return rightmost node in nonmutable tree
; 2148 : 		return (this->_Right(this->_Myhead));
; 2149 : 		}
; 2150 : 
; 2151 : 	_Nodeptr& _Root() const
; 2152 : 		{	// return root of nonmutable tree
; 2153 : 		return (this->_Parent(this->_Myhead));
; 2154 : 		}
; 2155 : 
; 2156 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2157 : 		{	// promote left node to root of subtree
; 2158 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2159 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2160 : 
; 2161 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2162 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2163 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2164 : 
; 2165 : 		if (_Wherenode == _Root())
; 2166 : 			_Root() = _Pnode;
; 2167 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2168 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2169 : 		else
; 2170 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2171 : 
; 2172 : 		this->_Right(_Pnode) = _Wherenode;
; 2173 : 		this->_Parent(_Wherenode) = _Pnode;
; 2174 : 		}
; 2175 : 
; 2176 : 	_Nodeptr _Ubound(const key_type& _Keyval) const
; 2177 : 		{	// find leftmost node greater than _Keyval
; 2178 : 		_Nodeptr _Pnode = _Root();
; 2179 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2180 : 
; 2181 : 		while (!this->_Isnil(_Pnode))
; 2182 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2183 : 				{	// _Pnode greater than _Keyval, remember it
; 2184 : 				_Wherenode = _Pnode;
; 2185 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2186 : 				}
; 2187 : 			else
; 2188 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2189 : 
; 2190 : 		return (_Wherenode);	// return best remembered candidate
; 2191 : 		}
; 2192 : 
; 2193 : 	_Nodeptr _Ubound(const key_type& _Keyval)
; 2194 : 		{	// find leftmost node greater than _Keyval
; 2195 : 		_Nodeptr _Pnode = _Root();
; 2196 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2197 : 
; 2198 : 		while (!this->_Isnil(_Pnode))
; 2199 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2200 : 				{	// _Pnode greater than _Keyval, remember it
; 2201 : 				_Wherenode = _Pnode;
; 2202 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2203 : 				}
; 2204 : 			else
; 2205 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2206 : 
; 2207 : 		return (_Wherenode);	// return best remembered candidate
; 2208 : 		}
; 2209 : 
; 2210 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2211 : 	void _Orphan_ptr(_Myt& _Cont, _Nodeptr _Ptr) const
; 2212 : 		{	// orphan iterators with specified node pointers
; 2213 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2214 : 		const_iterator **_Pnext = (const_iterator **)_Cont._Getpfirst();
; 2215 : 		if (_Pnext != 0)
; 2216 : 			while (*_Pnext != 0)
; 2217 : 				if ((*_Pnext)->_Ptr == this->_Myhead
; 2218 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2219 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2220 : 				else
; 2221 : 					{	// orphan the iterator
; 2222 : 					(*_Pnext)->_Clrcont();
; 2223 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2224 : 					}
; 2225 : 		}
; 2226 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2227 : 
; 2228 : 	void _Tidy()
; 2229 : 		{	// free all storage
; 2230 : 		erase(begin(), end());

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1193 : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >, COMDAT
; _this$ = ecx

; 1066 : 		{	// construct empty tree

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 569  : 		this->_Myhead = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 570  : 		this->_Mysize = 0;

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))
; 610  : 			_Pnode = _Right(_Pnode);
; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))
; 617  : 			_Pnode = _Left(_Pnode);
; 618  : 		return (_Pnode);
; 619  : 		}
; 620  : 
; 621  : 	_Nodeptr _Myhead;	// pointer to head node
; 622  : 	size_type _Mysize;	// number of elements
; 623  : 	};
; 624  : 
; 625  : 		// TEMPLATE CLASS _Tree_alloc
; 626  : template<bool _Al_has_storage,
; 627  : 	class _Alloc_types>
; 628  : 	class _Tree_alloc
; 629  : 		: public _Tree_val<typename _Alloc_types::_Val_types>
; 630  : 	{	// base class for tree to hold allocator with storage
; 631  : public:
; 632  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 633  : 
; 634  : 	typedef _Tree_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 635  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 636  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 637  : 	typedef typename _Alloc_types::_Node _Node;
; 638  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 639  : 
; 640  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 641  : 	_Tree_alloc(const _Alloc& _Al = _Alloc())
; 642  : 		: _Alnod(_Al)
; 643  : 		{	// construct head node, allocator from _Al
; 644  : 		this->_Myhead = _Buyheadnode();
; 645  : 		}
; 646  : 
; 647  : 	~_Tree_alloc() _NOEXCEPT
; 648  : 		{	// destroy head node
; 649  : 		_Freeheadnode(this->_Myhead);
; 650  : 		}
; 651  : 
; 652  : 	void _Change_alloc(const _Alty& _Al)
; 653  : 		{	// replace old allocator
; 654  : 		this->_Alnod = _Al;
; 655  : 		}
; 656  : 
; 657  : 	void _Swap_alloc(_Myt& _Right)
; 658  : 		{	// swap allocators
; 659  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 660  : 		}
; 661  : 
; 662  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 663  : 	_Tree_alloc(const _Alloc& _Al = _Alloc())
; 664  : 		: _Alnod(_Al)
; 665  : 		{	// construct allocators from _Al
; 666  : 		this->_Myhead = _Buyheadnode();
; 667  : 		_TRY_BEGIN
; 668  : 		_Alloc_proxy();
; 669  : 		_CATCH_ALL
; 670  : 		_Freeheadnode(this->_Myhead);
; 671  : 		_RERAISE;
; 672  : 		_CATCH_END
; 673  : 		}
; 674  : 
; 675  : 	~_Tree_alloc() _NOEXCEPT
; 676  : 		{	// destroy proxy
; 677  : 		_Freeheadnode(this->_Myhead);
; 678  : 		_Free_proxy();
; 679  : 		}
; 680  : 
; 681  : 	void _Change_alloc(const _Alty& _Al)
; 682  : 		{	// replace old allocator
; 683  : 		_Free_proxy();
; 684  : 		this->_Alnod = _Al;
; 685  : 		_Alloc_proxy();
; 686  : 		}
; 687  : 
; 688  : 	void _Swap_alloc(_Myt& _Right)
; 689  : 		{	// swap allocators
; 690  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 691  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 692  : 		}
; 693  : 
; 694  : 	void _Alloc_proxy()
; 695  : 		{	// construct proxy from _Alnod
; 696  : 		typename _Alty::template rebind<_Container_proxy>::other
; 697  : 			_Alproxy(this->_Alnod);
; 698  : 		this->_Myproxy = _Alproxy.allocate(1);
; 699  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 700  : 		this->_Myproxy->_Mycont = this;
; 701  : 		}
; 702  : 
; 703  : 	void _Free_proxy()
; 704  : 		{	// destroy proxy
; 705  : 		typename _Alty::template rebind<_Container_proxy>::other
; 706  : 			_Alproxy(this->_Alnod);
; 707  : 		this->_Orphan_all();
; 708  : 		_Alproxy.destroy(this->_Myproxy);
; 709  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 710  : 		this->_Myproxy = 0;
; 711  : 		}
; 712  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 713  : 
; 714  : 	_Nodeptr _Buyheadnode()
; 715  : 		{	// get head node using current allocator
; 716  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 717  : 
; 718  : 		_TRY_BEGIN
; 719  : 		this->_Alnod.construct(
; 720  : 			_STD addressof(this->_Left(_Pnode)), _Pnode);
; 721  : 		this->_Alnod.construct(
; 722  : 			_STD addressof(this->_Parent(_Pnode)), _Pnode);
; 723  : 		this->_Alnod.construct(
; 724  : 			_STD addressof(this->_Right(_Pnode)), _Pnode);
; 725  : 		_CATCH_ALL
; 726  : 		this->_Alnod.deallocate(_Pnode, 1);
; 727  : 		_RERAISE;
; 728  : 		_CATCH_END
; 729  : 
; 730  : 		this->_Color(_Pnode) = this->_Black;
; 731  : 		this->_Isnil(_Pnode) = true;
; 732  : 		return (_Pnode);
; 733  : 		}
; 734  : 
; 735  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 736  : 		{	// free head node using current allocator
; 737  : 		this->_Alnod.destroy(
; 738  : 			_STD addressof(this->_Left(_Pnode)));
; 739  : 		this->_Alnod.destroy(
; 740  : 			_STD addressof(this->_Parent(_Pnode)));
; 741  : 		this->_Alnod.destroy(
; 742  : 			_STD addressof(this->_Right(_Pnode)));
; 743  : 		this->_Alnod.deallocate(_Pnode, 1);
; 744  : 		}
; 745  : 
; 746  : 	_Alty& _Getal()
; 747  : 		{	// get reference to allocator
; 748  : 		return (this->_Alnod);
; 749  : 		}
; 750  : 
; 751  : 	const _Alty& _Getal() const
; 752  : 		{	// get reference to allocator
; 753  : 		return (this->_Alnod);
; 754  : 		}
; 755  : 	};
; 756  : 
; 757  : 		// TEMPLATE CLASS _Tree_alloc
; 758  : template<class _Alloc_types>
; 759  : 	class _Tree_alloc<false, _Alloc_types>
; 760  : 		: public _Tree_val<typename _Alloc_types::_Val_types>
; 761  : 	{	// base class for tree to hold allocator with no storage
; 762  : public:
; 763  : 	typedef _Tree_alloc<false, _Alloc_types> _Myt;
; 764  : 	typedef _Tree_val<typename _Alloc_types::_Val_types> _Mybase;
; 765  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 766  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 767  : 	typedef typename _Alloc_types::_Node _Node;
; 768  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 769  : 
; 770  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 771  : 	_Tree_alloc(const _Alloc& = _Alloc())
; 772  : 		{	// construct head node, allocator from _Al
; 773  : 		this->_Myhead = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 1067 : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??1?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >, COMDAT
; _this$ = ecx

; 573  : 		::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
  00008	c3		 ret	 0
??1?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBE?AU?$less@K@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getcomp@?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBE?AU?$less@K@2@XZ PROC ; std::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1006 : 		{	// get ordering predicate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1007 : 		return (key_compare());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1008 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getcomp@?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QBE?AU?$less@K@2@XZ ENDP ; std::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z PROC ; std::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >, COMDAT
; _this$ = ecx

; 1002 : 		{	// construct ordering predicate

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 569  : 		this->_Myhead = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 570  : 		this->_Mysize = 0;

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))
; 610  : 			_Pnode = _Right(_Pnode);
; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))
; 617  : 			_Pnode = _Left(_Pnode);
; 618  : 		return (_Pnode);
; 619  : 		}
; 620  : 
; 621  : 	_Nodeptr _Myhead;	// pointer to head node
; 622  : 	size_type _Mysize;	// number of elements
; 623  : 	};
; 624  : 
; 625  : 		// TEMPLATE CLASS _Tree_alloc
; 626  : template<bool _Al_has_storage,
; 627  : 	class _Alloc_types>
; 628  : 	class _Tree_alloc
; 629  : 		: public _Tree_val<typename _Alloc_types::_Val_types>
; 630  : 	{	// base class for tree to hold allocator with storage
; 631  : public:
; 632  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 633  : 
; 634  : 	typedef _Tree_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 635  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 636  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 637  : 	typedef typename _Alloc_types::_Node _Node;
; 638  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 639  : 
; 640  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 641  : 	_Tree_alloc(const _Alloc& _Al = _Alloc())
; 642  : 		: _Alnod(_Al)
; 643  : 		{	// construct head node, allocator from _Al
; 644  : 		this->_Myhead = _Buyheadnode();
; 645  : 		}
; 646  : 
; 647  : 	~_Tree_alloc() _NOEXCEPT
; 648  : 		{	// destroy head node
; 649  : 		_Freeheadnode(this->_Myhead);
; 650  : 		}
; 651  : 
; 652  : 	void _Change_alloc(const _Alty& _Al)
; 653  : 		{	// replace old allocator
; 654  : 		this->_Alnod = _Al;
; 655  : 		}
; 656  : 
; 657  : 	void _Swap_alloc(_Myt& _Right)
; 658  : 		{	// swap allocators
; 659  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 660  : 		}
; 661  : 
; 662  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 663  : 	_Tree_alloc(const _Alloc& _Al = _Alloc())
; 664  : 		: _Alnod(_Al)
; 665  : 		{	// construct allocators from _Al
; 666  : 		this->_Myhead = _Buyheadnode();
; 667  : 		_TRY_BEGIN
; 668  : 		_Alloc_proxy();
; 669  : 		_CATCH_ALL
; 670  : 		_Freeheadnode(this->_Myhead);
; 671  : 		_RERAISE;
; 672  : 		_CATCH_END
; 673  : 		}
; 674  : 
; 675  : 	~_Tree_alloc() _NOEXCEPT
; 676  : 		{	// destroy proxy
; 677  : 		_Freeheadnode(this->_Myhead);
; 678  : 		_Free_proxy();
; 679  : 		}
; 680  : 
; 681  : 	void _Change_alloc(const _Alty& _Al)
; 682  : 		{	// replace old allocator
; 683  : 		_Free_proxy();
; 684  : 		this->_Alnod = _Al;
; 685  : 		_Alloc_proxy();
; 686  : 		}
; 687  : 
; 688  : 	void _Swap_alloc(_Myt& _Right)
; 689  : 		{	// swap allocators
; 690  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 691  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 692  : 		}
; 693  : 
; 694  : 	void _Alloc_proxy()
; 695  : 		{	// construct proxy from _Alnod
; 696  : 		typename _Alty::template rebind<_Container_proxy>::other
; 697  : 			_Alproxy(this->_Alnod);
; 698  : 		this->_Myproxy = _Alproxy.allocate(1);
; 699  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 700  : 		this->_Myproxy->_Mycont = this;
; 701  : 		}
; 702  : 
; 703  : 	void _Free_proxy()
; 704  : 		{	// destroy proxy
; 705  : 		typename _Alty::template rebind<_Container_proxy>::other
; 706  : 			_Alproxy(this->_Alnod);
; 707  : 		this->_Orphan_all();
; 708  : 		_Alproxy.destroy(this->_Myproxy);
; 709  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 710  : 		this->_Myproxy = 0;
; 711  : 		}
; 712  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 713  : 
; 714  : 	_Nodeptr _Buyheadnode()
; 715  : 		{	// get head node using current allocator
; 716  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 717  : 
; 718  : 		_TRY_BEGIN
; 719  : 		this->_Alnod.construct(
; 720  : 			_STD addressof(this->_Left(_Pnode)), _Pnode);
; 721  : 		this->_Alnod.construct(
; 722  : 			_STD addressof(this->_Parent(_Pnode)), _Pnode);
; 723  : 		this->_Alnod.construct(
; 724  : 			_STD addressof(this->_Right(_Pnode)), _Pnode);
; 725  : 		_CATCH_ALL
; 726  : 		this->_Alnod.deallocate(_Pnode, 1);
; 727  : 		_RERAISE;
; 728  : 		_CATCH_END
; 729  : 
; 730  : 		this->_Color(_Pnode) = this->_Black;
; 731  : 		this->_Isnil(_Pnode) = true;
; 732  : 		return (_Pnode);
; 733  : 		}
; 734  : 
; 735  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 736  : 		{	// free head node using current allocator
; 737  : 		this->_Alnod.destroy(
; 738  : 			_STD addressof(this->_Left(_Pnode)));
; 739  : 		this->_Alnod.destroy(
; 740  : 			_STD addressof(this->_Parent(_Pnode)));
; 741  : 		this->_Alnod.destroy(
; 742  : 			_STD addressof(this->_Right(_Pnode)));
; 743  : 		this->_Alnod.deallocate(_Pnode, 1);
; 744  : 		}
; 745  : 
; 746  : 	_Alty& _Getal()
; 747  : 		{	// get reference to allocator
; 748  : 		return (this->_Alnod);
; 749  : 		}
; 750  : 
; 751  : 	const _Alty& _Getal() const
; 752  : 		{	// get reference to allocator
; 753  : 		return (this->_Alnod);
; 754  : 		}
; 755  : 	};
; 756  : 
; 757  : 		// TEMPLATE CLASS _Tree_alloc
; 758  : template<class _Alloc_types>
; 759  : 	class _Tree_alloc<false, _Alloc_types>
; 760  : 		: public _Tree_val<typename _Alloc_types::_Val_types>
; 761  : 	{	// base class for tree to hold allocator with no storage
; 762  : public:
; 763  : 	typedef _Tree_alloc<false, _Alloc_types> _Myt;
; 764  : 	typedef _Tree_val<typename _Alloc_types::_Val_types> _Mybase;
; 765  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 766  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 767  : 	typedef typename _Alloc_types::_Node _Node;
; 768  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 769  : 
; 770  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 771  : 	_Tree_alloc(const _Alloc& = _Alloc())
; 772  : 		{	// construct head node, allocator from _Al
; 773  : 		this->_Myhead = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 1003 : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 08 00	 ret	 8
??0?$_Tree_comp@$0A@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z ENDP ; std::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Tree_comp<0,std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??1?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAE@XZ PROC ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::~_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >, COMDAT
; _this$ = ecx

; 573  : 		::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
  00008	c3		 ret	 0
??1?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAE@XZ ENDP ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::~_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Freenode0, COMDAT
; _this$ = ecx

; 912  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 920  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ PROC ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Buynode0, COMDAT
; _this$ = ecx

; 893  : 		{	// allocate a non-value node

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00001	6a 18		 push	 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 893  : 		{	// allocate a non-value node

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	8b d0		 mov	 edx, eax
  0000c	83 c4 04	 add	 esp, 4
  0000f	85 d2		 test	 edx, edx
  00011	74 1e		 je	 SHORT $LN96@Buynode0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00015	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00018	89 02		 mov	 DWORD PTR [edx], eax
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 04		 je	 SHORT $LN61@Buynode0
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	89 01		 mov	 DWORD PTR [ecx], eax
$LN61@Buynode0:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 599  : 		return ((_Nodepref)_Pnode->_Right);

  00022	8d 4a 08	 lea	 ecx, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00025	85 c9		 test	 ecx, ecx
  00027	74 04		 je	 SHORT $LN83@Buynode0
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
$LN83@Buynode0:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 908  : 		return (_Pnode);

  0002d	8b c2		 mov	 eax, edx
  0002f	5e		 pop	 esi

; 909  : 		}

  00030	c3		 ret	 0
$LN96@Buynode0:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00031	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN98@Buynode0:
$LN95@Buynode0:
  00036	cc		 int	 3
?_Buynode0@?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ENDP ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??0?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z PROC ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >, COMDAT
; _this$ = ecx

; 889  : 		{	// construct from allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 569  : 		this->_Myhead = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 570  : 		this->_Mysize = 0;

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))
; 610  : 			_Pnode = _Right(_Pnode);
; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))
; 617  : 			_Pnode = _Left(_Pnode);
; 618  : 		return (_Pnode);
; 619  : 		}
; 620  : 
; 621  : 	_Nodeptr _Myhead;	// pointer to head node
; 622  : 	size_type _Mysize;	// number of elements
; 623  : 	};
; 624  : 
; 625  : 		// TEMPLATE CLASS _Tree_alloc
; 626  : template<bool _Al_has_storage,
; 627  : 	class _Alloc_types>
; 628  : 	class _Tree_alloc
; 629  : 		: public _Tree_val<typename _Alloc_types::_Val_types>
; 630  : 	{	// base class for tree to hold allocator with storage
; 631  : public:
; 632  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 633  : 
; 634  : 	typedef _Tree_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 635  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 636  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 637  : 	typedef typename _Alloc_types::_Node _Node;
; 638  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 639  : 
; 640  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 641  : 	_Tree_alloc(const _Alloc& _Al = _Alloc())
; 642  : 		: _Alnod(_Al)
; 643  : 		{	// construct head node, allocator from _Al
; 644  : 		this->_Myhead = _Buyheadnode();
; 645  : 		}
; 646  : 
; 647  : 	~_Tree_alloc() _NOEXCEPT
; 648  : 		{	// destroy head node
; 649  : 		_Freeheadnode(this->_Myhead);
; 650  : 		}
; 651  : 
; 652  : 	void _Change_alloc(const _Alty& _Al)
; 653  : 		{	// replace old allocator
; 654  : 		this->_Alnod = _Al;
; 655  : 		}
; 656  : 
; 657  : 	void _Swap_alloc(_Myt& _Right)
; 658  : 		{	// swap allocators
; 659  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 660  : 		}
; 661  : 
; 662  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 663  : 	_Tree_alloc(const _Alloc& _Al = _Alloc())
; 664  : 		: _Alnod(_Al)
; 665  : 		{	// construct allocators from _Al
; 666  : 		this->_Myhead = _Buyheadnode();
; 667  : 		_TRY_BEGIN
; 668  : 		_Alloc_proxy();
; 669  : 		_CATCH_ALL
; 670  : 		_Freeheadnode(this->_Myhead);
; 671  : 		_RERAISE;
; 672  : 		_CATCH_END
; 673  : 		}
; 674  : 
; 675  : 	~_Tree_alloc() _NOEXCEPT
; 676  : 		{	// destroy proxy
; 677  : 		_Freeheadnode(this->_Myhead);
; 678  : 		_Free_proxy();
; 679  : 		}
; 680  : 
; 681  : 	void _Change_alloc(const _Alty& _Al)
; 682  : 		{	// replace old allocator
; 683  : 		_Free_proxy();
; 684  : 		this->_Alnod = _Al;
; 685  : 		_Alloc_proxy();
; 686  : 		}
; 687  : 
; 688  : 	void _Swap_alloc(_Myt& _Right)
; 689  : 		{	// swap allocators
; 690  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 691  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 692  : 		}
; 693  : 
; 694  : 	void _Alloc_proxy()
; 695  : 		{	// construct proxy from _Alnod
; 696  : 		typename _Alty::template rebind<_Container_proxy>::other
; 697  : 			_Alproxy(this->_Alnod);
; 698  : 		this->_Myproxy = _Alproxy.allocate(1);
; 699  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 700  : 		this->_Myproxy->_Mycont = this;
; 701  : 		}
; 702  : 
; 703  : 	void _Free_proxy()
; 704  : 		{	// destroy proxy
; 705  : 		typename _Alty::template rebind<_Container_proxy>::other
; 706  : 			_Alproxy(this->_Alnod);
; 707  : 		this->_Orphan_all();
; 708  : 		_Alproxy.destroy(this->_Myproxy);
; 709  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 710  : 		this->_Myproxy = 0;
; 711  : 		}
; 712  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 713  : 
; 714  : 	_Nodeptr _Buyheadnode()
; 715  : 		{	// get head node using current allocator
; 716  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 717  : 
; 718  : 		_TRY_BEGIN
; 719  : 		this->_Alnod.construct(
; 720  : 			_STD addressof(this->_Left(_Pnode)), _Pnode);
; 721  : 		this->_Alnod.construct(
; 722  : 			_STD addressof(this->_Parent(_Pnode)), _Pnode);
; 723  : 		this->_Alnod.construct(
; 724  : 			_STD addressof(this->_Right(_Pnode)), _Pnode);
; 725  : 		_CATCH_ALL
; 726  : 		this->_Alnod.deallocate(_Pnode, 1);
; 727  : 		_RERAISE;
; 728  : 		_CATCH_END
; 729  : 
; 730  : 		this->_Color(_Pnode) = this->_Black;
; 731  : 		this->_Isnil(_Pnode) = true;
; 732  : 		return (_Pnode);
; 733  : 		}
; 734  : 
; 735  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 736  : 		{	// free head node using current allocator
; 737  : 		this->_Alnod.destroy(
; 738  : 			_STD addressof(this->_Left(_Pnode)));
; 739  : 		this->_Alnod.destroy(
; 740  : 			_STD addressof(this->_Parent(_Pnode)));
; 741  : 		this->_Alnod.destroy(
; 742  : 			_STD addressof(this->_Right(_Pnode)));
; 743  : 		this->_Alnod.deallocate(_Pnode, 1);
; 744  : 		}
; 745  : 
; 746  : 	_Alty& _Getal()
; 747  : 		{	// get reference to allocator
; 748  : 		return (this->_Alnod);
; 749  : 		}
; 750  : 
; 751  : 	const _Alty& _Getal() const
; 752  : 		{	// get reference to allocator
; 753  : 		return (this->_Alnod);
; 754  : 		}
; 755  : 	};
; 756  : 
; 757  : 		// TEMPLATE CLASS _Tree_alloc
; 758  : template<class _Alloc_types>
; 759  : 	class _Tree_alloc<false, _Alloc_types>
; 760  : 		: public _Tree_val<typename _Alloc_types::_Val_types>
; 761  : 	{	// base class for tree to hold allocator with no storage
; 762  : public:
; 763  : 	typedef _Tree_alloc<false, _Alloc_types> _Myt;
; 764  : 	typedef _Tree_val<typename _Alloc_types::_Val_types> _Mybase;
; 765  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 766  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 767  : 	typedef typename _Alloc_types::_Node _Node;
; 768  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 769  : 
; 770  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 771  : 	_Tree_alloc(const _Alloc& = _Alloc())
; 772  : 		{	// construct head node, allocator from _Al
; 773  : 		this->_Myhead = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 890  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??0?$_Tree_buy@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z ENDP ; std::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >::_Tree_buy<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Getal, COMDAT
; _this$ = ecx

; 868  : 		{	// get allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 869  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 870  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 857  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 865  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ PROC ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Buyheadnode, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4
  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 00 00 00
	00		 je	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00012	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00015	89 00		 mov	 DWORD PTR [eax], eax
  00017	85 c9		 test	 ecx, ecx
  00019	74 02		 je	 SHORT $LN61@Buyheadnod
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
$LN61@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 599  : 		return ((_Nodepref)_Pnode->_Right);

  0001d	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00020	85 c9		 test	 ecx, ecx
  00022	74 02		 je	 SHORT $LN83@Buyheadnod
  00024	89 01		 mov	 DWORD PTR [ecx], eax
$LN83@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 851  : 		this->_Color(_Pnode) = this->_Black;

  00026	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 852  : 		this->_Isnil(_Pnode) = true;
; 853  : 		return (_Pnode);
; 854  : 		}

  0002c	c3		 ret	 0
?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??1?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::~_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 779  : 		}

  00008	c3		 ret	 0
??1?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::~_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??0?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z PROC ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >, COMDAT
; _this$ = ecx

; 771  : 	_Tree_alloc(const _Alloc& = _Alloc())

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 569  : 		this->_Myhead = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 570  : 		this->_Mysize = 0;

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 772  : 		{	// construct head node, allocator from _Al
; 773  : 		this->_Myhead = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 774  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??0?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@1@@Z ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Min, COMDAT

; 615  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 584  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 616  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN15@Min
  0000e	8b ff		 npad	 2
$LL2@Min:

; 617  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 584  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 616  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN15@Min:

; 618  : 		return (_Pnode);

  0001a	8b c1		 mov	 eax, ecx

; 619  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Max, COMDAT

; 608  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 584  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 609  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN15@Max
  0000f	90		 npad	 1
$LL2@Max:

; 610  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 584  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 609  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN15@Max:

; 611  : 		return (_Pnode);

  0001b	8b c1		 mov	 eax, ecx

; 612  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAU?$pair@$$CBKPAVCLight@@@2@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAU?$pair@$$CBKPAVCLight@@@2@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Myval, COMDAT

; 603  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 604  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 605  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAU?$pair@$$CBKPAVCLight@@@2@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Right, COMDAT

; 598  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 600  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Parent, COMDAT

; 593  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 595  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Left, COMDAT

; 588  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 589  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 590  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Isnil, COMDAT

; 583  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 584  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 585  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Color, COMDAT

; 578  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 579  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 580  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >, COMDAT
; _this$ = ecx

; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 570  : 		this->_Mysize = 0;
; 571  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1c		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00011	77 1b		 ja	 SHORT $LN14@allocate
  00013	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00016	c1 e0 03	 shl	 eax, 3
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00028	8b c1		 mov	 eax, ecx

; 848  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00033	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1c		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00011	77 1b		 ja	 SHORT $LN11@allocate
  00013	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00016	c1 e0 03	 shl	 eax, 3
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00028	8b c1		 mov	 eax, ecx

; 579  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00033	cc		 int	 3
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<unsigned long const ,CLight *> >::allocator<std::pair<unsigned long const ,CLight *> >, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<unsigned long const ,CLight *> >::allocator<std::pair<unsigned long const ,CLight *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
;	COMDAT ??R?$less@K@std@@QBE_NABK0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@K@std@@QBE_NABK0@Z PROC			; std::less<unsigned long>::operator(), COMDAT
; _this$ = ecx

; 192  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 193  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	1b c0		 sbb	 eax, eax
  0000f	f7 d8		 neg	 eax

; 194  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??R?$less@K@std@@QBE_NABK0@Z ENDP			; std::less<unsigned long>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1827 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1362 : 		return (this->_Mysize == 0);

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	85 c0		 test	 eax, eax

; 1828 : 		_Alpty _Almap(this->_Getal());
; 1829 : 		while (!empty())

  00008	74 13		 je	 SHORT $LN5@Tidy
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL6@Tidy:

; 1363 : 		}
; 1364 : 
; 1365 : 	allocator_type get_allocator() const _NOEXCEPT
; 1366 : 		{	// return allocator object for values
; 1367 : 		return (this->_Getal());
; 1368 : 		}
; 1369 : 
; 1370 : 	const_reference at(size_type _Pos) const
; 1371 : 		{	// subscript nonmutable sequence with checking
; 1372 : 		if (this->_Mysize <= _Pos)
; 1373 : 			_Xran();
; 1374 : 		return (*(begin() + _Pos));
; 1375 : 		}
; 1376 : 
; 1377 : 	reference at(size_type _Pos)
; 1378 : 		{	// subscript mutable sequence with checking
; 1379 : 		if (this->_Mysize <= _Pos)
; 1380 : 			_Xran();
; 1381 : 		return (*(begin() + _Pos));
; 1382 : 		}
; 1383 : 
; 1384 : 	const_reference operator[](size_type _Pos) const
; 1385 : 		{	// subscript nonmutable sequence
; 1386 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1387 : 		if (this->_Mysize <= _Pos)
; 1388 : 			_DEBUG_ERROR("deque subscript out of range");
; 1389 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1390 : 
; 1391 : 		return (*(begin() + _Pos));
; 1392 : 		}
; 1393 : 
; 1394 : 	reference operator[](size_type _Pos)
; 1395 : 		{	// subscript mutable sequence
; 1396 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1397 : 		if (this->_Mysize <= _Pos)
; 1398 : 			_DEBUG_ERROR("deque subscript out of range");
; 1399 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1400 : 
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	reference front()
; 1405 : 		{	// return first element of mutable sequence
; 1406 : 		return (*begin());
; 1407 : 		}
; 1408 : 
; 1409 : 	const_reference front() const
; 1410 : 		{	// return first element of nonmutable sequence
; 1411 : 		return (*begin());
; 1412 : 		}
; 1413 : 
; 1414 : 	reference back()
; 1415 : 		{	// return last element of mutable sequence
; 1416 : 		return (*(end() - 1));
; 1417 : 		}
; 1418 : 
; 1419 : 	const_reference back() const
; 1420 : 		{	// return last element of nonmutable sequence
; 1421 : 		return (*(end() - 1));
; 1422 : 		}
; 1423 : 
; 1424 : 	void push_front(const value_type& _Val)
; 1425 : 		{	// insert element at beginning
; 1426 : 		this->_Orphan_all();
; 1427 : 		_PUSH_FRONT_BEGIN;
; 1428 : 		this->_Getal().construct(
; 1429 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1430 : 		_PUSH_FRONT_END;
; 1431 : 		}
; 1432 : 
; 1433 : 	void pop_front()
; 1434 : 		{	// erase element at beginning
; 1435 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1436 : 		if (empty())
; 1437 : 			_DEBUG_ERROR("deque empty before pop");
; 1438 : 		else
; 1439 : 			{	// something to erase, do it
; 1440 : 			_Orphan_off(this->_Myoff);
; 1441 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1442 : 			this->_Getal().destroy(
; 1443 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1444 : 			if (--this->_Mysize == 0)
; 1445 : 				this->_Myoff = 0;
; 1446 : 			else
; 1447 : 				++this->_Myoff;
; 1448 : 			}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 		size_type _Block = this->_Getblock(this->_Myoff);
; 1452 : 		this->_Getal().destroy(
; 1453 : 			this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1454 : 		if (--this->_Mysize == 0)
; 1455 : 			this->_Myoff = 0;
; 1456 : 		else
; 1457 : 			++this->_Myoff;
; 1458 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1459 : 		}
; 1460 : 
; 1461 : 	void push_back(const value_type& _Val)
; 1462 : 		{	// insert element at end
; 1463 : 		this->_Orphan_all();
; 1464 : 		_PUSH_BACK_BEGIN;
; 1465 : 		this->_Getal().construct(
; 1466 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1467 : 		_PUSH_BACK_END;
; 1468 : 		}
; 1469 : 
; 1470 : 	void pop_back()
; 1471 : 		{	// erase element at end
; 1472 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1473 : 		if (empty())
; 1474 : 			_DEBUG_ERROR("deque empty before pop");
; 1475 : 		else
; 1476 : 			{	// something to erase, do it
; 1477 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1478 : 			_Orphan_off(_Newoff);
; 1479 : 			size_type _Block = this->_Getblock(_Newoff);
; 1480 : 			this->_Getal().destroy(
; 1481 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1482 : 			if (--this->_Mysize == 0)
; 1483 : 				this->_Myoff = 0;
; 1484 : 			}
; 1485 : 
; 1486 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1487 : 		size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1488 : 		size_type _Block = this->_Getblock(_Newoff);
; 1489 : 		this->_Getal().destroy(
; 1490 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1491 : 		if (--this->_Mysize == 0)

  00010	48		 dec	 eax
  00011	75 03		 jne	 SHORT $LN13@Tidy

; 1492 : 			this->_Myoff = 0;

  00013	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN13@Tidy:

; 1362 : 		return (this->_Mysize == 0);

  00016	85 c0		 test	 eax, eax

; 1828 : 		_Alpty _Almap(this->_Getal());
; 1829 : 		while (!empty())

  00018	75 f6		 jne	 SHORT $LL6@Tidy
  0001a	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN5@Tidy:
  0001d	57		 push	 edi

; 1831 : 		for (size_type _Block = this->_Mapsize; 0 < _Block; )

  0001e	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00021	85 ff		 test	 edi, edi
  00023	74 18		 je	 SHORT $LN3@Tidy
$LL4@Tidy:

; 1832 : 			{	// free storage for a block and destroy pointer
; 1833 : 			if (this->_Map[--_Block] != pointer())

  00025	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00028	4f		 dec	 edi
  00029	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0002c	85 c0		 test	 eax, eax
  0002e	74 09		 je	 SHORT $LN2@Tidy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00036	83 c4 04	 add	 esp, 4
$LN2@Tidy:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1831 : 		for (size_type _Block = this->_Mapsize; 0 < _Block; )

  00039	85 ff		 test	 edi, edi
  0003b	75 e8		 jne	 SHORT $LL4@Tidy
$LN3@Tidy:

; 1834 : 				{	// free block and destroy its pointer
; 1835 : 				this->_Getal().deallocate(this->_Map[_Block], _DEQUESIZ);
; 1836 : 				this->_Getal().destroy(&this->_Map[_Block]);
; 1837 : 				}
; 1838 : 			}
; 1839 : 
; 1840 : 		if (this->_Map != _Mapptr())

  0003d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00040	5f		 pop	 edi
  00041	85 c0		 test	 eax, eax
  00043	74 09		 je	 SHORT $LN38@Tidy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004b	83 c4 04	 add	 esp, 4
$LN38@Tidy:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1844 : 		this->_Map = _Mapptr();

  0004e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00055	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0005c	5e		 pop	 esi

; 1845 : 		}

  0005d	c3		 ret	 0
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?_Growmap@?$deque@KV?$allocator@K@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Myptr$1$ = -12					; size = 4
__Count$1$ = -8						; size = 4
__Count$1$ = -8						; size = 4
__Myboff$1$ = -4					; size = 4
__Ptr$1$ = 8						; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@KV?$allocator@K@std@@@std@@IAEXI@Z PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap, COMDAT
; _this$ = ecx

; 1772 : 		{	// grow map by at least _Count pointers, _Mapsize a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 1773 : 		static_assert(1 < _DEQUEMAPSIZ,
; 1774 : 			"The _Xlen() test should always be performed.");
; 1775 : 
; 1776 : 		typedef typename _Alpty::pointer _Blockptr;
; 1777 : 		_Alpty _Almap(this->_Getal());
; 1778 : 		size_type _Newsize = 0 < this->_Mapsize ? this->_Mapsize : 1;

  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000c	56		 push	 esi
  0000d	be 01 00 00 00	 mov	 esi, 1
  00012	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
  00015	57		 push	 edi
  00016	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00019	85 d2		 test	 edx, edx
  0001b	0f 45 f2	 cmovne	 esi, edx
  0001e	8b ff		 npad	 2
$LL7@Growmap:

; 1779 : 		while (_Newsize - this->_Mapsize < _Count || _Newsize < _DEQUEMAPSIZ)

  00020	8b c6		 mov	 eax, esi
  00022	2b c2		 sub	 eax, edx
  00024	3b c1		 cmp	 eax, ecx
  00026	72 05		 jb	 SHORT $LN5@Growmap
  00028	83 fe 08	 cmp	 esi, 8
  0002b	73 13		 jae	 SHORT $LN6@Growmap
$LN5@Growmap:

; 1780 : 			{	// scale _Newsize to 2^N >= _Mapsize + _Count
; 1781 : 			if (max_size() / _DEQUESIZ - _Newsize < _Newsize)

  0002d	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH
  00032	2b c6		 sub	 eax, esi
  00034	3b c6		 cmp	 eax, esi
  00036	0f 82 38 01 00
	00		 jb	 $LN151@Growmap

; 1782 : 				_Xlen();	// result too long
; 1783 : 			_Newsize *= 2;

  0003c	03 f6		 add	 esi, esi

; 1784 : 			}

  0003e	eb e0		 jmp	 SHORT $LL7@Growmap
$LN6@Growmap:

; 1785 : 		_Count = _Newsize - this->_Mapsize;
; 1786 : 
; 1787 : 		size_type _Myboff = this->_Myoff / _DEQUESIZ;

  00040	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]
  00043	2b f2		 sub	 esi, edx
  00045	c1 ef 02	 shr	 edi, 2
  00048	89 7d fc	 mov	 DWORD PTR __Myboff$1$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 23   : 	void *_Ptr = 0;

  0004b	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Ptr$1$[ebp], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1788 : 		_Mapptr _Newmap = _Almap.allocate(this->_Mapsize + _Count);

  00052	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00055	85 c0		 test	 eax, eax
  00057	74 22		 je	 SHORT $LN32@Growmap

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00059	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0005e	0f 87 0b 01 00
	00		 ja	 $LN168@Growmap
  00064	c1 e0 02	 shl	 eax, 2
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006d	83 c4 04	 add	 esp, 4
  00070	89 45 08	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00073	85 c0		 test	 eax, eax
  00075	0f 84 f4 00 00
	00		 je	 $LN168@Growmap
$LN32@Growmap:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1793 : 			_Myptr, _Almap);	// copy initial to end

  0007b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0007e	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  00085	89 45 f8	 mov	 DWORD PTR __Count$1$[ebp], eax
  00088	8d 14 08	 lea	 edx, DWORD PTR [eax+ecx]
  0008b	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0008e	c1 e0 02	 shl	 eax, 2
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00091	2b c2		 sub	 eax, edx
  00093	03 c1		 add	 eax, ecx
  00095	c1 f8 02	 sar	 eax, 2

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00098	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1789 : 		_Mapptr _Myptr = _Newmap + _Myboff;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR __Count$1$[ebp]
  000a2	03 45 08	 add	 eax, DWORD PTR __Ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000a5	57		 push	 edi
  000a6	52		 push	 edx
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1798 : 				_Myptr, _Almap);	// copy rest of old

  000ad	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b3	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1794 : 		if (_Myboff <= _Count)

  000b6	8b 7d fc	 mov	 edi, DWORD PTR __Myboff$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000b9	89 55 f4	 mov	 DWORD PTR __Myptr$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1794 : 		if (_Myboff <= _Count)

  000bc	3b fe		 cmp	 edi, esi
  000be	77 45		 ja	 SHORT $LN3@Growmap
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  000c0	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1800 : 				_Almap);	// clear suffix of new

  000c7	8b d6		 mov	 edx, esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  000c9	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1800 : 				_Almap);	// clear suffix of new

  000cc	2b d7		 sub	 edx, edi
  000ce	89 55 f8	 mov	 DWORD PTR __Count$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000d1	8d 1c 85 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*4]
  000d8	53		 push	 ebx
  000d9	51		 push	 ecx
  000da	ff 75 f4	 push	 DWORD PTR __Myptr$1$[ebp]
  000dd	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000e2	8b 4d f8	 mov	 ecx, DWORD PTR __Count$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e8	8d 14 03	 lea	 edx, DWORD PTR [ebx+eax]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000eb	85 c9		 test	 ecx, ecx
  000ed	74 09		 je	 SHORT $LN81@Growmap
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1798 : 				_Myptr, _Almap);	// copy rest of old

  000ef	33 c0		 xor	 eax, eax
  000f1	8b fa		 mov	 edi, edx
  000f3	f3 ab		 rep stosd
  000f5	8b 7d fc	 mov	 edi, DWORD PTR __Myboff$1$[ebp]
$LN81@Growmap:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  000f8	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000fb	85 ff		 test	 edi, edi
  000fd	74 4e		 je	 SHORT $LN139@Growmap
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  000ff	8b cf		 mov	 ecx, edi
  00101	8b fb		 mov	 edi, ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1804 : 		else

  00103	eb 44		 jmp	 SHORT $LN167@Growmap
$LN3@Growmap:

; 1808 : 				_Myptr, _Almap);	// copy more old

  00105	8d 3c b5 00 00
	00 00		 lea	 edi, DWORD PTR [esi*4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0010c	8b c7		 mov	 eax, edi
  0010e	83 e0 fc	 and	 eax, -4			; fffffffcH
  00111	50		 push	 eax
  00112	51		 push	 ecx
  00113	52		 push	 edx
  00114	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1811 : 				_Newmap, _Almap);	// copy rest of old

  00119	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  0011c	8b 55 f8	 mov	 edx, DWORD PTR __Count$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1811 : 				_Newmap, _Almap);	// copy rest of old

  0011f	8d 0c 07	 lea	 ecx, DWORD PTR [edi+eax]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00122	2b d1		 sub	 edx, ecx
  00124	03 d0		 add	 edx, eax
  00126	c1 fa 02	 sar	 edx, 2

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00129	8d 1c 95 00 00
	00 00		 lea	 ebx, DWORD PTR [edx*4]
  00130	53		 push	 ebx
  00131	51		 push	 ecx
  00132	ff 75 08	 push	 DWORD PTR __Ptr$1$[ebp]
  00135	e8 00 00 00 00	 call	 _memmove
  0013a	83 c4 18	 add	 esp, 24			; 00000018H
  0013d	8d 3c 03	 lea	 edi, DWORD PTR [ebx+eax]
  00140	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00143	85 f6		 test	 esi, esi
  00145	74 06		 je	 SHORT $LN139@Growmap
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1808 : 				_Myptr, _Almap);	// copy more old

  00147	8b ce		 mov	 ecx, esi
$LN167@Growmap:
  00149	33 c0		 xor	 eax, eax
  0014b	f3 ab		 rep stosd
$LN139@Growmap:

; 1812 : 			_Uninitialized_default_fill_n(_Myptr, _Count,
; 1813 : 				_Almap);	// clear rest to initial block
; 1814 : 			}
; 1815 : 
; 1816 : 		_Destroy_range(this->_Map + _Myboff, this->_Map + this->_Mapsize,
; 1817 : 			_Almap);
; 1818 : 		if (this->_Map != _Mapptr())

  0014d	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
  00150	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00153	85 c0		 test	 eax, eax
  00155	74 09		 je	 SHORT $LN144@Growmap
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0015d	83 c4 04	 add	 esp, 4
$LN144@Growmap:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1823 : 		this->_Mapsize += _Count;

  00160	01 77 08	 add	 DWORD PTR [edi+8], esi
  00163	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx

; 1824 : 		}

  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c2 04 00	 ret	 4
$LN168@Growmap:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0016f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN170@Growmap:
$LN151@Growmap:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1763 : 		_Xlength_error("deque<T> too long");

  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  00179	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN171@Growmap:
$LN166@Growmap:
  0017e	cc		 int	 3
?_Growmap@?$deque@KV?$allocator@K@std@@@std@@IAEXI@Z ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?_Xlen@?$deque@KV?$allocator@K@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@KV?$allocator@K@std@@@std@@IBEXXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen, COMDAT
; _this$ = ecx

; 1763 : 		_Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@KV?$allocator@K@std@@@std@@IBEXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?clear@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::clear, COMDAT
; _this$ = ecx

; 1643 : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
?clear@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_back, COMDAT
; _this$ = ecx

; 1472 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1473 : 		if (empty())
; 1474 : 			_DEBUG_ERROR("deque empty before pop");
; 1475 : 		else
; 1476 : 			{	// something to erase, do it
; 1477 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1478 : 			_Orphan_off(_Newoff);
; 1479 : 			size_type _Block = this->_Getblock(_Newoff);
; 1480 : 			this->_Getal().destroy(
; 1481 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1482 : 			if (--this->_Mysize == 0)
; 1483 : 				this->_Myoff = 0;
; 1484 : 			}
; 1485 : 
; 1486 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1487 : 		size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1488 : 		size_type _Block = this->_Getblock(_Newoff);
; 1489 : 		this->_Getal().destroy(
; 1490 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1491 : 		if (--this->_Mysize == 0)

  00000	ff 49 10	 dec	 DWORD PTR [ecx+16]
  00003	75 07		 jne	 SHORT $LN1@pop_back

; 1492 : 			this->_Myoff = 0;

  00005	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN1@pop_back:

; 1493 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1494 : 		}

  0000c	c3		 ret	 0
?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?push_back@?$deque@KV?$allocator@K@std@@@std@@QAEXABK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$deque@KV?$allocator@K@std@@@std@@QAEXABK@Z PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::push_back, COMDAT
; _this$ = ecx

; 1462 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1464 : 		_PUSH_BACK_BEGIN;

  00006	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00009	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000c	03 c1		 add	 eax, ecx
  0000e	a8 03		 test	 al, 3
  00010	75 14		 jne	 SHORT $LN2@push_back
  00012	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00015	c1 e8 02	 shr	 eax, 2
  00018	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  0001b	77 09		 ja	 SHORT $LN2@push_back
  0001d	6a 01		 push	 1
  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 ?_Growmap@?$deque@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
$LN2@push_back:
  00026	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00029	53		 push	 ebx
  0002a	57		 push	 edi
  0002b	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0002e	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00035	49		 dec	 ecx

; 1464 : 		_PUSH_BACK_BEGIN;

  00036	21 46 0c	 and	 DWORD PTR [esi+12], eax
  00039	03 7e 0c	 add	 edi, DWORD PTR [esi+12]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003c	8b c7		 mov	 eax, edi
  0003e	c1 e8 02	 shr	 eax, 2
  00041	23 c8		 and	 ecx, eax

; 1464 : 		_PUSH_BACK_BEGIN;

  00043	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00046	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]
  0004d	83 3c 03 00	 cmp	 DWORD PTR [ebx+eax], 0
  00051	75 16		 jne	 SHORT $LN1@push_back
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00053	6a 10		 push	 16			; 00000010H
  00055	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005a	8b c8		 mov	 ecx, eax
  0005c	83 c4 04	 add	 esp, 4
  0005f	85 c9		 test	 ecx, ecx
  00061	74 27		 je	 SHORT $LN41@push_back
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1464 : 		_PUSH_BACK_BEGIN;

  00063	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00066	89 0c 03	 mov	 DWORD PTR [ebx+eax], ecx
$LN1@push_back:

; 1465 : 		this->_Getal().construct(
; 1466 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);

  00069	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0006c	83 e7 03	 and	 edi, 3
  0006f	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]
  00072	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  00075	5f		 pop	 edi
  00076	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00077	85 c9		 test	 ecx, ecx
  00079	74 07		 je	 SHORT $LN36@push_back
  0007b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 01		 mov	 DWORD PTR [ecx], eax
$LN36@push_back:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1467 : 		_PUSH_BACK_END;

  00082	ff 46 10	 inc	 DWORD PTR [esi+16]
  00085	5e		 pop	 esi

; 1468 : 		}

  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
$LN41@push_back:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0008a	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN43@push_back:
$LN40@push_back:
  0008f	cc		 int	 3
?push_back@?$deque@KV?$allocator@K@std@@@std@@QAEXABK@Z ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?back@?$deque@KV?$allocator@K@std@@@std@@QAEAAKXZ
_TEXT	SEGMENT
$T1 = -24						; size = 12
$T2 = -12						; size = 12
?back@?$deque@KV?$allocator@K@std@@@std@@QAEAAKXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::back, COMDAT
; _this$ = ecx

; 1415 : 		{	// return last element of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1416 : 		return (*(end() - 1));

  00006	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  00009	56		 push	 esi
  0000a	6a 01		 push	 1
  0000c	50		 push	 eax
  0000d	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?end@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ ; std::deque<unsigned long,std::allocator<unsigned long> >::end
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator-
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0001d	8b 30		 mov	 esi, DWORD PTR [eax]
  0001f	85 f6		 test	 esi, esi
  00021	74 02		 je	 SHORT $LN10@back
$LN9@back:
  00023	8b 36		 mov	 esi, DWORD PTR [esi]
$LN10@back:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00025	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00028	8b ca		 mov	 ecx, edx
  0002a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002d	48		 dec	 eax
  0002e	c1 e9 02	 shr	 ecx, 2
  00031	23 c8		 and	 ecx, eax

; 344  : 		return (_Mycont->_Map[_Block][_Off]);

  00033	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00036	83 e2 03	 and	 edx, 3
  00039	5e		 pop	 esi
  0003a	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0003d	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 1417 : 		}

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?back@?$deque@KV?$allocator@K@std@@@std@@QAEAAKXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::empty, COMDAT
; _this$ = ecx

; 1362 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al

; 1363 : 		}

  00008	c3		 ret	 0
?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?max_size@?$deque@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$deque@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 1357 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1358 : 		}

  00005	c3		 ret	 0
?max_size@?$deque@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?end@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 1260 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1261 : 		return (iterator(this->_Myoff + this->_Mysize, this));

  00006	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00009	03 51 0c	 add	 edx, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 171  : 			_Myproxy = _Parent_proxy;

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 114  : 		{	// construct orphaned iterator

  0000e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 171  : 			_Myproxy = _Parent_proxy;

  00015	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 305  : 		_Myoff = _Off;

  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1262 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?end@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 1214 : 		{	// destroy the deque

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1215 : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 1216 : 		}

  00019	c3		 ret	 0
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 951  : 		{	// construct empty deque

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00003	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 80   : 		{	// construct childless container

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 773  : 		_Map = _Mapptr();

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 774  : 		_Mapsize = 0;

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 775  : 		_Myoff = 0;

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 776  : 		_Mysize = 0;

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 17		 je	 SHORT $LN48@deque
  00033	89 06		 mov	 DWORD PTR [esi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	89 30		 mov	 DWORD PTR [eax], esi

; 952  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c3		 ret	 0
$LN48@deque:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004a	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN50@deque:
$LN47@deque:
  0004f	cc		 int	 3
??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal, COMDAT
; _this$ = ecx

; 911  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 912  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 913  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 901  : 		{	// destroy proxy

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 908  : 		}

  00014	c3		 ret	 0
?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 892  : 		{	// construct proxy from _Alval

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00001	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 892  : 		{	// construct proxy from _Alval

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 15		 je	 SHORT $LN35@Alloc_prox
  00011	89 06		 mov	 DWORD PTR [esi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	89 30		 mov	 DWORD PTR [eax], esi
  00024	5e		 pop	 esi

; 898  : 		}

  00025	c3		 ret	 0
$LN35@Alloc_prox:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN37@Alloc_prox:
$LN34@Alloc_prox:
  0002b	cc		 int	 3
?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??1?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::~_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy proxy

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 879  : 		_Free_proxy();
; 880  : 		}

  00014	c3		 ret	 0
??1?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::~_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??0?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z PROC ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 872  : 	_Deque_alloc(const _Alloc& = _Alloc())

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00003	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 80   : 		{	// construct childless container

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 773  : 		_Map = _Mapptr();

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 774  : 		_Mapsize = 0;

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 775  : 		_Myoff = 0;

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 776  : 		_Mysize = 0;

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 19		 je	 SHORT $LN42@Deque_allo
  00033	89 06		 mov	 DWORD PTR [esi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	89 30		 mov	 DWORD PTR [eax], esi

; 875  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c2 04 00	 ret	 4
$LN42@Deque_allo:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN44@Deque_allo:
$LN41@Deque_allo:
  00051	cc		 int	 3
??0?$_Deque_alloc@$0A@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Deque_alloc<0,std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::~_Deque_val<std::_Deque_simple_types<unsigned long> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::~_Deque_val<std::_Deque_simple_types<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ?_Getblock@?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QBEII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QBEII@Z PROC ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Getblock, COMDAT
; _this$ = ecx

; 780  : 		{	// determine block from offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 781  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00009	48		 dec	 eax
  0000a	c1 e9 02	 shr	 ecx, 2
  0000d	23 c1		 and	 eax, ecx

; 783  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QBEII@Z ENDP ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Getblock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Deque_val<std::_Deque_simple_types<unsigned long> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 80   : 		{	// construct childless container

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 777  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c3		 ret	 0
??0?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Deque_val<std::_Deque_simple_types<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEXPAPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEXPAPAKI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long *> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEXPAPAKI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEPAPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEPAPAKI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long *> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEPAPAKI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAK@std@@QAEPAPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAK@std@@QAEPAPAKI@Z PROC		; std::allocator<unsigned long *>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@PAK@std@@QAEPAPAKI@Z ENDP		; std::allocator<unsigned long *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z PROC	; std::allocator<unsigned long *>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z ENDP	; std::allocator<unsigned long *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEPAKI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEPAKI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<unsigned long> >::_Wrap_alloc<std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<unsigned long> >::_Wrap_alloc<std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z PROC ; std::allocator_traits<std::allocator<unsigned long> >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z ENDP ; std::allocator_traits<std::allocator<unsigned long> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@K@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@K@std@@QBEIXZ PROC		; std::allocator<unsigned long>::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@K@std@@QBEIXZ ENDP		; std::allocator<unsigned long>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@K@std@@QAEXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@K@std@@QAEXPAKABK@Z PROC		; std::allocator<unsigned long>::construct, COMDAT
; _this$ = ecx

; 592  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 594  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@K@std@@QAEXPAKABK@Z ENDP		; std::allocator<unsigned long>::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@K@std@@QAEPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@K@std@@QAEPAKI@Z PROC		; std::allocator<unsigned long>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@K@std@@QAEPAKI@Z ENDP		; std::allocator<unsigned long>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@K@std@@QAEXPAKI@Z PROC		; std::allocator<unsigned long>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@K@std@@QAEXPAKI@Z ENDP		; std::allocator<unsigned long>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@K@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@K@std@@QAE@XZ PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@K@std@@QAE@XZ ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?SetSkipIndex@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
_dwSkipIndex$ = 8					; size = 4
?SetSkipIndex@CLightManager@@QAEXK@Z PROC		; CLightManager::SetSkipIndex, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   : 	m_dwSkipIndex = dwSkipIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwSkipIndex$[ebp]
  00006	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 90   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetSkipIndex@CLightManager@@QAEXK@Z ENDP		; CLightManager::SetSkipIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?SetLimitLightCount@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
_dwLightCount$ = 8					; size = 4
?SetLimitLightCount@CLightManager@@QAEXK@Z PROC		; CLightManager::SetLimitLightCount, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 84   : 	m_dwLimitLightCount = dwLightCount;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwLightCount$[ebp]
  00006	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 85   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetLimitLightCount@CLightManager@@QAEXK@Z ENDP		; CLightManager::SetLimitLightCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rv3Position$ = 8					; size = 4
?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z PROC ; CLightManager::SetCenterPosition, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	m_v3CenterPosition = c_rv3Position;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rv3Position$[ebp]
  00006	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0000a	66 0f d6 41 34	 movq	 QWORD PTR [ecx+52], xmm0
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00012	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 80   : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CLightManager::SetCenterPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?DeleteLight@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
$T1 = 8							; size = 4
$T2 = 8							; size = 4
_pkData$ = 8						; size = 4
$T3 = 8							; size = 4
_LightID$ = 8						; size = 4
?DeleteLight@CLightManager@@QAEXK@Z PROC		; CLightManager::DeleteLight, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx
  00006	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2109 : 		while (!this->_Isnil(_Pnode))

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _LightID$[ebp]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 46   : 	TLightMap::iterator itor = m_LightMap.find(LightID);

  0000a	8d 48 20	 lea	 ecx, DWORD PTR [eax+32]
  0000d	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  0000e	8b 31		 mov	 esi, DWORD PTR [ecx]

; 2107 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails

  00010	8b d6		 mov	 edx, esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 45   : {

  00012	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2106 : 		_Nodeptr _Pnode = _Root();

  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 2109 : 		while (!this->_Isnil(_Pnode))

  00018	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001c	75 16		 jne	 SHORT $LN12@DeleteLigh
  0001e	8b ff		 npad	 2
$LL13@DeleteLigh:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  00020	39 58 10	 cmp	 DWORD PTR [eax+16], ebx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2110 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))

  00023	73 05		 jae	 SHORT $LN11@DeleteLigh

; 2111 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2112 : 			else

  00028	eb 04		 jmp	 SHORT $LN10@DeleteLigh
$LN11@DeleteLigh:

; 2113 : 				{	// _Pnode not less than _Keyval, remember it
; 2114 : 				_Wherenode = _Pnode;

  0002a	8b d0		 mov	 edx, eax

; 2115 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN10@DeleteLigh:

; 2109 : 		while (!this->_Isnil(_Pnode))

  0002e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00032	74 ec		 je	 SHORT $LL13@DeleteLigh
$LN12@DeleteLigh:

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  00034	3b d6		 cmp	 edx, esi

; 1553 : 					? end() : _Where);

  00036	74 08		 je	 SHORT $LN6@DeleteLigh
  00038	89 55 08	 mov	 DWORD PTR $T1[ebp], edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  0003b	3b 5a 10	 cmp	 ebx, DWORD PTR [edx+16]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1553 : 					? end() : _Where);

  0003e	73 03		 jae	 SHORT $LN111@DeleteLigh
$LN6@DeleteLigh:

; 44   : 		{	// construct with node pointer _Pnode

  00040	89 75 08	 mov	 DWORD PTR $T2[ebp], esi
$LN111@DeleteLigh:

; 1553 : 					? end() : _Where);

  00043	8d 75 08	 lea	 esi, DWORD PTR $T2[ebp]
  00046	8b 36		 mov	 esi, DWORD PTR [esi]

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  00048	39 31		 cmp	 DWORD PTR [ecx], esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 48   : 	if (m_LightMap.end() == itor)

  0004a	74 33		 je	 SHORT $LN2@DeleteLigh

; 49   : 	{
; 50   : 		assert(!"CLightManager::DeleteLight - Failed to find light ID!");
; 51   : 		return;
; 52   : 	}
; 53   : 
; 54   : 	CLight * pLight = itor->second;

  0004c	57		 push	 edi
  0004d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]

; 55   : 
; 56   : 	pLight->Clear();

  00050	8b cf		 mov	 ecx, edi
  00052	e8 00 00 00 00	 call	 ?Clear@CLight@@QAEXXZ	; CLight::Clear

; 57   : 	m_LightPool.Free(pLight);

  00057	89 7d 08	 mov	 DWORD PTR _pkData$[ebp], edi
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 81   : 			m_kVct_pkFree.push_back(pkData);

  0005a	8d 45 08	 lea	 eax, DWORD PTR _pkData$[ebp]
  0005d	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  00060	50		 push	 eax
  00061	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  00064	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEXABQAVCLight@@@Z ; std::vector<CLight *,std::allocator<CLight *> >::push_back
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 59   : 	m_LightMap.erase(itor);

  00069	56		 push	 esi
  0006a	8d 45 08	 lea	 eax, DWORD PTR $T3[ebp]
  0006d	50		 push	 eax
  0006e	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00071	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase

; 60   : 
; 61   : 	ReleaseLightID(LightID);

  00076	53		 push	 ebx
  00077	8b cf		 mov	 ecx, edi
  00079	e8 00 00 00 00	 call	 ?ReleaseLightID@CLightManager@@IAEXK@Z ; CLightManager::ReleaseLightID
  0007e	5f		 pop	 edi
$LN2@DeleteLigh:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx

; 62   : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?DeleteLight@CLightManager@@QAEXK@Z ENDP		; CLightManager::DeleteLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?GetLight@CLightManager@@QAEPAVCLight@@K@Z
_TEXT	SEGMENT
$T1 = 8							; size = 4
$T2 = 8							; size = 4
_LightID$ = 8						; size = 4
?GetLight@CLightManager@@QAEPAVCLight@@K@Z PROC		; CLightManager::GetLight, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2109 : 		while (!this->_Isnil(_Pnode))

  00004	8b 75 08	 mov	 esi, DWORD PTR _LightID$[ebp]
  00007	57		 push	 edi

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);
; 585  : 		}
; 586  : 
; 587  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 588  : 		{	// return reference to left pointer in node
; 589  : 		return ((_Nodepref)_Pnode->_Left);
; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);

  00008	8b 79 20	 mov	 edi, DWORD PTR [ecx+32]

; 1554 : 		}
; 1555 : 
; 1556 : 	const_iterator find(const key_type& _Keyval) const
; 1557 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1558 : 		const_iterator _Where = lower_bound(_Keyval);
; 1559 : 		return (_Where == end()
; 1560 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1561 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1562 : 					? end() : _Where);
; 1563 : 		}
; 1564 : 
; 1565 : 	size_type count(const key_type& _Keyval) const
; 1566 : 		{	// count all elements that match _Keyval
; 1567 : 		_Paircc _Ans = equal_range(_Keyval);
; 1568 : 		size_type _Num = 0;
; 1569 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1570 : 		return (_Num);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator lower_bound(const key_type& _Keyval)
; 1574 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1575 : 		return (iterator(_Lbound(_Keyval), this));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1579 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1580 : 		return (const_iterator(_Lbound(_Keyval), this));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator upper_bound(const key_type& _Keyval)
; 1584 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1585 : 		return (iterator(_Ubound(_Keyval), this));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1589 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1590 : 		return (const_iterator(_Ubound(_Keyval), this));
; 1591 : 		}
; 1592 : 
; 1593 : 	_Pairii equal_range(const key_type& _Keyval)
; 1594 : 		{	// find range equivalent to _Keyval in mutable tree
; 1595 : 		return (_Eqrange(_Keyval));
; 1596 : 		}
; 1597 : 
; 1598 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1599 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1600 : 		return (_Eqrange(_Keyval));
; 1601 : 		}
; 1602 : 
; 1603 : 	void swap(_Myt& _Right)
; 1604 : 		{	// exchange contents with _Right
; 1605 : 		if (this == &_Right)
; 1606 : 			;	// same object, do nothing
; 1607 : 		else if (this->_Getal() == _Right._Getal())
; 1608 : 			{	// same allocator, swap control information
; 1609 : 			this->_Swap_all(_Right);
; 1610 : 			this->_Swapcomp(_Right._Getcomp());
; 1611 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1612 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1613 : 			}
; 1614 : 
; 1615 : 		else if (_Alty::propagate_on_container_swap::value)
; 1616 : 			{	// swap allocators and control information
; 1617 : 			this->_Swap_alloc(_Right);
; 1618 : 			this->_Swapcomp(_Right._Getcomp());
; 1619 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1620 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1621 : 			}
; 1622 : 
; 1623 : 		else
; 1624 : 			{	// containers are incompatible
; 1625 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1626 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1627 : 
; 1628 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1629 : 			_XSTD terminate();
; 1630 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1631 : 			}
; 1632 : 		}
; 1633 : 
; 1634 : protected:
; 1635 : 	template<class _Valty>
; 1636 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1637 : 		{	// node exists, just return it
; 1638 : 		return (_Node);
; 1639 : 		}
; 1640 : 
; 1641 : 	template<class _Valty>
; 1642 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1643 : 		{	// node doesn't exist, make it
; 1644 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1645 : 		}
; 1646 : 
; 1647 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1648 : 		{	// node exists, destroy it
; 1649 : 		this->_Getal().destroy(
; 1650 : 			_STD addressof(this->_Myval(_Newnode)));
; 1651 : 
; 1652 : 		this->_Getal().deallocate(_Newnode, 1);
; 1653 : 		}
; 1654 : 
; 1655 : 	void _Destroy_if_not_nil(_Nil)
; 1656 : 		{	// node doesn't exist, do nothing
; 1657 : 		}
; 1658 : 
; 1659 : 	template<class _Valty,
; 1660 : 		class _Nodety>
; 1661 : 		iterator _Insert_hint(const_iterator _Where,
; 1662 : 			_Valty&& _Val, _Nodety _Newnode)
; 1663 : 		{	// try to insert node using _Where as a hint
; 1664 : 		const_iterator _Next;
; 1665 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1666 : 
; 1667 : 		_TRY_BEGIN
; 1668 : 
; 1669 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1670 : 		if (_Where._Getcont() != this)
; 1671 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1672 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1673 : 
; 1674 : 		if (size() == 0)
; 1675 : 			return (_Insert_at(true, this->_Myhead,
; 1676 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1677 : 		else if (this->_Multi)
; 1678 : 			{	// insert even if duplicate
; 1679 : 			if (_Where == begin())
; 1680 : 				{	// insert at beginning if before first element
; 1681 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1682 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1683 : 					return (_Insert_at(true, _Where._Mynode(),
; 1684 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1685 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1686 : 				}
; 1687 : 			else if (_Where == end())
; 1688 : 				{	// insert at end if after last element
; 1689 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1690 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1691 : 					return (_Insert_at(false, _Rmost(),
; 1692 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1693 : 				}
; 1694 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1695 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1696 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1697 : 					this->_Kfn(_Val),
; 1698 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1699 : 				{	// insert before _Where
; 1700 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1701 : 					return (_Insert_at(false, _Next._Mynode(),
; 1702 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1703 : 				else
; 1704 : 					return (_Insert_at(true, _Where._Mynode(),
; 1705 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1706 : 				}
; 1707 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1708 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1709 : 				&& (++(_Next = _Where) == end()
; 1710 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1711 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1712 : 				{	// insert after _Where
; 1713 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1714 : 					return (_Insert_at(false, _Where._Mynode(),
; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 				else
; 1717 : 					return (_Insert_at(true, _Next._Mynode(),
; 1718 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1719 : 				}
; 1720 : 			else
; 1721 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1722 : 			}
; 1723 : 		else
; 1724 : 			{	// insert only if unique
; 1725 : 			if (_Where == begin())
; 1726 : 				{	// insert at beginning if before first element
; 1727 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1729 : 					return (_Insert_at(true, _Where._Mynode(),
; 1730 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1731 : 				}
; 1732 : 			else if (_Where == end())
; 1733 : 				{	// insert at end if after last element
; 1734 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1735 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1736 : 					return (_Insert_at(false, _Rmost(),
; 1737 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1738 : 				}
; 1739 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1740 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1741 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1742 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1743 : 					this->_Kfn(_Val)))
; 1744 : 				{	// insert before _Where
; 1745 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1746 : 					return (_Insert_at(false, _Next._Mynode(),
; 1747 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1748 : 				else
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1753 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1754 : 				&& (++(_Next = _Where) == end()
; 1755 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1756 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1757 : 				{	// insert after _Where
; 1758 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1759 : 					return (_Insert_at(false, _Where._Mynode(),
; 1760 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1761 : 				else
; 1762 : 					return (_Insert_at(true, _Next._Mynode(),
; 1763 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1764 : 				}
; 1765 : 			}
; 1766 : 		_CATCH_ALL
; 1767 : 		_Destroy_if_not_nil(_Newnode);
; 1768 : 		_RERAISE;
; 1769 : 		_CATCH_END
; 1770 : 
; 1771 : 		return (_Insert_nohint(_Leftish,
; 1772 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1773 : 		}
; 1774 : 
; 1775 : 	template<class _Valty,
; 1776 : 		class _Nodety>
; 1777 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1778 : 			_Valty&& _Val, _Nodety _Newnode)
; 1779 : 		{	// try to insert node, on left if _Leftish
; 1780 : 		_TRY_BEGIN
; 1781 : 		_Nodeptr _Trynode = _Root();
; 1782 : 		_Nodeptr _Wherenode = this->_Myhead;
; 1783 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1784 : 
; 1785 : 		while (!this->_Isnil(_Trynode))
; 1786 : 			{	// look for leaf to insert before (_Addleft) or after
; 1787 : 			_Wherenode = _Trynode;
; 1788 : 			if (_Leftish)
; 1789 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1790 : 					this->_Key(_Trynode),
; 1791 : 					this->_Kfn(_Val));	// favor left end
; 1792 : 			else
; 1793 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1794 : 					this->_Kfn(_Val),
; 1795 : 					this->_Key(_Trynode));	// favor right end
; 1796 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1797 : 				: this->_Right(_Trynode);
; 1798 : 			}
; 1799 : 
; 1800 : 		if (this->_Multi)
; 1801 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1802 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1803 : 		else
; 1804 : 			{	// insert only if unique
; 1805 : 			iterator _Where = iterator(_Wherenode, this);
; 1806 : 			if (!_Addleft)
; 1807 : 				;	// need to test if insert after is okay
; 1808 : 			else if (_Where == begin())
; 1809 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1810 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1811 : 			else
; 1812 : 				--_Where;	// need to test if insert before is okay
; 1813 : 
; 1814 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1815 : 				this->_Key(_Where._Mynode()),
; 1816 : 				this->_Kfn(_Val)))
; 1817 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1818 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1819 : 			else
; 1820 : 				{	// duplicate, don't insert
; 1821 : 				_Destroy_if_not_nil(_Newnode);
; 1822 : 				return (_Pairib(_Where, false));
; 1823 : 				}
; 1824 : 			}
; 1825 : 		_CATCH_ALL
; 1826 : 		_Destroy_if_not_nil(_Newnode);
; 1827 : 		_RERAISE;
; 1828 : 		_CATCH_END
; 1829 : 		}
; 1830 : 
; 1831 : 	template<class _Valty,
; 1832 : 		class _Nodety>
; 1833 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1834 : 		_Valty&& _Val, _Nodety _Node)
; 1835 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1836 : 		if (max_size() - 1 <= this->_Mysize)
; 1837 : 			{	// tree would get too big, fail
; 1838 : 			_Destroy_if_not_nil(_Node);
; 1839 : 			_Xlength_error("map/set<T> too long");
; 1840 : 			}
; 1841 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1842 : 			_STD forward<_Valty>(_Val));
; 1843 : 
; 1844 : 		++this->_Mysize;
; 1845 : 		_Newnode->_Parent = _Wherenode;
; 1846 : 
; 1847 : 		if (_Wherenode == this->_Myhead)
; 1848 : 			{	// first node in tree, just set head values
; 1849 : 			_Root() = _Newnode;
; 1850 : 			_Lmost() = _Newnode;
; 1851 : 			_Rmost() = _Newnode;
; 1852 : 			}
; 1853 : 		else if (_Addleft)
; 1854 : 			{	// add to left of _Wherenode
; 1855 : 			this->_Left(_Wherenode) = _Newnode;
; 1856 : 			if (_Wherenode == _Lmost())
; 1857 : 				_Lmost() = _Newnode;
; 1858 : 			}
; 1859 : 		else
; 1860 : 			{	// add to right of _Wherenode
; 1861 : 			this->_Right(_Wherenode) = _Newnode;
; 1862 : 			if (_Wherenode == _Rmost())
; 1863 : 				_Rmost() = _Newnode;
; 1864 : 			}
; 1865 : 
; 1866 : 		for (_Nodeptr _Pnode = _Newnode;
; 1867 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1868 : 			if (this->_Parent(_Pnode)
; 1869 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1870 : 				{	// fixup red-red in left subtree
; 1871 : 				_Wherenode =
; 1872 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1873 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1874 : 					{	// parent has two red children, blacken both
; 1875 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1876 : 					this->_Color(_Wherenode) = this->_Black;
; 1877 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1878 : 						= this->_Red;
; 1879 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1880 : 					}
; 1881 : 				else
; 1882 : 					{	// parent has red and black children
; 1883 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1884 : 						{	// rotate right child to left
; 1885 : 						_Pnode = this->_Parent(_Pnode);
; 1886 : 						_Lrotate(_Pnode);
; 1887 : 						}
; 1888 : 					this->_Color(this->_Parent(_Pnode)) =
; 1889 : 						this->_Black;	// propagate red up
; 1890 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1891 : 						this->_Red;
; 1892 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 					}
; 1894 : 				}
; 1895 : 			else
; 1896 : 				{	// fixup red-red in right subtree
; 1897 : 				_Wherenode =
; 1898 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1899 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1900 : 					{	// parent has two red children, blacken both
; 1901 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1902 : 					this->_Color(_Wherenode) = this->_Black;
; 1903 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1904 : 						this->_Red;
; 1905 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1906 : 					}
; 1907 : 				else
; 1908 : 					{	// parent has red and black children
; 1909 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1910 : 						{	// rotate left child to right
; 1911 : 						_Pnode = this->_Parent(_Pnode);
; 1912 : 						_Rrotate(_Pnode);
; 1913 : 						}
; 1914 : 					this->_Color(this->_Parent(_Pnode)) =
; 1915 : 						this->_Black;	// propagate red up
; 1916 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1917 : 						this->_Red;
; 1918 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 					}
; 1920 : 				}
; 1921 : 
; 1922 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1923 : 		return (iterator(_Newnode, this));
; 1924 : 		}
; 1925 : 
; 1926 : 	template<class _Moveit>
; 1927 : 		void _Copy(const _Myt& _Right,
; 1928 : 			_Moveit _Movefl)
; 1929 : 		{	// copy or move entire tree from _Right
; 1930 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead, _Movefl);
; 1931 : 		this->_Mysize = _Right.size();
; 1932 : 		if (!this->_Isnil(_Root()))
; 1933 : 			{	// nonempty tree, look for new smallest and largest
; 1934 : 			_Lmost() = this->_Min(_Root());
; 1935 : 			_Rmost() = this->_Max(_Root());
; 1936 : 			}
; 1937 : 		else
; 1938 : 			{	// empty tree, just tidy head pointers
; 1939 : 			_Lmost() = this->_Myhead;
; 1940 : 			_Rmost() = this->_Myhead;
; 1941 : 			}
; 1942 : 		}
; 1943 : 
; 1944 : 	template<class _Want_to_move,
; 1945 : 		class _Can_move,
; 1946 : 		class _Is_set,
; 1947 : 		class _Dummy>
; 1948 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, _Want_to_move,
; 1949 : 			_Can_move, _Is_set, _Dummy)
; 1950 : 		{	// copy to new node -- nonmovable
; 1951 : 		return (this->_Buynode(this->_Myval(_Rootnode)));
; 1952 : 		}
; 1953 : 
; 1954 : 	template<class _Dummy>
; 1955 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1956 : 			true_type, true_type, _Dummy)
; 1957 : 		{	// move to new node -- movable, set
; 1958 : 		return (this->_Buynode(
; 1959 : 			_STD forward<value_type>(this->_Myval(_Rootnode))));
; 1960 : 		}
; 1961 : 
; 1962 : 	template<class _Dummy>
; 1963 : 		_Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
; 1964 : 			true_type, false_type, _Dummy)
; 1965 : 		{	// move to new node -- movable, map
; 1966 : 		return (this->_Buynode(
; 1967 : 			_STD forward<key_type>(const_cast<key_type&>(
; 1968 : 				this->_Myval(_Rootnode).first)),
; 1969 : 			_STD forward<typename value_type::second_type>(this->_Myval(
; 1970 : 				_Rootnode).second)));
; 1971 : 		}
; 1972 : 
; 1973 : 	template<class _Moveit>
; 1974 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1975 : 			_Moveit _Movefl)
; 1976 : 		{	// copy entire subtree, recursively
; 1977 : 		_Nodeptr _Newroot = this->_Myhead;	// point at nil node
; 1978 : 
; 1979 : 		if (!this->_Isnil(_Rootnode))
; 1980 : 			{	// copy or move a node, then any subtrees
; 1981 : 			_Nodeptr _Pnode = _Copy_or_move(_Rootnode, _Movefl,
; 1982 : 				typename is_move_constructible<value_type>::type(),
; 1983 : 				typename is_same<key_type, value_type>::type(), 0);
; 1984 : 			_Pnode->_Parent = _Wherenode;
; 1985 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1986 : 			if (this->_Isnil(_Newroot))
; 1987 : 				_Newroot = _Pnode;	// memorize new root
; 1988 : 
; 1989 : 			_TRY_BEGIN
; 1990 : 			this->_Left(_Pnode) =
; 1991 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 1992 : 			this->_Right(_Pnode) =
; 1993 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 1994 : 			_CATCH_ALL
; 1995 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 1996 : 			_RERAISE;
; 1997 : 			_CATCH_END
; 1998 : 			}
; 1999 : 
; 2000 : 		return (_Newroot);	// return newly constructed tree
; 2001 : 		}
; 2002 : 
; 2003 : 	_Paircc _Eqrange(const key_type& _Keyval) const
; 2004 : 		{	// find leftmost node not less than _Keyval
; 2005 : 		_Nodeptr _Pnode = _Root();
; 2006 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2007 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2008 : 
; 2009 : 		while (!this->_Isnil(_Pnode))
; 2010 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2011 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2012 : 			else
; 2013 : 				{	// _Pnode not less than _Keyval, remember it
; 2014 : 				if (this->_Isnil(_Hinode)
; 2015 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2016 : 						this->_Key(_Pnode)))
; 2017 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2018 : 				_Lonode = _Pnode;
; 2019 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2020 : 				}
; 2021 : 
; 2022 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2023 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2024 : 		while (!this->_Isnil(_Pnode))
; 2025 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2026 : 				{	// _Pnode greater than _Keyval, remember it
; 2027 : 				_Hinode = _Pnode;
; 2028 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2029 : 				}
; 2030 : 			else
; 2031 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2032 : 
; 2033 : 		const_iterator _First = const_iterator(_Lonode, this);
; 2034 : 		const_iterator _Last = const_iterator(_Hinode, this);
; 2035 : 		return (_Paircc(_First, _Last));
; 2036 : 		}
; 2037 : 
; 2038 : 	_Pairii _Eqrange(const key_type& _Keyval)
; 2039 : 		{	// find leftmost node not less than _Keyval
; 2040 : 		_Nodeptr _Pnode = _Root();
; 2041 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails
; 2042 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails
; 2043 : 
; 2044 : 		while (!this->_Isnil(_Pnode))
; 2045 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2046 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2047 : 			else
; 2048 : 				{	// _Pnode not less than _Keyval, remember it
; 2049 : 				if (this->_Isnil(_Hinode)
; 2050 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2051 : 						 this->_Key(_Pnode)))
; 2052 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2053 : 				_Lonode = _Pnode;
; 2054 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2055 : 				}
; 2056 : 
; 2057 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2058 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2059 : 		while (!this->_Isnil(_Pnode))
; 2060 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2061 : 				{	// _Pnode greater than _Keyval, remember it
; 2062 : 				_Hinode = _Pnode;
; 2063 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2064 : 				}
; 2065 : 			else
; 2066 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2067 : 
; 2068 : 		iterator _First = iterator(_Lonode, this);
; 2069 : 		iterator _Last = iterator(_Hinode, this);
; 2070 : 		return (_Pairii(_First, _Last));
; 2071 : 		}
; 2072 : 
; 2073 : 	void _Erase(_Nodeptr _Rootnode)
; 2074 : 		{	// free entire subtree, recursively
; 2075 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2076 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2077 : 			{	// free subtrees, then node
; 2078 : 			_Erase(this->_Right(_Pnode));
; 2079 : 			_Pnode = this->_Left(_Pnode);
; 2080 : 			this->_Getal().destroy(
; 2081 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2082 : 
; 2083 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2084 : 			}
; 2085 : 		}
; 2086 : 
; 2087 : 	_Nodeptr _Lbound(const key_type& _Keyval) const
; 2088 : 		{	// find leftmost node not less than _Keyval
; 2089 : 		_Nodeptr _Pnode = _Root();
; 2090 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 2091 : 
; 2092 : 		while (!this->_Isnil(_Pnode))
; 2093 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2094 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2095 : 			else
; 2096 : 				{	// _Pnode not less than _Keyval, remember it
; 2097 : 				_Wherenode = _Pnode;
; 2098 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2099 : 				}
; 2100 : 
; 2101 : 		return (_Wherenode);	// return best remembered candidate
; 2102 : 		}
; 2103 : 
; 2104 : 	_Nodeptr _Lbound(const key_type& _Keyval)
; 2105 : 		{	// find leftmost node not less than _Keyval
; 2106 : 		_Nodeptr _Pnode = _Root();
; 2107 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails

  0000b	8b d7		 mov	 edx, edi
  0000d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 2109 : 		while (!this->_Isnil(_Pnode))

  00010	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00014	75 14		 jne	 SHORT $LN12@GetLight
$LL13@GetLight:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  00016	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2110 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))

  00019	73 05		 jae	 SHORT $LN11@GetLight

; 2111 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  0001b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2112 : 			else

  0001e	eb 04		 jmp	 SHORT $LN10@GetLight
$LN11@GetLight:

; 2113 : 				{	// _Pnode not less than _Keyval, remember it
; 2114 : 				_Wherenode = _Pnode;

  00020	8b d0		 mov	 edx, eax

; 2115 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00022	8b 00		 mov	 eax, DWORD PTR [eax]
$LN10@GetLight:

; 2109 : 		while (!this->_Isnil(_Pnode))

  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ec		 je	 SHORT $LL13@GetLight
$LN12@GetLight:

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  0002a	3b d7		 cmp	 edx, edi

; 1553 : 					? end() : _Where);

  0002c	74 08		 je	 SHORT $LN6@GetLight
  0002e	89 55 08	 mov	 DWORD PTR $T1[ebp], edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef

; 193  : 		return (_Left < _Right);

  00031	3b 72 10	 cmp	 esi, DWORD PTR [edx+16]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 1553 : 					? end() : _Where);

  00034	73 03		 jae	 SHORT $LN109@GetLight
$LN6@GetLight:

; 44   : 		{	// construct with node pointer _Pnode

  00036	89 7d 08	 mov	 DWORD PTR $T2[ebp], edi
$LN109@GetLight:

; 1553 : 					? end() : _Where);

  00039	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  00040	39 41 20	 cmp	 DWORD PTR [ecx+32], eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 68   : 	if (m_LightMap.end() == itor)

  00043	75 06		 jne	 SHORT $LN1@GetLight

; 69   : 	{
; 70   : 		assert(!"CLightManager::SetLightData - Failed to find light ID!");
; 71   : 		return NULL;

  00045	33 c0		 xor	 eax, eax

; 75   : }

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN1@GetLight:

; 72   : 	}
; 73   : 
; 74   : 	return itor->second;

  0004b	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 75   : }

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?GetLight@CLightManager@@QAEPAVCLight@@K@Z ENDP		; CLightManager::GetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
_ID$ = -4						; size = 4
___formal$ = 8						; size = 4
_poutLightID$ = 12					; size = 4
_LightData$ = 16					; size = 4
?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z PROC ; CLightManager::RegisterLight, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 37   : 	CLight * pLight = m_LightPool.Alloc();

  00008	8d 4f 48	 lea	 ecx, DWORD PTR [edi+72]
  0000b	e8 00 00 00 00	 call	 ?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ ; CDynamicPool<CLight>::Alloc

; 38   : 	TLightID ID = NewLightID();

  00010	8b cf		 mov	 ecx, edi
  00012	8b f0		 mov	 esi, eax
  00014	e8 00 00 00 00	 call	 ?NewLightID@CLightManager@@IAEKXZ ; CLightManager::NewLightID

; 39   : 	pLight->SetParameter(ID, LightData);

  00019	ff 75 10	 push	 DWORD PTR _LightData$[ebp]
  0001c	8b ce		 mov	 ecx, esi
  0001e	89 45 fc	 mov	 DWORD PTR _ID$[ebp], eax
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z ; CLight::SetParameter

; 40   : 	m_LightMap[ID] = pLight;

  00027	8d 45 fc	 lea	 eax, DWORD PTR _ID$[ebp]
  0002a	50		 push	 eax
  0002b	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  0002e	e8 00 00 00 00	 call	 ??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z ; std::map<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> > >::operator[]

; 41   : 	*poutLightID = ID;

  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _poutLightID$[ebp]
  00036	5f		 pop	 edi
  00037	89 30		 mov	 DWORD PTR [eax], esi
  00039	8b 45 fc	 mov	 eax, DWORD PTR _ID$[ebp]
  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	5e		 pop	 esi

; 42   : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z ENDP ; CLightManager::RegisterLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?RestoreLight@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreLight@CLightManager@@QAEXXZ PROC		; CLightManager::RestoreLight, COMDAT
; _this$ = ecx

; 139  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 140  : 	STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000a	68 89 00 00 00	 push	 137			; 00000089H
  0000f	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 142  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00014	33 ff		 xor	 edi, edi
$LL3@RestoreLig:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00016	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00019	2b 4e 28	 sub	 ecx, DWORD PTR [esi+40]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 142  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  0001c	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0001f	c1 f9 02	 sar	 ecx, 2
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 142  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00022	3b c1		 cmp	 eax, ecx
  00024	72 09		 jb	 SHORT $LN7@RestoreLig
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00026	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00029	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
  0002c	c1 f8 02	 sar	 eax, 2
$LN7@RestoreLig:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 142  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  0002f	3b f8		 cmp	 edi, eax
  00031	73 10		 jae	 SHORT $LN1@RestoreLig

; 143  : 		m_LightSortVector[k]->SetDeviceLight(FALSE);

  00033	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00036	6a 00		 push	 0
  00038	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
  0003b	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
  00040	47		 inc	 edi
  00041	eb d3		 jmp	 SHORT $LL3@RestoreLig
$LN1@RestoreLig:
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi

; 144  : }

  00045	c3		 ret	 0
?RestoreLight@CLightManager@@QAEXXZ ENDP		; CLightManager::RestoreLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?FlushLight@CLightManager@@QAEXXZ
_TEXT	SEGMENT
_pLight$1 = -12						; size = 4
_pLight$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
$T2 = -4						; size = 1
?FlushLight@CLightManager@@QAEXXZ PROC			; CLightManager::FlushLight, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
  0000e	89 5c 24 14	 mov	 DWORD PTR _this$1$[esp+24], ebx

; 104  : 	Update();

  00012	e8 00 00 00 00	 call	 ?Update@CLightManager@@QAEXXZ ; CLightManager::Update
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  00017	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 106  : 	m_LightSortVector.clear();

  0001a	8d 7b 28	 lea	 edi, DWORD PTR [ebx+40]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  0001d	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 589  : 		return ((_Nodepref)_Pnode->_Left);

  00020	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]

; 44   : 		{	// construct with node pointer _Pnode

  00023	8b 30		 mov	 esi, DWORD PTR [eax]

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  00025	3b f0		 cmp	 esi, eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 114  : 	for (; itor != m_LightMap.end(); ++itor)

  00027	0f 84 0e 01 00
	00		 je	 $LN4@FlushLight
  0002d	8d 49 00	 npad	 3
$LL35@FlushLight:

; 115  : 	{
; 116  : 		CLight * pLight = itor->second;

  00030	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 117  : 
; 118  : 		D3DXVECTOR3 v3LightPos(pLight->GetPosition());

  00033	8b c8		 mov	 ecx, eax
  00035	89 44 24 10	 mov	 DWORD PTR _pLight$1$[esp+24], eax
  00039	89 44 24 0c	 mov	 DWORD PTR _pLight$1[esp+24], eax
  0003d	e8 00 00 00 00	 call	 ?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ ; CLight::GetPosition
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 172  :     x = v.x;

  00042	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]

; 173  :     y = v.y;

  00046	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]

; 175  : }
; 176  : 
; 177  : D3DXINLINE
; 178  : D3DXVECTOR3::D3DXVECTOR3( FLOAT fx, FLOAT fy, FLOAT fz )
; 179  : {
; 180  :     x = fx;
; 181  :     y = fy;
; 182  :     z = fz;
; 183  : }
; 184  : 
; 185  : 
; 186  : // casting
; 187  : D3DXINLINE
; 188  : D3DXVECTOR3::operator FLOAT* ()
; 189  : {
; 190  :     return (FLOAT *) &x;
; 191  : }
; 192  : 
; 193  : D3DXINLINE
; 194  : D3DXVECTOR3::operator CONST FLOAT* () const
; 195  : {
; 196  :     return (CONST FLOAT *) &x;
; 197  : }
; 198  : 
; 199  : 
; 200  : // assignment operators
; 201  : D3DXINLINE D3DXVECTOR3&
; 202  : D3DXVECTOR3::operator += ( CONST D3DXVECTOR3& v )
; 203  : {
; 204  :     x += v.x;
; 205  :     y += v.y;
; 206  :     z += v.z;
; 207  :     return *this;
; 208  : }
; 209  : 
; 210  : D3DXINLINE D3DXVECTOR3&
; 211  : D3DXVECTOR3::operator -= ( CONST D3DXVECTOR3& v )
; 212  : {
; 213  :     x -= v.x;
; 214  :     y -= v.y;
; 215  :     z -= v.z;
; 216  :     return *this;
; 217  : }
; 218  : 
; 219  : D3DXINLINE D3DXVECTOR3&
; 220  : D3DXVECTOR3::operator *= ( FLOAT f )
; 221  : {
; 222  :     x *= f;
; 223  :     y *= f;
; 224  :     z *= f;
; 225  :     return *this;
; 226  : }
; 227  : 
; 228  : D3DXINLINE D3DXVECTOR3&
; 229  : D3DXVECTOR3::operator /= ( FLOAT f )
; 230  : {
; 231  :     FLOAT fInv = 1.0f / f;
; 232  :     x *= fInv;
; 233  :     y *= fInv;
; 234  :     z *= fInv;
; 235  :     return *this;
; 236  : }
; 237  : 
; 238  : 
; 239  : // unary operators
; 240  : D3DXINLINE D3DXVECTOR3
; 241  : D3DXVECTOR3::operator + () const
; 242  : {
; 243  :     return *this;
; 244  : }
; 245  : 
; 246  : D3DXINLINE D3DXVECTOR3
; 247  : D3DXVECTOR3::operator - () const
; 248  : {
; 249  :     return D3DXVECTOR3(-x, -y, -z);
; 250  : }
; 251  : 
; 252  : 
; 253  : // binary operators
; 254  : D3DXINLINE D3DXVECTOR3
; 255  : D3DXVECTOR3::operator + ( CONST D3DXVECTOR3& v ) const
; 256  : {
; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);
; 258  : }
; 259  : 
; 260  : D3DXINLINE D3DXVECTOR3
; 261  : D3DXVECTOR3::operator - ( CONST D3DXVECTOR3& v ) const
; 262  : {
; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0004b	f3 0f 5c 53 38	 subss	 xmm2, DWORD PTR [ebx+56]
  00050	f3 0f 5c 4b 34	 subss	 xmm1, DWORD PTR [ebx+52]

; 174  :     z = v.z;

  00055	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]

; 175  : }
; 176  : 
; 177  : D3DXINLINE
; 178  : D3DXVECTOR3::D3DXVECTOR3( FLOAT fx, FLOAT fy, FLOAT fz )
; 179  : {
; 180  :     x = fx;
; 181  :     y = fy;
; 182  :     z = fz;
; 183  : }
; 184  : 
; 185  : 
; 186  : // casting
; 187  : D3DXINLINE
; 188  : D3DXVECTOR3::operator FLOAT* ()
; 189  : {
; 190  :     return (FLOAT *) &x;
; 191  : }
; 192  : 
; 193  : D3DXINLINE
; 194  : D3DXVECTOR3::operator CONST FLOAT* () const
; 195  : {
; 196  :     return (CONST FLOAT *) &x;
; 197  : }
; 198  : 
; 199  : 
; 200  : // assignment operators
; 201  : D3DXINLINE D3DXVECTOR3&
; 202  : D3DXVECTOR3::operator += ( CONST D3DXVECTOR3& v )
; 203  : {
; 204  :     x += v.x;
; 205  :     y += v.y;
; 206  :     z += v.z;
; 207  :     return *this;
; 208  : }
; 209  : 
; 210  : D3DXINLINE D3DXVECTOR3&
; 211  : D3DXVECTOR3::operator -= ( CONST D3DXVECTOR3& v )
; 212  : {
; 213  :     x -= v.x;
; 214  :     y -= v.y;
; 215  :     z -= v.z;
; 216  :     return *this;
; 217  : }
; 218  : 
; 219  : D3DXINLINE D3DXVECTOR3&
; 220  : D3DXVECTOR3::operator *= ( FLOAT f )
; 221  : {
; 222  :     x *= f;
; 223  :     y *= f;
; 224  :     z *= f;
; 225  :     return *this;
; 226  : }
; 227  : 
; 228  : D3DXINLINE D3DXVECTOR3&
; 229  : D3DXVECTOR3::operator /= ( FLOAT f )
; 230  : {
; 231  :     FLOAT fInv = 1.0f / f;
; 232  :     x *= fInv;
; 233  :     y *= fInv;
; 234  :     z *= fInv;
; 235  :     return *this;
; 236  : }
; 237  : 
; 238  : 
; 239  : // unary operators
; 240  : D3DXINLINE D3DXVECTOR3
; 241  : D3DXVECTOR3::operator + () const
; 242  : {
; 243  :     return *this;
; 244  : }
; 245  : 
; 246  : D3DXINLINE D3DXVECTOR3
; 247  : D3DXVECTOR3::operator - () const
; 248  : {
; 249  :     return D3DXVECTOR3(-x, -y, -z);
; 250  : }
; 251  : 
; 252  : 
; 253  : // binary operators
; 254  : D3DXINLINE D3DXVECTOR3
; 255  : D3DXVECTOR3::operator + ( CONST D3DXVECTOR3& v ) const
; 256  : {
; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);
; 258  : }
; 259  : 
; 260  : D3DXINLINE D3DXVECTOR3
; 261  : D3DXVECTOR3::operator - ( CONST D3DXVECTOR3& v ) const
; 262  : {
; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0005a	f3 0f 5c 43 3c	 subss	 xmm0, DWORD PTR [ebx+60]

; 264  : }
; 265  : 
; 266  : D3DXINLINE D3DXVECTOR3
; 267  : D3DXVECTOR3::operator * ( FLOAT f ) const
; 268  : {
; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);
; 270  : }
; 271  : 
; 272  : D3DXINLINE D3DXVECTOR3
; 273  : D3DXVECTOR3::operator / ( FLOAT f ) const
; 274  : {
; 275  :     FLOAT fInv = 1.0f / f;
; 276  :     return D3DXVECTOR3(x * fInv, y * fInv, z * fInv);
; 277  : }
; 278  : 
; 279  : 
; 280  : D3DXINLINE D3DXVECTOR3
; 281  : operator * ( FLOAT f, CONST struct D3DXVECTOR3& v )
; 282  : {
; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);
; 284  : }
; 285  : 
; 286  : 
; 287  : D3DXINLINE BOOL
; 288  : D3DXVECTOR3::operator == ( CONST D3DXVECTOR3& v ) const
; 289  : {
; 290  :     return x == v.x && y == v.y && z == v.z;
; 291  : }
; 292  : 
; 293  : D3DXINLINE BOOL
; 294  : D3DXVECTOR3::operator != ( CONST D3DXVECTOR3& v ) const
; 295  : {
; 296  :     return x != v.x || y != v.y || z != v.z;
; 297  : }
; 298  : 
; 299  : 
; 300  : 
; 301  : //--------------------------
; 302  : // 4D Vector
; 303  : //--------------------------
; 304  : D3DXINLINE
; 305  : D3DXVECTOR4::D3DXVECTOR4( CONST FLOAT *pf )
; 306  : {
; 307  : #ifdef D3DX_DEBUG
; 308  :     if(!pf)
; 309  :         return;
; 310  : #endif
; 311  : 
; 312  :     x = pf[0];
; 313  :     y = pf[1];
; 314  :     z = pf[2];
; 315  :     w = pf[3];
; 316  : }
; 317  : 
; 318  : D3DXINLINE
; 319  : D3DXVECTOR4::D3DXVECTOR4( FLOAT fx, FLOAT fy, FLOAT fz, FLOAT fw )
; 320  : {
; 321  :     x = fx;
; 322  :     y = fy;
; 323  :     z = fz;
; 324  :     w = fw;
; 325  : }
; 326  : 
; 327  : 
; 328  : // casting
; 329  : D3DXINLINE
; 330  : D3DXVECTOR4::operator FLOAT* ()
; 331  : {
; 332  :     return (FLOAT *) &x;
; 333  : }
; 334  : 
; 335  : D3DXINLINE
; 336  : D3DXVECTOR4::operator CONST FLOAT* () const
; 337  : {
; 338  :     return (CONST FLOAT *) &x;
; 339  : }
; 340  : 
; 341  : 
; 342  : // assignment operators
; 343  : D3DXINLINE D3DXVECTOR4&
; 344  : D3DXVECTOR4::operator += ( CONST D3DXVECTOR4& v )
; 345  : {
; 346  :     x += v.x;
; 347  :     y += v.y;
; 348  :     z += v.z;
; 349  :     w += v.w;
; 350  :     return *this;
; 351  : }
; 352  : 
; 353  : D3DXINLINE D3DXVECTOR4&
; 354  : D3DXVECTOR4::operator -= ( CONST D3DXVECTOR4& v )
; 355  : {
; 356  :     x -= v.x;
; 357  :     y -= v.y;
; 358  :     z -= v.z;
; 359  :     w -= v.w;
; 360  :     return *this;
; 361  : }
; 362  : 
; 363  : D3DXINLINE D3DXVECTOR4&
; 364  : D3DXVECTOR4::operator *= ( FLOAT f )
; 365  : {
; 366  :     x *= f;
; 367  :     y *= f;
; 368  :     z *= f;
; 369  :     w *= f;
; 370  :     return *this;
; 371  : }
; 372  : 
; 373  : D3DXINLINE D3DXVECTOR4&
; 374  : D3DXVECTOR4::operator /= ( FLOAT f )
; 375  : {
; 376  :     FLOAT fInv = 1.0f / f;
; 377  :     x *= fInv;
; 378  :     y *= fInv;
; 379  :     z *= fInv;
; 380  :     w *= fInv;
; 381  :     return *this;
; 382  : }
; 383  : 
; 384  : 
; 385  : // unary operators
; 386  : D3DXINLINE D3DXVECTOR4
; 387  : D3DXVECTOR4::operator + () const
; 388  : {
; 389  :     return *this;
; 390  : }
; 391  : 
; 392  : D3DXINLINE D3DXVECTOR4
; 393  : D3DXVECTOR4::operator - () const
; 394  : {
; 395  :     return D3DXVECTOR4(-x, -y, -z, -w);
; 396  : }
; 397  : 
; 398  : 
; 399  : // binary operators
; 400  : D3DXINLINE D3DXVECTOR4
; 401  : D3DXVECTOR4::operator + ( CONST D3DXVECTOR4& v ) const
; 402  : {
; 403  :     return D3DXVECTOR4(x + v.x, y + v.y, z + v.z, w + v.w);
; 404  : }
; 405  : 
; 406  : D3DXINLINE D3DXVECTOR4
; 407  : D3DXVECTOR4::operator - ( CONST D3DXVECTOR4& v ) const
; 408  : {
; 409  :     return D3DXVECTOR4(x - v.x, y - v.y, z - v.z, w - v.w);
; 410  : }
; 411  : 
; 412  : D3DXINLINE D3DXVECTOR4
; 413  : D3DXVECTOR4::operator * ( FLOAT f ) const
; 414  : {
; 415  :     return D3DXVECTOR4(x * f, y * f, z * f, w * f);
; 416  : }
; 417  : 
; 418  : D3DXINLINE D3DXVECTOR4
; 419  : D3DXVECTOR4::operator / ( FLOAT f ) const
; 420  : {
; 421  :     FLOAT fInv = 1.0f / f;
; 422  :     return D3DXVECTOR4(x * fInv, y * fInv, z * fInv, w * fInv);
; 423  : }
; 424  : 
; 425  : 
; 426  : D3DXINLINE D3DXVECTOR4
; 427  : operator * ( FLOAT f, CONST D3DXVECTOR4& v )
; 428  : {
; 429  :     return D3DXVECTOR4(f * v.x, f * v.y, f * v.z, f * v.w);
; 430  : }
; 431  : 
; 432  : 
; 433  : D3DXINLINE BOOL
; 434  : D3DXVECTOR4::operator == ( CONST D3DXVECTOR4& v ) const
; 435  : {
; 436  :     return x == v.x && y == v.y && z == v.z && w == v.w;
; 437  : }
; 438  : 
; 439  : D3DXINLINE BOOL
; 440  : D3DXVECTOR4::operator != ( CONST D3DXVECTOR4& v ) const
; 441  : {
; 442  :     return x != v.x || y != v.y || z != v.z || w != v.w;
; 443  : }
; 444  : 
; 445  : 
; 446  : //--------------------------
; 447  : // Matrix
; 448  : //--------------------------
; 449  : D3DXINLINE
; 450  : D3DXMATRIX::D3DXMATRIX( CONST FLOAT* pf )
; 451  : {
; 452  : #ifdef D3DX_DEBUG
; 453  :     if(!pf)
; 454  :         return;
; 455  : #endif
; 456  : 
; 457  :     memcpy(&_11, pf, sizeof(D3DXMATRIX));
; 458  : }
; 459  : 
; 460  : D3DXINLINE
; 461  : D3DXMATRIX::D3DXMATRIX( CONST D3DMATRIX& mat )
; 462  : {
; 463  :     memcpy(&_11, &mat, sizeof(D3DXMATRIX));
; 464  : }
; 465  : 
; 466  : D3DXINLINE
; 467  : D3DXMATRIX::D3DXMATRIX( FLOAT f11, FLOAT f12, FLOAT f13, FLOAT f14,
; 468  :                         FLOAT f21, FLOAT f22, FLOAT f23, FLOAT f24,
; 469  :                         FLOAT f31, FLOAT f32, FLOAT f33, FLOAT f34,
; 470  :                         FLOAT f41, FLOAT f42, FLOAT f43, FLOAT f44 )
; 471  : {
; 472  :     _11 = f11; _12 = f12; _13 = f13; _14 = f14;
; 473  :     _21 = f21; _22 = f22; _23 = f23; _24 = f24;
; 474  :     _31 = f31; _32 = f32; _33 = f33; _34 = f34;
; 475  :     _41 = f41; _42 = f42; _43 = f43; _44 = f44;
; 476  : }
; 477  : 
; 478  : 
; 479  : 
; 480  : // access grants
; 481  : D3DXINLINE FLOAT&
; 482  : D3DXMATRIX::operator () ( UINT iRow, UINT iCol )
; 483  : {
; 484  :     return m[iRow][iCol];
; 485  : }
; 486  : 
; 487  : D3DXINLINE FLOAT
; 488  : D3DXMATRIX::operator () ( UINT iRow, UINT iCol ) const
; 489  : {
; 490  :     return m[iRow][iCol];
; 491  : }
; 492  : 
; 493  : 
; 494  : // casting operators
; 495  : D3DXINLINE
; 496  : D3DXMATRIX::operator FLOAT* ()
; 497  : {
; 498  :     return (FLOAT *) &_11;
; 499  : }
; 500  : 
; 501  : D3DXINLINE
; 502  : D3DXMATRIX::operator CONST FLOAT* () const
; 503  : {
; 504  :     return (CONST FLOAT *) &_11;
; 505  : }
; 506  : 
; 507  : 
; 508  : // assignment operators
; 509  : D3DXINLINE D3DXMATRIX&
; 510  : D3DXMATRIX::operator *= ( CONST D3DXMATRIX& mat )
; 511  : {
; 512  :     D3DXMatrixMultiply(this, this, &mat);
; 513  :     return *this;
; 514  : }
; 515  : 
; 516  : D3DXINLINE D3DXMATRIX&
; 517  : D3DXMATRIX::operator += ( CONST D3DXMATRIX& mat )
; 518  : {
; 519  :     _11 += mat._11; _12 += mat._12; _13 += mat._13; _14 += mat._14;
; 520  :     _21 += mat._21; _22 += mat._22; _23 += mat._23; _24 += mat._24;
; 521  :     _31 += mat._31; _32 += mat._32; _33 += mat._33; _34 += mat._34;
; 522  :     _41 += mat._41; _42 += mat._42; _43 += mat._43; _44 += mat._44;
; 523  :     return *this;
; 524  : }
; 525  : 
; 526  : D3DXINLINE D3DXMATRIX&
; 527  : D3DXMATRIX::operator -= ( CONST D3DXMATRIX& mat )
; 528  : {
; 529  :     _11 -= mat._11; _12 -= mat._12; _13 -= mat._13; _14 -= mat._14;
; 530  :     _21 -= mat._21; _22 -= mat._22; _23 -= mat._23; _24 -= mat._24;
; 531  :     _31 -= mat._31; _32 -= mat._32; _33 -= mat._33; _34 -= mat._34;
; 532  :     _41 -= mat._41; _42 -= mat._42; _43 -= mat._43; _44 -= mat._44;
; 533  :     return *this;
; 534  : }
; 535  : 
; 536  : D3DXINLINE D3DXMATRIX&
; 537  : D3DXMATRIX::operator *= ( FLOAT f )
; 538  : {
; 539  :     _11 *= f; _12 *= f; _13 *= f; _14 *= f;
; 540  :     _21 *= f; _22 *= f; _23 *= f; _24 *= f;
; 541  :     _31 *= f; _32 *= f; _33 *= f; _34 *= f;
; 542  :     _41 *= f; _42 *= f; _43 *= f; _44 *= f;
; 543  :     return *this;
; 544  : }
; 545  : 
; 546  : D3DXINLINE D3DXMATRIX&
; 547  : D3DXMATRIX::operator /= ( FLOAT f )
; 548  : {
; 549  :     FLOAT fInv = 1.0f / f;
; 550  :     _11 *= fInv; _12 *= fInv; _13 *= fInv; _14 *= fInv;
; 551  :     _21 *= fInv; _22 *= fInv; _23 *= fInv; _24 *= fInv;
; 552  :     _31 *= fInv; _32 *= fInv; _33 *= fInv; _34 *= fInv;
; 553  :     _41 *= fInv; _42 *= fInv; _43 *= fInv; _44 *= fInv;
; 554  :     return *this;
; 555  : }
; 556  : 
; 557  : 
; 558  : // unary operators
; 559  : D3DXINLINE D3DXMATRIX
; 560  : D3DXMATRIX::operator + () const
; 561  : {
; 562  :     return *this;
; 563  : }
; 564  : 
; 565  : D3DXINLINE D3DXMATRIX
; 566  : D3DXMATRIX::operator - () const
; 567  : {
; 568  :     return D3DXMATRIX(-_11, -_12, -_13, -_14,
; 569  :                       -_21, -_22, -_23, -_24,
; 570  :                       -_31, -_32, -_33, -_34,
; 571  :                       -_41, -_42, -_43, -_44);
; 572  : }
; 573  : 
; 574  : 
; 575  : // binary operators
; 576  : D3DXINLINE D3DXMATRIX
; 577  : D3DXMATRIX::operator * ( CONST D3DXMATRIX& mat ) const
; 578  : {
; 579  :     D3DXMATRIX matT;
; 580  :     D3DXMatrixMultiply(&matT, this, &mat);
; 581  :     return matT;
; 582  : }
; 583  : 
; 584  : D3DXINLINE D3DXMATRIX
; 585  : D3DXMATRIX::operator + ( CONST D3DXMATRIX& mat ) const
; 586  : {
; 587  :     return D3DXMATRIX(_11 + mat._11, _12 + mat._12, _13 + mat._13, _14 + mat._14,
; 588  :                       _21 + mat._21, _22 + mat._22, _23 + mat._23, _24 + mat._24,
; 589  :                       _31 + mat._31, _32 + mat._32, _33 + mat._33, _34 + mat._34,
; 590  :                       _41 + mat._41, _42 + mat._42, _43 + mat._43, _44 + mat._44);
; 591  : }
; 592  : 
; 593  : D3DXINLINE D3DXMATRIX
; 594  : D3DXMATRIX::operator - ( CONST D3DXMATRIX& mat ) const
; 595  : {
; 596  :     return D3DXMATRIX(_11 - mat._11, _12 - mat._12, _13 - mat._13, _14 - mat._14,
; 597  :                       _21 - mat._21, _22 - mat._22, _23 - mat._23, _24 - mat._24,
; 598  :                       _31 - mat._31, _32 - mat._32, _33 - mat._33, _34 - mat._34,
; 599  :                       _41 - mat._41, _42 - mat._42, _43 - mat._43, _44 - mat._44);
; 600  : }
; 601  : 
; 602  : D3DXINLINE D3DXMATRIX
; 603  : D3DXMATRIX::operator * ( FLOAT f ) const
; 604  : {
; 605  :     return D3DXMATRIX(_11 * f, _12 * f, _13 * f, _14 * f,
; 606  :                       _21 * f, _22 * f, _23 * f, _24 * f,
; 607  :                       _31 * f, _32 * f, _33 * f, _34 * f,
; 608  :                       _41 * f, _42 * f, _43 * f, _44 * f);
; 609  : }
; 610  : 
; 611  : D3DXINLINE D3DXMATRIX
; 612  : D3DXMATRIX::operator / ( FLOAT f ) const
; 613  : {
; 614  :     FLOAT fInv = 1.0f / f;
; 615  :     return D3DXMATRIX(_11 * fInv, _12 * fInv, _13 * fInv, _14 * fInv,
; 616  :                       _21 * fInv, _22 * fInv, _23 * fInv, _24 * fInv,
; 617  :                       _31 * fInv, _32 * fInv, _33 * fInv, _34 * fInv,
; 618  :                       _41 * fInv, _42 * fInv, _43 * fInv, _44 * fInv);
; 619  : }
; 620  : 
; 621  : 
; 622  : D3DXINLINE D3DXMATRIX
; 623  : operator * ( FLOAT f, CONST D3DXMATRIX& mat )
; 624  : {
; 625  :     return D3DXMATRIX(f * mat._11, f * mat._12, f * mat._13, f * mat._14,
; 626  :                       f * mat._21, f * mat._22, f * mat._23, f * mat._24,
; 627  :                       f * mat._31, f * mat._32, f * mat._33, f * mat._34,
; 628  :                       f * mat._41, f * mat._42, f * mat._43, f * mat._44);
; 629  : }
; 630  : 
; 631  : 
; 632  : D3DXINLINE BOOL
; 633  : D3DXMATRIX::operator == ( CONST D3DXMATRIX& mat ) const
; 634  : {
; 635  :     return 0 == memcmp(this, &mat, sizeof(D3DXMATRIX));
; 636  : }
; 637  : 
; 638  : D3DXINLINE BOOL
; 639  : D3DXMATRIX::operator != ( CONST D3DXMATRIX& mat ) const
; 640  : {
; 641  :     return 0 != memcmp(this, &mat, sizeof(D3DXMATRIX));
; 642  : }
; 643  : 
; 644  : 
; 645  : 
; 646  : //--------------------------
; 647  : // Quaternion
; 648  : //--------------------------
; 649  : 
; 650  : D3DXINLINE
; 651  : D3DXQUATERNION::D3DXQUATERNION( CONST FLOAT* pf )
; 652  : {
; 653  : #ifdef D3DX_DEBUG
; 654  :     if(!pf)
; 655  :         return;
; 656  : #endif
; 657  : 
; 658  :     x = pf[0];
; 659  :     y = pf[1];
; 660  :     z = pf[2];
; 661  :     w = pf[3];
; 662  : }
; 663  : 
; 664  : D3DXINLINE
; 665  : D3DXQUATERNION::D3DXQUATERNION( FLOAT fx, FLOAT fy, FLOAT fz, FLOAT fw )
; 666  : {
; 667  :     x = fx;
; 668  :     y = fy;
; 669  :     z = fz;
; 670  :     w = fw;
; 671  : }
; 672  : 
; 673  : 
; 674  : // casting
; 675  : D3DXINLINE
; 676  : D3DXQUATERNION::operator FLOAT* ()
; 677  : {
; 678  :     return (FLOAT *) &x;
; 679  : }
; 680  : 
; 681  : D3DXINLINE
; 682  : D3DXQUATERNION::operator CONST FLOAT* () const
; 683  : {
; 684  :     return (CONST FLOAT *) &x;
; 685  : }
; 686  : 
; 687  : 
; 688  : // assignment operators
; 689  : D3DXINLINE D3DXQUATERNION&
; 690  : D3DXQUATERNION::operator += ( CONST D3DXQUATERNION& q )
; 691  : {
; 692  :     x += q.x;
; 693  :     y += q.y;
; 694  :     z += q.z;
; 695  :     w += q.w;
; 696  :     return *this;
; 697  : }
; 698  : 
; 699  : D3DXINLINE D3DXQUATERNION&
; 700  : D3DXQUATERNION::operator -= ( CONST D3DXQUATERNION& q )
; 701  : {
; 702  :     x -= q.x;
; 703  :     y -= q.y;
; 704  :     z -= q.z;
; 705  :     w -= q.w;
; 706  :     return *this;
; 707  : }
; 708  : 
; 709  : D3DXINLINE D3DXQUATERNION&
; 710  : D3DXQUATERNION::operator *= ( CONST D3DXQUATERNION& q )
; 711  : {
; 712  :     D3DXQuaternionMultiply(this, this, &q);
; 713  :     return *this;
; 714  : }
; 715  : 
; 716  : D3DXINLINE D3DXQUATERNION&
; 717  : D3DXQUATERNION::operator *= ( FLOAT f )
; 718  : {
; 719  :     x *= f;
; 720  :     y *= f;
; 721  :     z *= f;
; 722  :     w *= f;
; 723  :     return *this;
; 724  : }
; 725  : 
; 726  : D3DXINLINE D3DXQUATERNION&
; 727  : D3DXQUATERNION::operator /= ( FLOAT f )
; 728  : {
; 729  :     FLOAT fInv = 1.0f / f;
; 730  :     x *= fInv;
; 731  :     y *= fInv;
; 732  :     z *= fInv;
; 733  :     w *= fInv;
; 734  :     return *this;
; 735  : }
; 736  : 
; 737  : 
; 738  : // unary operators
; 739  : D3DXINLINE D3DXQUATERNION
; 740  : D3DXQUATERNION::operator + () const
; 741  : {
; 742  :     return *this;
; 743  : }
; 744  : 
; 745  : D3DXINLINE D3DXQUATERNION
; 746  : D3DXQUATERNION::operator - () const
; 747  : {
; 748  :     return D3DXQUATERNION(-x, -y, -z, -w);
; 749  : }
; 750  : 
; 751  : 
; 752  : // binary operators
; 753  : D3DXINLINE D3DXQUATERNION
; 754  : D3DXQUATERNION::operator + ( CONST D3DXQUATERNION& q ) const
; 755  : {
; 756  :     return D3DXQUATERNION(x + q.x, y + q.y, z + q.z, w + q.w);
; 757  : }
; 758  : 
; 759  : D3DXINLINE D3DXQUATERNION
; 760  : D3DXQUATERNION::operator - ( CONST D3DXQUATERNION& q ) const
; 761  : {
; 762  :     return D3DXQUATERNION(x - q.x, y - q.y, z - q.z, w - q.w);
; 763  : }
; 764  : 
; 765  : D3DXINLINE D3DXQUATERNION
; 766  : D3DXQUATERNION::operator * ( CONST D3DXQUATERNION& q ) const
; 767  : {
; 768  :     D3DXQUATERNION qT;
; 769  :     D3DXQuaternionMultiply(&qT, this, &q);
; 770  :     return qT;
; 771  : }
; 772  : 
; 773  : D3DXINLINE D3DXQUATERNION
; 774  : D3DXQUATERNION::operator * ( FLOAT f ) const
; 775  : {
; 776  :     return D3DXQUATERNION(x * f, y * f, z * f, w * f);
; 777  : }
; 778  : 
; 779  : D3DXINLINE D3DXQUATERNION
; 780  : D3DXQUATERNION::operator / ( FLOAT f ) const
; 781  : {
; 782  :     FLOAT fInv = 1.0f / f;
; 783  :     return D3DXQUATERNION(x * fInv, y * fInv, z * fInv, w * fInv);
; 784  : }
; 785  : 
; 786  : 
; 787  : D3DXINLINE D3DXQUATERNION
; 788  : operator * (FLOAT f, CONST D3DXQUATERNION& q )
; 789  : {
; 790  :     return D3DXQUATERNION(f * q.x, f * q.y, f * q.z, f * q.w);
; 791  : }
; 792  : 
; 793  : 
; 794  : D3DXINLINE BOOL
; 795  : D3DXQUATERNION::operator == ( CONST D3DXQUATERNION& q ) const
; 796  : {
; 797  :     return x == q.x && y == q.y && z == q.z && w == q.w;
; 798  : }
; 799  : 
; 800  : D3DXINLINE BOOL
; 801  : D3DXQUATERNION::operator != ( CONST D3DXQUATERNION& q ) const
; 802  : {
; 803  :     return x != q.x || y != q.y || z != q.z || w != q.w;
; 804  : }
; 805  : 
; 806  : 
; 807  : 
; 808  : //--------------------------
; 809  : // Plane
; 810  : //--------------------------
; 811  : 
; 812  : D3DXINLINE
; 813  : D3DXPLANE::D3DXPLANE( CONST FLOAT* pf )
; 814  : {
; 815  : #ifdef D3DX_DEBUG
; 816  :     if(!pf)
; 817  :         return;
; 818  : #endif
; 819  : 
; 820  :     a = pf[0];
; 821  :     b = pf[1];
; 822  :     c = pf[2];
; 823  :     d = pf[3];
; 824  : }
; 825  : 
; 826  : D3DXINLINE
; 827  : D3DXPLANE::D3DXPLANE( FLOAT fa, FLOAT fb, FLOAT fc, FLOAT fd )
; 828  : {
; 829  :     a = fa;
; 830  :     b = fb;
; 831  :     c = fc;
; 832  :     d = fd;
; 833  : }
; 834  : 
; 835  : 
; 836  : // casting
; 837  : D3DXINLINE
; 838  : D3DXPLANE::operator FLOAT* ()
; 839  : {
; 840  :     return (FLOAT *) &a;
; 841  : }
; 842  : 
; 843  : D3DXINLINE
; 844  : D3DXPLANE::operator CONST FLOAT* () const
; 845  : {
; 846  :     return (CONST FLOAT *) &a;
; 847  : }
; 848  : 
; 849  : 
; 850  : // unary operators
; 851  : D3DXINLINE D3DXPLANE
; 852  : D3DXPLANE::operator + () const
; 853  : {
; 854  :     return *this;
; 855  : }
; 856  : 
; 857  : D3DXINLINE D3DXPLANE
; 858  : D3DXPLANE::operator - () const
; 859  : {
; 860  :     return D3DXPLANE(-a, -b, -c, -d);
; 861  : }
; 862  : 
; 863  : 
; 864  : // binary operators
; 865  : D3DXINLINE BOOL
; 866  : D3DXPLANE::operator == ( CONST D3DXPLANE& p ) const
; 867  : {
; 868  :     return a == p.a && b == p.b && c == p.c && d == p.d;
; 869  : }
; 870  : 
; 871  : D3DXINLINE BOOL
; 872  : D3DXPLANE::operator != ( CONST D3DXPLANE& p ) const
; 873  : {
; 874  :     return a != p.a || b != p.b || c != p.c || d != p.d;
; 875  : }
; 876  : 
; 877  : 
; 878  : 
; 879  : 
; 880  : //--------------------------
; 881  : // Color
; 882  : //--------------------------
; 883  : 
; 884  : D3DXINLINE
; 885  : D3DXCOLOR::D3DXCOLOR( DWORD dw )
; 886  : {
; 887  :     CONST FLOAT f = 1.0f / 255.0f;
; 888  :     r = f * (FLOAT) (unsigned char) (dw >> 16);
; 889  :     g = f * (FLOAT) (unsigned char) (dw >>  8);
; 890  :     b = f * (FLOAT) (unsigned char) (dw >>  0);
; 891  :     a = f * (FLOAT) (unsigned char) (dw >> 24);
; 892  : }
; 893  : 
; 894  : D3DXINLINE
; 895  : D3DXCOLOR::D3DXCOLOR( CONST FLOAT* pf )
; 896  : {
; 897  : #ifdef D3DX_DEBUG
; 898  :     if(!pf)
; 899  :         return;
; 900  : #endif
; 901  : 
; 902  :     r = pf[0];
; 903  :     g = pf[1];
; 904  :     b = pf[2];
; 905  :     a = pf[3];
; 906  : }
; 907  : 
; 908  : D3DXINLINE
; 909  : D3DXCOLOR::D3DXCOLOR( CONST D3DCOLORVALUE& c )
; 910  : {
; 911  :     r = c.r;
; 912  :     g = c.g;
; 913  :     b = c.b;
; 914  :     a = c.a;
; 915  : }
; 916  : 
; 917  : D3DXINLINE
; 918  : D3DXCOLOR::D3DXCOLOR( FLOAT fr, FLOAT fg, FLOAT fb, FLOAT fa )
; 919  : {
; 920  :     r = fr;
; 921  :     g = fg;
; 922  :     b = fb;
; 923  :     a = fa;
; 924  : }
; 925  : 
; 926  : 
; 927  : // casting
; 928  : D3DXINLINE
; 929  : D3DXCOLOR::operator DWORD () const
; 930  : {
; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);
; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);
; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);
; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);
; 935  : 
; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;
; 937  : }
; 938  : 
; 939  : 
; 940  : D3DXINLINE
; 941  : D3DXCOLOR::operator FLOAT * ()
; 942  : {
; 943  :     return (FLOAT *) &r;
; 944  : }
; 945  : 
; 946  : D3DXINLINE
; 947  : D3DXCOLOR::operator CONST FLOAT * () const
; 948  : {
; 949  :     return (CONST FLOAT *) &r;
; 950  : }
; 951  : 
; 952  : 
; 953  : D3DXINLINE
; 954  : D3DXCOLOR::operator D3DCOLORVALUE * ()
; 955  : {
; 956  :     return (D3DCOLORVALUE *) &r;
; 957  : }
; 958  : 
; 959  : D3DXINLINE
; 960  : D3DXCOLOR::operator CONST D3DCOLORVALUE * () const
; 961  : {
; 962  :     return (CONST D3DCOLORVALUE *) &r;
; 963  : }
; 964  : 
; 965  : 
; 966  : D3DXINLINE
; 967  : D3DXCOLOR::operator D3DCOLORVALUE& ()
; 968  : {
; 969  :     return *((D3DCOLORVALUE *) &r);
; 970  : }
; 971  : 
; 972  : D3DXINLINE
; 973  : D3DXCOLOR::operator CONST D3DCOLORVALUE& () const
; 974  : {
; 975  :     return *((CONST D3DCOLORVALUE *) &r);
; 976  : }
; 977  : 
; 978  : 
; 979  : // assignment operators
; 980  : D3DXINLINE D3DXCOLOR&
; 981  : D3DXCOLOR::operator += ( CONST D3DXCOLOR& c )
; 982  : {
; 983  :     r += c.r;
; 984  :     g += c.g;
; 985  :     b += c.b;
; 986  :     a += c.a;
; 987  :     return *this;
; 988  : }
; 989  : 
; 990  : D3DXINLINE D3DXCOLOR&
; 991  : D3DXCOLOR::operator -= ( CONST D3DXCOLOR& c )
; 992  : {
; 993  :     r -= c.r;
; 994  :     g -= c.g;
; 995  :     b -= c.b;
; 996  :     a -= c.a;
; 997  :     return *this;
; 998  : }
; 999  : 
; 1000 : D3DXINLINE D3DXCOLOR&
; 1001 : D3DXCOLOR::operator *= ( FLOAT f )
; 1002 : {
; 1003 :     r *= f;
; 1004 :     g *= f;
; 1005 :     b *= f;
; 1006 :     a *= f;
; 1007 :     return *this;
; 1008 : }
; 1009 : 
; 1010 : D3DXINLINE D3DXCOLOR&
; 1011 : D3DXCOLOR::operator /= ( FLOAT f )
; 1012 : {
; 1013 :     FLOAT fInv = 1.0f / f;
; 1014 :     r *= fInv;
; 1015 :     g *= fInv;
; 1016 :     b *= fInv;
; 1017 :     a *= fInv;
; 1018 :     return *this;
; 1019 : }
; 1020 : 
; 1021 : 
; 1022 : // unary operators
; 1023 : D3DXINLINE D3DXCOLOR
; 1024 : D3DXCOLOR::operator + () const
; 1025 : {
; 1026 :     return *this;
; 1027 : }
; 1028 : 
; 1029 : D3DXINLINE D3DXCOLOR
; 1030 : D3DXCOLOR::operator - () const
; 1031 : {
; 1032 :     return D3DXCOLOR(-r, -g, -b, -a);
; 1033 : }
; 1034 : 
; 1035 : 
; 1036 : // binary operators
; 1037 : D3DXINLINE D3DXCOLOR
; 1038 : D3DXCOLOR::operator + ( CONST D3DXCOLOR& c ) const
; 1039 : {
; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);
; 1041 : }
; 1042 : 
; 1043 : D3DXINLINE D3DXCOLOR
; 1044 : D3DXCOLOR::operator - ( CONST D3DXCOLOR& c ) const
; 1045 : {
; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);
; 1047 : }
; 1048 : 
; 1049 : D3DXINLINE D3DXCOLOR
; 1050 : D3DXCOLOR::operator * ( FLOAT f ) const
; 1051 : {
; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);
; 1053 : }
; 1054 : 
; 1055 : D3DXINLINE D3DXCOLOR
; 1056 : D3DXCOLOR::operator / ( FLOAT f ) const
; 1057 : {
; 1058 :     FLOAT fInv = 1.0f / f;
; 1059 :     return D3DXCOLOR(r * fInv, g * fInv, b * fInv, a * fInv);
; 1060 : }
; 1061 : 
; 1062 : 
; 1063 : D3DXINLINE D3DXCOLOR
; 1064 : operator * (FLOAT f, CONST D3DXCOLOR& c )
; 1065 : {
; 1066 :     return D3DXCOLOR(f * c.r, f * c.g, f * c.b, f * c.a);
; 1067 : }
; 1068 : 
; 1069 : 
; 1070 : D3DXINLINE BOOL
; 1071 : D3DXCOLOR::operator == ( CONST D3DXCOLOR& c ) const
; 1072 : {
; 1073 :     return r == c.r && g == c.g && b == c.b && a == c.a;
; 1074 : }
; 1075 : 
; 1076 : D3DXINLINE BOOL
; 1077 : D3DXCOLOR::operator != ( CONST D3DXCOLOR& c ) const
; 1078 : {
; 1079 :     return r != c.r || g != c.g || b != c.b || a != c.a;
; 1080 : }
; 1081 : 
; 1082 : 
; 1083 : #endif //__cplusplus
; 1084 : 
; 1085 : 
; 1086 : 
; 1087 : //===========================================================================
; 1088 : //
; 1089 : // Inline functions
; 1090 : //
; 1091 : //===========================================================================
; 1092 : 
; 1093 : 
; 1094 : //--------------------------
; 1095 : // 2D Vector
; 1096 : //--------------------------
; 1097 : 
; 1098 : D3DXINLINE FLOAT D3DXVec2Length
; 1099 :     ( CONST D3DXVECTOR2 *pV )
; 1100 : {
; 1101 : #ifdef D3DX_DEBUG
; 1102 :     if(!pV)
; 1103 :         return 0.0f;
; 1104 : #endif
; 1105 : 
; 1106 : #ifdef __cplusplus
; 1107 :     return sqrtf(pV->x * pV->x + pV->y * pV->y);
; 1108 : #else
; 1109 :     return (FLOAT) sqrt(pV->x * pV->x + pV->y * pV->y);
; 1110 : #endif
; 1111 : }
; 1112 : 
; 1113 : D3DXINLINE FLOAT D3DXVec2LengthSq
; 1114 :     ( CONST D3DXVECTOR2 *pV )
; 1115 : {
; 1116 : #ifdef D3DX_DEBUG
; 1117 :     if(!pV)
; 1118 :         return 0.0f;
; 1119 : #endif
; 1120 : 
; 1121 :     return pV->x * pV->x + pV->y * pV->y;
; 1122 : }
; 1123 : 
; 1124 : D3DXINLINE FLOAT D3DXVec2Dot
; 1125 :     ( CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1126 : {
; 1127 : #ifdef D3DX_DEBUG
; 1128 :     if(!pV1 || !pV2)
; 1129 :         return 0.0f;
; 1130 : #endif
; 1131 : 
; 1132 :     return pV1->x * pV2->x + pV1->y * pV2->y;
; 1133 : }
; 1134 : 
; 1135 : D3DXINLINE FLOAT D3DXVec2CCW
; 1136 :     ( CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1137 : {
; 1138 : #ifdef D3DX_DEBUG
; 1139 :     if(!pV1 || !pV2)
; 1140 :         return 0.0f;
; 1141 : #endif
; 1142 : 
; 1143 :     return pV1->x * pV2->y - pV1->y * pV2->x;
; 1144 : }
; 1145 : 
; 1146 : D3DXINLINE D3DXVECTOR2* D3DXVec2Add
; 1147 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1148 : {
; 1149 : #ifdef D3DX_DEBUG
; 1150 :     if(!pOut || !pV1 || !pV2)
; 1151 :         return NULL;
; 1152 : #endif
; 1153 : 
; 1154 :     pOut->x = pV1->x + pV2->x;
; 1155 :     pOut->y = pV1->y + pV2->y;
; 1156 :     return pOut;
; 1157 : }
; 1158 : 
; 1159 : D3DXINLINE D3DXVECTOR2* D3DXVec2Subtract
; 1160 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1161 : {
; 1162 : #ifdef D3DX_DEBUG
; 1163 :     if(!pOut || !pV1 || !pV2)
; 1164 :         return NULL;
; 1165 : #endif
; 1166 : 
; 1167 :     pOut->x = pV1->x - pV2->x;
; 1168 :     pOut->y = pV1->y - pV2->y;
; 1169 :     return pOut;
; 1170 : }
; 1171 : 
; 1172 : D3DXINLINE D3DXVECTOR2* D3DXVec2Minimize
; 1173 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1174 : {
; 1175 : #ifdef D3DX_DEBUG
; 1176 :     if(!pOut || !pV1 || !pV2)
; 1177 :         return NULL;
; 1178 : #endif
; 1179 : 
; 1180 :     pOut->x = pV1->x < pV2->x ? pV1->x : pV2->x;
; 1181 :     pOut->y = pV1->y < pV2->y ? pV1->y : pV2->y;
; 1182 :     return pOut;
; 1183 : }
; 1184 : 
; 1185 : D3DXINLINE D3DXVECTOR2* D3DXVec2Maximize
; 1186 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1187 : {
; 1188 : #ifdef D3DX_DEBUG
; 1189 :     if(!pOut || !pV1 || !pV2)
; 1190 :         return NULL;
; 1191 : #endif
; 1192 : 
; 1193 :     pOut->x = pV1->x > pV2->x ? pV1->x : pV2->x;
; 1194 :     pOut->y = pV1->y > pV2->y ? pV1->y : pV2->y;
; 1195 :     return pOut;
; 1196 : }
; 1197 : 
; 1198 : D3DXINLINE D3DXVECTOR2* D3DXVec2Scale
; 1199 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV, FLOAT s )
; 1200 : {
; 1201 : #ifdef D3DX_DEBUG
; 1202 :     if(!pOut || !pV)
; 1203 :         return NULL;
; 1204 : #endif
; 1205 : 
; 1206 :     pOut->x = pV->x * s;
; 1207 :     pOut->y = pV->y * s;
; 1208 :     return pOut;
; 1209 : }
; 1210 : 
; 1211 : D3DXINLINE D3DXVECTOR2* D3DXVec2Lerp
; 1212 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2,
; 1213 :       FLOAT s )
; 1214 : {
; 1215 : #ifdef D3DX_DEBUG
; 1216 :     if(!pOut || !pV1 || !pV2)
; 1217 :         return NULL;
; 1218 : #endif
; 1219 : 
; 1220 :     pOut->x = pV1->x + s * (pV2->x - pV1->x);
; 1221 :     pOut->y = pV1->y + s * (pV2->y - pV1->y);
; 1222 :     return pOut;
; 1223 : }
; 1224 : 
; 1225 : 
; 1226 : //--------------------------
; 1227 : // 3D Vector
; 1228 : //--------------------------
; 1229 : 
; 1230 : D3DXINLINE FLOAT D3DXVec3Length
; 1231 :     ( CONST D3DXVECTOR3 *pV )
; 1232 : {
; 1233 : #ifdef D3DX_DEBUG
; 1234 :     if(!pV)
; 1235 :         return 0.0f;
; 1236 : #endif
; 1237 : 
; 1238 : #ifdef __cplusplus
; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0005f	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00063	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00067	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0006b	f3 0f 58 d1	 addss	 xmm2, xmm1
  0006f	f3 0f 58 d0	 addss	 xmm2, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00073	0f 5a c2	 cvtps2pd xmm0, xmm2
  00076	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  0007b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 120  : 		pLight->SetDistance(D3DXVec3Length(&v3Distance));

  0007f	51		 push	 ecx
  00080	8b 4c 24 14	 mov	 ecx, DWORD PTR _pLight$1$[esp+28]
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	e8 00 00 00 00	 call	 ?SetDistance@CLight@@QAEXM@Z ; CLight::SetDistance
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0008e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00091	8d 44 24 0c	 lea	 eax, DWORD PTR _pLight$1[esp+24]
  00095	3b c1		 cmp	 eax, ecx
  00097	73 33		 jae	 SHORT $LN104@FlushLight
  00099	8b 07		 mov	 eax, DWORD PTR [edi]
  0009b	8d 54 24 0c	 lea	 edx, DWORD PTR _pLight$1[esp+24]
  0009f	3b c2		 cmp	 eax, edx
  000a1	77 29		 ja	 SHORT $LN104@FlushLight

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  000a3	8b da		 mov	 ebx, edx
  000a5	2b d8		 sub	 ebx, eax
  000a7	c1 fb 02	 sar	 ebx, 2

; 1247 : 			if (this->_Mylast == this->_Myend)

  000aa	3b 4f 08	 cmp	 ecx, DWORD PTR [edi+8]
  000ad	75 09		 jne	 SHORT $LN103@FlushLight

; 1248 : 				_Reserve(1);

  000af	6a 01		 push	 1
  000b1	8b cf		 mov	 ecx, edi
  000b3	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Reserve
$LN103@FlushLight:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000b8	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000bb	85 c9		 test	 ecx, ecx
  000bd	74 07		 je	 SHORT $LN129@FlushLight
  000bf	8b 07		 mov	 eax, DWORD PTR [edi]
  000c1	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  000c4	89 01		 mov	 DWORD PTR [ecx], eax
$LN129@FlushLight:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1254 : 		else

  000c6	8b 5c 24 14	 mov	 ebx, DWORD PTR _this$1$[esp+24]
  000ca	eb 1b		 jmp	 SHORT $LN149@FlushLight
$LN104@FlushLight:

; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)

  000cc	3b 4f 08	 cmp	 ecx, DWORD PTR [edi+8]
  000cf	75 09		 jne	 SHORT $LN101@FlushLight

; 1257 : 				_Reserve(1);

  000d1	6a 01		 push	 1
  000d3	8b cf		 mov	 ecx, edi
  000d5	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@IAEXI@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Reserve
$LN101@FlushLight:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  000da	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000dd	85 c0		 test	 eax, eax
  000df	74 06		 je	 SHORT $LN149@FlushLight
  000e1	8b 4c 24 10	 mov	 ecx, DWORD PTR _pLight$1$[esp+24]
  000e5	89 08		 mov	 DWORD PTR [eax], ecx
$LN149@FlushLight:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1261 : 			++this->_Mylast;

  000e7	83 47 04 04	 add	 DWORD PTR [edi+4], 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  000eb	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000ef	75 41		 jne	 SHORT $LN201@FlushLight

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  000f1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  000f4	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f8	75 16		 jne	 SHORT $LN197@FlushLight

; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

  000fa	8b f0		 mov	 esi, eax

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  000fc	8b 06		 mov	 eax, DWORD PTR [esi]

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))
; 610  : 			_Pnode = _Right(_Pnode);
; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))

  000fe	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00102	75 2e		 jne	 SHORT $LN201@FlushLight
$LL50@FlushLight:

; 617  : 			_Pnode = _Left(_Pnode);

  00104	8b f0		 mov	 esi, eax

; 337  : 		}
; 338  : 
; 339  : 	bool operator!=(const _Myiter& _Right) const
; 340  : 		{	// test for iterator inequality
; 341  : 		return (!(*this == _Right));
; 342  : 		}
; 343  : 	};
; 344  : 
; 345  : template<class _Mytree> inline
; 346  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 347  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 348  : 	{	// convert to unchecked
; 349  : 	return (_Iter._Unchecked());
; 350  : 	}
; 351  : 
; 352  : template<class _Mytree> inline
; 353  : 	_Tree_const_iterator<_Mytree>&
; 354  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 355  : 			typename _Tree_const_iterator<_Mytree>
; 356  : 				::_Unchecked_type _Right)
; 357  : 	{	// convert to checked
; 358  : 	return (_Iter._Rechecked(_Right));
; 359  : 	}
; 360  : 
; 361  : 	// TEMPLATE CLASS _Tree_iterator
; 362  : template<class _Mytree>
; 363  : 	class _Tree_iterator
; 364  : 		: public _Tree_const_iterator<_Mytree>
; 365  : 	{	// iterator for mutable tree
; 366  : public:
; 367  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 368  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 369  : 	typedef bidirectional_iterator_tag iterator_category;
; 370  : 
; 371  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 372  : 	typedef typename _Mytree::value_type value_type;
; 373  : 	typedef typename _Mytree::difference_type difference_type;
; 374  : 
; 375  : 	typedef typename _Mytree::pointer pointer;
; 376  : 	typedef typename _Mytree::reference reference;
; 377  : 
; 378  : 	_Tree_iterator()
; 379  : 		{	// construct with null node
; 380  : 		}
; 381  : 
; 382  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 383  : 		: _Mybase(_Pnode, _Plist)
; 384  : 		{	// construct with node pointer _Pnode
; 385  : 		}
; 386  : 
; 387  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 388  : 
; 389  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 390  : 		{	// reset from unchecked iterator
; 391  : 		this->_Ptr = _Right._Ptr;
; 392  : 		return (*this);
; 393  : 		}
; 394  : 
; 395  : 	_Unchecked_type _Unchecked() const
; 396  : 		{	// make an unchecked iterator
; 397  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 398  : 		}
; 399  : 
; 400  : 	reference operator*() const
; 401  : 		{	// return designated value
; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}
; 404  : 
; 405  : 	pointer operator->() const
; 406  : 		{	// return pointer to class object
; 407  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator++()
; 411  : 		{	// preincrement
; 412  : 		++(*(_Mybase *)this);
; 413  : 		return (*this);
; 414  : 		}
; 415  : 
; 416  : 	_Myiter operator++(int)
; 417  : 		{	// postincrement
; 418  : 		_Myiter _Tmp = *this;
; 419  : 		++*this;
; 420  : 		return (_Tmp);
; 421  : 		}
; 422  : 
; 423  : 	_Myiter& operator--()
; 424  : 		{	// predecrement
; 425  : 		--(*(_Mybase *)this);
; 426  : 		return (*this);
; 427  : 		}
; 428  : 
; 429  : 	_Myiter operator--(int)
; 430  : 		{	// postdecrement
; 431  : 		_Myiter _Tmp = *this;
; 432  : 		--*this;
; 433  : 		return (_Tmp);
; 434  : 		}
; 435  : 	};
; 436  : 
; 437  : template<class _Mytree> inline
; 438  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 439  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 440  : 	{	// convert to unchecked
; 441  : 	return (_Iter._Unchecked());
; 442  : 	}
; 443  : 
; 444  : template<class _Mytree> inline
; 445  : 	_Tree_iterator<_Mytree>&
; 446  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 447  : 			typename _Tree_iterator<_Mytree>
; 448  : 				::_Unchecked_type _Right)
; 449  : 	{	// convert to checked
; 450  : 	return (_Iter._Rechecked(_Right));
; 451  : 	}
; 452  : 
; 453  : 		// tree TYPE WRAPPERS
; 454  : template<class _Value_type,
; 455  : 	class _Size_type,
; 456  : 	class _Difference_type,
; 457  : 	class _Pointer,
; 458  : 	class _Const_pointer,
; 459  : 	class _Reference,
; 460  : 	class _Const_reference,
; 461  : 	class _Nodeptr_type>
; 462  : 	struct _Tree_iter_types
; 463  : 	{	// wraps types needed by iterators
; 464  : 	typedef _Value_type value_type;
; 465  : 	typedef _Size_type size_type;
; 466  : 	typedef _Difference_type difference_type;
; 467  : 	typedef _Pointer pointer;
; 468  : 	typedef _Const_pointer const_pointer;
; 469  : 	typedef _Reference reference;
; 470  : 	typedef _Const_reference const_reference;
; 471  : 	typedef _Nodeptr_type _Nodeptr;
; 472  : 	};
; 473  : 
; 474  : template<class _Value_type,
; 475  : 	class _Voidptr>
; 476  : 	struct _Tree_node
; 477  : 		{	// tree node
; 478  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 479  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 480  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 481  : 		char _Color;	// _Red or _Black, _Black if head
; 482  : 		char _Isnil;	// true only if head (also nil) node
; 483  : 		_Value_type _Myval;	// the stored value, unused if head
; 484  : 
; 485  : 	private:
; 486  : 		_Tree_node& operator=(const _Tree_node&);
; 487  : 		};
; 488  : 
; 489  : template<class _Value_type>
; 490  : 	struct _Tree_node<_Value_type, void *>
; 491  : 		{	// tree node
; 492  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 493  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 494  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 495  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 496  : 		char _Color;	// _Red or _Black, _Black if head
; 497  : 		char _Isnil;	// true only if head (also nil) node
; 498  : 		_Value_type _Myval;	// the stored value, unused if head
; 499  : 
; 500  : 	private:
; 501  : 		_Tree_node& operator=(const _Tree_node&);
; 502  : 		};
; 503  : 
; 504  : template<class _Ty>
; 505  : 	struct _Tree_simple_types
; 506  : 		: public _Simple_types<_Ty>
; 507  : 	{	// wraps types needed by iterators
; 508  : 	typedef _Tree_node<_Ty, void *> _Node;
; 509  : 	typedef _Node *_Nodeptr;
; 510  : 	};
; 511  : 
; 512  : template<class _Ty,
; 513  : 	class _Alloc0>
; 514  : 	struct _Tree_base_types
; 515  : 	{	// types needed for a container base
; 516  : 	typedef _Alloc0 _Alloc;
; 517  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 518  : 
; 519  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 520  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 521  : 
; 522  : 
; 523  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 524  : 		_Voidptr;
; 525  : 	typedef _Tree_node<typename _Alty::value_type,
; 526  : 		_Voidptr> _Node;
; 527  : 
; 528  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 529  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 530  : 	typedef _Nodeptr& _Nodepref;
; 531  : 
; 532  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 533  : 		_Tree_simple_types<typename _Alty::value_type>,
; 534  : 		_Tree_iter_types<typename _Alty::value_type,
; 535  : 			typename _Alty::size_type,
; 536  : 			typename _Alty::difference_type,
; 537  : 			typename _Alty::pointer,
; 538  : 			typename _Alty::const_pointer,
; 539  : 			typename _Alty::reference,
; 540  : 			typename _Alty::const_reference,
; 541  : 			_Nodeptr> >::type
; 542  : 		_Val_types;
; 543  : 	};
; 544  : 
; 545  : 		// TEMPLATE CLASS _Tree_val
; 546  : template<class _Val_types>
; 547  : 	class _Tree_val
; 548  : 		: public _Container_base
; 549  : 	{	// base class for tree to hold data
; 550  : public:
; 551  : 	typedef _Tree_val<_Val_types> _Myt;
; 552  : 
; 553  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 554  : 	typedef _Nodeptr& _Nodepref;
; 555  : 
; 556  : 	typedef typename _Val_types::value_type value_type;
; 557  : 	typedef typename _Val_types::size_type size_type;
; 558  : 	typedef typename _Val_types::difference_type difference_type;
; 559  : 	typedef typename _Val_types::pointer pointer;
; 560  : 	typedef typename _Val_types::const_pointer const_pointer;
; 561  : 	typedef typename _Val_types::reference reference;
; 562  : 	typedef typename _Val_types::const_reference const_reference;
; 563  : 
; 564  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 565  : 	typedef _Tree_iterator<_Myt> iterator;
; 566  : 
; 567  : 	_Tree_val()
; 568  : 		{	// initialize data
; 569  : 		this->_Myhead = 0;
; 570  : 		this->_Mysize = 0;
; 571  : 		}
; 572  : 
; 573  : 	enum _Redbl
; 574  : 		{	// colors for link to parent
; 575  : 		_Red, _Black};
; 576  : 
; 577  : 	static char& _Color(_Nodeptr _Pnode)
; 578  : 		{	// return reference to color in node
; 579  : 		return ((char&)_Pnode->_Color);
; 580  : 		}
; 581  : 
; 582  : 	static char& _Isnil(_Nodeptr _Pnode)
; 583  : 		{	// return reference to nil flag in node
; 584  : 		return ((char&)_Pnode->_Isnil);

  00106	8b 06		 mov	 eax, DWORD PTR [esi]

; 590  : 		}
; 591  : 
; 592  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 593  : 		{	// return reference to parent pointer in node
; 594  : 		return ((_Nodepref)_Pnode->_Parent);
; 595  : 		}
; 596  : 
; 597  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 598  : 		{	// return reference to right pointer in node
; 599  : 		return ((_Nodepref)_Pnode->_Right);
; 600  : 		}
; 601  : 
; 602  : 	static reference _Myval(_Nodeptr _Pnode)
; 603  : 		{	// return reference to value in node
; 604  : 		return ((reference)_Pnode->_Myval);
; 605  : 		}
; 606  : 
; 607  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 608  : 		{	// return rightmost node in subtree at _Pnode
; 609  : 		while (!_Isnil(_Right(_Pnode)))
; 610  : 			_Pnode = _Right(_Pnode);
; 611  : 		return (_Pnode);
; 612  : 		}
; 613  : 
; 614  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 615  : 		{	// return leftmost node in subtree at _Pnode
; 616  : 		while (!_Isnil(_Left(_Pnode)))

  00108	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0010c	74 f6		 je	 SHORT $LL50@FlushLight

; 65   : 		else

  0010e	eb 22		 jmp	 SHORT $LN201@FlushLight
$LN197@FlushLight:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  00110	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00113	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00117	75 17		 jne	 SHORT $LN211@FlushLight
  00119	8d a4 24 00 00
	00 00		 npad	 7
$LL34@FlushLight:
  00120	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00123	75 0b		 jne	 SHORT $LN211@FlushLight

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00125	8b f0		 mov	 esi, eax
  00127	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0012a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0012e	74 f0		 je	 SHORT $LL34@FlushLight
$LN211@FlushLight:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00130	8b f0		 mov	 esi, eax
$LN201@FlushLight:

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

  00132	3b 73 20	 cmp	 esi, DWORD PTR [ebx+32]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 114  : 	for (; itor != m_LightMap.end(); ++itor)

  00135	0f 85 f5 fe ff
	ff		 jne	 $LL35@FlushLight
$LN4@FlushLight:

; 125  : 	std::sort(m_LightSortVector.begin(), m_LightSortVector.end(), LightComp());

  0013b	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  0013e	8b d0		 mov	 edx, eax
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 125  : 	std::sort(m_LightSortVector.begin(), m_LightSortVector.end(), LightComp());

  00140	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00142	2b d1		 sub	 edx, ecx
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 125  : 	std::sort(m_LightSortVector.begin(), m_LightSortVector.end(), LightComp());

  00144	c6 44 24 14 00	 mov	 BYTE PTR $T2[esp+24], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3157 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00149	ff 74 24 14	 push	 DWORD PTR $T2[esp+24]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  0014d	c1 fa 02	 sar	 edx, 2
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3157 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00150	52		 push	 edx
  00151	50		 push	 eax
  00152	51		 push	 ecx
  00153	e8 00 00 00 00	 call	 ??$_Sort@PAPAVCLight@@HULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort<CLight * *,int,LightComp>
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 128  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, TRUE);

  00158	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 3157 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  0015e	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 128  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, TRUE);

  00161	6a 01		 push	 1
  00163	68 89 00 00 00	 push	 137			; 00000089H
  00168	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 130  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  0016d	33 f6		 xor	 esi, esi
  0016f	90		 npad	 1
$LL3@FlushLight:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00170	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00173	2b 07		 sub	 eax, DWORD PTR [edi]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 130  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00175	8b 4b 40	 mov	 ecx, DWORD PTR [ebx+64]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00178	c1 f8 02	 sar	 eax, 2
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 130  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  0017b	3b c8		 cmp	 ecx, eax
  0017d	72 08		 jb	 SHORT $LN10@FlushLight
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0017f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00182	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00184	c1 f9 02	 sar	 ecx, 2
$LN10@FlushLight:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 130  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00187	3b f1		 cmp	 esi, ecx
  00189	73 19		 jae	 SHORT $LN1@FlushLight

; 131  : 	{
; 132  : 		m_LightSortVector[k]->Update();

  0018b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0018d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00190	e8 00 00 00 00	 call	 ?Update@CLight@@QAEXXZ	; CLight::Update

; 133  : 		m_LightSortVector[k]->SetDeviceLight(TRUE);

  00195	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00197	6a 01		 push	 1
  00199	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  0019c	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
  001a1	46		 inc	 esi
  001a2	eb cc		 jmp	 SHORT $LL3@FlushLight
$LN1@FlushLight:

; 134  : 
; 135  : 	}
; 136  : }

  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	5b		 pop	 ebx
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
?FlushLight@CLightManager@@QAEXXZ ENDP			; CLightManager::FlushLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?Update@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?Update@CLightManager@@QAEXXZ PROC			; CLightManager::Update, COMDAT
; _this$ = ecx

; 165  : 	//static DWORD s_dwStartTime = ELTimer_GetMSec();
; 166  : 	//ms_fCurTime = float(ELTimer_GetMSec() - s_dwStartTime) / 1000.0f;
; 167  : 	ms_fCurTime = CTimer::Instance().GetCurrentSecond();

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  0000b	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?ms_fCurTime@CLightBase@@1MA ; CLightBase::ms_fCurTime

; 168  : }

  00011	c3		 ret	 0
?Update@CLightManager@@QAEXXZ ENDP			; CLightManager::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?Initialize@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CLightManager@@QAEXXZ PROC			; CLightManager::Initialize, COMDAT
; _this$ = ecx

; 26   : {

  00000	56		 push	 esi

; 27   : 	SetSkipIndex(1);

  00001	6a 01		 push	 1
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?SetSkipIndex@CLightManager@@QAEXK@Z ; CLightManager::SetSkipIndex

; 28   : 	
; 29   : 	m_NonUsingLightIDDeque.clear();

  0000a	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1643 : 		_Tidy();

  0000d	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 31   : 	m_LightMap.clear();

  00012	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00015	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::clear
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 85   : 			m_kVct_pkFree=m_kVct_pkData;

  0001a	8d 46 4c	 lea	 eax, DWORD PTR [esi+76]
  0001d	50		 push	 eax
  0001e	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00021	e8 00 00 00 00	 call	 ??4?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CLight *,std::allocator<CLight *> >::operator=
  00026	5e		 pop	 esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 33   : }

  00027	c3		 ret	 0
?Initialize@CLightManager@@QAEXXZ ENDP			; CLightManager::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?Destroy@CLightManager@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Destroy@CLightManager@@QAEXXZ PROC			; CLightManager::Destroy, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b 59 50	 mov	 ebx, DWORD PTR [ecx+80]
  00008	33 d2		 xor	 edx, edx
  0000a	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1025 : 		return (iterator(this->_Myfirst, this));

  0000b	8b 71 4c	 mov	 esi, DWORD PTR [ecx+76]
  0000e	2b de		 sub	 ebx, esi
  00010	83 c3 03	 add	 ebx, 3
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 21   : {

  00013	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00016	c1 eb 02	 shr	 ebx, 2
  00019	57		 push	 edi
  0001a	33 ff		 xor	 edi, edi
  0001c	3b 71 50	 cmp	 esi, DWORD PTR [ecx+80]
  0001f	0f 47 da	 cmova	 ebx, edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  00022	85 db		 test	 ebx, ebx
  00024	74 15		 je	 SHORT $LN31@Destroy
$LL33@Destroy:

; 24   : 		_Func(*_First);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z ; CDynamicPool<CLight>::Delete
  0002d	47		 inc	 edi
  0002e	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  00031	83 c4 04	 add	 esp, 4
  00034	3b fb		 cmp	 edi, ebx
  00036	75 ee		 jne	 SHORT $LL33@Destroy
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN31@Destroy:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  0003b	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  0003e	5f		 pop	 edi
  0003f	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  00042	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00045	5e		 pop	 esi
  00046	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  00049	5b		 pop	 ebx
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 23   : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?Destroy@CLightManager@@QAEXXZ ENDP			; CLightManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ??1CLightManager@@UAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1CLightManager@@UAE@XZ PROC				; CLightManager::~CLightManager, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CLightManager@@6BCGraphicBase@@@
  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightManager@@6BCLightBase@@@
  00015	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 18   : 		{

  0001c	c7 47 48 00 00
	00 00		 mov	 DWORD PTR [edi+72], OFFSET ??_7?$CDynamicPool@VCLight@@@@6B@
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  00023	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00026	85 c0		 test	 eax, eax
  00028	74 1e		 je	 SHORT $LN14@CLightMana
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00033	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0

; 1630 : 			this->_Mylast = pointer();

  0003a	c7 47 5c 00 00
	00 00		 mov	 DWORD PTR [edi+92], 0

; 1631 : 			this->_Myend = pointer();

  00041	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
$LN14@CLightMana:

; 1623 : 		if (this->_Myfirst != pointer())

  00048	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0004b	85 c0		 test	 eax, eax
  0004d	74 1e		 je	 SHORT $LN27@CLightMana
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00055	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00058	c7 47 4c 00 00
	00 00		 mov	 DWORD PTR [edi+76], 0

; 1630 : 			this->_Mylast = pointer();

  0005f	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0

; 1631 : 			this->_Myend = pointer();

  00066	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0
$LN27@CLightMana:

; 1623 : 		if (this->_Myfirst != pointer())

  0006d	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00070	85 c0		 test	 eax, eax
  00072	74 1e		 je	 SHORT $LN40@CLightMana
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007a	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  0007d	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 1630 : 			this->_Mylast = pointer();

  00084	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 1631 : 			this->_Myend = pointer();

  0008b	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
$LN40@CLightMana:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 2230 : 		erase(begin(), end());

  00092	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00095	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00098	50		 push	 eax
  00099	ff 30		 push	 DWORD PTR [eax]
  0009b	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000a4	ff 77 20	 push	 DWORD PTR [edi+32]
  000a7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ac	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 1215 : 		_Tidy();

  000af	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  000b2	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000b7	ff 77 0c	 push	 DWORD PTR [edi+12]
  000ba	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  000bf	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000c6	83 c4 04	 add	 esp, 4
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h

; 19   : 	{ 

  000c9	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 18   : }

  000d0	8b cf		 mov	 ecx, edi
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h

; 21   : 		ms_singleton = 0; 

  000d2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 23   : 		virtual ~CLightBase() {};

  000dc	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightBase@@6B@
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 18   : }

  000e3	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c3		 ret	 0
??1CLightManager@@UAE@XZ ENDP				; CLightManager::~CLightManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ??0CLightManager@@QAE@XZ
_TEXT	SEGMENT
$T2 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLightManager@@QAE@XZ PROC				; CLightManager::CLightManager, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CLightManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 22   : 		CLightBase() {};

  00038	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightBase@@6B@
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0003f	8b c7		 mov	 eax, edi
  00041	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@
  00048	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, eax ; CSingleton<CLightManager>::ms_singleton
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 11   : {

  0004d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CLightManager@@6BCGraphicBase@@@
  00053	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  00056	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightManager@@6BCLightBase@@@
  0005d	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00064	6a 08		 push	 8
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 11   : {

  00066	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility

; 80   : 		{	// construct childless container

  0006a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 773  : 		_Map = _Mapptr();

  00070	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 774  : 		_Mapsize = 0;

  00077	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 775  : 		_Myoff = 0;

  0007e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 776  : 		_Mysize = 0;

  00085	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0008c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00091	83 c4 04	 add	 esp, 4
  00094	85 c0		 test	 eax, eax
  00096	75 05		 jne	 SHORT $LN34@CLightMana

; 29   : 		_Xbad_alloc();	// report no memory

  00098	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN113@CLightMana:
$LN34@CLightMana:
  0009d	89 06		 mov	 DWORD PTR [esi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0009f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000a5	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  000ac	8b 06		 mov	 eax, DWORD PTR [esi]
  000ae	89 30		 mov	 DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 773  : 		this->_Myhead = _Buyheadnode();

  000b0	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 11   : {

  000b3	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xtree

; 569  : 		this->_Myhead = 0;

  000b7	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0

; 570  : 		this->_Mysize = 0;

  000be	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0

; 773  : 		this->_Myhead = _Buyheadnode();

  000c5	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBKPAVCLight@@@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned long const ,CLight *>,std::allocator<std::pair<unsigned long const ,CLight *> > > >::_Buyheadnode
  000ca	89 47 20	 mov	 DWORD PTR [edi+32], eax
  000cd	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 482  : 		_Myfirst = pointer();

  000d0	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 483  : 		_Mylast = pointer();

  000d7	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 484  : 		_Myend = pointer();

  000de	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 11   : 		CDynamicPool()

  000e5	c7 47 48 00 00
	00 00		 mov	 DWORD PTR [edi+72], OFFSET ??_7?$CDynamicPool@VCLight@@@@6B@
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 482  : 		_Myfirst = pointer();

  000ec	c7 47 4c 00 00
	00 00		 mov	 DWORD PTR [edi+76], 0

; 483  : 		_Mylast = pointer();

  000f3	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0

; 484  : 		_Myend = pointer();

  000fa	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0

; 482  : 		_Myfirst = pointer();

  00101	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0

; 483  : 		_Mylast = pointer();

  00108	c7 47 5c 00 00
	00 00		 mov	 DWORD PTR [edi+92], 0

; 484  : 		_Myend = pointer();

  0010f	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\pool.h

; 14   : 			m_uInitCapacity=0;

  00116	c7 47 64 00 00
	00 00		 mov	 DWORD PTR [edi+100], 0

; 15   : 			m_uUsedCapacity=0;

  0011d	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 12   : 	m_v3CenterPosition			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00124	0f 14 c0	 unpcklps xmm0, xmm0
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00127	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 12   : 	m_v3CenterPosition			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  0012e	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp+8]
  00131	66 0f d6 47 34	 movq	 QWORD PTR [edi+52], xmm0
  00136	89 47 3c	 mov	 DWORD PTR [edi+60], eax

; 13   : 	m_dwLimitLightCount			= LIGHT_LIMIT_DEFAULT;
; 14   : }

  00139	8b c7		 mov	 eax, edi
  0013b	c7 47 40 03 00
	00 00		 mov	 DWORD PTR [edi+64], 3
  00142	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00145	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014c	59		 pop	 ecx
  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
$LN112@CLightMana:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLightManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
__unwindfunclet$??0CLightManager@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1CLightBase@@UAE@XZ	; CLightBase::~CLightBase
__unwindfunclet$??0CLightManager@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCLightManager@@@@UAE@XZ ; CSingleton<CLightManager>::~CSingleton<CLightManager>
__unwindfunclet$??0CLightManager@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00024	e9 00 00 00 00	 jmp	 ??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
__ehhandler$??0CLightManager@@QAE@XZ:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CLightManager@@QAE@XZ
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CLightManager@@QAE@XZ ENDP				; CLightManager::CLightManager
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
;	COMDAT ??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z PROC	; CSingleton<CLightManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 19   : 	{ 

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton
  0001a	74 09		 je	 SHORT $LN6@scalar
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z ENDP	; CSingleton<CLightManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
;	COMDAT ??1?$CSingleton@VCLightManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCLightManager@@@@UAE@XZ PROC		; CSingleton<CLightManager>::~CSingleton<CLightManager>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCLightManager@@@@UAE@XZ ENDP		; CSingleton<CLightManager>::~CSingleton<CLightManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
;	COMDAT ??0?$CSingleton@VCLightManager@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CSingleton@VCLightManager@@@@QAE@XZ PROC		; CSingleton<CLightManager>::CSingleton<CLightManager>, COMDAT
; _this$ = ecx

; 12   : 	{ 
; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 
; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00000	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@
  00009	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, eax ; CSingleton<CLightManager>::ms_singleton

; 16   : 	} 

  0000e	8b c1		 mov	 eax, ecx
  00010	c3		 ret	 0
??0?$CSingleton@VCLightManager@@@@QAE@XZ ENDP		; CSingleton<CLightManager>::CSingleton<CLightManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLight@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLight@@UAEPAXI@Z PROC				; CLight::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLight@@UAE@XZ	; CLight::~CLight
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCLight@@UAEPAXI@Z ENDP				; CLight::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?GetValue@?$CTransitor@M@@QAEHMPAM@Z
_TEXT	SEGMENT
_fcurTime$ = 8						; size = 4
_pValue$ = 12						; size = 4
?GetValue@?$CTransitor@M@@QAEHMPAM@Z PROC		; CTransitor<float>::GetValue, COMDAT
; _this$ = ecx

; 60   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 61   : 			if (fcurTime <= m_fStartTime)

  00003	f3 0f 10 59 08	 movss	 xmm3, DWORD PTR [ecx+8]
  00008	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _fcurTime$[ebp]
  0000d	0f 2f da	 comiss	 xmm3, xmm2
  00010	72 06		 jb	 SHORT $LN1@GetValue

; 62   : 				return FALSE;

  00012	33 c0		 xor	 eax, eax

; 67   : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
$LN1@GetValue:

; 63   : 
; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00018	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  0001d	f3 0f 5c d3	 subss	 xmm2, xmm3
  00021	f3 0f 5c c3	 subss	 xmm0, xmm3

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  00025	8b 45 0c	 mov	 eax, DWORD PTR _pValue$[ebp]
  00028	f3 0f 5e d0	 divss	 xmm2, xmm0
  0002c	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00031	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00036	f3 0f 59 d0	 mulss	 xmm2, xmm0
  0003a	f3 0f 58 51 10	 addss	 xmm2, DWORD PTR [ecx+16]
  0003f	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2

; 66   : 			return TRUE;

  00043	b8 01 00 00 00	 mov	 eax, 1

; 67   : 		}

  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
?GetValue@?$CTransitor@M@@QAEHMPAM@Z ENDP		; CTransitor<float>::GetValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?SetTransition@?$CTransitor@M@@QAEXABM0MM@Z
_TEXT	SEGMENT
_c_rSourceValue$ = 8					; size = 4
_c_rTargetValue$ = 12					; size = 4
_fStartTime$ = 16					; size = 4
_fBlendTime$ = 20					; size = 4
?SetTransition@?$CTransitor@M@@QAEXABM0MM@Z PROC	; CTransitor<float>::SetTransition, COMDAT
; _this$ = ecx

; 52   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   : 			m_SourceValue = c_rSourceValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rSourceValue$[ebp]

; 54   : 			m_TargetValue = c_rTargetValue;
; 55   : 			m_fStartTime = fStartTime;

  00006	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fStartTime$[ebp]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _c_rTargetValue$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 56   : 			m_fEndTime = fStartTime + fBlendTime;

  0001a	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _fBlendTime$[ebp]
  0001f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00022	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 57   : 		}

  00027	5d		 pop	 ebp
  00028	c2 10 00	 ret	 16			; 00000010H
?SetTransition@?$CTransitor@M@@QAEXABM0MM@Z ENDP	; CTransitor<float>::SetTransition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?SetSourceValue@?$CTransitor@M@@QAEXABM@Z
_TEXT	SEGMENT
_c_rSourceValue$ = 8					; size = 4
?SetSourceValue@?$CTransitor@M@@QAEXABM@Z PROC		; CTransitor<float>::SetSourceValue, COMDAT
; _this$ = ecx

; 47   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : 			m_SourceValue = c_rSourceValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rSourceValue$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 49   : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?SetSourceValue@?$CTransitor@M@@QAEXABM@Z ENDP		; CTransitor<float>::SetSourceValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?isActiveTime@?$CTransitor@M@@QAEHM@Z
_TEXT	SEGMENT
_fcurTime$ = 8						; size = 4
?isActiveTime@?$CTransitor@M@@QAEHM@Z PROC		; CTransitor<float>::isActiveTime, COMDAT
; _this$ = ecx

; 29   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : 			if (fcurTime >= m_fEndTime)

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fcurTime$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	0f 2f 41 0c	 comiss	 xmm0, DWORD PTR [ecx+12]
  0000e	0f 92 c0	 setb	 al

; 31   : 				return FALSE;
; 32   : 
; 33   : 			return TRUE;
; 34   : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?isActiveTime@?$CTransitor@M@@QAEHM@Z ENDP		; CTransitor<float>::isActiveTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?isActive@?$CTransitor@M@@QAEHXZ
_TEXT	SEGMENT
?isActive@?$CTransitor@M@@QAEHXZ PROC			; CTransitor<float>::isActive, COMDAT
; _this$ = ecx

; 25   : 			return m_bActivated;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 26   : 		}

  00003	c3		 ret	 0
?isActive@?$CTransitor@M@@QAEHXZ ENDP			; CTransitor<float>::isActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?SetActive@?$CTransitor@M@@QAEXH@Z
_TEXT	SEGMENT
_bActive$ = 8						; size = 4
?SetActive@?$CTransitor@M@@QAEXH@Z PROC			; CTransitor<float>::SetActive, COMDAT
; _this$ = ecx

; 19   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 			m_bActivated = bActive;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bActive$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 21   : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetActive@?$CTransitor@M@@QAEXH@Z ENDP			; CTransitor<float>::SetActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ??1?$CTransitor@M@@QAE@XZ
_TEXT	SEGMENT
??1?$CTransitor@M@@QAE@XZ PROC				; CTransitor<float>::~CTransitor<float>, COMDAT
; _this$ = ecx

; 16   : 		~CTransitor() {}

  00000	c3		 ret	 0
??1?$CTransitor@M@@QAE@XZ ENDP				; CTransitor<float>::~CTransitor<float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ??0?$CTransitor@M@@QAE@XZ
_TEXT	SEGMENT
??0?$CTransitor@M@@QAE@XZ PROC				; CTransitor<float>::CTransitor<float>, COMDAT
; _this$ = ecx

; 15   : 		CTransitor() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$CTransitor@M@@QAE@XZ ENDP				; CTransitor<float>::CTransitor<float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?GetValue@?$CTransitor@UD3DXCOLOR@@@@QAEHMPAUD3DXCOLOR@@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_fcurTime$ = 8						; size = 4
_pValue$ = 12						; size = 4
?GetValue@?$CTransitor@UD3DXCOLOR@@@@QAEHMPAUD3DXCOLOR@@@Z PROC ; CTransitor<D3DXCOLOR>::GetValue, COMDAT
; _this$ = ecx

; 60   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 61   : 			if (fcurTime <= m_fStartTime)

  00003	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00008	83 ec 10	 sub	 esp, 16			; 00000010H
  0000b	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _fcurTime$[ebp]
  00010	0f 2f cd	 comiss	 xmm1, xmm5
  00013	72 08		 jb	 SHORT $LN1@GetValue

; 62   : 				return FALSE;

  00015	33 c0		 xor	 eax, eax

; 67   : 		}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
$LN1@GetValue:

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  0001d	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00022	f3 0f 5c e9	 subss	 xmm5, xmm1
  00026	f3 0f 5c c1	 subss	 xmm0, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0002a	f3 0f 10 51 24	 movss	 xmm2, DWORD PTR [ecx+36]
  0002f	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00034	f3 0f 5c 49 10	 subss	 xmm1, DWORD PTR [ecx+16]
  00039	f3 0f 5c 51 14	 subss	 xmm2, DWORD PTR [ecx+20]
  0003e	f3 0f 10 59 28	 movss	 xmm3, DWORD PTR [ecx+40]
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00043	f3 0f 5e e8	 divss	 xmm5, xmm0

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  00047	8b 45 0c	 mov	 eax, DWORD PTR _pValue$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  0004a	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0004f	f3 0f 5c 59 18	 subss	 xmm3, DWORD PTR [ecx+24]
  00054	f3 0f 10 61 2c	 movss	 xmm4, DWORD PTR [ecx+44]
  00059	f3 0f 5c 61 1c	 subss	 xmm4, DWORD PTR [ecx+28]

; 1047 : }
; 1048 : 
; 1049 : D3DXINLINE D3DXCOLOR
; 1050 : D3DXCOLOR::operator * ( FLOAT f ) const
; 1051 : {
; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  0005e	f3 0f 59 cd	 mulss	 xmm1, xmm5
  00062	f3 0f 59 d5	 mulss	 xmm2, xmm5

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00066	f3 0f 58 c1	 addss	 xmm0, xmm1

; 1047 : }
; 1048 : 
; 1049 : D3DXINLINE D3DXCOLOR
; 1050 : D3DXCOLOR::operator * ( FLOAT f ) const
; 1051 : {
; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  0006a	f3 0f 59 dd	 mulss	 xmm3, xmm5
  0006e	f3 0f 59 e5	 mulss	 xmm4, xmm5

; 920  :     r = fr;

  00072	f3 0f 11 45 f0	 movss	 DWORD PTR $T1[ebp], xmm0

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00077	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0007c	f3 0f 58 c2	 addss	 xmm0, xmm2

; 921  :     g = fg;

  00080	f3 0f 11 45 f4	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00085	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  0008a	f3 0f 58 c3	 addss	 xmm0, xmm3

; 922  :     b = fb;

  0008e	f3 0f 11 45 f8	 movss	 DWORD PTR $T1[ebp+8], xmm0

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00093	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  00098	f3 0f 58 c4	 addss	 xmm0, xmm4

; 923  :     a = fa;

  0009c	f3 0f 11 45 fc	 movss	 DWORD PTR $T1[ebp+12], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  000a1	f3 0f 6f 45 f0	 movdqu	 xmm0, XMMWORD PTR $T1[ebp]
  000a6	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0

; 66   : 			return TRUE;

  000aa	b8 01 00 00 00	 mov	 eax, 1

; 67   : 		}

  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
?GetValue@?$CTransitor@UD3DXCOLOR@@@@QAEHMPAUD3DXCOLOR@@@Z ENDP ; CTransitor<D3DXCOLOR>::GetValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?SetTransition@?$CTransitor@UD3DXCOLOR@@@@QAEXABUD3DXCOLOR@@0MM@Z
_TEXT	SEGMENT
_c_rSourceValue$ = 8					; size = 4
_c_rTargetValue$ = 12					; size = 4
_fStartTime$ = 16					; size = 4
_fBlendTime$ = 20					; size = 4
?SetTransition@?$CTransitor@UD3DXCOLOR@@@@QAEXABUD3DXCOLOR@@0MM@Z PROC ; CTransitor<D3DXCOLOR>::SetTransition, COMDAT
; _this$ = ecx

; 52   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   : 			m_SourceValue = c_rSourceValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rSourceValue$[ebp]
  00006	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]

; 54   : 			m_TargetValue = c_rTargetValue;

  0000a	8b 45 0c	 mov	 eax, DWORD PTR _c_rTargetValue$[ebp]
  0000d	f3 0f 7f 41 10	 movdqu	 XMMWORD PTR [ecx+16], xmm0
  00012	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00016	f3 0f 7f 41 20	 movdqu	 XMMWORD PTR [ecx+32], xmm0

; 55   : 			m_fStartTime = fStartTime;

  0001b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fStartTime$[ebp]
  00020	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 56   : 			m_fEndTime = fStartTime + fBlendTime;

  00025	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _fBlendTime$[ebp]
  0002a	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 57   : 		}

  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
?SetTransition@?$CTransitor@UD3DXCOLOR@@@@QAEXABUD3DXCOLOR@@0MM@Z ENDP ; CTransitor<D3DXCOLOR>::SetTransition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?SetSourceValue@?$CTransitor@UD3DXCOLOR@@@@QAEXABUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_c_rSourceValue$ = 8					; size = 4
?SetSourceValue@?$CTransitor@UD3DXCOLOR@@@@QAEXABUD3DXCOLOR@@@Z PROC ; CTransitor<D3DXCOLOR>::SetSourceValue, COMDAT
; _this$ = ecx

; 47   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : 			m_SourceValue = c_rSourceValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rSourceValue$[ebp]
  00006	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  0000a	f3 0f 7f 41 10	 movdqu	 XMMWORD PTR [ecx+16], xmm0

; 49   : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?SetSourceValue@?$CTransitor@UD3DXCOLOR@@@@QAEXABUD3DXCOLOR@@@Z ENDP ; CTransitor<D3DXCOLOR>::SetSourceValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?isActiveTime@?$CTransitor@UD3DXCOLOR@@@@QAEHM@Z
_TEXT	SEGMENT
_fcurTime$ = 8						; size = 4
?isActiveTime@?$CTransitor@UD3DXCOLOR@@@@QAEHM@Z PROC	; CTransitor<D3DXCOLOR>::isActiveTime, COMDAT
; _this$ = ecx

; 29   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : 			if (fcurTime >= m_fEndTime)

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fcurTime$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	0f 2f 41 0c	 comiss	 xmm0, DWORD PTR [ecx+12]
  0000e	0f 92 c0	 setb	 al

; 31   : 				return FALSE;
; 32   : 
; 33   : 			return TRUE;
; 34   : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?isActiveTime@?$CTransitor@UD3DXCOLOR@@@@QAEHM@Z ENDP	; CTransitor<D3DXCOLOR>::isActiveTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?isActive@?$CTransitor@UD3DXCOLOR@@@@QAEHXZ
_TEXT	SEGMENT
?isActive@?$CTransitor@UD3DXCOLOR@@@@QAEHXZ PROC	; CTransitor<D3DXCOLOR>::isActive, COMDAT
; _this$ = ecx

; 25   : 			return m_bActivated;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 26   : 		}

  00003	c3		 ret	 0
?isActive@?$CTransitor@UD3DXCOLOR@@@@QAEHXZ ENDP	; CTransitor<D3DXCOLOR>::isActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ?SetActive@?$CTransitor@UD3DXCOLOR@@@@QAEXH@Z
_TEXT	SEGMENT
_bActive$ = 8						; size = 4
?SetActive@?$CTransitor@UD3DXCOLOR@@@@QAEXH@Z PROC	; CTransitor<D3DXCOLOR>::SetActive, COMDAT
; _this$ = ecx

; 19   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 			m_bActivated = bActive;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bActive$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 21   : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetActive@?$CTransitor@UD3DXCOLOR@@@@QAEXH@Z ENDP	; CTransitor<D3DXCOLOR>::SetActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ??1?$CTransitor@UD3DXCOLOR@@@@QAE@XZ
_TEXT	SEGMENT
??1?$CTransitor@UD3DXCOLOR@@@@QAE@XZ PROC		; CTransitor<D3DXCOLOR>::~CTransitor<D3DXCOLOR>, COMDAT
; _this$ = ecx

; 16   : 		~CTransitor() {}

  00000	c3		 ret	 0
??1?$CTransitor@UD3DXCOLOR@@@@QAE@XZ ENDP		; CTransitor<D3DXCOLOR>::~CTransitor<D3DXCOLOR>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
;	COMDAT ??0?$CTransitor@UD3DXCOLOR@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CTransitor@UD3DXCOLOR@@@@QAE@XZ PROC		; CTransitor<D3DXCOLOR>::CTransitor<D3DXCOLOR>, COMDAT
; _this$ = ecx

; 15   : 		CTransitor() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$CTransitor@UD3DXCOLOR@@@@QAE@XZ ENDP		; CTransitor<D3DXCOLOR>::CTransitor<D3DXCOLOR>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?BlendRange@CLight@@QAEXMMM@Z
_TEXT	SEGMENT
_fRange$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendRange@CLight@@QAEXMMM@Z PROC			; CLight::BlendRange, COMDAT
; _this$ = ecx

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 295  : 	m_RangeTransitor.SetTransition(m_d3dLight.Range, fRange, ms_fCurTime + fDelayTime, fBlendTime);

  00003	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
  0000b	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _fDelayTime$[ebp]
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 53   : 			m_SourceValue = c_rSourceValue;

  00010	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]

; 54   : 			m_TargetValue = c_rTargetValue;

  00013	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRange$[ebp]
  00018	89 81 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], eax
  0001e	f3 0f 11 81 f0
	00 00 00	 movss	 DWORD PTR [ecx+240], xmm0

; 55   : 			m_fStartTime = fStartTime;

  00026	f3 0f 11 89 e4
	00 00 00	 movss	 DWORD PTR [ecx+228], xmm1

; 56   : 			m_fEndTime = fStartTime + fBlendTime;

  0002e	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fBlendTime$[ebp]
  00033	f3 0f 11 89 e8
	00 00 00	 movss	 DWORD PTR [ecx+232], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 296  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?BlendRange@CLight@@QAEXMMM@Z ENDP			; CLight::BlendRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z
_TEXT	SEGMENT
_Color$ = -16						; size = 16
_c_rColor$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z PROC	; CLight::BlendAmbientColor, COMDAT
; _this$ = ecx

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  00006	0f 10 41 30	 movups	 xmm0, XMMWORD PTR [ecx+48]
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 54   : 			m_TargetValue = c_rTargetValue;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _c_rColor$[ebp]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 290  : 	m_AmbientColorTransitor.SetTransition(Color, c_rColor, ms_fCurTime + fDelayTime, fBlendTime);

  0000d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
  00015	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _fDelayTime$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  0001a	0f 11 45 f0	 movups	 XMMWORD PTR _Color$[ebp], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 53   : 			m_SourceValue = c_rSourceValue;

  0001e	f3 0f 6f 45 f0	 movdqu	 xmm0, XMMWORD PTR _Color$[ebp]
  00023	f3 0f 7f 81 bc
	00 00 00	 movdqu	 XMMWORD PTR [ecx+188], xmm0

; 54   : 			m_TargetValue = c_rTargetValue;

  0002b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]

; 55   : 			m_fStartTime = fStartTime;

  0002f	f3 0f 11 89 b4
	00 00 00	 movss	 DWORD PTR [ecx+180], xmm1

; 56   : 			m_fEndTime = fStartTime + fBlendTime;

  00037	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fBlendTime$[ebp]
  0003c	f3 0f 7f 81 cc
	00 00 00	 movdqu	 XMMWORD PTR [ecx+204], xmm0
  00044	f3 0f 11 89 b8
	00 00 00	 movss	 DWORD PTR [ecx+184], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 291  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 0c 00	 ret	 12			; 0000000cH
?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ENDP	; CLight::BlendAmbientColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z
_TEXT	SEGMENT
_Color$ = -16						; size = 16
_c_rColor$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z PROC	; CLight::BlendDiffuseColor, COMDAT
; _this$ = ecx

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  00006	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 54   : 			m_TargetValue = c_rTargetValue;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _c_rColor$[ebp]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 284  : 	m_DiffuseColorTransitor.SetTransition(Color, c_rColor, ms_fCurTime + fDelayTime, fBlendTime);

  0000d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
  00015	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _fDelayTime$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  0001a	0f 11 45 f0	 movups	 XMMWORD PTR _Color$[ebp], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 53   : 			m_SourceValue = c_rSourceValue;

  0001e	f3 0f 6f 45 f0	 movdqu	 xmm0, XMMWORD PTR _Color$[ebp]
  00023	f3 0f 7f 81 8c
	00 00 00	 movdqu	 XMMWORD PTR [ecx+140], xmm0

; 54   : 			m_TargetValue = c_rTargetValue;

  0002b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]

; 55   : 			m_fStartTime = fStartTime;

  0002f	f3 0f 11 89 84
	00 00 00	 movss	 DWORD PTR [ecx+132], xmm1

; 56   : 			m_fEndTime = fStartTime + fBlendTime;

  00037	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fBlendTime$[ebp]
  0003c	f3 0f 7f 81 9c
	00 00 00	 movdqu	 XMMWORD PTR [ecx+156], xmm0
  00044	f3 0f 11 89 88
	00 00 00	 movss	 DWORD PTR [ecx+136], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 285  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 0c 00	 ret	 12			; 0000000cH
?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ENDP	; CLight::BlendDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ
_TEXT	SEGMENT
?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ PROC		; CLight::GetPosition, COMDAT
; _this$ = ecx

; 262  : 	return m_d3dLight.Position;

  00000	8d 41 40	 lea	 eax, DWORD PTR [ecx+64]

; 263  : }

  00003	c3		 ret	 0
?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ ENDP		; CLight::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?SetPosition@CLight@@QAEXMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
?SetPosition@CLight@@QAEXMMM@Z PROC			; CLight::SetPosition, COMDAT
; _this$ = ecx

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	if (m_d3dLight.Position.x == fx && m_d3dLight.Position.y == fy && m_d3dLight.Position.z == fz)

  00003	f3 0f 10 41 40	 movss	 xmm0, DWORD PTR [ecx+64]
  00008	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fx$[ebp]
  0000d	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fz$[ebp]
  00012	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fy$[ebp]
  00017	0f 2e c3	 ucomiss xmm0, xmm3
  0001a	9f		 lahf
  0001b	f6 c4 44	 test	 ah, 68			; 00000044H
  0001e	7a 1c		 jp	 SHORT $LN1@SetPositio
  00020	f3 0f 10 41 44	 movss	 xmm0, DWORD PTR [ecx+68]
  00025	0f 2e c2	 ucomiss xmm0, xmm2
  00028	9f		 lahf
  00029	f6 c4 44	 test	 ah, 68			; 00000044H
  0002c	7a 0e		 jp	 SHORT $LN1@SetPositio
  0002e	f3 0f 10 41 48	 movss	 xmm0, DWORD PTR [ecx+72]
  00033	0f 2e c1	 ucomiss xmm0, xmm1
  00036	9f		 lahf
  00037	f6 c4 44	 test	 ah, 68			; 00000044H
  0003a	7b 16		 jnp	 SHORT $LN2@SetPositio
$LN1@SetPositio:

; 268  : 		return;
; 269  : 
; 270  : 	m_d3dLight.Position.x = fx;

  0003c	f3 0f 11 59 40	 movss	 DWORD PTR [ecx+64], xmm3

; 271  : 	m_d3dLight.Position.y = fy;

  00041	f3 0f 11 51 44	 movss	 DWORD PTR [ecx+68], xmm2

; 272  : 	m_d3dLight.Position.z = fz;

  00046	f3 0f 11 49 48	 movss	 DWORD PTR [ecx+72], xmm1

; 273  : 	m_isEdited = TRUE;

  0004b	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN2@SetPositio:

; 274  : }

  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CLight@@QAEXMMM@Z ENDP			; CLight::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?SetRange@CLight@@QAEXM@Z
_TEXT	SEGMENT
_fRange$ = 8						; size = 4
?SetRange@CLight@@QAEXM@Z PROC				; CLight::SetRange, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 253  : 	if (m_d3dLight.Range == fRange)

  00003	f3 0f 10 41 58	 movss	 xmm0, DWORD PTR [ecx+88]
  00008	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fRange$[ebp]
  0000d	0f 2e c1	 ucomiss xmm0, xmm1
  00010	9f		 lahf
  00011	f6 c4 44	 test	 ah, 68			; 00000044H
  00014	7b 0c		 jnp	 SHORT $LN2@SetRange

; 254  : 		return;
; 255  : 	
; 256  : 	m_d3dLight.Range = fRange;

  00016	f3 0f 11 49 58	 movss	 DWORD PTR [ecx+88], xmm1

; 257  : 	m_isEdited = TRUE;

  0001b	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN2@SetRange:

; 258  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetRange@CLight@@QAEXM@Z ENDP				; CLight::SetRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?SetAmbientColor@CLight@@QAEXMMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
?SetAmbientColor@CLight@@QAEXMMMM@Z PROC		; CLight::SetAmbientColor, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 238  : 	if (m_d3dLight.Ambient.r == fr
; 239  : 		&& m_d3dLight.Ambient.g == fg
; 240  : 		&& m_d3dLight.Ambient.b == fb
; 241  : 		&& m_d3dLight.Ambient.a == fa
; 242  : 		)

  00003	f3 0f 10 41 30	 movss	 xmm0, DWORD PTR [ecx+48]
  00008	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _fr$[ebp]
  0000d	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _fa$[ebp]
  00012	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _fb$[ebp]
  00017	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _fg$[ebp]
  0001c	0f 2e c4	 ucomiss xmm0, xmm4
  0001f	9f		 lahf
  00020	f6 c4 44	 test	 ah, 68			; 00000044H
  00023	7a 2a		 jp	 SHORT $LN1@SetAmbient
  00025	f3 0f 10 41 34	 movss	 xmm0, DWORD PTR [ecx+52]
  0002a	0f 2e c3	 ucomiss xmm0, xmm3
  0002d	9f		 lahf
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7a 1c		 jp	 SHORT $LN1@SetAmbient
  00033	f3 0f 10 41 38	 movss	 xmm0, DWORD PTR [ecx+56]
  00038	0f 2e c2	 ucomiss xmm0, xmm2
  0003b	9f		 lahf
  0003c	f6 c4 44	 test	 ah, 68			; 00000044H
  0003f	7a 0e		 jp	 SHORT $LN1@SetAmbient
  00041	f3 0f 10 41 3c	 movss	 xmm0, DWORD PTR [ecx+60]
  00046	0f 2e c1	 ucomiss xmm0, xmm1
  00049	9f		 lahf
  0004a	f6 c4 44	 test	 ah, 68			; 00000044H
  0004d	7b 1b		 jnp	 SHORT $LN2@SetAmbient
$LN1@SetAmbient:

; 243  : 		return;
; 244  : 	m_d3dLight.Ambient.r = fr;

  0004f	f3 0f 11 61 30	 movss	 DWORD PTR [ecx+48], xmm4

; 245  : 	m_d3dLight.Ambient.g = fg;

  00054	f3 0f 11 59 34	 movss	 DWORD PTR [ecx+52], xmm3

; 246  : 	m_d3dLight.Ambient.b = fb;

  00059	f3 0f 11 51 38	 movss	 DWORD PTR [ecx+56], xmm2

; 247  : 	m_d3dLight.Ambient.a = fa;

  0005e	f3 0f 11 49 3c	 movss	 DWORD PTR [ecx+60], xmm1

; 248  : 	m_isEdited = TRUE;

  00063	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN2@SetAmbient:

; 249  : }

  0006a	5d		 pop	 ebp
  0006b	c2 10 00	 ret	 16			; 00000010H
?SetAmbientColor@CLight@@QAEXMMMM@Z ENDP		; CLight::SetAmbientColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?SetDiffuseColor@CLight@@QAEXMMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
?SetDiffuseColor@CLight@@QAEXMMMM@Z PROC		; CLight::SetDiffuseColor, COMDAT
; _this$ = ecx

; 222  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 223  : 	if (m_d3dLight.Diffuse.r == fr
; 224  : 		&& m_d3dLight.Diffuse.g == fg
; 225  : 		&& m_d3dLight.Diffuse.b == fb
; 226  : 		&& m_d3dLight.Diffuse.a == fa
; 227  : 		)

  00003	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00008	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _fr$[ebp]
  0000d	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _fa$[ebp]
  00012	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _fb$[ebp]
  00017	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _fg$[ebp]
  0001c	0f 2e c4	 ucomiss xmm0, xmm4
  0001f	9f		 lahf
  00020	f6 c4 44	 test	 ah, 68			; 00000044H
  00023	7a 2a		 jp	 SHORT $LN1@SetDiffuse
  00025	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0002a	0f 2e c3	 ucomiss xmm0, xmm3
  0002d	9f		 lahf
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7a 1c		 jp	 SHORT $LN1@SetDiffuse
  00033	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00038	0f 2e c2	 ucomiss xmm0, xmm2
  0003b	9f		 lahf
  0003c	f6 c4 44	 test	 ah, 68			; 00000044H
  0003f	7a 0e		 jp	 SHORT $LN1@SetDiffuse
  00041	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  00046	0f 2e c1	 ucomiss xmm0, xmm1
  00049	9f		 lahf
  0004a	f6 c4 44	 test	 ah, 68			; 00000044H
  0004d	7b 1b		 jnp	 SHORT $LN2@SetDiffuse
$LN1@SetDiffuse:

; 228  : 		return;	
; 229  : 	m_d3dLight.Diffuse.r = fr;

  0004f	f3 0f 11 61 10	 movss	 DWORD PTR [ecx+16], xmm4

; 230  : 	m_d3dLight.Diffuse.g = fg;

  00054	f3 0f 11 59 14	 movss	 DWORD PTR [ecx+20], xmm3

; 231  : 	m_d3dLight.Diffuse.b = fb;

  00059	f3 0f 11 51 18	 movss	 DWORD PTR [ecx+24], xmm2

; 232  : 	m_d3dLight.Diffuse.a = fa;

  0005e	f3 0f 11 49 1c	 movss	 DWORD PTR [ecx+28], xmm1

; 233  : 	m_isEdited = TRUE;

  00063	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN2@SetDiffuse:

; 234  : }

  0006a	5d		 pop	 ebp
  0006b	c2 10 00	 ret	 16			; 00000010H
?SetDiffuseColor@CLight@@QAEXMMMM@Z ENDP		; CLight::SetDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?SetDeviceLight@CLight@@QAEXH@Z
_TEXT	SEGMENT
_bActive$ = 8						; size = 4
?SetDeviceLight@CLight@@QAEXH@Z PROC			; CLight::SetDeviceLight, COMDAT
; _this$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 	if (bActive && m_isEdited)

  00003	83 7d 08 00	 cmp	 DWORD PTR _bActive$[ebp], 0
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 20		 je	 SHORT $LN2@SetDeviceL
  0000c	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00010	74 1a		 je	 SHORT $LN2@SetDeviceL

; 205  : 	{
; 206  : 		if (ms_lpd3dDevice)

  00012	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00018	85 d2		 test	 edx, edx
  0001a	74 29		 je	 SHORT $LN1@SetDeviceL

; 207  : 			ms_lpd3dDevice->SetLight(m_LightID, &m_d3dLight);

  0001c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00021	50		 push	 eax
  00022	ff 76 08	 push	 DWORD PTR [esi+8]
  00025	52		 push	 edx
  00026	ff 91 b0 00 00
	00		 call	 DWORD PTR [ecx+176]
$LN2@SetDeviceL:

; 208  : 	}
; 209  : 	if (ms_lpd3dDevice)

  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00032	85 c9		 test	 ecx, ecx
  00034	74 0f		 je	 SHORT $LN1@SetDeviceL

; 210  : 	{
; 211  : 		ms_lpd3dDevice->LightEnable(m_LightID, bActive);

  00036	ff 75 08	 push	 DWORD PTR _bActive$[ebp]
  00039	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003b	ff 76 08	 push	 DWORD PTR [esi+8]
  0003e	51		 push	 ecx
  0003f	ff 90 b8 00 00
	00		 call	 DWORD PTR [eax+184]
$LN1@SetDeviceL:
  00045	5e		 pop	 esi

; 212  : 	}
; 213  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?SetDeviceLight@CLight@@QAEXH@Z ENDP			; CLight::SetDeviceLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
;	COMDAT ?GetDistance@CLight@@QBEMXZ
_TEXT	SEGMENT
?GetDistance@CLight@@QBEMXZ PROC			; CLight::GetDistance, COMDAT
; _this$ = ecx

; 45   : 		float		GetDistance() const { return m_fDistance;	}

  00000	d9 41 78	 fld	 DWORD PTR [ecx+120]
  00003	c3		 ret	 0
?GetDistance@CLight@@QBEMXZ ENDP			; CLight::GetDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?SetDistance@CLight@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$ = 8						; size = 4
?SetDistance@CLight@@QAEXM@Z PROC			; CLight::SetDistance, COMDAT
; _this$ = ecx

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 278  : 	m_fDistance = fDistance;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00008	f3 0f 11 41 78	 movss	 DWORD PTR [ecx+120], xmm0

; 279  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetDistance@CLight@@QAEXM@Z ENDP			; CLight::SetDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
_c_rLight$ = 12						; size = 4
?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z PROC	; CLight::SetParameter, COMDAT
; _this$ = ecx

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 217  : 	m_LightID	= id;

  00003	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  00006	56		 push	 esi

; 218  : 	m_d3dLight	= c_rLight;

  00007	8b 75 0c	 mov	 esi, DWORD PTR _c_rLight$[ebp]
  0000a	57		 push	 edi
  0000b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0000e	8d 79 0c	 lea	 edi, DWORD PTR [ecx+12]
  00011	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00016	f3 a5		 rep movsd
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi

; 219  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z ENDP	; CLight::SetParameter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?Update@CLight@@QAEXXZ
_TEXT	SEGMENT
_Color$1 = -20						; size = 16
$T2 = -20						; size = 16
_Color$3 = -20						; size = 16
$T4 = -20						; size = 16
_fRange$5 = -4						; size = 4
?Update@CLight@@QAEXXZ PROC				; CLight::Update, COMDAT
; _this$ = ecx

; 299  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  00003	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 299  : {

  0000b	83 ec 14	 sub	 esp, 20			; 00000014H
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  00011	0f 2f 9e b8 00
	00 00		 comiss	 xmm3, DWORD PTR [esi+184]
  00018	0f 83 0b 01 00
	00		 jae	 $LN7@Update
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 302  : 		if (!m_AmbientColorTransitor.isActive())

  0001e	83 be b0 00 00
	00 00		 cmp	 DWORD PTR [esi+176], 0
  00025	75 24		 jne	 SHORT $LN8@Update
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 20   : 			m_bActivated = bActive;

  00027	c7 86 b0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+176], 1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  00031	0f 10 46 30	 movups	 xmm0, XMMWORD PTR [esi+48]
  00035	0f 11 45 ec	 movups	 XMMWORD PTR $T4[ebp], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 48   : 			m_SourceValue = c_rSourceValue;

  00039	f3 0f 6f 45 ec	 movdqu	 xmm0, XMMWORD PTR $T4[ebp]
  0003e	f3 0f 7f 86 bc
	00 00 00	 movdqu	 XMMWORD PTR [esi+188], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 307  : 		else

  00046	e9 d6 00 00 00	 jmp	 $LN108@Update
$LN8@Update:
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  0004b	f3 0f 10 8e b4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+180]
  00053	0f 2f cb	 comiss	 xmm1, xmm3
  00056	0f 83 92 00 00
	00		 jae	 $LN105@Update

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  0005c	f3 0f 10 86 b8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+184]
  00064	f3 0f 5c d9	 subss	 xmm3, xmm1
  00068	f3 0f 5c c1	 subss	 xmm0, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0006c	f3 0f 10 a6 cc
	00 00 00	 movss	 xmm4, DWORD PTR [esi+204]
  00074	f3 0f 10 8e d4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+212]
  0007c	f3 0f 5c 8e c4
	00 00 00	 subss	 xmm1, DWORD PTR [esi+196]
  00084	f3 0f 10 96 d8
	00 00 00	 movss	 xmm2, DWORD PTR [esi+216]
  0008c	f3 0f 5c a6 bc
	00 00 00	 subss	 xmm4, DWORD PTR [esi+188]
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00094	f3 0f 5e d8	 divss	 xmm3, xmm0
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  00098	f3 0f 10 86 d0
	00 00 00	 movss	 xmm0, DWORD PTR [esi+208]
  000a0	f3 0f 5c 86 c0
	00 00 00	 subss	 xmm0, DWORD PTR [esi+192]
  000a8	f3 0f 5c 96 c8
	00 00 00	 subss	 xmm2, DWORD PTR [esi+200]

; 1047 : }
; 1048 : 
; 1049 : D3DXINLINE D3DXCOLOR
; 1050 : D3DXCOLOR::operator * ( FLOAT f ) const
; 1051 : {
; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  000b0	f3 0f 59 cb	 mulss	 xmm1, xmm3
  000b4	f3 0f 59 e3	 mulss	 xmm4, xmm3
  000b8	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 912  :     g = c.g;
; 913  :     b = c.b;
; 914  :     a = c.a;
; 915  : }
; 916  : 
; 917  : D3DXINLINE
; 918  : D3DXCOLOR::D3DXCOLOR( FLOAT fr, FLOAT fg, FLOAT fb, FLOAT fa )
; 919  : {
; 920  :     r = fr;
; 921  :     g = fg;
; 922  :     b = fb;
; 923  :     a = fa;
; 924  : }
; 925  : 
; 926  : 
; 927  : // casting
; 928  : D3DXINLINE
; 929  : D3DXCOLOR::operator DWORD () const
; 930  : {
; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);
; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);
; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);
; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);
; 935  : 
; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;
; 937  : }
; 938  : 
; 939  : 
; 940  : D3DXINLINE
; 941  : D3DXCOLOR::operator FLOAT * ()
; 942  : {
; 943  :     return (FLOAT *) &r;
; 944  : }
; 945  : 
; 946  : D3DXINLINE
; 947  : D3DXCOLOR::operator CONST FLOAT * () const
; 948  : {
; 949  :     return (CONST FLOAT *) &r;
; 950  : }
; 951  : 
; 952  : 
; 953  : D3DXINLINE
; 954  : D3DXCOLOR::operator D3DCOLORVALUE * ()
; 955  : {
; 956  :     return (D3DCOLORVALUE *) &r;
; 957  : }
; 958  : 
; 959  : D3DXINLINE
; 960  : D3DXCOLOR::operator CONST D3DCOLORVALUE * () const
; 961  : {
; 962  :     return (CONST D3DCOLORVALUE *) &r;
; 963  : }
; 964  : 
; 965  : 
; 966  : D3DXINLINE
; 967  : D3DXCOLOR::operator D3DCOLORVALUE& ()
; 968  : {
; 969  :     return *((D3DCOLORVALUE *) &r);
; 970  : }
; 971  : 
; 972  : D3DXINLINE
; 973  : D3DXCOLOR::operator CONST D3DCOLORVALUE& () const
; 974  : {
; 975  :     return *((CONST D3DCOLORVALUE *) &r);
; 976  : }
; 977  : 
; 978  : 
; 979  : // assignment operators
; 980  : D3DXINLINE D3DXCOLOR&
; 981  : D3DXCOLOR::operator += ( CONST D3DXCOLOR& c )
; 982  : {
; 983  :     r += c.r;
; 984  :     g += c.g;
; 985  :     b += c.b;
; 986  :     a += c.a;
; 987  :     return *this;
; 988  : }
; 989  : 
; 990  : D3DXINLINE D3DXCOLOR&
; 991  : D3DXCOLOR::operator -= ( CONST D3DXCOLOR& c )
; 992  : {
; 993  :     r -= c.r;
; 994  :     g -= c.g;
; 995  :     b -= c.b;
; 996  :     a -= c.a;
; 997  :     return *this;
; 998  : }
; 999  : 
; 1000 : D3DXINLINE D3DXCOLOR&
; 1001 : D3DXCOLOR::operator *= ( FLOAT f )
; 1002 : {
; 1003 :     r *= f;
; 1004 :     g *= f;
; 1005 :     b *= f;
; 1006 :     a *= f;
; 1007 :     return *this;
; 1008 : }
; 1009 : 
; 1010 : D3DXINLINE D3DXCOLOR&
; 1011 : D3DXCOLOR::operator /= ( FLOAT f )
; 1012 : {
; 1013 :     FLOAT fInv = 1.0f / f;
; 1014 :     r *= fInv;
; 1015 :     g *= fInv;
; 1016 :     b *= fInv;
; 1017 :     a *= fInv;
; 1018 :     return *this;
; 1019 : }
; 1020 : 
; 1021 : 
; 1022 : // unary operators
; 1023 : D3DXINLINE D3DXCOLOR
; 1024 : D3DXCOLOR::operator + () const
; 1025 : {
; 1026 :     return *this;
; 1027 : }
; 1028 : 
; 1029 : D3DXINLINE D3DXCOLOR
; 1030 : D3DXCOLOR::operator - () const
; 1031 : {
; 1032 :     return D3DXCOLOR(-r, -g, -b, -a);
; 1033 : }
; 1034 : 
; 1035 : 
; 1036 : // binary operators
; 1037 : D3DXINLINE D3DXCOLOR
; 1038 : D3DXCOLOR::operator + ( CONST D3DXCOLOR& c ) const
; 1039 : {
; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  000bc	f3 0f 58 a6 bc
	00 00 00	 addss	 xmm4, DWORD PTR [esi+188]

; 1047 : }
; 1048 : 
; 1049 : D3DXINLINE D3DXCOLOR
; 1050 : D3DXCOLOR::operator * ( FLOAT f ) const
; 1051 : {
; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  000c4	f3 0f 59 d3	 mulss	 xmm2, xmm3

; 912  :     g = c.g;
; 913  :     b = c.b;
; 914  :     a = c.a;
; 915  : }
; 916  : 
; 917  : D3DXINLINE
; 918  : D3DXCOLOR::D3DXCOLOR( FLOAT fr, FLOAT fg, FLOAT fb, FLOAT fa )
; 919  : {
; 920  :     r = fr;
; 921  :     g = fg;
; 922  :     b = fb;
; 923  :     a = fa;
; 924  : }
; 925  : 
; 926  : 
; 927  : // casting
; 928  : D3DXINLINE
; 929  : D3DXCOLOR::operator DWORD () const
; 930  : {
; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);
; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);
; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);
; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);
; 935  : 
; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;
; 937  : }
; 938  : 
; 939  : 
; 940  : D3DXINLINE
; 941  : D3DXCOLOR::operator FLOAT * ()
; 942  : {
; 943  :     return (FLOAT *) &r;
; 944  : }
; 945  : 
; 946  : D3DXINLINE
; 947  : D3DXCOLOR::operator CONST FLOAT * () const
; 948  : {
; 949  :     return (CONST FLOAT *) &r;
; 950  : }
; 951  : 
; 952  : 
; 953  : D3DXINLINE
; 954  : D3DXCOLOR::operator D3DCOLORVALUE * ()
; 955  : {
; 956  :     return (D3DCOLORVALUE *) &r;
; 957  : }
; 958  : 
; 959  : D3DXINLINE
; 960  : D3DXCOLOR::operator CONST D3DCOLORVALUE * () const
; 961  : {
; 962  :     return (CONST D3DCOLORVALUE *) &r;
; 963  : }
; 964  : 
; 965  : 
; 966  : D3DXINLINE
; 967  : D3DXCOLOR::operator D3DCOLORVALUE& ()
; 968  : {
; 969  :     return *((D3DCOLORVALUE *) &r);
; 970  : }
; 971  : 
; 972  : D3DXINLINE
; 973  : D3DXCOLOR::operator CONST D3DCOLORVALUE& () const
; 974  : {
; 975  :     return *((CONST D3DCOLORVALUE *) &r);
; 976  : }
; 977  : 
; 978  : 
; 979  : // assignment operators
; 980  : D3DXINLINE D3DXCOLOR&
; 981  : D3DXCOLOR::operator += ( CONST D3DXCOLOR& c )
; 982  : {
; 983  :     r += c.r;
; 984  :     g += c.g;
; 985  :     b += c.b;
; 986  :     a += c.a;
; 987  :     return *this;
; 988  : }
; 989  : 
; 990  : D3DXINLINE D3DXCOLOR&
; 991  : D3DXCOLOR::operator -= ( CONST D3DXCOLOR& c )
; 992  : {
; 993  :     r -= c.r;
; 994  :     g -= c.g;
; 995  :     b -= c.b;
; 996  :     a -= c.a;
; 997  :     return *this;
; 998  : }
; 999  : 
; 1000 : D3DXINLINE D3DXCOLOR&
; 1001 : D3DXCOLOR::operator *= ( FLOAT f )
; 1002 : {
; 1003 :     r *= f;
; 1004 :     g *= f;
; 1005 :     b *= f;
; 1006 :     a *= f;
; 1007 :     return *this;
; 1008 : }
; 1009 : 
; 1010 : D3DXINLINE D3DXCOLOR&
; 1011 : D3DXCOLOR::operator /= ( FLOAT f )
; 1012 : {
; 1013 :     FLOAT fInv = 1.0f / f;
; 1014 :     r *= fInv;
; 1015 :     g *= fInv;
; 1016 :     b *= fInv;
; 1017 :     a *= fInv;
; 1018 :     return *this;
; 1019 : }
; 1020 : 
; 1021 : 
; 1022 : // unary operators
; 1023 : D3DXINLINE D3DXCOLOR
; 1024 : D3DXCOLOR::operator + () const
; 1025 : {
; 1026 :     return *this;
; 1027 : }
; 1028 : 
; 1029 : D3DXINLINE D3DXCOLOR
; 1030 : D3DXCOLOR::operator - () const
; 1031 : {
; 1032 :     return D3DXCOLOR(-r, -g, -b, -a);
; 1033 : }
; 1034 : 
; 1035 : 
; 1036 : // binary operators
; 1037 : D3DXINLINE D3DXCOLOR
; 1038 : D3DXCOLOR::operator + ( CONST D3DXCOLOR& c ) const
; 1039 : {
; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  000c8	f3 0f 10 9e c0
	00 00 00	 movss	 xmm3, DWORD PTR [esi+192]
  000d0	f3 0f 58 d8	 addss	 xmm3, xmm0
  000d4	f3 0f 10 86 c4
	00 00 00	 movss	 xmm0, DWORD PTR [esi+196]
  000dc	f3 0f 58 c1	 addss	 xmm0, xmm1
  000e0	f3 0f 10 8e c8
	00 00 00	 movss	 xmm1, DWORD PTR [esi+200]
  000e8	f3 0f 58 ca	 addss	 xmm1, xmm2
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  000ec	eb 14		 jmp	 SHORT $LN92@Update
$LN105@Update:
  000ee	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _Color$3[ebp+12]
  000f3	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _Color$3[ebp+8]
  000f8	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _Color$3[ebp+4]
  000fd	f3 0f 10 65 ec	 movss	 xmm4, DWORD PTR _Color$3[ebp]
$LN92@Update:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 312  : 			SetAmbientColor(Color.r, Color.g, Color.b, Color.a);

  00102	83 ec 10	 sub	 esp, 16			; 00000010H
  00105	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  0010b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00111	f3 0f 11 5c 24
	04		 movss	 DWORD PTR [esp+4], xmm3
  00117	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  0011c	e8 00 00 00 00	 call	 ?SetAmbientColor@CLight@@QAEXMMMM@Z ; CLight::SetAmbientColor
$LN108@Update:
  00121	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
$LN7@Update:
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  00129	0f 2f 9e 88 00
	00 00		 comiss	 xmm3, DWORD PTR [esi+136]
  00130	0f 83 0d 01 00
	00		 jae	 $LN4@Update
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 318  : 		if (!m_DiffuseColorTransitor.isActive())

  00136	83 be 80 00 00
	00 00		 cmp	 DWORD PTR [esi+128], 0
  0013d	75 24		 jne	 SHORT $LN5@Update
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 20   : 			m_bActivated = bActive;

  0013f	c7 86 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+128], 1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 911  :     r = c.r;

  00149	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  0014d	0f 11 45 ec	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 48   : 			m_SourceValue = c_rSourceValue;

  00151	f3 0f 6f 45 ec	 movdqu	 xmm0, XMMWORD PTR $T2[ebp]
  00156	f3 0f 7f 86 8c
	00 00 00	 movdqu	 XMMWORD PTR [esi+140], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 323  : 		else

  0015e	e9 d8 00 00 00	 jmp	 $LN109@Update
$LN5@Update:
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  00163	f3 0f 10 8e 84
	00 00 00	 movss	 xmm1, DWORD PTR [esi+132]
  0016b	0f 2f cb	 comiss	 xmm1, xmm3
  0016e	0f 83 92 00 00
	00		 jae	 $LN106@Update

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00174	f3 0f 10 86 88
	00 00 00	 movss	 xmm0, DWORD PTR [esi+136]
  0017c	f3 0f 5c d9	 subss	 xmm3, xmm1
  00180	f3 0f 5c c1	 subss	 xmm0, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  00184	f3 0f 10 a6 9c
	00 00 00	 movss	 xmm4, DWORD PTR [esi+156]
  0018c	f3 0f 10 8e a4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+164]
  00194	f3 0f 5c 8e 94
	00 00 00	 subss	 xmm1, DWORD PTR [esi+148]
  0019c	f3 0f 10 96 a8
	00 00 00	 movss	 xmm2, DWORD PTR [esi+168]
  001a4	f3 0f 5c a6 8c
	00 00 00	 subss	 xmm4, DWORD PTR [esi+140]
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  001ac	f3 0f 5e d8	 divss	 xmm3, xmm0
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  001b0	f3 0f 10 86 a0
	00 00 00	 movss	 xmm0, DWORD PTR [esi+160]
  001b8	f3 0f 5c 86 90
	00 00 00	 subss	 xmm0, DWORD PTR [esi+144]
  001c0	f3 0f 5c 96 98
	00 00 00	 subss	 xmm2, DWORD PTR [esi+152]

; 1047 : }
; 1048 : 
; 1049 : D3DXINLINE D3DXCOLOR
; 1050 : D3DXCOLOR::operator * ( FLOAT f ) const
; 1051 : {
; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  001c8	f3 0f 59 cb	 mulss	 xmm1, xmm3
  001cc	f3 0f 59 e3	 mulss	 xmm4, xmm3
  001d0	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 912  :     g = c.g;
; 913  :     b = c.b;
; 914  :     a = c.a;
; 915  : }
; 916  : 
; 917  : D3DXINLINE
; 918  : D3DXCOLOR::D3DXCOLOR( FLOAT fr, FLOAT fg, FLOAT fb, FLOAT fa )
; 919  : {
; 920  :     r = fr;
; 921  :     g = fg;
; 922  :     b = fb;
; 923  :     a = fa;
; 924  : }
; 925  : 
; 926  : 
; 927  : // casting
; 928  : D3DXINLINE
; 929  : D3DXCOLOR::operator DWORD () const
; 930  : {
; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);
; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);
; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);
; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);
; 935  : 
; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;
; 937  : }
; 938  : 
; 939  : 
; 940  : D3DXINLINE
; 941  : D3DXCOLOR::operator FLOAT * ()
; 942  : {
; 943  :     return (FLOAT *) &r;
; 944  : }
; 945  : 
; 946  : D3DXINLINE
; 947  : D3DXCOLOR::operator CONST FLOAT * () const
; 948  : {
; 949  :     return (CONST FLOAT *) &r;
; 950  : }
; 951  : 
; 952  : 
; 953  : D3DXINLINE
; 954  : D3DXCOLOR::operator D3DCOLORVALUE * ()
; 955  : {
; 956  :     return (D3DCOLORVALUE *) &r;
; 957  : }
; 958  : 
; 959  : D3DXINLINE
; 960  : D3DXCOLOR::operator CONST D3DCOLORVALUE * () const
; 961  : {
; 962  :     return (CONST D3DCOLORVALUE *) &r;
; 963  : }
; 964  : 
; 965  : 
; 966  : D3DXINLINE
; 967  : D3DXCOLOR::operator D3DCOLORVALUE& ()
; 968  : {
; 969  :     return *((D3DCOLORVALUE *) &r);
; 970  : }
; 971  : 
; 972  : D3DXINLINE
; 973  : D3DXCOLOR::operator CONST D3DCOLORVALUE& () const
; 974  : {
; 975  :     return *((CONST D3DCOLORVALUE *) &r);
; 976  : }
; 977  : 
; 978  : 
; 979  : // assignment operators
; 980  : D3DXINLINE D3DXCOLOR&
; 981  : D3DXCOLOR::operator += ( CONST D3DXCOLOR& c )
; 982  : {
; 983  :     r += c.r;
; 984  :     g += c.g;
; 985  :     b += c.b;
; 986  :     a += c.a;
; 987  :     return *this;
; 988  : }
; 989  : 
; 990  : D3DXINLINE D3DXCOLOR&
; 991  : D3DXCOLOR::operator -= ( CONST D3DXCOLOR& c )
; 992  : {
; 993  :     r -= c.r;
; 994  :     g -= c.g;
; 995  :     b -= c.b;
; 996  :     a -= c.a;
; 997  :     return *this;
; 998  : }
; 999  : 
; 1000 : D3DXINLINE D3DXCOLOR&
; 1001 : D3DXCOLOR::operator *= ( FLOAT f )
; 1002 : {
; 1003 :     r *= f;
; 1004 :     g *= f;
; 1005 :     b *= f;
; 1006 :     a *= f;
; 1007 :     return *this;
; 1008 : }
; 1009 : 
; 1010 : D3DXINLINE D3DXCOLOR&
; 1011 : D3DXCOLOR::operator /= ( FLOAT f )
; 1012 : {
; 1013 :     FLOAT fInv = 1.0f / f;
; 1014 :     r *= fInv;
; 1015 :     g *= fInv;
; 1016 :     b *= fInv;
; 1017 :     a *= fInv;
; 1018 :     return *this;
; 1019 : }
; 1020 : 
; 1021 : 
; 1022 : // unary operators
; 1023 : D3DXINLINE D3DXCOLOR
; 1024 : D3DXCOLOR::operator + () const
; 1025 : {
; 1026 :     return *this;
; 1027 : }
; 1028 : 
; 1029 : D3DXINLINE D3DXCOLOR
; 1030 : D3DXCOLOR::operator - () const
; 1031 : {
; 1032 :     return D3DXCOLOR(-r, -g, -b, -a);
; 1033 : }
; 1034 : 
; 1035 : 
; 1036 : // binary operators
; 1037 : D3DXINLINE D3DXCOLOR
; 1038 : D3DXCOLOR::operator + ( CONST D3DXCOLOR& c ) const
; 1039 : {
; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  001d4	f3 0f 58 a6 8c
	00 00 00	 addss	 xmm4, DWORD PTR [esi+140]

; 1047 : }
; 1048 : 
; 1049 : D3DXINLINE D3DXCOLOR
; 1050 : D3DXCOLOR::operator * ( FLOAT f ) const
; 1051 : {
; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  001dc	f3 0f 59 d3	 mulss	 xmm2, xmm3

; 912  :     g = c.g;
; 913  :     b = c.b;
; 914  :     a = c.a;
; 915  : }
; 916  : 
; 917  : D3DXINLINE
; 918  : D3DXCOLOR::D3DXCOLOR( FLOAT fr, FLOAT fg, FLOAT fb, FLOAT fa )
; 919  : {
; 920  :     r = fr;
; 921  :     g = fg;
; 922  :     b = fb;
; 923  :     a = fa;
; 924  : }
; 925  : 
; 926  : 
; 927  : // casting
; 928  : D3DXINLINE
; 929  : D3DXCOLOR::operator DWORD () const
; 930  : {
; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);
; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);
; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);
; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);
; 935  : 
; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;
; 937  : }
; 938  : 
; 939  : 
; 940  : D3DXINLINE
; 941  : D3DXCOLOR::operator FLOAT * ()
; 942  : {
; 943  :     return (FLOAT *) &r;
; 944  : }
; 945  : 
; 946  : D3DXINLINE
; 947  : D3DXCOLOR::operator CONST FLOAT * () const
; 948  : {
; 949  :     return (CONST FLOAT *) &r;
; 950  : }
; 951  : 
; 952  : 
; 953  : D3DXINLINE
; 954  : D3DXCOLOR::operator D3DCOLORVALUE * ()
; 955  : {
; 956  :     return (D3DCOLORVALUE *) &r;
; 957  : }
; 958  : 
; 959  : D3DXINLINE
; 960  : D3DXCOLOR::operator CONST D3DCOLORVALUE * () const
; 961  : {
; 962  :     return (CONST D3DCOLORVALUE *) &r;
; 963  : }
; 964  : 
; 965  : 
; 966  : D3DXINLINE
; 967  : D3DXCOLOR::operator D3DCOLORVALUE& ()
; 968  : {
; 969  :     return *((D3DCOLORVALUE *) &r);
; 970  : }
; 971  : 
; 972  : D3DXINLINE
; 973  : D3DXCOLOR::operator CONST D3DCOLORVALUE& () const
; 974  : {
; 975  :     return *((CONST D3DCOLORVALUE *) &r);
; 976  : }
; 977  : 
; 978  : 
; 979  : // assignment operators
; 980  : D3DXINLINE D3DXCOLOR&
; 981  : D3DXCOLOR::operator += ( CONST D3DXCOLOR& c )
; 982  : {
; 983  :     r += c.r;
; 984  :     g += c.g;
; 985  :     b += c.b;
; 986  :     a += c.a;
; 987  :     return *this;
; 988  : }
; 989  : 
; 990  : D3DXINLINE D3DXCOLOR&
; 991  : D3DXCOLOR::operator -= ( CONST D3DXCOLOR& c )
; 992  : {
; 993  :     r -= c.r;
; 994  :     g -= c.g;
; 995  :     b -= c.b;
; 996  :     a -= c.a;
; 997  :     return *this;
; 998  : }
; 999  : 
; 1000 : D3DXINLINE D3DXCOLOR&
; 1001 : D3DXCOLOR::operator *= ( FLOAT f )
; 1002 : {
; 1003 :     r *= f;
; 1004 :     g *= f;
; 1005 :     b *= f;
; 1006 :     a *= f;
; 1007 :     return *this;
; 1008 : }
; 1009 : 
; 1010 : D3DXINLINE D3DXCOLOR&
; 1011 : D3DXCOLOR::operator /= ( FLOAT f )
; 1012 : {
; 1013 :     FLOAT fInv = 1.0f / f;
; 1014 :     r *= fInv;
; 1015 :     g *= fInv;
; 1016 :     b *= fInv;
; 1017 :     a *= fInv;
; 1018 :     return *this;
; 1019 : }
; 1020 : 
; 1021 : 
; 1022 : // unary operators
; 1023 : D3DXINLINE D3DXCOLOR
; 1024 : D3DXCOLOR::operator + () const
; 1025 : {
; 1026 :     return *this;
; 1027 : }
; 1028 : 
; 1029 : D3DXINLINE D3DXCOLOR
; 1030 : D3DXCOLOR::operator - () const
; 1031 : {
; 1032 :     return D3DXCOLOR(-r, -g, -b, -a);
; 1033 : }
; 1034 : 
; 1035 : 
; 1036 : // binary operators
; 1037 : D3DXINLINE D3DXCOLOR
; 1038 : D3DXCOLOR::operator + ( CONST D3DXCOLOR& c ) const
; 1039 : {
; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  001e0	f3 0f 10 9e 90
	00 00 00	 movss	 xmm3, DWORD PTR [esi+144]
  001e8	f3 0f 58 d8	 addss	 xmm3, xmm0
  001ec	f3 0f 10 86 94
	00 00 00	 movss	 xmm0, DWORD PTR [esi+148]
  001f4	f3 0f 58 c1	 addss	 xmm0, xmm1
  001f8	f3 0f 10 8e 98
	00 00 00	 movss	 xmm1, DWORD PTR [esi+152]
  00200	f3 0f 58 ca	 addss	 xmm1, xmm2
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  00204	eb 14		 jmp	 SHORT $LN97@Update
$LN106@Update:
  00206	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _Color$1[ebp+12]
  0020b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _Color$1[ebp+8]
  00210	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _Color$1[ebp+4]
  00215	f3 0f 10 65 ec	 movss	 xmm4, DWORD PTR _Color$1[ebp]
$LN97@Update:
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 327  : 			SetDiffuseColor(Color.r, Color.g, Color.b, Color.a);

  0021a	83 ec 10	 sub	 esp, 16			; 00000010H
  0021d	8b ce		 mov	 ecx, esi
  0021f	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  00225	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0022b	f3 0f 11 5c 24
	04		 movss	 DWORD PTR [esp+4], xmm3
  00231	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  00236	e8 00 00 00 00	 call	 ?SetDiffuseColor@CLight@@QAEXMMMM@Z ; CLight::SetDiffuseColor
$LN109@Update:
  0023b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
$LN4@Update:
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  00243	0f 2f 9e e8 00
	00 00		 comiss	 xmm3, DWORD PTR [esi+232]
  0024a	0f 83 82 00 00
	00		 jae	 $LN1@Update
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 333  : 		if (!m_RangeTransitor.isActive())

  00250	83 be e0 00 00
	00 00		 cmp	 DWORD PTR [esi+224], 0
  00257	75 18		 jne	 SHORT $LN2@Update
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 48   : 			m_SourceValue = c_rSourceValue;

  00259	8b 46 58	 mov	 eax, DWORD PTR [esi+88]

; 20   : 			m_bActivated = bActive;

  0025c	c7 86 e0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+224], 1

; 48   : 			m_SourceValue = c_rSourceValue;

  00266	89 86 ec 00 00
	00		 mov	 DWORD PTR [esi+236], eax
  0026c	5e		 pop	 esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 345  : }

  0026d	8b e5		 mov	 esp, ebp
  0026f	5d		 pop	 ebp
  00270	c3		 ret	 0
$LN2@Update:
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  00271	f3 0f 10 96 e4
	00 00 00	 movss	 xmm2, DWORD PTR [esi+228]
  00279	0f 2f d3	 comiss	 xmm2, xmm3
  0027c	73 42		 jae	 SHORT $LN107@Update

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  0027e	f3 0f 10 86 e8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+232]
  00286	f3 0f 5c da	 subss	 xmm3, xmm2
  0028a	f3 0f 5c c2	 subss	 xmm0, xmm2

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  0028e	f3 0f 10 8e ec
	00 00 00	 movss	 xmm1, DWORD PTR [esi+236]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 342  : 			SetRange(fRange);

  00296	51		 push	 ecx
  00297	8b ce		 mov	 ecx, esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00299	f3 0f 5e d8	 divss	 xmm3, xmm0

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  0029d	f3 0f 10 86 f0
	00 00 00	 movss	 xmm0, DWORD PTR [esi+240]
  002a5	f3 0f 5c c1	 subss	 xmm0, xmm1
  002a9	f3 0f 59 d8	 mulss	 xmm3, xmm0
  002ad	f3 0f 58 d9	 addss	 xmm3, xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 342  : 			SetRange(fRange);

  002b1	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  002b6	e8 00 00 00 00	 call	 ?SetRange@CLight@@QAEXM@Z ; CLight::SetRange
  002bb	5e		 pop	 esi

; 345  : }

  002bc	8b e5		 mov	 esp, ebp
  002be	5d		 pop	 ebp
  002bf	c3		 ret	 0
$LN107@Update:
; File c:\gamepackages\client\tools\patcher2017\eterlib\util.h

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  002c0	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR _fRange$5[ebp]
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 342  : 			SetRange(fRange);

  002c5	51		 push	 ecx
  002c6	8b ce		 mov	 ecx, esi
  002c8	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  002cd	e8 00 00 00 00	 call	 ?SetRange@CLight@@QAEXM@Z ; CLight::SetRange
$LN1@Update:
  002d2	5e		 pop	 esi

; 345  : }

  002d3	8b e5		 mov	 esp, ebp
  002d5	5d		 pop	 ebp
  002d6	c3		 ret	 0
?Update@CLight@@QAEXXZ ENDP				; CLight::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?Clear@CLight@@QAEXXZ
_TEXT	SEGMENT
?Clear@CLight@@QAEXXZ PROC				; CLight::Clear, COMDAT
; _this$ = ecx

; 196  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 197  : 	if (m_LightID) 

  00003	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00007	74 07		 je	 SHORT $LN1@Clear

; 198  : 		SetDeviceLight(FALSE);

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
$LN1@Clear:

; 199  : 	Initialize();

  00010	8b ce		 mov	 ecx, esi
  00012	5e		 pop	 esi
  00013	e9 00 00 00 00	 jmp	 ?Initialize@CLight@@QAEXXZ ; CLight::Initialize
?Clear@CLight@@QAEXXZ ENDP				; CLight::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ?Initialize@CLight@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CLight@@QAEXXZ PROC				; CLight::Initialize, COMDAT
; _this$ = ecx

; 182  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 183  : 	m_LightID	= 0;
; 184  : 	m_isEdited	= TRUE;
; 185  : 	m_fDistance	= 0.0f;
; 186  : 
; 187  : 	memset(&m_d3dLight, 0, sizeof(m_d3dLight));

  00004	6a 68		 push	 104			; 00000068H
  00006	6a 00		 push	 0
  00008	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  0000b	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00012	56		 push	 esi
  00013	c7 47 74 01 00
	00 00		 mov	 DWORD PTR [edi+116], 1
  0001a	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 188  : 
; 189  : 	m_d3dLight.Type			= D3DLIGHT_POINT;
; 190  : 	m_d3dLight.Attenuation0	= 0.0f;

  00029	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0

; 191  : 	m_d3dLight.Attenuation1	= 1.0f;

  00030	c7 47 64 00 00
	80 3f		 mov	 DWORD PTR [edi+100], 1065353216 ; 3f800000H

; 192  : 	m_d3dLight.Attenuation2	= 0.0f;

  00037	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
  0003e	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 193  : }

  00046	c3		 ret	 0
?Initialize@CLight@@QAEXXZ ENDP				; CLight::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ??1CLight@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CLight@@UAE@XZ PROC					; CLight::~CLight, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CLight@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLight@@6BCGraphicBase@@@
  0002f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLight@@6BCLightBase@@@
  00036	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 178  : 	Clear();

  0003d	e8 00 00 00 00	 call	 ?Clear@CLight@@QAEXXZ	; CLight::Clear

; 179  : }

  00042	8b ce		 mov	 ecx, esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 23   : 		virtual ~CLightBase() {};

  00044	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLightBase@@6B@
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 179  : }

  0004b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00052	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00057	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00061	59		 pop	 ecx
  00062	5e		 pop	 esi
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CLight@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
__unwindfunclet$??1CLight@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1CLightBase@@UAE@XZ	; CLightBase::~CLightBase
__ehhandler$??1CLight@@UAE@XZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CLight@@UAE@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CLight@@UAE@XZ ENDP					; CLight::~CLight
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp
;	COMDAT ??0CLight@@QAE@XZ
_TEXT	SEGMENT
??0CLight@@QAE@XZ PROC					; CLight::CLight, COMDAT
; _this$ = ecx

; 172  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h

; 22   : 		CLightBase() {};

  00008	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLightBase@@6B@
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.cpp

; 173  : 	Initialize();

  0000f	8b ce		 mov	 ecx, esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLight@@6BCGraphicBase@@@
  00017	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLight@@6BCLightBase@@@
  0001e	e8 00 00 00 00	 call	 ?Initialize@CLight@@QAEXXZ ; CLight::Initialize

; 174  : }

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c3		 ret	 0
??0CLight@@QAE@XZ ENDP					; CLight::CLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
;	COMDAT ??_GCLightBase@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLightBase@@UAEPAXI@Z PROC				; CLightBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 23   : 		virtual ~CLightBase() {};

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLightBase@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_GCLightBase@@UAEPAXI@Z ENDP				; CLightBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
;	COMDAT ??1CLightBase@@UAE@XZ
_TEXT	SEGMENT
??1CLightBase@@UAE@XZ PROC				; CLightBase::~CLightBase, COMDAT
; _this$ = ecx

; 23   : 		virtual ~CLightBase() {};

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CLightBase@@6B@
  00006	c3		 ret	 0
??1CLightBase@@UAE@XZ ENDP				; CLightBase::~CLightBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\grplightmanager.h
;	COMDAT ??0CLightBase@@QAE@XZ
_TEXT	SEGMENT
??0CLightBase@@QAE@XZ PROC				; CLightBase::CLightBase, COMDAT
; _this$ = ecx

; 22   : 		CLightBase() {};

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CLightBase@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CLightBase@@QAE@XZ ENDP				; CLightBase::CLightBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCTimer@@@@SAAAVCTimer@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCTimer@@@@SAAAVCTimer@@XZ PROC	; CSingleton<CTimer>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCTimer@@@@SAAAVCTimer@@XZ ENDP	; CSingleton<CTimer>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
;	COMDAT ??0?$tuple@$$$V@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tuple@$$$V@std@@QAE@ABV01@@Z PROC			; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 145  : 		{	// copy construct
; 146  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$tuple@$$$V@std@@QAE@ABV01@@Z ENDP			; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
;	COMDAT ??0?$tuple@$$$V@std@@QAE@XZ
_TEXT	SEGMENT
??0?$tuple@$$$V@std@@QAE@XZ PROC			; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 136  : 		{	// default construct
; 137  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$tuple@$$$V@std@@QAE@XZ ENDP			; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 01		 jne	 SHORT $LN3@Getcont

; 184  : 		}

  00006	c3		 ret	 0
$LN3@Getcont:

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00007	8b 00		 mov	 eax, DWORD PTR [eax]

; 184  : 		}

  00009	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 148  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  : 		if (_Parent == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 04		 je	 SHORT $LN1@Adopt

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@Adopt:

; 172  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 173  : 			}
; 174  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}

  00000	c3		 ret	 0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 124  : 		{	// assign an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	39 01		 cmp	 DWORD PTR [ecx], eax
  0000a	74 0e		 je	 SHORT $LN12@operator

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)

  0000c	85 c0		 test	 eax, eax
  0000e	74 0a		 je	 SHORT $LN12@operator

; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00010	8b 00		 mov	 eax, DWORD PTR [eax]

; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN12@operator

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 01		 mov	 DWORD PTR [ecx], eax
$LN12@operator:

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);

  0001a	8b c1		 mov	 eax, ecx

; 137  : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 119  : 		{	// copy an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 122  : 
; 123  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 124  : 		{	// assign an iterator
; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 119  : 		{	// copy an iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 122  : 
; 123  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 124  : 		{	// assign an iterator
; 125  : 		if (_Myproxy == _Right._Myproxy)

  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN15@Iterator_b

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN15@Iterator_b

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN15@Iterator_b:

; 120  : 		*this = _Right;
; 121  : 		}

  00023	8b c1		 mov	 eax, ecx
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 114  : 		{	// construct orphaned iterator

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 115  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != 0)
; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);
; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
; 221  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)
; 222  : 			(*_Pnext)->_Myproxy = 0;
; 223  : 		_Myproxy->_Myfirstiter = 0;
; 224  : 		}
; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 95   : 		_Orphan_all();
; 96   : 		}

  00000	c3		 ret	 0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 80   : 		{	// construct childless container

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 81   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 68   : 		{	// construct from pointers

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 69   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 65   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 61   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv161 = -4						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3Length, COMDAT

; 1232 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00009	8b 45 08	 mov	 eax, DWORD PTR _pV$[ebp]
  0000c	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00011	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  00015	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0001a	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0001e	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00022	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00026	f3 0f 58 d1	 addss	 xmm2, xmm1
  0002a	f3 0f 58 d0	 addss	 xmm2, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  0002e	0f 5a c2	 cvtps2pd xmm0, xmm2
  00031	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00036	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0003a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv161[esp+8], xmm0
  00040	d9 44 24 04	 fld	 DWORD PTR tv161[esp+8]

; 1240 : #else
; 1241 :     return (FLOAT) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
; 1242 : #endif
; 1243 : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3Length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??DD3DXCOLOR@@QBE?AU0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXCOLOR@@QBE?AU0@M@Z PROC				; D3DXCOLOR::operator*, COMDAT
; _this$ = ecx

; 1051 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  00003	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 920  :     r = fr;

  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  00009	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0000e	0f c6 c9 00	 shufps	 xmm1, xmm1, 0
  00012	0f 59 c1	 mulps	 xmm0, xmm1

; 920  :     r = fr;

  00015	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1053 : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??DD3DXCOLOR@@QBE?AU0@M@Z ENDP				; D3DXCOLOR::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??GD3DXCOLOR@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
??GD3DXCOLOR@@QBE?AU0@ABU0@@Z PROC			; D3DXCOLOR::operator-, COMDAT
; _this$ = ecx

; 1045 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _c$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 920  :     r = fr;

  0000a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0000d	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]

; 920  :     r = fr;

  00011	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  00015	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001a	f3 0f 5c 42 04	 subss	 xmm0, DWORD PTR [edx+4]

; 921  :     g = fg;

  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  00024	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00029	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]

; 922  :     b = fb;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  00033	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00038	f3 0f 5c 42 0c	 subss	 xmm0, DWORD PTR [edx+12]

; 923  :     a = fa;

  0003d	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1047 : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??GD3DXCOLOR@@QBE?AU0@ABU0@@Z ENDP			; D3DXCOLOR::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??HD3DXCOLOR@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
??HD3DXCOLOR@@QBE?AU0@ABU0@@Z PROC			; D3DXCOLOR::operator+, COMDAT
; _this$ = ecx

; 1039 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _c$[ebp]

; 920  :     r = fr;

  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00009	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000d	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]

; 920  :     r = fr;

  00011	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00015	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0001a	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]

; 921  :     g = fg;

  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00024	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00029	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]

; 922  :     b = fb;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00033	f3 0f 10 42 0c	 movss	 xmm0, DWORD PTR [edx+12]
  00038	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]

; 923  :     a = fa;

  0003d	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1041 : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??HD3DXCOLOR@@QBE?AU0@ABU0@@Z ENDP			; D3DXCOLOR::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
??0D3DXCOLOR@@QAE@MMMM@Z PROC				; D3DXCOLOR::D3DXCOLOR, COMDAT
; _this$ = ecx

; 919  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 920  :     r = fr;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fr$[ebp]

; 921  :     g = fg;
; 922  :     b = fb;
; 923  :     a = fa;
; 924  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fg$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fb$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fa$[ebp]
  00027	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
??0D3DXCOLOR@@QAE@MMMM@Z ENDP				; D3DXCOLOR::D3DXCOLOR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXCOLOR@@QAE@ABU_D3DCOLORVALUE@@@Z
_TEXT	SEGMENT
_c$ = 8							; size = 4
??0D3DXCOLOR@@QAE@ABU_D3DCOLORVALUE@@@Z PROC		; D3DXCOLOR::D3DXCOLOR, COMDAT
; _this$ = ecx

; 910  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 911  :     r = c.r;

  00003	8b 55 08	 mov	 edx, DWORD PTR _c$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 912  :     g = c.g;

  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 913  :     b = c.b;

  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 914  :     a = c.a;

  00016	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00019	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 915  : }

  0001c	8b c1		 mov	 eax, ecx
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0D3DXCOLOR@@QAE@ABU_D3DCOLORVALUE@@@Z ENDP		; D3DXCOLOR::D3DXCOLOR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.h
;	COMDAT ??0D3DXCOLOR@@QAE@XZ
_TEXT	SEGMENT
??0D3DXCOLOR@@QAE@XZ PROC				; D3DXCOLOR::D3DXCOLOR, COMDAT
; _this$ = ecx

; 408  :     D3DXCOLOR() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXCOLOR@@QAE@XZ ENDP				; D3DXCOLOR::D3DXCOLOR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 180  :     x = fx;

  0000a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0000d	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]

; 180  :     x = fx;

  00011	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00015	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001a	f3 0f 5c 42 04	 subss	 xmm0, DWORD PTR [edx+4]

; 181  :     y = fy;

  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00024	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00029	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]

; 182  :     z = fz;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 264  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 181  :     y = fy;
; 182  :     z = fz;
; 183  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@ABU_D3DVECTOR@@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??0D3DXVECTOR3@@QAE@ABU_D3DVECTOR@@@Z PROC		; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 172  :     x = v.x;

  00003	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 173  :     y = v.y;

  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 174  :     z = v.z;

  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 175  : }

  00016	8b c1		 mov	 eax, ecx
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0D3DXVECTOR3@@QAE@ABU_D3DVECTOR@@@Z ENDP		; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv68 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 775  :     return (float)sqrt(_X);

  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0001a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv68[esp+8], xmm0
  00020	d9 44 24 04	 fld	 DWORD PTR tv68[esp+8]

; 776  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	4e		 dec	 esi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b cf		 mov	 ecx, edi
  00014	ff d3		 call	 ebx
  00016	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  00019	4e		 dec	 esi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5f		 pop	 edi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
