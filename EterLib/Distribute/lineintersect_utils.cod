; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\GamePackages\Client\Tools\Patcher2017\EterLib\lineintersect_utils.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
PUBLIC	??D@YA?AUD3DXVECTOR3@@MABU0@@Z			; operator*
PUBLIC	?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z	; D3DXVec3LengthSq
PUBLIC	?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z		; D3DXVec3Dot
PUBLIC	?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ; IntersectLineSegments
PUBLIC	?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z ; IntersectLineSegments
PUBLIC	?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z ; IntersectLineSegments
PUBLIC	?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
PUBLIC	?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
PUBLIC	?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
PUBLIC	?FindNearestPointOnLineSegment@@YAXABUD3DXVECTOR3@@00AAU1@AAM@Z ; FindNearestPointOnLineSegment
PUBLIC	?FindNearestPointOfParallelLineSegments@@YAXABUD3DXVECTOR3@@00000AAU1@1@Z ; FindNearestPointOfParallelLineSegments
PUBLIC	?AdjustNearestPoints@@YAXABUD3DXVECTOR3@@000MMAAU1@1@Z ; AdjustNearestPoints
PUBLIC	__real@3c23d70b
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c23d70b
CONST	SEGMENT
__real@3c23d70b DD 03c23d70br			; 0.01
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
;	COMDAT ?AdjustNearestPoints@@YAXABUD3DXVECTOR3@@000MMAAU1@1@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
$T5 = -12						; size = 12
$T6 = -12						; size = 12
$T7 = -12						; size = 12
$T8 = -12						; size = 12
$T9 = -12						; size = 12
$T10 = -8						; size = 8
$T11 = -8						; size = 8
$T12 = -8						; size = 8
_A1$ = 8						; size = 4
_La$ = 12						; size = 4
_B1$ = 16						; size = 4
_Lb$ = 20						; size = 4
_D$1$ = 24						; size = 4
_D$1$ = 24						; size = 4
_D$1$ = 24						; size = 4
tv1966 = 24						; size = 4
_s$ = 24						; size = 4
_t$ = 28						; size = 4
_OutA$ = 32						; size = 4
_OutB$ = 36						; size = 4
?AdjustNearestPoints@@YAXABUD3DXVECTOR3@@000MMAAU1@1@Z PROC ; AdjustNearestPoints, COMDAT

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 181  : 	// handle the case where both parameter s and t are out of range
; 182  : 	if (OUT_OF_RANGE(s) && OUT_OF_RANGE(t))

  00003	f3 0f 10 7d 18	 movss	 xmm7, DWORD PTR _s$[ebp]
  00008	0f 57 ed	 xorps	 xmm5, xmm5
  0000b	f3 0f 10 65 1c	 movss	 xmm4, DWORD PTR _t$[ebp]
  00010	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00013	0f 2f ef	 comiss	 xmm5, xmm7
  00016	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f800000
  0001e	77 05		 ja	 SHORT $LN11@AdjustNear
  00020	0f 2f fe	 comiss	 xmm7, xmm6
  00023	76 12		 jbe	 SHORT $LN12@AdjustNear
$LN11@AdjustNear:
  00025	0f 2f ec	 comiss	 xmm5, xmm4
  00028	0f 87 b8 02 00
	00		 ja	 $LN10@AdjustNear
  0002e	0f 2f e6	 comiss	 xmm4, xmm6
  00031	0f 87 af 02 00
	00		 ja	 $LN10@AdjustNear
$LN12@AdjustNear:

; 193  : 			FindNearestPointOnLineSegment(A1, La, OutB, 
; 194  : 				OutA, s);
; 195  : 			FindNearestPointOnLineSegment(B1, Lb, OutA,
; 196  : 				OutB, t);
; 197  : 		}
; 198  : 	}
; 199  : 	// otherwise, handle the case where the parameter for only one segment is
; 200  : 	// out of range
; 201  : 	else if (OUT_OF_RANGE(s))

  00037	0f 2f ef	 comiss	 xmm5, xmm7
  0003a	0f 87 63 01 00
	00		 ja	 $LN5@AdjustNear
  00040	0f 2f fe	 comiss	 xmm7, xmm6
  00043	0f 87 5a 01 00
	00		 ja	 $LN5@AdjustNear

; 205  : 		FindNearestPointOnLineSegment(B1, Lb, 
; 206  : 			OutA, 
; 207  : 			OutB, t);
; 208  : 	}
; 209  : 	else if (OUT_OF_RANGE(t))

  00049	0f 2f ec	 comiss	 xmm5, xmm4
  0004c	77 09		 ja	 SHORT $LN2@AdjustNear
  0004e	0f 2f e6	 comiss	 xmm4, xmm6
  00051	0f 86 01 06 00
	00		 jbe	 $LN106@AdjustNear
$LN2@AdjustNear:

; 210  : 	{
; 211  : 		t = FMAX(0.0f, FMIN(1.0f, t));

  00057	0f 2f f4	 comiss	 xmm6, xmm4
  0005a	76 0a		 jbe	 SHORT $LN196@AdjustNear
  0005c	0f 2f ec	 comiss	 xmm5, xmm4
  0005f	76 08		 jbe	 SHORT $LN36@AdjustNear
  00061	0f 28 e5	 movaps	 xmm4, xmm5
  00064	eb 03		 jmp	 SHORT $LN36@AdjustNear
$LN196@AdjustNear:
  00066	0f 28 e6	 movaps	 xmm4, xmm6
$LN36@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00069	8b 45 14	 mov	 eax, DWORD PTR _Lb$[ebp]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 212  : 		OutB = B1 + t*Lb;

  0006c	8b 55 24	 mov	 edx, DWORD PTR _OutB$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0006f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00073	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00078	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0007d	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00080	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00084	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00088	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0008d	f3 0f 59 dc	 mulss	 xmm3, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00091	f3 0f 10 20	 movss	 xmm4, DWORD PTR [eax]
  00095	f3 0f 58 ca	 addss	 xmm1, xmm2
  00099	f3 0f 58 e0	 addss	 xmm4, xmm0
  0009d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000a2	f3 0f 58 c3	 addss	 xmm0, xmm3
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 212  : 		OutB = B1 + t*Lb;

  000a6	0f 14 e1	 unpcklps xmm4, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000a9	f3 0f 11 45 fc	 movss	 DWORD PTR $T6[ebp+8], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 212  : 		OutB = B1 + t*Lb;

  000ae	8b 45 fc	 mov	 eax, DWORD PTR $T6[ebp+8]
  000b1	66 0f d6 22	 movq	 QWORD PTR [edx], xmm4
  000b5	89 42 08	 mov	 DWORD PTR [edx+8], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000b8	8b 45 0c	 mov	 eax, DWORD PTR _La$[ebp]
  000bb	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000bf	f3 0f 10 78 04	 movss	 xmm7, DWORD PTR [eax+4]
  000c4	0f 28 c8	 movaps	 xmm1, xmm0
  000c7	f3 0f 10 60 08	 movss	 xmm4, DWORD PTR [eax+8]
  000cc	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000d0	0f 28 c7	 movaps	 xmm0, xmm7
  000d3	f3 0f 59 c7	 mulss	 xmm0, xmm7
  000d7	f3 0f 58 c8	 addss	 xmm1, xmm0
  000db	0f 28 c4	 movaps	 xmm0, xmm4
  000de	f3 0f 59 c4	 mulss	 xmm0, xmm4
  000e2	f3 0f 58 c8	 addss	 xmm1, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  000e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  000ee	0f 2f c1	 comiss	 xmm0, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000f1	f3 0f 11 4d 18	 movss	 DWORD PTR _D$1$[ebp], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  000f6	76 18		 jbe	 SHORT $LN171@AdjustNear

; 37   : 		Nearest = A1;

  000f8	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  000fb	8b 4d 20	 mov	 ecx, DWORD PTR _OutA$[ebp]
  000fe	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00102	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00106	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00109	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 213  : 		FindNearestPointOnLineSegment(A1, La, OutB,
; 214  : 			OutA, s);
; 215  : 	}
; 216  : 	else
; 217  : 	{
; 218  : 		assert(0);
; 219  : 	}
; 220  : }

  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
$LN171@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00110	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  00113	f3 0f 10 12	 movss	 xmm2, DWORD PTR [edx]
  00117	f3 0f 10 5a 04	 movss	 xmm3, DWORD PTR [edx+4]
  0011c	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00121	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00125	f3 0f 5c 59 04	 subss	 xmm3, DWORD PTR [ecx+4]
  0012a	f3 0f 5c 49 08	 subss	 xmm1, DWORD PTR [ecx+8]
  0012f	f3 0f 5c d0	 subss	 xmm2, xmm0
  00133	66 0f d6 45 f8	 movq	 QWORD PTR $T12[ebp], xmm0

; 1254 : }
; 1255 : 
; 1256 : D3DXINLINE FLOAT D3DXVec3Dot
; 1257 :     ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
; 1258 : {
; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00138	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0013c	f3 0f 59 df	 mulss	 xmm3, xmm7
  00140	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00144	f3 0f 59 cc	 mulss	 xmm1, xmm4
  00148	f3 0f 58 d8	 addss	 xmm3, xmm0
  0014c	f3 0f 58 d9	 addss	 xmm3, xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00150	f3 0f 5e 5d 18	 divss	 xmm3, DWORD PTR _D$1$[ebp]

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00155	0f 2f f3	 comiss	 xmm6, xmm3
  00158	76 0a		 jbe	 SHORT $LN197@AdjustNear
  0015a	0f 2f eb	 comiss	 xmm5, xmm3
  0015d	76 08		 jbe	 SHORT $LN177@AdjustNear
  0015f	0f 28 dd	 movaps	 xmm3, xmm5
  00162	eb 03		 jmp	 SHORT $LN177@AdjustNear
$LN197@AdjustNear:
  00164	0f 28 de	 movaps	 xmm3, xmm6
$LN177@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00167	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0016b	f3 0f 7e 45 f8	 movq	 xmm0, QWORD PTR $T12[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00170	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00174	f3 0f 59 fb	 mulss	 xmm7, xmm3
  00178	f3 0f 59 e3	 mulss	 xmm4, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0017c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00180	f3 0f 58 79 04	 addss	 xmm7, DWORD PTR [ecx+4]
  00185	f3 0f 58 61 08	 addss	 xmm4, DWORD PTR [ecx+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0018a	8b 4d 20	 mov	 ecx, DWORD PTR _OutA$[ebp]
  0018d	0f 14 c7	 unpcklps xmm0, xmm7
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00190	f3 0f 11 65 fc	 movss	 DWORD PTR $T1[ebp+8], xmm4
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00195	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp+8]
  00198	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0019c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 213  : 		FindNearestPointOnLineSegment(A1, La, OutB,
; 214  : 			OutA, s);
; 215  : 	}
; 216  : 	else
; 217  : 	{
; 218  : 		assert(0);
; 219  : 	}
; 220  : }

  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c3		 ret	 0
$LN5@AdjustNear:

; 202  : 	{
; 203  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  001a3	0f 2f f7	 comiss	 xmm6, xmm7
  001a6	76 0a		 jbe	 SHORT $LN198@AdjustNear
  001a8	0f 2f ef	 comiss	 xmm5, xmm7
  001ab	76 08		 jbe	 SHORT $LN30@AdjustNear
  001ad	0f 28 fd	 movaps	 xmm7, xmm5
  001b0	eb 03		 jmp	 SHORT $LN30@AdjustNear
$LN198@AdjustNear:
  001b2	0f 28 fe	 movaps	 xmm7, xmm6
$LN30@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001b5	8b 45 0c	 mov	 eax, DWORD PTR _La$[ebp]
  001b8	0f 28 df	 movaps	 xmm3, xmm7
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 204  : 		OutA = A1 + s*La;

  001bb	8b 55 20	 mov	 edx, DWORD PTR _OutA$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001be	f3 0f 59 18	 mulss	 xmm3, DWORD PTR [eax]
  001c2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001c7	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001cc	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001cf	f3 0f 59 c7	 mulss	 xmm0, xmm7
  001d3	f3 0f 59 d7	 mulss	 xmm2, xmm7

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001d7	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  001dc	f3 0f 58 18	 addss	 xmm3, DWORD PTR [eax]
  001e0	f3 0f 58 c8	 addss	 xmm1, xmm0
  001e4	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001e9	f3 0f 58 c2	 addss	 xmm0, xmm2
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 204  : 		OutA = A1 + s*La;

  001ed	0f 14 d9	 unpcklps xmm3, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  001f0	f3 0f 11 45 fc	 movss	 DWORD PTR $T7[ebp+8], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 204  : 		OutA = A1 + s*La;

  001f5	8b 45 fc	 mov	 eax, DWORD PTR $T7[ebp+8]
  001f8	66 0f d6 1a	 movq	 QWORD PTR [edx], xmm3
  001fc	89 42 08	 mov	 DWORD PTR [edx+8], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  001ff	8b 45 14	 mov	 eax, DWORD PTR _Lb$[ebp]
  00202	f3 0f 10 78 04	 movss	 xmm7, DWORD PTR [eax+4]
  00207	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  0020b	0f 28 cf	 movaps	 xmm1, xmm7
  0020e	f3 0f 10 60 08	 movss	 xmm4, DWORD PTR [eax+8]
  00213	0f 28 c3	 movaps	 xmm0, xmm3
  00216	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0021a	f3 0f 59 cf	 mulss	 xmm1, xmm7
  0021e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00222	0f 28 c4	 movaps	 xmm0, xmm4
  00225	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00229	f3 0f 58 c8	 addss	 xmm1, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0022d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00235	0f 2f c1	 comiss	 xmm0, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00238	f3 0f 11 4d 18	 movss	 DWORD PTR _D$1$[ebp], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0023d	76 18		 jbe	 SHORT $LN138@AdjustNear

; 37   : 		Nearest = A1;

  0023f	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  00242	8b 4d 24	 mov	 ecx, DWORD PTR _OutB$[ebp]
  00245	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00249	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0024d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00250	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 213  : 		FindNearestPointOnLineSegment(A1, La, OutB,
; 214  : 			OutA, s);
; 215  : 	}
; 216  : 	else
; 217  : 	{
; 218  : 		assert(0);
; 219  : 	}
; 220  : }

  00253	8b e5		 mov	 esp, ebp
  00255	5d		 pop	 ebp
  00256	c3		 ret	 0
$LN138@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00257	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  0025a	f3 0f 10 12	 movss	 xmm2, DWORD PTR [edx]
  0025e	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00263	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00267	f3 0f 5c 49 04	 subss	 xmm1, DWORD PTR [ecx+4]
  0026c	f3 0f 5c d0	 subss	 xmm2, xmm0
  00270	66 0f d6 45 f8	 movq	 QWORD PTR $T11[ebp], xmm0
  00275	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0027a	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]

; 1254 : }
; 1255 : 
; 1256 : D3DXINLINE FLOAT D3DXVec3Dot
; 1257 :     ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
; 1258 : {
; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0027f	f3 0f 59 cf	 mulss	 xmm1, xmm7
  00283	f3 0f 59 da	 mulss	 xmm3, xmm2
  00287	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0028b	f3 0f 58 d9	 addss	 xmm3, xmm1
  0028f	f3 0f 58 d8	 addss	 xmm3, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00293	f3 0f 5e 5d 18	 divss	 xmm3, DWORD PTR _D$1$[ebp]

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00298	0f 2f f3	 comiss	 xmm6, xmm3
  0029b	76 0a		 jbe	 SHORT $LN199@AdjustNear
  0029d	0f 2f eb	 comiss	 xmm5, xmm3
  002a0	76 08		 jbe	 SHORT $LN144@AdjustNear
  002a2	0f 28 dd	 movaps	 xmm3, xmm5
  002a5	eb 03		 jmp	 SHORT $LN144@AdjustNear
$LN199@AdjustNear:
  002a7	0f 28 de	 movaps	 xmm3, xmm6
$LN144@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002aa	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  002ae	f3 0f 7e 45 f8	 movq	 xmm0, QWORD PTR $T11[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002b3	f3 0f 59 cb	 mulss	 xmm1, xmm3
  002b7	f3 0f 59 fb	 mulss	 xmm7, xmm3
  002bb	f3 0f 59 e3	 mulss	 xmm4, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  002bf	f3 0f 58 c1	 addss	 xmm0, xmm1
  002c3	f3 0f 58 79 04	 addss	 xmm7, DWORD PTR [ecx+4]
  002c8	f3 0f 58 61 08	 addss	 xmm4, DWORD PTR [ecx+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  002cd	8b 4d 24	 mov	 ecx, DWORD PTR _OutB$[ebp]
  002d0	0f 14 c7	 unpcklps xmm0, xmm7
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  002d3	f3 0f 11 65 fc	 movss	 DWORD PTR $T2[ebp+8], xmm4
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  002d8	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp+8]
  002db	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  002df	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 213  : 		FindNearestPointOnLineSegment(A1, La, OutB,
; 214  : 			OutA, s);
; 215  : 	}
; 216  : 	else
; 217  : 	{
; 218  : 		assert(0);
; 219  : 	}
; 220  : }

  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c3		 ret	 0
$LN10@AdjustNear:

; 183  : 	{
; 184  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  002e6	0f 2f f7	 comiss	 xmm6, xmm7
  002e9	76 0a		 jbe	 SHORT $LN200@AdjustNear
  002eb	0f 2f ef	 comiss	 xmm5, xmm7
  002ee	76 08		 jbe	 SHORT $LN18@AdjustNear
  002f0	0f 28 fd	 movaps	 xmm7, xmm5
  002f3	eb 03		 jmp	 SHORT $LN18@AdjustNear
$LN200@AdjustNear:
  002f5	0f 28 fe	 movaps	 xmm7, xmm6
$LN18@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002f8	8b 45 0c	 mov	 eax, DWORD PTR _La$[ebp]
  002fb	0f 28 c7	 movaps	 xmm0, xmm7
  002fe	53		 push	 ebx

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  002ff	8b 5d 14	 mov	 ebx, DWORD PTR _Lb$[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00302	0f 28 d7	 movaps	 xmm2, xmm7
  00305	56		 push	 esi
  00306	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 185  : 		OutA = A1 + s*La;

  0030a	8b 75 20	 mov	 esi, DWORD PTR _OutA$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0030d	f3 0f 59 78 08	 mulss	 xmm7, DWORD PTR [eax+8]
  00312	57		 push	 edi

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00313	8b 7d 08	 mov	 edi, DWORD PTR _A1$[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00316	f3 0f 59 50 04	 mulss	 xmm2, DWORD PTR [eax+4]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 37   : 		Nearest = A1;

  0031b	8b 55 10	 mov	 edx, DWORD PTR _B1$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0031e	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  00322	f3 0f 58 57 04	 addss	 xmm2, DWORD PTR [edi+4]
  00327	f3 0f 58 c8	 addss	 xmm1, xmm0
  0032b	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00330	f3 0f 58 c7	 addss	 xmm0, xmm7
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 185  : 		OutA = A1 + s*La;

  00334	0f 14 ca	 unpcklps xmm1, xmm2
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00337	f3 0f 11 45 fc	 movss	 DWORD PTR $T9[ebp+8], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 185  : 		OutA = A1 + s*La;

  0033c	8b 45 fc	 mov	 eax, DWORD PTR $T9[ebp+8]
  0033f	66 0f d6 0e	 movq	 QWORD PTR [esi], xmm1
  00343	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00346	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]
  0034b	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  0034f	0f 28 f8	 movaps	 xmm7, xmm0
  00352	f3 0f 10 53 08	 movss	 xmm2, DWORD PTR [ebx+8]
  00357	f3 0f 59 f8	 mulss	 xmm7, xmm0
  0035b	0f 28 c1	 movaps	 xmm0, xmm1
  0035e	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00362	f3 0f 58 f8	 addss	 xmm7, xmm0
  00366	0f 28 c2	 movaps	 xmm0, xmm2
  00369	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0036d	f3 0f 58 f8	 addss	 xmm7, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00371	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00379	0f 2f c7	 comiss	 xmm0, xmm7
  0037c	76 13		 jbe	 SHORT $LN47@AdjustNear

; 37   : 		Nearest = A1;

  0037e	8b 4d 24	 mov	 ecx, DWORD PTR _OutB$[ebp]
  00381	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00385	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00389	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 38   : 		return;

  0038c	e9 98 00 00 00	 jmp	 $LN208@AdjustNear
$LN47@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00391	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00395	f3 0f 10 1a	 movss	 xmm3, DWORD PTR [edx]
  00399	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  0039e	f3 0f 5c c3	 subss	 xmm0, xmm3
  003a2	f3 0f 5c 52 04	 subss	 xmm2, DWORD PTR [edx+4]

; 1254 : }
; 1255 : 
; 1256 : D3DXINLINE FLOAT D3DXVec3Dot
; 1257 :     ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
; 1258 : {
; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003a7	f3 0f 10 23	 movss	 xmm4, DWORD PTR [ebx]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003ab	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  003b0	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]

; 1254 : }
; 1255 : 
; 1256 : D3DXINLINE FLOAT D3DXVec3Dot
; 1257 :     ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
; 1258 : {
; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003b5	f3 0f 59 e0	 mulss	 xmm4, xmm0
  003b9	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]
  003be	f3 0f 59 c2	 mulss	 xmm0, xmm2
  003c2	f3 0f 10 53 08	 movss	 xmm2, DWORD PTR [ebx+8]
  003c7	f3 0f 58 e0	 addss	 xmm4, xmm0
  003cb	0f 28 c2	 movaps	 xmm0, xmm2
  003ce	f3 0f 59 c1	 mulss	 xmm0, xmm1
  003d2	f3 0f 58 e0	 addss	 xmm4, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  003d6	f3 0f 5e e7	 divss	 xmm4, xmm7

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  003da	0f 2f f4	 comiss	 xmm6, xmm4
  003dd	76 0a		 jbe	 SHORT $LN201@AdjustNear
  003df	0f 2f ec	 comiss	 xmm5, xmm4
  003e2	76 08		 jbe	 SHORT $LN53@AdjustNear
  003e4	0f 28 e5	 movaps	 xmm4, xmm5
  003e7	eb 03		 jmp	 SHORT $LN53@AdjustNear
$LN201@AdjustNear:
  003e9	0f 28 e6	 movaps	 xmm4, xmm6
$LN53@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  003ec	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  003f0	f3 0f 10 4b 04	 movss	 xmm1, DWORD PTR [ebx+4]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  003f5	8b 4d 24	 mov	 ecx, DWORD PTR _OutB$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  003f8	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003fc	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00400	f3 0f 58 d8	 addss	 xmm3, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00404	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00408	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0040d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00411	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00416	f3 0f 58 ca	 addss	 xmm1, xmm2
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0041a	0f 14 d8	 unpcklps xmm3, xmm0
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0041d	f3 0f 11 4d fc	 movss	 DWORD PTR $T5[ebp+8], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00422	8b 45 fc	 mov	 eax, DWORD PTR $T5[ebp+8]
  00425	66 0f d6 19	 movq	 QWORD PTR [ecx], xmm3
$LN208@AdjustNear:

; 186  : 		FindNearestPointOnLineSegment(B1, Lb, 
; 187  : 			OutA,
; 188  : 			OutB, t);
; 189  : 		if (OUT_OF_RANGE(t))

  00429	0f 2f ec	 comiss	 xmm5, xmm4

; 49   : 	Nearest = A1 + parameter * L;

  0042c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 186  : 		FindNearestPointOnLineSegment(B1, Lb, 
; 187  : 			OutA,
; 188  : 			OutB, t);
; 189  : 		if (OUT_OF_RANGE(t))

  0042f	77 09		 ja	 SHORT $LN8@AdjustNear
  00431	0f 2f e6	 comiss	 xmm4, xmm6
  00434	0f 86 1b 02 00
	00		 jbe	 $LN205@AdjustNear
$LN8@AdjustNear:

; 190  : 		{
; 191  : 			t = FMAX(0.0f, FMIN(1.0f, t));

  0043a	0f 2f f4	 comiss	 xmm6, xmm4
  0043d	76 0a		 jbe	 SHORT $LN202@AdjustNear
  0043f	0f 2f ec	 comiss	 xmm5, xmm4
  00442	76 08		 jbe	 SHORT $LN24@AdjustNear
  00444	0f 28 e5	 movaps	 xmm4, xmm5
  00447	eb 03		 jmp	 SHORT $LN24@AdjustNear
$LN202@AdjustNear:
  00449	0f 28 e6	 movaps	 xmm4, xmm6
$LN24@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0044c	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00450	0f 28 d4	 movaps	 xmm2, xmm4
  00453	f3 0f 59 53 04	 mulss	 xmm2, DWORD PTR [ebx+4]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00458	f3 0f 10 1a	 movss	 xmm3, DWORD PTR [edx]
  0045c	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00461	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00465	f3 0f 58 ca	 addss	 xmm1, xmm2

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00469	f3 0f 59 63 08	 mulss	 xmm4, DWORD PTR [ebx+8]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0046e	f3 0f 58 d8	 addss	 xmm3, xmm0
  00472	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00477	f3 0f 58 c4	 addss	 xmm0, xmm4
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 192  : 			OutB = B1 + t*Lb;

  0047b	0f 14 d9	 unpcklps xmm3, xmm1
  0047e	66 0f d6 19	 movq	 QWORD PTR [ecx], xmm3
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00482	f3 0f 11 45 fc	 movss	 DWORD PTR $T8[ebp+8], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 192  : 			OutB = B1 + t*Lb;

  00487	8b 45 fc	 mov	 eax, DWORD PTR $T8[ebp+8]
  0048a	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0048d	8b 45 0c	 mov	 eax, DWORD PTR _La$[ebp]
  00490	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00495	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  00499	0f 28 d0	 movaps	 xmm2, xmm0
  0049c	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  004a1	f3 0f 59 d0	 mulss	 xmm2, xmm0
  004a5	0f 28 c3	 movaps	 xmm0, xmm3
  004a8	f3 0f 59 c3	 mulss	 xmm0, xmm3
  004ac	f3 0f 58 d0	 addss	 xmm2, xmm0
  004b0	0f 28 c1	 movaps	 xmm0, xmm1
  004b3	f3 0f 59 c1	 mulss	 xmm0, xmm1
  004b7	f3 0f 58 d0	 addss	 xmm2, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  004bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  004c3	0f 2f c2	 comiss	 xmm0, xmm2
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  004c6	f3 0f 11 55 18	 movss	 DWORD PTR _D$1$[ebp], xmm2
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  004cb	76 10		 jbe	 SHORT $LN80@AdjustNear

; 37   : 		Nearest = A1;

  004cd	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  004d1	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  004d5	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 38   : 		return;

  004d8	e9 91 00 00 00	 jmp	 $LN209@AdjustNear
$LN80@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  004dd	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  004e1	f3 0f 10 27	 movss	 xmm4, DWORD PTR [edi]
  004e5	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [ecx+4]
  004ea	f3 0f 5c c4	 subss	 xmm0, xmm4
  004ee	f3 0f 10 7f 04	 movss	 xmm7, DWORD PTR [edi+4]
  004f3	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  004f8	f3 0f 5c d7	 subss	 xmm2, xmm7
  004fc	f3 0f 5c 4f 08	 subss	 xmm1, DWORD PTR [edi+8]

; 1254 : }
; 1255 : 
; 1256 : D3DXINLINE FLOAT D3DXVec3Dot
; 1257 :     ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
; 1258 : {
; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00501	f3 0f 59 d8	 mulss	 xmm3, xmm0
  00505	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0050a	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0050e	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00513	f3 0f 58 d8	 addss	 xmm3, xmm0
  00517	0f 28 c2	 movaps	 xmm0, xmm2
  0051a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0051e	f3 0f 58 d8	 addss	 xmm3, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00522	f3 0f 5e 5d 18	 divss	 xmm3, DWORD PTR _D$1$[ebp]

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00527	0f 2f f3	 comiss	 xmm6, xmm3
  0052a	76 0a		 jbe	 SHORT $LN203@AdjustNear
  0052c	0f 2f eb	 comiss	 xmm5, xmm3
  0052f	76 08		 jbe	 SHORT $LN86@AdjustNear
  00531	0f 28 dd	 movaps	 xmm3, xmm5
  00534	eb 03		 jmp	 SHORT $LN86@AdjustNear
$LN203@AdjustNear:
  00536	0f 28 de	 movaps	 xmm3, xmm6
$LN86@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00539	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0053d	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00542	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00546	f3 0f 59 cb	 mulss	 xmm1, xmm3
  0054a	f3 0f 59 d3	 mulss	 xmm2, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0054e	f3 0f 58 e0	 addss	 xmm4, xmm0
  00552	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00557	f3 0f 58 f9	 addss	 xmm7, xmm1
  0055b	f3 0f 58 c2	 addss	 xmm0, xmm2
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0055f	0f 14 e7	 unpcklps xmm4, xmm7
  00562	66 0f d6 26	 movq	 QWORD PTR [esi], xmm4
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00566	f3 0f 11 45 fc	 movss	 DWORD PTR $T4[ebp+8], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0056b	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp+8]
$LN209@AdjustNear:
  0056e	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00571	f3 0f 10 1b	 movss	 xmm3, DWORD PTR [ebx]
  00575	f3 0f 10 63 04	 movss	 xmm4, DWORD PTR [ebx+4]
  0057a	0f 28 c3	 movaps	 xmm0, xmm3
  0057d	f3 0f 10 7b 08	 movss	 xmm7, DWORD PTR [ebx+8]
  00582	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00586	f3 0f 59 e4	 mulss	 xmm4, xmm4
  0058a	f3 0f 58 e0	 addss	 xmm4, xmm0
  0058e	0f 28 c7	 movaps	 xmm0, xmm7
  00591	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00595	f3 0f 58 e0	 addss	 xmm4, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00599	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  005a1	0f 2f c4	 comiss	 xmm0, xmm4
  005a4	76 15		 jbe	 SHORT $LN105@AdjustNear

; 37   : 		Nearest = A1;

  005a6	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  005aa	5f		 pop	 edi
  005ab	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  005af	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  005b2	5e		 pop	 esi

; 49   : 	Nearest = A1 + parameter * L;

  005b3	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  005b6	5b		 pop	 ebx

; 213  : 		FindNearestPointOnLineSegment(A1, La, OutB,
; 214  : 			OutA, s);
; 215  : 	}
; 216  : 	else
; 217  : 	{
; 218  : 		assert(0);
; 219  : 	}
; 220  : }

  005b7	8b e5		 mov	 esp, ebp
  005b9	5d		 pop	 ebp
  005ba	c3		 ret	 0
$LN105@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  005bb	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  005bf	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  005c3	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  005c8	f3 0f 5c c1	 subss	 xmm0, xmm1
  005cc	66 0f d6 4d f8	 movq	 QWORD PTR $T10[ebp], xmm1
  005d1	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  005d6	f3 0f 5c d1	 subss	 xmm2, xmm1
  005da	f3 0f 11 4d 18	 movss	 DWORD PTR tv1966[ebp], xmm1
  005df	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  005e4	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]

; 1254 : }
; 1255 : 
; 1256 : D3DXINLINE FLOAT D3DXVec3Dot
; 1257 :     ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
; 1258 : {
; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  005e9	f3 0f 59 d8	 mulss	 xmm3, xmm0
  005ed	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]
  005f2	f3 0f 59 c2	 mulss	 xmm0, xmm2
  005f6	f3 0f 58 d8	 addss	 xmm3, xmm0
  005fa	0f 28 c7	 movaps	 xmm0, xmm7
  005fd	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00601	f3 0f 58 d8	 addss	 xmm3, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00605	f3 0f 5e dc	 divss	 xmm3, xmm4

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00609	0f 2f f3	 comiss	 xmm6, xmm3
  0060c	76 0a		 jbe	 SHORT $LN204@AdjustNear
  0060e	0f 2f eb	 comiss	 xmm5, xmm3
  00611	76 08		 jbe	 SHORT $LN111@AdjustNear
  00613	0f 28 dd	 movaps	 xmm3, xmm5
  00616	eb 03		 jmp	 SHORT $LN111@AdjustNear
$LN204@AdjustNear:
  00618	0f 28 de	 movaps	 xmm3, xmm6
$LN111@AdjustNear:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0061b	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  0061f	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00624	f3 0f 7e 55 f8	 movq	 xmm2, QWORD PTR $T10[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00629	f3 0f 59 cb	 mulss	 xmm1, xmm3
  0062d	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00631	f3 0f 59 fb	 mulss	 xmm7, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00635	f3 0f 58 d1	 addss	 xmm2, xmm1
  00639	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR tv1966[ebp]
  0063e	f3 0f 58 7a 08	 addss	 xmm7, DWORD PTR [edx+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00643	0f 14 d0	 unpcklps xmm2, xmm0
  00646	66 0f d6 11	 movq	 QWORD PTR [ecx], xmm2
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0064a	f3 0f 11 7d fc	 movss	 DWORD PTR $T3[ebp+8], xmm7
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0064f	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp+8]
  00652	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN205@AdjustNear:
  00655	5f		 pop	 edi
  00656	5e		 pop	 esi
  00657	5b		 pop	 ebx
$LN106@AdjustNear:

; 213  : 		FindNearestPointOnLineSegment(A1, La, OutB,
; 214  : 			OutA, s);
; 215  : 	}
; 216  : 	else
; 217  : 	{
; 218  : 		assert(0);
; 219  : 	}
; 220  : }

  00658	8b e5		 mov	 esp, ebp
  0065a	5d		 pop	 ebp
  0065b	c3		 ret	 0
?AdjustNearestPoints@@YAXABUD3DXVECTOR3@@000MMAAU1@1@Z ENDP ; AdjustNearestPoints
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
;	COMDAT ?FindNearestPointOfParallelLineSegments@@YAXABUD3DXVECTOR3@@00000AAU1@1@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_s$ = -8						; size = 8
_A1$ = 8						; size = 4
_A2$ = 12						; size = 4
_D$1$ = 16						; size = 4
$T4 = 16						; size = 4
_La$ = 16						; size = 4
_B1$ = 20						; size = 4
_B2$ = 24						; size = 4
_Lb$ = 28						; size = 4
_OutA$ = 32						; size = 4
_OutB$ = 36						; size = 4
?FindNearestPointOfParallelLineSegments@@YAXABUD3DXVECTOR3@@00000AAU1@1@Z PROC ; FindNearestPointOfParallelLineSegments, COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00006	8b 55 14	 mov	 edx, DWORD PTR _B1$[ebp]
  00009	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f800000
  00011	0f 57 f6	 xorps	 xmm6, xmm6
  00014	53		 push	 ebx
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00015	8b 5d 10	 mov	 ebx, DWORD PTR _La$[ebp]
  00018	56		 push	 esi
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 37   : 		Nearest = A1;

  00019	8b 75 08	 mov	 esi, DWORD PTR _A1$[ebp]
  0001c	57		 push	 edi
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0001d	f3 0f 10 5b 04	 movss	 xmm3, DWORD PTR [ebx+4]
  00022	f3 0f 10 3b	 movss	 xmm7, DWORD PTR [ebx]
  00026	0f 28 c3	 movaps	 xmm0, xmm3
  00029	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0002d	0f 28 d7	 movaps	 xmm2, xmm7
  00030	f3 0f 59 d7	 mulss	 xmm2, xmm7
  00034	f3 0f 58 d0	 addss	 xmm2, xmm0
  00038	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR [ebx+8]
  0003d	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00041	f3 0f 58 d0	 addss	 xmm2, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  0004d	0f 2f c2	 comiss	 xmm0, xmm2
  00050	76 18		 jbe	 SHORT $LN23@FindNeares

; 37   : 		Nearest = A1;

  00052	8b 4d 20	 mov	 ecx, DWORD PTR _OutA$[ebp]
  00055	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]

; 38   : 		return;

  00059	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _s$[ebp]
  0005e	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00062	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00065	e9 86 00 00 00	 jmp	 $LN110@FindNeares
$LN23@FindNeares:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0006a	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0006f	f3 0f 10 22	 movss	 xmm4, DWORD PTR [edx]
  00073	f3 0f 5c 26	 subss	 xmm4, DWORD PTR [esi]
  00077	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
  0007c	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00081	f3 0f 5c 4e 08	 subss	 xmm1, DWORD PTR [esi+8]

; 1254 : }
; 1255 : 
; 1256 : D3DXINLINE FLOAT D3DXVec3Dot
; 1257 :     ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
; 1258 : {
; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00086	f3 0f 59 e7	 mulss	 xmm4, xmm7
  0008a	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0008e	f3 0f 58 e0	 addss	 xmm4, xmm0
  00092	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR [ebx+8]
  00097	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0009b	f3 0f 58 e0	 addss	 xmm4, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  0009f	f3 0f 5e e2	 divss	 xmm4, xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  000a3	0f 2f ec	 comiss	 xmm5, xmm4
  000a6	76 0f		 jbe	 SHORT $LN112@FindNeares
  000a8	0f 2f f4	 comiss	 xmm6, xmm4
  000ab	76 05		 jbe	 SHORT $LN30@FindNeares
  000ad	0f 28 e6	 movaps	 xmm4, xmm6
  000b0	eb 08		 jmp	 SHORT $LN29@FindNeares
$LN30@FindNeares:
  000b2	0f 2f ec	 comiss	 xmm5, xmm4
  000b5	77 03		 ja	 SHORT $LN29@FindNeares
$LN112@FindNeares:
  000b7	0f 28 e5	 movaps	 xmm4, xmm5
$LN29@FindNeares:

; 49   : 	Nearest = A1 + parameter * L;

  000ba	8b 4d 20	 mov	 ecx, DWORD PTR _OutA$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  000bd	0f 28 d4	 movaps	 xmm2, xmm4
  000c0	0f 28 cc	 movaps	 xmm1, xmm4
  000c3	f3 0f 59 d7	 mulss	 xmm2, xmm7
  000c7	0f 28 c4	 movaps	 xmm0, xmm4
  000ca	f3 0f 59 cb	 mulss	 xmm1, xmm3
  000ce	f3 0f 59 43 08	 mulss	 xmm0, DWORD PTR [ebx+8]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000d3	f3 0f 58 16	 addss	 xmm2, DWORD PTR [esi]
  000d7	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  000dc	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  000e1	0f 14 d1	 unpcklps xmm2, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000e4	f3 0f 11 45 fc	 movss	 DWORD PTR $T2[ebp+8], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  000e9	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp+8]
  000ec	66 0f d6 11	 movq	 QWORD PTR [ecx], xmm2
$LN110@FindNeares:

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  000f0	8b 7d 18	 mov	 edi, DWORD PTR _B2$[ebp]

; 49   : 	Nearest = A1 + parameter * L;

  000f3	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000f6	f3 0f 10 7b 04	 movss	 xmm7, DWORD PTR [ebx+4]
  000fb	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  000ff	0f 28 d7	 movaps	 xmm2, xmm7
  00102	f3 0f 10 4b 08	 movss	 xmm1, DWORD PTR [ebx+8]
  00107	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0010b	f3 0f 59 d7	 mulss	 xmm2, xmm7
  0010f	f3 0f 58 d0	 addss	 xmm2, xmm0
  00113	0f 28 c1	 movaps	 xmm0, xmm1
  00116	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0011a	f3 0f 58 d0	 addss	 xmm2, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0011e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00126	0f 2f c2	 comiss	 xmm0, xmm2
  00129	77 52		 ja	 SHORT $LN109@FindNeares
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0012b	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  0012f	f3 0f 10 5f 04	 movss	 xmm3, DWORD PTR [edi+4]
  00134	f3 0f 5c 5e 04	 subss	 xmm3, DWORD PTR [esi+4]
  00139	f3 0f 5c 0e	 subss	 xmm1, DWORD PTR [esi]
  0013d	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00142	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 1254 : }
; 1255 : 
; 1256 : D3DXINLINE FLOAT D3DXVec3Dot
; 1257 :     ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
; 1258 : {
; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00147	f3 0f 59 df	 mulss	 xmm3, xmm7
  0014b	f3 0f 59 0b	 mulss	 xmm1, DWORD PTR [ebx]
  0014f	f3 0f 58 d9	 addss	 xmm3, xmm1
  00153	f3 0f 10 4b 08	 movss	 xmm1, DWORD PTR [ebx+8]
  00158	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0015c	f3 0f 58 d8	 addss	 xmm3, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00160	f3 0f 5e da	 divss	 xmm3, xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00164	0f 2f eb	 comiss	 xmm5, xmm3
  00167	76 0f		 jbe	 SHORT $LN114@FindNeares
  00169	0f 2f f3	 comiss	 xmm6, xmm3
  0016c	76 05		 jbe	 SHORT $LN57@FindNeares
  0016e	0f 28 de	 movaps	 xmm3, xmm6
  00171	eb 0f		 jmp	 SHORT $LN51@FindNeares
$LN57@FindNeares:
  00173	0f 2f eb	 comiss	 xmm5, xmm3
  00176	77 0a		 ja	 SHORT $LN51@FindNeares
$LN114@FindNeares:
  00178	0f 28 dd	 movaps	 xmm3, xmm5
  0017b	eb 05		 jmp	 SHORT $LN51@FindNeares
$LN109@FindNeares:
  0017d	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR _s$[ebp+4]
$LN51@FindNeares:

; 98   : 	float s[2], temp;
; 99   : 	FindNearestPointOnLineSegment(A1, La, B1, OutA, s[0]);
; 100  : 	/*if (true == infinite_lines)
; 101  : 	{
; 102  : 	    PointOnSegBx = B1x;
; 103  : 	    PointOnSegBy = B1y;
; 104  : 	    PointOnSegBz = B1z;
; 105  : 	}
; 106  : 	else*/
; 107  : 	{
; 108  : 		//float tp[3];
; 109  : 		D3DXVECTOR3 tp;
; 110  : 		FindNearestPointOnLineSegment(A1, La, B2,
; 111  : 			tp, s[1]);
; 112  : 		if (s[0] < 0.f && s[1] < 0.f)

  00182	0f 2f f4	 comiss	 xmm6, xmm4
  00185	76 30		 jbe	 SHORT $LN8@FindNeares
  00187	0f 2f f3	 comiss	 xmm6, xmm3
  0018a	76 2b		 jbe	 SHORT $LN8@FindNeares

; 113  : 		{
; 114  : 			OutA = A1;
; 115  : 			if (s[0] < s[1])

  0018c	0f 2f dc	 comiss	 xmm3, xmm4
  0018f	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  00193	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00197	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0019a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 116  : 			{
; 117  : 				OutB =B2;

  0019d	8b 4d 24	 mov	 ecx, DWORD PTR _OutB$[ebp]
  001a0	76 38		 jbe	 SHORT $LN7@FindNeares
$LN3@FindNeares:
  001a2	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  001a6	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  001aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi

; 49   : 	Nearest = A1 + parameter * L;

  001af	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  001b2	5b		 pop	 ebx

; 140  : 			FindNearestPointOnLineSegment(B1, Lb,
; 141  : 				OutA, OutB, temp);
; 142  : 		}
; 143  : 	}
; 144  : }

  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c3		 ret	 0
$LN8@FindNeares:

; 118  : 			}
; 119  : 			else
; 120  : 			{
; 121  : 				OutB = B1;
; 122  : 			}
; 123  : 		}
; 124  : 		else if (s[0] > 1.f && s[1] > 1.f)

  001b7	0f 2f e5	 comiss	 xmm4, xmm5
  001ba	76 33		 jbe	 SHORT $LN4@FindNeares
  001bc	0f 2f dd	 comiss	 xmm3, xmm5
  001bf	76 2e		 jbe	 SHORT $LN4@FindNeares

; 125  : 		{
; 126  : 			OutA = A2;
; 127  : 			if (s[0] < s[1])

  001c1	0f 2f dc	 comiss	 xmm3, xmm4
  001c4	8b 45 0c	 mov	 eax, DWORD PTR _A2$[ebp]
  001c7	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  001cb	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  001cf	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001d2	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 128  : 			{
; 129  : 				OutB = B1;

  001d5	8b 4d 24	 mov	 ecx, DWORD PTR _OutB$[ebp]
  001d8	76 c8		 jbe	 SHORT $LN3@FindNeares
$LN7@FindNeares:
  001da	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  001de	5f		 pop	 edi
  001df	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  001e3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001e6	5e		 pop	 esi

; 49   : 	Nearest = A1 + parameter * L;

  001e7	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  001ea	5b		 pop	 ebx

; 140  : 			FindNearestPointOnLineSegment(B1, Lb,
; 141  : 				OutA, OutB, temp);
; 142  : 		}
; 143  : 	}
; 144  : }

  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c3		 ret	 0
$LN4@FindNeares:

; 138  : 			temp = 0.5f*(FMAX(0.0f, FMIN(1.0f, s[0])) + FMAX(0.0f, FMIN(1.0f, s[1])));

  001ef	0f 2f ec	 comiss	 xmm5, xmm4
  001f2	76 0a		 jbe	 SHORT $LN13@FindNeares
  001f4	0f 2f f4	 comiss	 xmm6, xmm4
  001f7	76 08		 jbe	 SHORT $LN14@FindNeares
  001f9	0f 28 e6	 movaps	 xmm4, xmm6
  001fc	eb 03		 jmp	 SHORT $LN14@FindNeares
$LN13@FindNeares:
  001fe	0f 28 e5	 movaps	 xmm4, xmm5
$LN14@FindNeares:
  00201	0f 2f eb	 comiss	 xmm5, xmm3
  00204	76 0a		 jbe	 SHORT $LN19@FindNeares
  00206	0f 2f f3	 comiss	 xmm6, xmm3
  00209	76 08		 jbe	 SHORT $LN20@FindNeares
  0020b	0f 28 de	 movaps	 xmm3, xmm6
  0020e	eb 03		 jmp	 SHORT $LN20@FindNeares
$LN19@FindNeares:
  00210	0f 28 dd	 movaps	 xmm3, xmm5
$LN20@FindNeares:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00213	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 138  : 			temp = 0.5f*(FMAX(0.0f, FMIN(1.0f, s[0])) + FMAX(0.0f, FMIN(1.0f, s[1])));

  00218	f3 0f 58 dc	 addss	 xmm3, xmm4
  0021c	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00224	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00228	0f 28 d3	 movaps	 xmm2, xmm3
  0022b	f3 0f 59 13	 mulss	 xmm2, DWORD PTR [ebx]
  0022f	f3 0f 11 4d 10	 movss	 DWORD PTR $T4[ebp], xmm1

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00234	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00239	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR $T4[ebp]
  0023e	f3 0f 58 16	 addss	 xmm2, DWORD PTR [esi]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00242	f3 0f 59 fb	 mulss	 xmm7, xmm3

; 182  :     z = fz;

  00246	f3 0f 11 45 fc	 movss	 DWORD PTR $T3[ebp+8], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 139  : 			OutA = A1 + temp * La;

  0024b	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp+8]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0024e	f3 0f 58 cf	 addss	 xmm1, xmm7
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 139  : 			OutA = A1 + temp * La;

  00252	0f 14 d1	 unpcklps xmm2, xmm1
  00255	66 0f d6 11	 movq	 QWORD PTR [ecx], xmm2
  00259	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0025c	8b 45 1c	 mov	 eax, DWORD PTR _Lb$[ebp]
  0025f	f3 0f 10 78 04	 movss	 xmm7, DWORD PTR [eax+4]
  00264	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  00268	0f 28 c7	 movaps	 xmm0, xmm7
  0026b	f3 0f 10 60 08	 movss	 xmm4, DWORD PTR [eax+8]
  00270	0f 28 cb	 movaps	 xmm1, xmm3
  00273	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00277	f3 0f 59 cb	 mulss	 xmm1, xmm3
  0027b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0027f	0f 28 c4	 movaps	 xmm0, xmm4
  00282	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00286	f3 0f 58 c8	 addss	 xmm1, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0028a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00292	0f 2f c1	 comiss	 xmm0, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00295	f3 0f 11 4d 10	 movss	 DWORD PTR _D$1$[ebp], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0029a	76 18		 jbe	 SHORT $LN83@FindNeares

; 37   : 		Nearest = A1;

  0029c	8b 4d 24	 mov	 ecx, DWORD PTR _OutB$[ebp]
  0029f	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  002a3	5f		 pop	 edi
  002a4	5e		 pop	 esi
  002a5	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  002a9	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 49   : 	Nearest = A1 + parameter * L;

  002ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  002af	5b		 pop	 ebx

; 140  : 			FindNearestPointOnLineSegment(B1, Lb,
; 141  : 				OutA, OutB, temp);
; 142  : 		}
; 143  : 	}
; 144  : }

  002b0	8b e5		 mov	 esp, ebp
  002b2	5d		 pop	 ebp
  002b3	c3		 ret	 0
$LN83@FindNeares:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  002b4	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  002b8	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [ecx+4]
  002bd	f3 0f 5c 52 04	 subss	 xmm2, DWORD PTR [edx+4]
  002c2	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  002c6	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  002cb	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]

; 1254 : }
; 1255 : 
; 1256 : D3DXINLINE FLOAT D3DXVec3Dot
; 1257 :     ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
; 1258 : {
; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  002d0	f3 0f 59 d7	 mulss	 xmm2, xmm7
  002d4	f3 0f 59 cb	 mulss	 xmm1, xmm3
  002d8	f3 0f 59 c4	 mulss	 xmm0, xmm4
  002dc	f3 0f 58 d1	 addss	 xmm2, xmm1
  002e0	f3 0f 58 d0	 addss	 xmm2, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  002e4	f3 0f 5e 55 10	 divss	 xmm2, DWORD PTR _D$1$[ebp]

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  002e9	0f 2f ea	 comiss	 xmm5, xmm2
  002ec	76 0a		 jbe	 SHORT $LN108@FindNeares
  002ee	0f 2f f2	 comiss	 xmm6, xmm2
  002f1	76 08		 jbe	 SHORT $LN89@FindNeares
  002f3	0f 28 d6	 movaps	 xmm2, xmm6
  002f6	eb 03		 jmp	 SHORT $LN89@FindNeares
$LN108@FindNeares:
  002f8	0f 28 d5	 movaps	 xmm2, xmm5
$LN89@FindNeares:

; 49   : 	Nearest = A1 + parameter * L;

  002fb	8b 4d 24	 mov	 ecx, DWORD PTR _OutB$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002fe	f3 0f 59 da	 mulss	 xmm3, xmm2
  00302	5f		 pop	 edi
  00303	f3 0f 59 fa	 mulss	 xmm7, xmm2
  00307	5e		 pop	 esi

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00308	f3 0f 58 1a	 addss	 xmm3, DWORD PTR [edx]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0030c	f3 0f 59 e2	 mulss	 xmm4, xmm2
  00310	5b		 pop	 ebx

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00311	f3 0f 58 7a 04	 addss	 xmm7, DWORD PTR [edx+4]
  00316	f3 0f 58 62 08	 addss	 xmm4, DWORD PTR [edx+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0031b	0f 14 df	 unpcklps xmm3, xmm7
  0031e	66 0f d6 19	 movq	 QWORD PTR [ecx], xmm3
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00322	f3 0f 11 65 fc	 movss	 DWORD PTR $T1[ebp+8], xmm4
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00327	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp+8]
  0032a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 140  : 			FindNearestPointOnLineSegment(B1, Lb,
; 141  : 				OutA, OutB, temp);
; 142  : 		}
; 143  : 	}
; 144  : }

  0032d	8b e5		 mov	 esp, ebp
  0032f	5d		 pop	 ebp
  00330	c3		 ret	 0
?FindNearestPointOfParallelLineSegments@@YAXABUD3DXVECTOR3@@00000AAU1@1@Z ENDP ; FindNearestPointOfParallelLineSegments
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
;	COMDAT ?FindNearestPointOnLineSegment@@YAXABUD3DXVECTOR3@@00AAU1@AAM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_A1$ = 8						; size = 4
_L$ = 12						; size = 4
_B$ = 16						; size = 4
_Nearest$ = 20						; size = 4
_parameter$ = 24					; size = 4
?FindNearestPointOnLineSegment@@YAXABUD3DXVECTOR3@@00AAU1@AAM@Z PROC ; FindNearestPointOnLineSegment, COMDAT

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _L$[ebp]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 32   : {

  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00009	f3 0f 10 69 04	 movss	 xmm5, DWORD PTR [ecx+4]
  0000e	f3 0f 10 19	 movss	 xmm3, DWORD PTR [ecx]
  00012	0f 28 c5	 movaps	 xmm0, xmm5
  00015	f3 0f 10 71 08	 movss	 xmm6, DWORD PTR [ecx+8]
  0001a	0f 28 e3	 movaps	 xmm4, xmm3
  0001d	f3 0f 59 c5	 mulss	 xmm0, xmm5
  00021	f3 0f 59 e3	 mulss	 xmm4, xmm3
  00025	f3 0f 58 e0	 addss	 xmm4, xmm0
  00029	0f 28 c6	 movaps	 xmm0, xmm6
  0002c	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00030	f3 0f 58 e0	 addss	 xmm4, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  0003c	0f 2f c4	 comiss	 xmm0, xmm4
  0003f	76 18		 jbe	 SHORT $LN1@FindNeares

; 36   : 	{
; 37   : 		Nearest = A1;

  00041	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  00044	8b 4d 14	 mov	 ecx, DWORD PTR _Nearest$[ebp]
  00047	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0004b	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0004f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 49   : 	Nearest = A1 + parameter * L;

  00052	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 50   : 	return;
; 51   : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN1@FindNeares:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00059	8b 45 10	 mov	 eax, DWORD PTR _B$[ebp]
  0005c	8b 55 08	 mov	 edx, DWORD PTR _A1$[ebp]
  0005f	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  00063	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00068	f3 0f 5c 12	 subss	 xmm2, DWORD PTR [edx]
  0006c	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  00071	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00076	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]
  0007b	8b 45 18	 mov	 eax, DWORD PTR _parameter$[ebp]

; 1254 : }
; 1255 : 
; 1256 : D3DXINLINE FLOAT D3DXVec3Dot
; 1257 :     ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
; 1258 : {
; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0007e	f3 0f 59 da	 mulss	 xmm3, xmm2
  00082	f3 0f 59 e9	 mulss	 xmm5, xmm1
  00086	f3 0f 59 f0	 mulss	 xmm6, xmm0
  0008a	f3 0f 58 dd	 addss	 xmm3, xmm5
  0008e	f3 0f 58 de	 addss	 xmm3, xmm6
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00092	f3 0f 5e dc	 divss	 xmm3, xmm4

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00096	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f800000
  0009e	0f 2f e3	 comiss	 xmm4, xmm3
  000a1	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3
  000a5	76 0b		 jbe	 SHORT $LN6@FindNeares
  000a7	0f 57 e4	 xorps	 xmm4, xmm4
  000aa	0f 2f e3	 comiss	 xmm4, xmm3
  000ad	77 03		 ja	 SHORT $LN6@FindNeares
  000af	0f 28 e3	 movaps	 xmm4, xmm3
$LN6@FindNeares:
  000b2	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  000b6	0f 28 d4	 movaps	 xmm2, xmm4
  000b9	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000bd	f3 0f 59 51 04	 mulss	 xmm2, DWORD PTR [ecx+4]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000c2	f3 0f 10 1a	 movss	 xmm3, DWORD PTR [edx]
  000c6	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  000cb	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000cf	f3 0f 58 ca	 addss	 xmm1, xmm2

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  000d3	f3 0f 59 61 08	 mulss	 xmm4, DWORD PTR [ecx+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  000d8	8b 4d 14	 mov	 ecx, DWORD PTR _Nearest$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000db	f3 0f 58 d8	 addss	 xmm3, xmm0
  000df	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  000e4	f3 0f 58 c4	 addss	 xmm0, xmm4
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  000e8	0f 14 d9	 unpcklps xmm3, xmm1
  000eb	66 0f d6 19	 movq	 QWORD PTR [ecx], xmm3
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000ef	f3 0f 11 45 fc	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  000f4	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp+8]
  000f7	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 50   : 	return;
; 51   : }

  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
?FindNearestPointOnLineSegment@@YAXABUD3DXVECTOR3@@00AAU1@AAM@Z ENDP ; FindNearestPointOnLineSegment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
;	COMDAT ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z
_TEXT	SEGMENT
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_Lax$ = 20						; size = 4
_Lay$ = 24						; size = 4
_Laz$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_Lbx$ = 44						; size = 4
_Lby$ = 48						; size = 4
_Lbz$ = 52						; size = 4
_epsilon_squared$ = 56					; size = 4
_s$ = 60						; size = 4
_t$ = 64						; size = 4
_PointOnSegAx$ = 68					; size = 4
_PointOnSegAy$ = 72					; size = 4
_PointOnSegAz$ = 76					; size = 4
_PointOnSegBx$ = 80					; size = 4
_PointOnSegBy$ = 84					; size = 4
_PointOnSegBz$ = 88					; size = 4
?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z PROC	; AdjustNearestPoints, COMDAT

; 798  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 799  : 	// handle the case where both parameter s and t are out of range
; 800  : 	if (OUT_OF_RANGE(s) && OUT_OF_RANGE(t))

  00003	f3 0f 10 55 3c	 movss	 xmm2, DWORD PTR _s$[ebp]
  00008	0f 57 c9	 xorps	 xmm1, xmm1
  0000b	0f 2f ca	 comiss	 xmm1, xmm2
  0000e	f3 0f 10 5d 40	 movss	 xmm3, DWORD PTR _t$[ebp]
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0001b	77 05		 ja	 SHORT $LN11@AdjustNear
  0001d	0f 2f d0	 comiss	 xmm2, xmm0
  00020	76 12		 jbe	 SHORT $LN12@AdjustNear
$LN11@AdjustNear:
  00022	0f 2f cb	 comiss	 xmm1, xmm3
  00025	0f 87 cf 01 00
	00		 ja	 $LN10@AdjustNear
  0002b	0f 2f d8	 comiss	 xmm3, xmm0
  0002e	0f 87 c6 01 00
	00		 ja	 $LN10@AdjustNear
$LN12@AdjustNear:

; 821  : 		}
; 822  : 	}
; 823  : 	// otherwise, handle the case where the parameter for only one segment is
; 824  : 	// out of range
; 825  : 	else if (OUT_OF_RANGE(s))

  00034	0f 2f ca	 comiss	 xmm1, xmm2
  00037	0f 87 ea 00 00
	00		 ja	 $LN5@AdjustNear
  0003d	0f 2f d0	 comiss	 xmm2, xmm0
  00040	0f 87 e1 00 00
	00		 ja	 $LN5@AdjustNear

; 834  : 	}
; 835  : 	else if (OUT_OF_RANGE(t))

  00046	0f 2f cb	 comiss	 xmm1, xmm3
  00049	77 09		 ja	 SHORT $LN2@AdjustNear
  0004b	0f 2f d8	 comiss	 xmm3, xmm0
  0004e	0f 86 f5 03 00
	00		 jbe	 $LN9@AdjustNear
$LN2@AdjustNear:

; 836  : 	{
; 837  : 		t = FMAX(0.0f, FMIN(1.0f, t));

  00054	0f 2f c3	 comiss	 xmm0, xmm3
  00057	76 0a		 jbe	 SHORT $LN39@AdjustNear
  00059	0f 2f cb	 comiss	 xmm1, xmm3
  0005c	76 08		 jbe	 SHORT $LN36@AdjustNear
  0005e	0f 28 d9	 movaps	 xmm3, xmm1
  00061	eb 03		 jmp	 SHORT $LN36@AdjustNear
$LN39@AdjustNear:
  00063	0f 28 d8	 movaps	 xmm3, xmm0
$LN36@AdjustNear:

; 838  : 		PointOnSegBx = (B1x + t * Lbx);

  00066	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  0006b	8b 55 50	 mov	 edx, DWORD PTR _PointOnSegBx$[ebp]

; 839  : 		PointOnSegBy = (B1y + t * Lby);
; 840  : 		PointOnSegBz = (B1z + t * Lbz);

  0006e	f3 0f 10 4d 34	 movss	 xmm1, DWORD PTR _Lbz$[ebp]
  00073	8b 4d 54	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  00076	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0007a	8b 45 58	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0007d	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00081	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  00086	f3 0f 58 4d 28	 addss	 xmm1, DWORD PTR _B1z$[ebp]
  0008b	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  0008f	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  00094	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00098	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  0009d	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 841  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, PointOnSegBx,
; 842  : 			PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 843  : 			PointOnSegAx, PointOnSegAy, PointOnSegAz, s);

  000a1	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  000a6	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  000aa	8d 45 3c	 lea	 eax, DWORD PTR _s$[ebp]
  000ad	50		 push	 eax
  000ae	ff 75 4c	 push	 DWORD PTR _PointOnSegAz$[ebp]
  000b1	ff 75 48	 push	 DWORD PTR _PointOnSegAy$[ebp]
  000b4	ff 75 44	 push	 DWORD PTR _PointOnSegAx$[ebp]
  000b7	51		 push	 ecx
  000b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bd	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000c1	6a 00		 push	 0
  000c3	83 ec 24	 sub	 esp, 36			; 00000024H
  000c6	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  000cc	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  000d2	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  000d6	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  000dc	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  000e1	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000e7	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  000ec	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  000f2	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  000f7	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000fd	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00102	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00108	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  0010d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00113	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00122	83 c4 3c	 add	 esp, 60			; 0000003cH

; 844  : 	}
; 845  : 	else
; 846  : 	{
; 847  : 		assert(0);
; 848  : 	}
; 849  : }

  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
$LN5@AdjustNear:

; 826  : 	{
; 827  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  00127	0f 2f c2	 comiss	 xmm0, xmm2
  0012a	76 0a		 jbe	 SHORT $LN40@AdjustNear
  0012c	0f 2f ca	 comiss	 xmm1, xmm2
  0012f	76 08		 jbe	 SHORT $LN30@AdjustNear
  00131	0f 28 d1	 movaps	 xmm2, xmm1
  00134	eb 03		 jmp	 SHORT $LN30@AdjustNear
$LN40@AdjustNear:
  00136	0f 28 d0	 movaps	 xmm2, xmm0
$LN30@AdjustNear:

; 828  : 		PointOnSegAx = (A1x + s * Lax);

  00139	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  0013e	8b 55 44	 mov	 edx, DWORD PTR _PointOnSegAx$[ebp]

; 829  : 		PointOnSegAy = (A1y + s * Lay);
; 830  : 		PointOnSegAz = (A1z + s * Laz);

  00141	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _Laz$[ebp]
  00146	8b 4d 48	 mov	 ecx, DWORD PTR _PointOnSegAy$[ebp]
  00149	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0014d	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00150	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00154	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  00159	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _A1z$[ebp]
  0015e	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00162	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  00167	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0016b	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  00170	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 831  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,
; 832  : 			PointOnSegAy, PointOnSegAz, false, epsilon_squared,
; 833  : 			PointOnSegBx, PointOnSegBy, PointOnSegBz, t);

  00174	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00179	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0017d	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  00180	50		 push	 eax
  00181	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00184	ff 75 54	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00187	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  0018a	51		 push	 ecx
  0018b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00190	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00194	6a 00		 push	 0
  00196	83 ec 24	 sub	 esp, 36			; 00000024H
  00199	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  0019f	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  001a5	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  001a9	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  001af	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  001b4	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  001ba	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  001bf	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  001c5	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  001ca	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  001d0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  001d5	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001db	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  001e0	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001e6	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  001eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f0	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  001f5	83 c4 3c	 add	 esp, 60			; 0000003cH

; 844  : 	}
; 845  : 	else
; 846  : 	{
; 847  : 		assert(0);
; 848  : 	}
; 849  : }

  001f8	5d		 pop	 ebp
  001f9	c3		 ret	 0
$LN10@AdjustNear:

; 801  : 	{
; 802  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  001fa	0f 2f c2	 comiss	 xmm0, xmm2
  001fd	76 0a		 jbe	 SHORT $LN41@AdjustNear
  001ff	0f 2f ca	 comiss	 xmm1, xmm2
  00202	76 0d		 jbe	 SHORT $LN18@AdjustNear
  00204	0f 28 d1	 movaps	 xmm2, xmm1
  00207	eb 03		 jmp	 SHORT $LN48@AdjustNear
$LN41@AdjustNear:
  00209	0f 28 d0	 movaps	 xmm2, xmm0
$LN48@AdjustNear:
  0020c	f3 0f 11 55 3c	 movss	 DWORD PTR _s$[ebp], xmm2
$LN18@AdjustNear:

; 803  : 		PointOnSegAx = (A1x + s * Lax);

  00211	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  00216	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0021a	53		 push	 ebx
  0021b	56		 push	 esi
  0021c	8b 75 44	 mov	 esi, DWORD PTR _PointOnSegAx$[ebp]
  0021f	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]

; 804  : 		PointOnSegAy = (A1y + s * Lay);
; 805  : 		PointOnSegAz = (A1z + s * Laz);

  00224	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00227	57		 push	 edi
  00228	8b 7d 48	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]

; 806  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,
; 807  : 			PointOnSegAy, PointOnSegAz, true, epsilon_squared,
; 808  : 			PointOnSegBx, PointOnSegBy, PointOnSegBz, t);

  0022b	8b 5d 54	 mov	 ebx, DWORD PTR _PointOnSegBy$[ebp]
  0022e	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00232	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  00237	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0023b	f3 0f 10 4d 38	 movss	 xmm1, DWORD PTR _epsilon_squared$[ebp]
  00240	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  00245	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00249	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  0024e	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00252	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  00257	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0025b	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  0025e	50		 push	 eax
  0025f	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00262	53		 push	 ebx
  00263	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00266	51		 push	 ecx
  00267	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0026c	6a 01		 push	 1
  0026e	83 ec 24	 sub	 esp, 36			; 00000024H
  00271	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  00277	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  0027b	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  00281	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00285	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0028b	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00290	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00296	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0029b	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  002a1	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  002a6	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  002ac	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  002b1	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002b7	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  002bc	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002c2	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  002c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cc	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment

; 809  : 		if (OUT_OF_RANGE(t))

  002d1	f3 0f 10 55 40	 movss	 xmm2, DWORD PTR _t$[ebp]
  002d6	0f 57 c9	 xorps	 xmm1, xmm1
  002d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002e1	83 c4 3c	 add	 esp, 60			; 0000003cH
  002e4	0f 2f ca	 comiss	 xmm1, xmm2
  002e7	77 09		 ja	 SHORT $LN8@AdjustNear
  002e9	0f 2f d0	 comiss	 xmm2, xmm0
  002ec	0f 86 54 01 00
	00		 jbe	 $LN45@AdjustNear
$LN8@AdjustNear:

; 810  : 		{
; 811  : 			t = FMAX(0.0f, FMIN(1.0f, t));

  002f2	0f 2f c2	 comiss	 xmm0, xmm2
  002f5	76 0a		 jbe	 SHORT $LN42@AdjustNear
  002f7	0f 2f ca	 comiss	 xmm1, xmm2
  002fa	76 0d		 jbe	 SHORT $LN24@AdjustNear
  002fc	0f 28 d1	 movaps	 xmm2, xmm1
  002ff	eb 03		 jmp	 SHORT $LN49@AdjustNear
$LN42@AdjustNear:
  00301	0f 28 d0	 movaps	 xmm2, xmm0
$LN49@AdjustNear:
  00304	f3 0f 11 55 40	 movss	 DWORD PTR _t$[ebp], xmm2
$LN24@AdjustNear:

; 812  : 			PointOnSegBx = (B1x + t * Lbx);

  00309	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  0030e	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  00311	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 813  : 			PointOnSegBy = (B1y + t * Lby);
; 814  : 			PointOnSegBz = (B1z + t * Lbz);

  00315	8b 4d 58	 mov	 ecx, DWORD PTR _PointOnSegBz$[ebp]

; 815  : 			FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, PointOnSegBx,
; 816  : 				PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 817  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz, s);

  00318	f3 0f 10 4d 38	 movss	 xmm1, DWORD PTR _epsilon_squared$[ebp]
  0031d	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  00322	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00326	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0032b	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0032f	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  00334	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  00338	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  0033d	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00341	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00346	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0034a	8d 4d 3c	 lea	 ecx, DWORD PTR _s$[ebp]
  0034d	51		 push	 ecx
  0034e	ff 75 4c	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00351	57		 push	 edi
  00352	56		 push	 esi
  00353	51		 push	 ecx
  00354	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00359	6a 00		 push	 0
  0035b	83 ec 24	 sub	 esp, 36			; 00000024H
  0035e	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  00364	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00368	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  0036e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00372	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  00378	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  0037d	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00383	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  00388	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0038e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  00393	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00399	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0039e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  003a4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  003a9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003af	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  003b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b9	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment

; 818  : 			FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,
; 819  : 				PointOnSegAy, PointOnSegAz, false, epsilon_squared,
; 820  : 				PointOnSegBx, PointOnSegBy, PointOnSegBz, t);

  003be	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  003c3	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  003c6	83 c4 3c	 add	 esp, 60			; 0000003cH
  003c9	50		 push	 eax
  003ca	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  003cd	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  003d0	53		 push	 ebx
  003d1	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  003d4	51		 push	 ecx
  003d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003da	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003de	6a 00		 push	 0
  003e0	83 ec 24	 sub	 esp, 36			; 00000024H
  003e3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  003e9	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  003ed	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  003f3	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  003f7	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  003fd	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00402	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00408	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0040d	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00413	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00418	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0041e	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00423	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00429	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0042e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00434	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00439	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043e	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00443	83 c4 3c	 add	 esp, 60			; 0000003cH
$LN45@AdjustNear:
  00446	5f		 pop	 edi
  00447	5e		 pop	 esi
  00448	5b		 pop	 ebx
$LN9@AdjustNear:

; 844  : 	}
; 845  : 	else
; 846  : 	{
; 847  : 		assert(0);
; 848  : 	}
; 849  : }

  00449	5d		 pop	 ebp
  0044a	c3		 ret	 0
?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ENDP	; AdjustNearestPoints
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
;	COMDAT ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z
_TEXT	SEGMENT
_tp$1 = -20						; size = 12
_s$ = -8						; size = 8
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_Lax$ = 32						; size = 4
_Lay$ = 36						; size = 4
_Laz$ = 40						; size = 4
_B1x$ = 44						; size = 4
_B1y$ = 48						; size = 4
_B1z$ = 52						; size = 4
_B2x$ = 56						; size = 4
_B2y$ = 60						; size = 4
_B2z$ = 64						; size = 4
_Lbx$ = 68						; size = 4
_Lby$ = 72						; size = 4
_Lbz$ = 76						; size = 4
_temp$ = 80						; size = 4
_infinite_lines$ = 80					; size = 1
_epsilon_squared$ = 84					; size = 4
_PointOnSegAx$ = 88					; size = 4
_PointOnSegAy$ = 92					; size = 4
_PointOnSegAz$ = 96					; size = 4
_PointOnSegBx$ = 100					; size = 4
_PointOnSegBy$ = 104					; size = 4
_PointOnSegBz$ = 108					; size = 4
?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z PROC ; FindNearestPointOfParallelLineSegments, COMDAT

; 700  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 701  : 	float s[2], temp;
; 702  : 	FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,
; 703  : 		true, epsilon_squared, PointOnSegAx, PointOnSegAy, PointOnSegAz, s[0]);

  00003	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00008	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0000b	83 ec 14	 sub	 esp, 20			; 00000014H
  0000e	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR _Lay$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 60	 mov	 ebx, DWORD PTR _PointOnSegAz$[ebp]
  00017	56		 push	 esi
  00018	8b 75 5c	 mov	 esi, DWORD PTR _PointOnSegAy$[ebp]
  0001b	57		 push	 edi
  0001c	8b 7d 58	 mov	 edi, DWORD PTR _PointOnSegAx$[ebp]
  0001f	50		 push	 eax
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	51		 push	 ecx
  00024	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00029	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0002e	6a 01		 push	 1
  00030	83 ec 24	 sub	 esp, 36			; 00000024H
  00033	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  00039	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0003e	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  00044	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00049	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0004f	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  00054	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0005a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0005f	f3 0f 11 54 24
	10		 movss	 DWORD PTR [esp+16], xmm2
  00065	f3 0f 10 55 20	 movss	 xmm2, DWORD PTR _Lax$[ebp]
  0006a	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  00070	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _A1y$[ebp]
  00075	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0007b	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  00081	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _A1x$[ebp]
  00086	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  0008b	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00090	83 c4 3c	 add	 esp, 60			; 0000003cH

; 704  : 	if (true == infinite_lines)

  00093	80 7d 50 01	 cmp	 BYTE PTR _infinite_lines$[ebp], 1
  00097	75 2b		 jne	 SHORT $LN10@FindNeares

; 705  : 	{
; 706  : 		PointOnSegBx = B1x;

  00099	8b 45 64	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
$LN7@FindNeares:
  0009c	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  000a1	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 707  : 		PointOnSegBy = B1y;

  000a5	8b 45 68	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  000a8	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 708  : 		PointOnSegBz = B1z;

  000b3	8b 45 6c	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  000b6	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  000bb	5b		 pop	 ebx
  000bc	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 760  : 		}
; 761  : 	}
; 762  : }

  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
$LN10@FindNeares:

; 709  : 	}
; 710  : 	else
; 711  : 	{
; 712  : 		float tp[3];
; 713  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B2x, B2y, B2z,
; 714  : 			true, epsilon_squared, tp[0], tp[1], tp[2], s[1]);

  000c4	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  000c9	8d 45 fc	 lea	 eax, DWORD PTR _s$[ebp+4]
  000cc	50		 push	 eax
  000cd	8d 45 f4	 lea	 eax, DWORD PTR _tp$1[ebp+8]
  000d0	50		 push	 eax
  000d1	8d 45 f0	 lea	 eax, DWORD PTR _tp$1[ebp+4]
  000d4	50		 push	 eax
  000d5	8d 45 ec	 lea	 eax, DWORD PTR _tp$1[ebp]
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  000e4	6a 01		 push	 1
  000e6	83 ec 24	 sub	 esp, 36			; 00000024H
  000e9	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  000ef	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  000f4	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  000fa	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  000ff	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  00105	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  0010a	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00110	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  00115	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0011b	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  00120	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00126	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0012b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00131	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00136	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0013c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00146	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment

; 715  : 		if (s[0] < 0.f && s[1] < 0.f)

  0014b	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _s$[ebp]
  00150	0f 57 c9	 xorps	 xmm1, xmm1
  00153	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR _s$[ebp+4]
  00158	83 c4 3c	 add	 esp, 60			; 0000003cH
  0015b	0f 2f ca	 comiss	 xmm1, xmm2
  0015e	76 2e		 jbe	 SHORT $LN8@FindNeares
  00160	0f 2f cb	 comiss	 xmm1, xmm3
  00163	76 29		 jbe	 SHORT $LN8@FindNeares

; 716  : 		{
; 717  : 			PointOnSegAx = A1x;
; 718  : 			PointOnSegAy = A1y;
; 719  : 			PointOnSegAz = A1z;
; 720  : 			if (s[0] < s[1])

  00165	0f 2f da	 comiss	 xmm3, xmm2

; 721  : 			{
; 722  : 				PointOnSegBx = B2x;

  00168	8b 45 64	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  0016b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00170	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00174	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00179	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  0017d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00182	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  00186	0f 86 10 ff ff
	ff		 jbe	 $LN7@FindNeares

; 723  : 				PointOnSegBy = B2y;
; 724  : 				PointOnSegBz = B2z;
; 725  : 			}
; 726  : 			else

  0018c	eb 39		 jmp	 SHORT $LN3@FindNeares
$LN8@FindNeares:

; 727  : 			{
; 728  : 				PointOnSegBx = B1x;
; 729  : 				PointOnSegBy = B1y;
; 730  : 				PointOnSegBz = B1z;
; 731  : 			}
; 732  : 		}
; 733  : 		else if (s[0] > 1.f && s[1] > 1.f)

  0018e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00196	0f 2f d0	 comiss	 xmm2, xmm0
  00199	76 54		 jbe	 SHORT $LN4@FindNeares
  0019b	0f 2f d8	 comiss	 xmm3, xmm0
  0019e	76 4f		 jbe	 SHORT $LN4@FindNeares

; 734  : 		{
; 735  : 			PointOnSegAx = A2x;
; 736  : 			PointOnSegAy = A2y;
; 737  : 			PointOnSegAz = A2z;
; 738  : 			if (s[0] < s[1])

  001a0	0f 2f da	 comiss	 xmm3, xmm2

; 739  : 			{
; 740  : 				PointOnSegBx = B1x;

  001a3	8b 45 64	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  001a6	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  001ab	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  001af	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  001b4	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  001b8	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  001bd	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  001c1	0f 87 d5 fe ff
	ff		 ja	 $LN7@FindNeares
$LN3@FindNeares:

; 741  : 				PointOnSegBy = B1y;
; 742  : 				PointOnSegBz = B1z;
; 743  : 			}
; 744  : 			else
; 745  : 			{
; 746  : 				PointOnSegBx = B2x;

  001c7	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  001cc	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 747  : 				PointOnSegBy = B2y;

  001d0	8b 45 68	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  001d3	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 748  : 				PointOnSegBz = B2z;

  001de	8b 45 6c	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  001e1	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  001e6	5b		 pop	 ebx
  001e7	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 760  : 		}
; 761  : 	}
; 762  : }

  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c3		 ret	 0
$LN4@FindNeares:

; 749  : 			}
; 750  : 		}
; 751  : 		else
; 752  : 		{
; 753  : 			temp = 0.5f*(FMAX(0.0f, FMIN(1.0f, s[0])) + FMAX(0.0f, FMIN(1.0f, s[1])));

  001ef	0f 2f c2	 comiss	 xmm0, xmm2
  001f2	76 0a		 jbe	 SHORT $LN15@FindNeares
  001f4	0f 2f ca	 comiss	 xmm1, xmm2
  001f7	76 08		 jbe	 SHORT $LN16@FindNeares
  001f9	0f 28 d1	 movaps	 xmm2, xmm1
  001fc	eb 03		 jmp	 SHORT $LN16@FindNeares
$LN15@FindNeares:
  001fe	0f 28 d0	 movaps	 xmm2, xmm0
$LN16@FindNeares:
  00201	0f 2f c3	 comiss	 xmm0, xmm3
  00204	76 0a		 jbe	 SHORT $LN21@FindNeares
  00206	0f 2f cb	 comiss	 xmm1, xmm3
  00209	77 08		 ja	 SHORT $LN22@FindNeares
  0020b	0f 28 cb	 movaps	 xmm1, xmm3
  0020e	eb 03		 jmp	 SHORT $LN22@FindNeares
$LN21@FindNeares:
  00210	0f 28 c8	 movaps	 xmm1, xmm0
$LN22@FindNeares:
  00213	f3 0f 58 ca	 addss	 xmm1, xmm2

; 754  : 			PointOnSegAx = (A1x + temp * Lax);
; 755  : 			PointOnSegAy = (A1y + temp * Lay);
; 756  : 			PointOnSegAz = (A1z + temp * Laz);
; 757  : 			FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz,
; 758  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz, true,
; 759  : 				epsilon_squared, PointOnSegBx, PointOnSegBy, PointOnSegBz, temp);

  00217	8d 45 50	 lea	 eax, DWORD PTR _temp$[ebp]
  0021a	50		 push	 eax
  0021b	ff 75 6c	 push	 DWORD PTR _PointOnSegBz$[ebp]
  0021e	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00226	ff 75 68	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00229	ff 75 64	 push	 DWORD PTR _PointOnSegBx$[ebp]
  0022c	0f 28 c1	 movaps	 xmm0, xmm1
  0022f	f3 0f 11 4d 50	 movss	 DWORD PTR _temp$[ebp], xmm1
  00234	f3 0f 59 45 20	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  00239	51		 push	 ecx
  0023a	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  0023f	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00243	0f 28 c1	 movaps	 xmm0, xmm1
  00246	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR _Lay$[ebp]
  0024b	f3 0f 59 4d 28	 mulss	 xmm1, DWORD PTR _Laz$[ebp]
  00250	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  00255	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _A1z$[ebp]
  0025a	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  0025e	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00263	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00268	6a 01		 push	 1
  0026a	83 ec 24	 sub	 esp, 36			; 00000024H
  0026d	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1
  00271	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00275	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  0027b	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  00281	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00285	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0028b	f3 0f 10 45 4c	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00290	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00296	f3 0f 10 45 48	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0029b	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  002a1	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  002a6	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  002ac	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  002b1	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002b7	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  002bc	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002c2	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  002c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cc	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  002d1	83 c4 3c	 add	 esp, 60			; 0000003cH
  002d4	5f		 pop	 edi
  002d5	5e		 pop	 esi
  002d6	5b		 pop	 ebx

; 760  : 		}
; 761  : 	}
; 762  : }

  002d7	8b e5		 mov	 esp, ebp
  002d9	5d		 pop	 ebp
  002da	c3		 ret	 0
?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ENDP ; FindNearestPointOfParallelLineSegments
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
;	COMDAT ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z
_TEXT	SEGMENT
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_Lx$ = 20						; size = 4
_Ly$ = 24						; size = 4
_Lz$ = 28						; size = 4
_Bx$ = 32						; size = 4
_By$ = 36						; size = 4
_Bz$ = 40						; size = 4
_infinite_line$ = 44					; size = 1
_epsilon_squared$ = 48					; size = 4
_NearestPointX$ = 52					; size = 4
_NearestPointY$ = 56					; size = 4
_NearestPointZ$ = 60					; size = 4
_parameter$ = 64					; size = 4
?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z PROC ; FindNearestPointOnLineSegment, COMDAT

; 630  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 631  : 	// Line/Segment is degenerate --- special case #1
; 632  : 	float D = Lx * Lx + Ly * Ly + Lz * Lz;

  00003	f3 0f 10 5d 14	 movss	 xmm3, DWORD PTR _Lx$[ebp]
  00008	f3 0f 10 65 18	 movss	 xmm4, DWORD PTR _Ly$[ebp]
  0000d	0f 28 cb	 movaps	 xmm1, xmm3
  00010	f3 0f 10 6d 1c	 movss	 xmm5, DWORD PTR _Lz$[ebp]
  00015	0f 28 c4	 movaps	 xmm0, xmm4
  00018	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0001c	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00020	f3 0f 58 c8	 addss	 xmm1, xmm0
  00024	0f 28 c5	 movaps	 xmm0, xmm5
  00027	f3 0f 59 c5	 mulss	 xmm0, xmm5
  0002b	f3 0f 58 c8	 addss	 xmm1, xmm0

; 633  : 	if (D < epsilon_squared)

  0002f	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00034	0f 2f c1	 comiss	 xmm0, xmm1
  00037	76 26		 jbe	 SHORT $LN2@FindNeares

; 634  : 	{
; 635  : 		NearestPointX = A1x;

  00039	8b 45 34	 mov	 eax, DWORD PTR _NearestPointX$[ebp]
  0003c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00041	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 636  : 		NearestPointY = A1y;

  00045	8b 45 38	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  00048	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  0004d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 652  : 	NearestPointZ = A1z + parameter * Lz;

  00051	8b 45 3c	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  00054	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00059	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 653  : 	return;
; 654  : }

  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN2@FindNeares:

; 637  : 		NearestPointZ = A1z;
; 638  : 		return;
; 639  : 	}
; 640  : 	
; 641  : 	float ABx = Bx - A1x;
; 642  : 	float ABy = By - A1y;
; 643  : 	float ABz = Bz - A1z;
; 644  : 	
; 645  : 	// parameter is computed from Equation (20).
; 646  : 	parameter = (Lx * ABx + Ly * ABy + Lz * ABz) / D;
; 647  : 	
; 648  : 	if (false == infinite_line) parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  0005f	80 7d 2c 00	 cmp	 BYTE PTR _infinite_line$[ebp], 0
  00063	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _By$[ebp]
  00068	f3 0f 10 55 20	 movss	 xmm2, DWORD PTR _Bx$[ebp]
  0006d	f3 0f 10 75 08	 movss	 xmm6, DWORD PTR _A1x$[ebp]
  00072	f3 0f 10 7d 0c	 movss	 xmm7, DWORD PTR _A1y$[ebp]
  00077	f3 0f 5c d6	 subss	 xmm2, xmm6
  0007b	f3 0f 5c c7	 subss	 xmm0, xmm7
  0007f	8b 4d 40	 mov	 ecx, DWORD PTR _parameter$[ebp]
  00082	f3 0f 59 d3	 mulss	 xmm2, xmm3
  00086	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0008a	f3 0f 58 d0	 addss	 xmm2, xmm0
  0008e	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Bz$[ebp]
  00093	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  00098	f3 0f 59 c5	 mulss	 xmm0, xmm5
  0009c	f3 0f 58 d0	 addss	 xmm2, xmm0
  000a0	f3 0f 5e d1	 divss	 xmm2, xmm1
  000a4	f3 0f 11 11	 movss	 DWORD PTR [ecx], xmm2
  000a8	75 1c		 jne	 SHORT $LN1@FindNeares
  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b2	0f 2f c2	 comiss	 xmm0, xmm2
  000b5	76 0b		 jbe	 SHORT $LN7@FindNeares
  000b7	0f 57 c0	 xorps	 xmm0, xmm0
  000ba	0f 2f c2	 comiss	 xmm0, xmm2
  000bd	77 03		 ja	 SHORT $LN7@FindNeares
  000bf	0f 28 c2	 movaps	 xmm0, xmm2
$LN7@FindNeares:
  000c2	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
$LN1@FindNeares:

; 649  : 	
; 650  : 	NearestPointX = A1x + parameter * Lx;

  000c6	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000ca	8b 45 34	 mov	 eax, DWORD PTR _NearestPointX$[ebp]
  000cd	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000d1	f3 0f 58 c6	 addss	 xmm0, xmm6
  000d5	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 651  : 	NearestPointY = A1y + parameter * Ly;

  000d9	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000dd	8b 45 38	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  000e0	f3 0f 59 c4	 mulss	 xmm0, xmm4
  000e4	f3 0f 58 c7	 addss	 xmm0, xmm7
  000e8	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 652  : 	NearestPointZ = A1z + parameter * Lz;

  000ec	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000f0	8b 45 3c	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  000f3	f3 0f 59 c5	 mulss	 xmm0, xmm5
  000f7	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  000fc	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 653  : 	return;
; 654  : }

  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ENDP ; FindNearestPointOnLineSegment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z
_TEXT	SEGMENT
_ABz$1$ = -24						; size = 4
_epsilon_squared$1$ = -24				; size = 4
_ABy$1$ = -20						; size = 4
_temp$ = -20						; size = 4
_Lbx$1$ = -16						; size = 4
_Laz$1$ = -12						; size = 4
_Lby$1$ = -8						; size = 4
_Lbz$1$ = -4						; size = 4
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_B2x$ = 44						; size = 4
_B2y$ = 48						; size = 4
_B2z$ = 52						; size = 4
_infinite_lines$ = 56					; size = 1
_epsilon$ = 60						; size = 4
_PointOnSegAx$ = 64					; size = 4
_PointOnSegAy$ = 68					; size = 4
_PointOnSegAz$ = 72					; size = 4
_PointOnSegBx$ = 76					; size = 4
_PointOnSegBy$ = 80					; size = 4
_PointOnSegBz$ = 84					; size = 4
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z PROC ; IntersectLineSegments, COMDAT

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 322  : 	float temp = 0.f;
; 323  : 	float epsilon_squared = epsilon * epsilon;
; 324  : 	
; 325  : 	// Compute parameters from Equations (1) and (2) in the text
; 326  : 	float Lax = A2x - A1x;
; 327  : 	float Lay = A2y - A1y;
; 328  : 	float Laz = A2z - A1z;
; 329  : 	float Lbx = B2x - B1x;
; 330  : 	float Lby = B2y - B1y;
; 331  : 	float Lbz = B2z - B1z;

  00006	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  0000b	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _B1z$[ebp]
  00010	f3 0f 10 75 14	 movss	 xmm6, DWORD PTR _A2x$[ebp]
  00015	f3 0f 10 7d 18	 movss	 xmm7, DWORD PTR _A2y$[ebp]
  0001a	f3 0f 5c 75 08	 subss	 xmm6, DWORD PTR _A1x$[ebp]
  0001f	f3 0f 5c 7d 0c	 subss	 xmm7, DWORD PTR _A1y$[ebp]
  00024	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  00029	f3 0f 10 55 1c	 movss	 xmm2, DWORD PTR _A2z$[ebp]
  0002e	f3 0f 5c 55 10	 subss	 xmm2, DWORD PTR _A1z$[ebp]
  00033	f3 0f 10 65 2c	 movss	 xmm4, DWORD PTR _B2x$[ebp]
  00038	f3 0f 5c 65 20	 subss	 xmm4, DWORD PTR _B1x$[ebp]
  0003d	f3 0f 11 45 fc	 movss	 DWORD PTR _Lbz$1$[ebp], xmm0

; 332  : 	// From Equation (15)
; 333  : 	float L11 =  (Lax * Lax) + (Lay * Lay) + (Laz * Laz);

  00042	0f 28 ef	 movaps	 xmm5, xmm7
  00045	0f 28 c6	 movaps	 xmm0, xmm6
  00048	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0004c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp], 0
  00053	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00057	f3 0f 59 ef	 mulss	 xmm5, xmm7
  0005b	f3 0f 11 4d e8	 movss	 DWORD PTR _epsilon_squared$1$[ebp], xmm1
  00060	f3 0f 10 4d 30	 movss	 xmm1, DWORD PTR _B2y$[ebp]
  00065	f3 0f 5c 4d 24	 subss	 xmm1, DWORD PTR _B1y$[ebp]
  0006a	f3 0f 58 e8	 addss	 xmm5, xmm0
  0006e	f3 0f 11 55 f4	 movss	 DWORD PTR _Laz$1$[ebp], xmm2
  00073	0f 28 c2	 movaps	 xmm0, xmm2
  00076	f3 0f 11 65 f0	 movss	 DWORD PTR _Lbx$1$[ebp], xmm4
  0007b	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 334  : 	float L22 =  (Lbx * Lbx) + (Lby * Lby) + (Lbz * Lbz);

  0007f	0f 28 d9	 movaps	 xmm3, xmm1
  00082	f3 0f 11 4d f8	 movss	 DWORD PTR _Lby$1$[ebp], xmm1
  00087	f3 0f 59 d9	 mulss	 xmm3, xmm1
  0008b	f3 0f 58 e8	 addss	 xmm5, xmm0
  0008f	0f 28 c4	 movaps	 xmm0, xmm4
  00092	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00096	f3 0f 58 d8	 addss	 xmm3, xmm0
  0009a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0009f	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000a3	f3 0f 58 d8	 addss	 xmm3, xmm0

; 335  : 	
; 336  : 	// Line/Segment A is degenerate ---- Special Case #1
; 337  : 	if (L11 < epsilon_squared)

  000a7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _epsilon_squared$1$[ebp]
  000ac	0f 2f c5	 comiss	 xmm0, xmm5
  000af	0f 86 97 00 00
	00		 jbe	 $LN9@IntersectL

; 338  : 	{
; 339  : 		PointOnSegAx = A1x;

  000b5	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  000b8	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]

; 340  : 		PointOnSegAy = A1y;

  000bd	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _A1y$[ebp]

; 341  : 		PointOnSegAz = A1z;

  000c2	f3 0f 10 5d 10	 movss	 xmm3, DWORD PTR _A1z$[ebp]
  000c7	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000cb	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]

; 342  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, A1x, A1y, A1z,
; 343  : 			infinite_lines, epsilon, PointOnSegBx, PointOnSegBy,
; 344  : 			PointOnSegBz, temp);

  000ce	f3 0f 10 6d 3c	 movss	 xmm5, DWORD PTR _epsilon$[ebp]
  000d3	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000d7	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  000da	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3
  000de	8d 45 ec	 lea	 eax, DWORD PTR _temp$[ebp]
  000e1	50		 push	 eax
  000e2	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  000e5	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  000e8	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  000eb	51		 push	 ecx
  000ec	f3 0f 11 2c 24	 movss	 DWORD PTR [esp], xmm5
  000f1	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  000f4	83 ec 24	 sub	 esp, 36			; 00000024H
  000f7	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [esp+32], xmm3
  000fd	f3 0f 11 54 24
	1c		 movss	 DWORD PTR [esp+28], xmm2
  00103	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  00109	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0010e	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00114	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00119	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [esp+16], xmm1
  0011f	f3 0f 11 64 24
	0c		 movss	 DWORD PTR [esp+12], xmm4
  00125	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0012b	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  00130	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00136	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00145	83 c4 3c	 add	 esp, 60			; 0000003cH

; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 	
; 423  : }

  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
$LN9@IntersectL:

; 345  : 	}
; 346  : 	// Line/Segment B is degenerate ---- Special Case #1
; 347  : 	else if (L22 < epsilon_squared)

  0014c	0f 2f c3	 comiss	 xmm0, xmm3
  0014f	0f 86 92 00 00
	00		 jbe	 $LN7@IntersectL

; 348  : 	{
; 349  : 		PointOnSegBx = B1x;

  00155	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  00158	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]

; 350  : 		PointOnSegBy = B1y;

  0015d	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR _B1y$[ebp]

; 351  : 		PointOnSegBz = B1z;

  00162	f3 0f 10 5d 28	 movss	 xmm3, DWORD PTR _B1z$[ebp]
  00167	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0016b	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]

; 352  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,
; 353  : 			infinite_lines, epsilon, PointOnSegAx, PointOnSegAy,
; 354  : 			PointOnSegAz, temp);

  0016e	f3 0f 10 65 3c	 movss	 xmm4, DWORD PTR _epsilon$[ebp]
  00173	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00177	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0017a	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3
  0017e	8d 45 ec	 lea	 eax, DWORD PTR _temp$[ebp]
  00181	50		 push	 eax
  00182	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00185	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  00188	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  0018b	51		 push	 ecx
  0018c	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  00191	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00194	83 ec 24	 sub	 esp, 36			; 00000024H
  00197	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [esp+32], xmm3
  0019d	f3 0f 11 4c 24
	1c		 movss	 DWORD PTR [esp+28], xmm1
  001a3	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  001a9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  001ae	f3 0f 11 54 24
	14		 movss	 DWORD PTR [esp+20], xmm2
  001b4	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  001ba	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  001c0	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001c6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  001cb	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001d1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  001d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001db	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  001e0	83 c4 3c	 add	 esp, 60			; 0000003cH

; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 	
; 423  : }

  001e3	8b e5		 mov	 esp, ebp
  001e5	5d		 pop	 ebp
  001e6	c3		 ret	 0
$LN7@IntersectL:

; 355  : 	}
; 356  : 	// Neither line/segment is degenerate
; 357  : 	else
; 358  : 	{
; 359  : 		// Compute more parameters from Equation (3) in the text.
; 360  : 		float ABx = B1x - A1x;
; 361  : 		float ABy = B1y - A1y;

  001e7	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  001ec	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _A1y$[ebp]

; 362  : 		float ABz = B1z - A1z;
; 363  : 		
; 364  : 		// and from Equation (15).
; 365  : 		float L12 = -(Lax * Lbx) - (Lay * Lby) - (Laz * Lbz);

  001f1	f3 0f 59 e6	 mulss	 xmm4, xmm6
  001f5	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _B1x$[ebp]
  001fa	f3 0f 5c 4d 08	 subss	 xmm1, DWORD PTR _A1x$[ebp]
  001ff	0f 57 25 00 00
	00 00		 xorps	 xmm4, DWORD PTR __xmm@80000000800000008000000080000000
  00206	f3 0f 11 45 ec	 movss	 DWORD PTR _ABy$1$[ebp], xmm0
  0020b	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00210	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]

; 366  : 		
; 367  : 		float DetL = L11 * L22 - L12 * L12;

  00215	f3 0f 59 dd	 mulss	 xmm3, xmm5
  00219	f3 0f 11 45 e8	 movss	 DWORD PTR _ABz$1$[ebp], xmm0
  0021e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00223	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00227	f3 0f 5c e0	 subss	 xmm4, xmm0
  0022b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00230	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 368  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 369  : 		if (FABS(DetL) < epsilon)

  00234	f3 0f 10 55 3c	 movss	 xmm2, DWORD PTR _epsilon$[ebp]
  00239	f3 0f 5c e0	 subss	 xmm4, xmm0
  0023d	0f 28 c4	 movaps	 xmm0, xmm4
  00240	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00244	f3 0f 5c d8	 subss	 xmm3, xmm0
  00248	0f 28 c3	 movaps	 xmm0, xmm3
  0024b	0f 54 05 00 00
	00 00		 andps	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  00252	0f 2f d0	 comiss	 xmm2, xmm0
  00255	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _Laz$1$[ebp]
  0025a	0f 86 e5 00 00
	00		 jbe	 $LN5@IntersectL

; 370  : 		{
; 371  : 			FindNearestPointOfParallelLineSegments(A1x, A1y, A1z, A2x, A2y, A2z,
; 372  : 				Lax, Lay, Laz,
; 373  : 				B1x, B1y, B1z, B2x, B2y, B2z,
; 374  : 				Lbx, Lby, Lbz,
; 375  : 				infinite_lines, epsilon,
; 376  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 377  : 				PointOnSegBx, PointOnSegBy, PointOnSegBz);

  00260	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00263	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00268	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  0026b	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  0026e	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00271	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  00274	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  00277	51		 push	 ecx
  00278	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027d	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00280	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00285	83 ec 48	 sub	 esp, 72			; 00000048H
  00288	f3 0f 11 44 24
	44		 movss	 DWORD PTR [esp+68], xmm0
  0028e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00293	f3 0f 11 44 24
	40		 movss	 DWORD PTR [esp+64], xmm0
  00299	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _Lbx$1$[ebp]
  0029e	f3 0f 11 44 24
	3c		 movss	 DWORD PTR [esp+60], xmm0
  002a4	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  002a9	f3 0f 11 44 24
	38		 movss	 DWORD PTR [esp+56], xmm0
  002af	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  002b4	f3 0f 11 44 24
	34		 movss	 DWORD PTR [esp+52], xmm0
  002ba	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  002bf	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  002c5	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  002ca	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  002d0	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  002d5	f3 0f 11 44 24
	28		 movss	 DWORD PTR [esp+40], xmm0
  002db	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  002e0	f3 0f 11 44 24
	24		 movss	 DWORD PTR [esp+36], xmm0
  002e6	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  002eb	f3 0f 11 54 24
	20		 movss	 DWORD PTR [esp+32], xmm2
  002f1	f3 0f 11 7c 24
	1c		 movss	 DWORD PTR [esp+28], xmm7
  002f7	f3 0f 11 74 24
	18		 movss	 DWORD PTR [esp+24], xmm6
  002fd	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00303	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  00308	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0030e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  00313	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00319	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0031e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00324	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00329	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0032f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00334	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00339	e8 00 00 00 00	 call	 ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
  0033e	83 c4 68	 add	 esp, 104		; 00000068H

; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 	
; 423  : }

  00341	8b e5		 mov	 esp, ebp
  00343	5d		 pop	 ebp
  00344	c3		 ret	 0
$LN5@IntersectL:

; 378  : 		}
; 379  : 		// The general case
; 380  : 		else
; 381  : 		{
; 382  : 			// from Equation (15)
; 383  : 			float ra = Lax * ABx + Lay * ABy + Laz * ABz;
; 384  : 			float rb = -Lbx * ABx - Lby * ABy - Lbz * ABz;
; 385  : 			
; 386  : 			float t = (L11 * rb - ra * L12)/DetL; // Equation (12)
; 387  : 			
; 388  : #ifdef USE_CRAMERS_RULE
; 389  : 			float s = (L22 * ra - rb * L12)/DetL;
; 390  : #else
; 391  : 			float s = (ra-L12*t)/L11;             // Equation (13)
; 392  : #endif // USE_CRAMERS_RULE
; 393  : 			
; 394  : #ifdef CHECK_ANSWERS
; 395  : 			float check_ra = s*L11 + t*L12;
; 396  : 			float check_rb = s*L12 + t*L22;
; 397  : 			assert(FABS(check_ra-ra) < epsilon);
; 398  : 			assert(FABS(check_rb-rb) < epsilon);
; 399  : #endif // CHECK_ANSWERS
; 400  : 			
; 401  : 			// if we are dealing with infinite lines or if parameters s and t both
; 402  : 			// lie in the range [0,1] then just compute the points using Equations
; 403  : 			// (1) and (2) from the text.
; 404  : 			PointOnSegAx = (A1x + s * Lax);
; 405  : 			PointOnSegAy = (A1y + s * Lay);
; 406  : 			PointOnSegAz = (A1z + s * Laz);
; 407  : 			PointOnSegBx = (B1x + t * Lbx);
; 408  : 			PointOnSegBy = (B1y + t * Lby);
; 409  : 			PointOnSegBz = (B1z + t * Lbz);
; 410  : 			// otherwise, at least one of s and t is outside of [0,1] and we have to
; 411  : 			// handle this case.
; 412  : 			if (false == infinite_lines && (OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  00345	80 7d 38 00	 cmp	 BYTE PTR _infinite_lines$[ebp], 0
  00349	0f 28 c1	 movaps	 xmm0, xmm1
  0034c	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _ABy$1$[ebp]
  00351	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00355	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  00358	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _Lbx$1$[ebp]
  0035d	8b 4d 44	 mov	 ecx, DWORD PTR _PointOnSegAy$[ebp]
  00360	f3 0f 59 d7	 mulss	 xmm2, xmm7
  00364	8b 55 48	 mov	 edx, DWORD PTR _PointOnSegAz$[ebp]
  00367	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0036e	56		 push	 esi
  0036f	f3 0f 58 d0	 addss	 xmm2, xmm0
  00373	8b 75 4c	 mov	 esi, DWORD PTR _PointOnSegBx$[ebp]
  00376	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  0037b	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _Laz$1$[ebp]
  00380	57		 push	 edi
  00381	8b 7d 50	 mov	 edi, DWORD PTR _PointOnSegBy$[ebp]
  00384	f3 0f 58 d0	 addss	 xmm2, xmm0
  00388	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _ABy$1$[ebp]
  0038d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00392	f3 0f 5c c8	 subss	 xmm1, xmm0
  00396	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  0039b	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  003a0	f3 0f 5c c8	 subss	 xmm1, xmm0
  003a4	0f 28 c2	 movaps	 xmm0, xmm2
  003a7	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003ab	f3 0f 59 cd	 mulss	 xmm1, xmm5
  003af	f3 0f 5c c8	 subss	 xmm1, xmm0
  003b3	f3 0f 5e cb	 divss	 xmm1, xmm3
  003b7	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _Laz$1$[ebp]
  003bc	0f 28 c1	 movaps	 xmm0, xmm1
  003bf	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003c3	f3 0f 10 65 f0	 movss	 xmm4, DWORD PTR _Lbx$1$[ebp]
  003c8	f3 0f 5c d0	 subss	 xmm2, xmm0
  003cc	f3 0f 5e d5	 divss	 xmm2, xmm5
  003d0	f3 0f 10 6d f8	 movss	 xmm5, DWORD PTR _Lby$1$[ebp]
  003d5	0f 28 c2	 movaps	 xmm0, xmm2
  003d8	f3 0f 59 c6	 mulss	 xmm0, xmm6
  003dc	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  003e1	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  003e5	0f 28 c2	 movaps	 xmm0, xmm2
  003e8	f3 0f 59 c7	 mulss	 xmm0, xmm7
  003ec	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  003ef	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  003f4	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  003f8	0f 28 c2	 movaps	 xmm0, xmm2
  003fb	f3 0f 59 c3	 mulss	 xmm0, xmm3
  003ff	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  00404	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00408	0f 28 c1	 movaps	 xmm0, xmm1
  0040b	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0040f	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  00414	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00418	0f 28 c1	 movaps	 xmm0, xmm1
  0041b	f3 0f 59 c5	 mulss	 xmm0, xmm5
  0041f	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  00424	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00428	0f 28 c1	 movaps	 xmm0, xmm1
  0042b	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00430	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00435	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00439	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  0043c	0f 85 bf 00 00
	00		 jne	 $LN12@IntersectL
  00442	0f 57 c0	 xorps	 xmm0, xmm0
  00445	0f 2f c2	 comiss	 xmm0, xmm2
  00448	77 23		 ja	 SHORT $LN1@IntersectL
  0044a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00452	0f 2f d0	 comiss	 xmm2, xmm0
  00455	77 16		 ja	 SHORT $LN1@IntersectL
  00457	0f 57 db	 xorps	 xmm3, xmm3
  0045a	0f 2f d9	 comiss	 xmm3, xmm1
  0045d	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _Laz$1$[ebp]
  00462	77 09		 ja	 SHORT $LN1@IntersectL
  00464	0f 2f c8	 comiss	 xmm1, xmm0
  00467	0f 86 94 00 00
	00		 jbe	 $LN12@IntersectL
$LN1@IntersectL:

; 413  : 			{
; 414  : 				AdjustNearestPoints(A1x, A1y, A1z, Lax, Lay, Laz,
; 415  : 					B1x, B1y, B1z, Lbx, Lby, Lbz,
; 416  : 					epsilon, s, t,
; 417  : 					PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 418  : 					PointOnSegBx, PointOnSegBy, PointOnSegBz);

  0046d	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00470	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00475	57		 push	 edi
  00476	56		 push	 esi
  00477	52		 push	 edx
  00478	51		 push	 ecx
  00479	50		 push	 eax
  0047a	83 ec 3c	 sub	 esp, 60			; 0000003cH
  0047d	f3 0f 11 4c 24
	38		 movss	 DWORD PTR [esp+56], xmm1
  00483	f3 0f 11 54 24
	34		 movss	 DWORD PTR [esp+52], xmm2
  00489	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  0048f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00494	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  0049a	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0049f	f3 0f 11 6c 24
	28		 movss	 DWORD PTR [esp+40], xmm5
  004a5	f3 0f 11 64 24
	24		 movss	 DWORD PTR [esp+36], xmm4
  004ab	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  004b1	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  004b6	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  004bc	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  004c1	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  004c7	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  004cc	f3 0f 11 5c 24
	14		 movss	 DWORD PTR [esp+20], xmm3
  004d2	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  004d8	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  004de	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  004e4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  004e9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004ef	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  004f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f9	e8 00 00 00 00	 call	 ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
  004fe	83 c4 54	 add	 esp, 84			; 00000054H
$LN12@IntersectL:
  00501	5f		 pop	 edi
  00502	5e		 pop	 esi

; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 	
; 423  : }

  00503	8b e5		 mov	 esp, ebp
  00505	5d		 pop	 ebp
  00506	c3		 ret	 0
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z
_TEXT	SEGMENT
_ABz$1$ = -24						; size = 4
_epsilon_squared$1$ = -24				; size = 4
_ABy$1$ = -20						; size = 4
_temp$ = -20						; size = 4
_Lbx$1$ = -16						; size = 4
_Laz$1$ = -12						; size = 4
_Lby$1$ = -8						; size = 4
_Lbz$1$ = -4						; size = 4
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_B2x$ = 44						; size = 4
_B2y$ = 48						; size = 4
_B2z$ = 52						; size = 4
_infinite_lines$ = 56					; size = 1
_epsilon$ = 60						; size = 4
_PointOnSegAx$ = 64					; size = 4
_PointOnSegAy$ = 68					; size = 4
_PointOnSegAz$ = 72					; size = 4
_PointOnSegBx$ = 76					; size = 4
_PointOnSegBy$ = 80					; size = 4
_PointOnSegBz$ = 84					; size = 4
_NearestPointX$ = 88					; size = 4
_NearestPointY$ = 92					; size = 4
_NearestPointZ$ = 96					; size = 4
_NearestVectorX$ = 100					; size = 4
_NearestVectorY$ = 104					; size = 4
_NearestVectorZ$ = 108					; size = 4
_true_intersection$ = 112				; size = 4
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z PROC ; IntersectLineSegments, COMDAT

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 481  : 	float temp = 0.f;
; 482  : 	float epsilon_squared = epsilon * epsilon;
; 483  : 	
; 484  : 	// Compute parameters from Equations (1) and (2) in the text
; 485  : 	float Lax = A2x - A1x;
; 486  : 	float Lay = A2y - A1y;
; 487  : 	float Laz = A2z - A1z;
; 488  : 	float Lbx = B2x - B1x;
; 489  : 	float Lby = B2y - B1y;
; 490  : 	float Lbz = B2z - B1z;

  00006	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  0000b	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _B1z$[ebp]
  00010	f3 0f 10 75 14	 movss	 xmm6, DWORD PTR _A2x$[ebp]
  00015	f3 0f 10 7d 18	 movss	 xmm7, DWORD PTR _A2y$[ebp]
  0001a	f3 0f 5c 75 08	 subss	 xmm6, DWORD PTR _A1x$[ebp]
  0001f	f3 0f 5c 7d 0c	 subss	 xmm7, DWORD PTR _A1y$[ebp]
  00024	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  00029	f3 0f 10 55 1c	 movss	 xmm2, DWORD PTR _A2z$[ebp]
  0002e	f3 0f 5c 55 10	 subss	 xmm2, DWORD PTR _A1z$[ebp]
  00033	f3 0f 10 65 2c	 movss	 xmm4, DWORD PTR _B2x$[ebp]
  00038	f3 0f 5c 65 20	 subss	 xmm4, DWORD PTR _B1x$[ebp]
  0003d	f3 0f 11 45 fc	 movss	 DWORD PTR _Lbz$1$[ebp], xmm0

; 491  : 	// From Equation (15)
; 492  : 	float L11 =  (Lax * Lax) + (Lay * Lay) + (Laz * Laz);

  00042	0f 28 ef	 movaps	 xmm5, xmm7
  00045	0f 28 c6	 movaps	 xmm0, xmm6
  00048	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0004c	56		 push	 esi
  0004d	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 493  : 	float L22 =  (Lbx * Lbx) + (Lby * Lby) + (Lbz * Lbz);
; 494  : 	
; 495  : 	// Line/Segment A is degenerate ---- Special Case #1
; 496  : 	if (L11 < epsilon_squared)
; 497  : 	{
; 498  : 		PointOnSegAx = A1x;

  00051	8b 75 40	 mov	 esi, DWORD PTR _PointOnSegAx$[ebp]
  00054	f3 0f 59 ef	 mulss	 xmm5, xmm7
  00058	57		 push	 edi
  00059	f3 0f 11 4d e8	 movss	 DWORD PTR _epsilon_squared$1$[ebp], xmm1
  0005e	f3 0f 10 4d 30	 movss	 xmm1, DWORD PTR _B2y$[ebp]
  00063	f3 0f 5c 4d 24	 subss	 xmm1, DWORD PTR _B1y$[ebp]
  00068	f3 0f 58 e8	 addss	 xmm5, xmm0
  0006c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp], 0
  00073	0f 28 c2	 movaps	 xmm0, xmm2
  00076	f3 0f 11 55 f4	 movss	 DWORD PTR _Laz$1$[ebp], xmm2
  0007b	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0007f	0f 28 d9	 movaps	 xmm3, xmm1
  00082	f3 0f 11 65 f0	 movss	 DWORD PTR _Lbx$1$[ebp], xmm4
  00087	f3 0f 59 d9	 mulss	 xmm3, xmm1
  0008b	f3 0f 58 e8	 addss	 xmm5, xmm0
  0008f	f3 0f 11 4d f8	 movss	 DWORD PTR _Lby$1$[ebp], xmm1
  00094	0f 28 c4	 movaps	 xmm0, xmm4
  00097	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0009b	f3 0f 58 d8	 addss	 xmm3, xmm0
  0009f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  000a4	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000a8	f3 0f 58 d8	 addss	 xmm3, xmm0
  000ac	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _epsilon_squared$1$[ebp]
  000b1	0f 2f c5	 comiss	 xmm0, xmm5
  000b4	0f 86 97 00 00
	00		 jbe	 $LN9@IntersectL
  000ba	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _A1x$[ebp]

; 499  : 		PointOnSegAy = A1y;

  000bf	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]

; 500  : 		PointOnSegAz = A1z;

  000c2	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  000c5	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _A1y$[ebp]
  000ca	f3 0f 10 6d 10	 movss	 xmm5, DWORD PTR _A1z$[ebp]

; 501  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, A1x, A1y, A1z,
; 502  : 			infinite_lines, epsilon, PointOnSegBx, PointOnSegBy,
; 503  : 			PointOnSegBz, temp);

  000cf	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  000d2	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  000d7	f3 0f 11 16	 movss	 DWORD PTR [esi], xmm2
  000db	f3 0f 11 1f	 movss	 DWORD PTR [edi], xmm3
  000df	f3 0f 11 28	 movss	 DWORD PTR [eax], xmm5
  000e3	8d 45 ec	 lea	 eax, DWORD PTR _temp$[ebp]
  000e6	50		 push	 eax
  000e7	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  000ea	50		 push	 eax
  000eb	51		 push	 ecx
  000ec	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  000ef	51		 push	 ecx
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  000f8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  000fd	83 ec 24	 sub	 esp, 36			; 00000024H
  00100	f3 0f 11 6c 24
	20		 movss	 DWORD PTR [esp+32], xmm5
  00106	f3 0f 11 5c 24
	1c		 movss	 DWORD PTR [esp+28], xmm3
  0010c	f3 0f 11 54 24
	18		 movss	 DWORD PTR [esp+24], xmm2
  00112	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00118	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0011d	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [esp+16], xmm1
  00123	f3 0f 11 64 24
	0c		 movss	 DWORD PTR [esp+12], xmm4
  00129	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0012f	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  00134	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0013a	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  0013f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00144	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00149	83 c4 3c	 add	 esp, 60			; 0000003cH
  0014c	e9 a4 03 00 00	 jmp	 $LN3@IntersectL
$LN9@IntersectL:

; 504  : 	}
; 505  : 	// Line/Segment B is degenerate ---- Special Case #1
; 506  : 	else if (L22 < epsilon_squared)

  00151	0f 2f c3	 comiss	 xmm0, xmm3

; 507  : 	{
; 508  : 		PointOnSegBx = B1x;

  00154	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _B1x$[ebp]
  00159	0f 86 8e 00 00
	00		 jbe	 $LN7@IntersectL
  0015f	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]

; 509  : 		PointOnSegBy = B1y;

  00162	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  00165	f3 0f 10 5d 24	 movss	 xmm3, DWORD PTR _B1y$[ebp]

; 510  : 		PointOnSegBz = B1z;

  0016a	f3 0f 10 65 28	 movss	 xmm4, DWORD PTR _B1z$[ebp]

; 511  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,
; 512  : 			infinite_lines, epsilon, PointOnSegAx, PointOnSegAy,
; 513  : 			PointOnSegAz, temp);

  0016f	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]
  00172	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00177	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0017b	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0017e	f3 0f 11 19	 movss	 DWORD PTR [ecx], xmm3
  00182	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4
  00186	8d 45 ec	 lea	 eax, DWORD PTR _temp$[ebp]
  00189	50		 push	 eax
  0018a	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  0018d	50		 push	 eax
  0018e	57		 push	 edi
  0018f	56		 push	 esi
  00190	51		 push	 ecx
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00199	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0019e	83 ec 24	 sub	 esp, 36			; 00000024H
  001a1	f3 0f 11 64 24
	20		 movss	 DWORD PTR [esp+32], xmm4
  001a7	f3 0f 11 5c 24
	1c		 movss	 DWORD PTR [esp+28], xmm3
  001ad	f3 0f 11 4c 24
	18		 movss	 DWORD PTR [esp+24], xmm1
  001b3	f3 0f 11 54 24
	14		 movss	 DWORD PTR [esp+20], xmm2
  001b9	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  001bf	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  001c5	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001cb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  001d0	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001d6	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  001e5	83 c4 3c	 add	 esp, 60			; 0000003cH

; 514  : 	}
; 515  : 	// Neither line/segment is degenerate
; 516  : 	else

  001e8	e9 08 03 00 00	 jmp	 $LN3@IntersectL
$LN7@IntersectL:

; 517  : 	{
; 518  : 		// Compute more parameters from Equation (3) in the text.
; 519  : 		float ABx = B1x - A1x;
; 520  : 		float ABy = B1y - A1y;

  001ed	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  001f2	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _A1y$[ebp]

; 521  : 		float ABz = B1z - A1z;
; 522  : 		
; 523  : 		// and from Equation (15).
; 524  : 		float L12 = -(Lax * Lbx) - (Lay * Lby) - (Laz * Lbz);

  001f7	f3 0f 59 e6	 mulss	 xmm4, xmm6
  001fb	f3 0f 5c 4d 08	 subss	 xmm1, DWORD PTR _A1x$[ebp]

; 525  : 		
; 526  : 		float DetL = L11 * L22 - L12 * L12;

  00200	f3 0f 59 dd	 mulss	 xmm3, xmm5
  00204	0f 57 25 00 00
	00 00		 xorps	 xmm4, DWORD PTR __xmm@80000000800000008000000080000000
  0020b	f3 0f 11 45 ec	 movss	 DWORD PTR _ABy$1$[ebp], xmm0
  00210	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00215	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  0021a	f3 0f 11 45 e8	 movss	 DWORD PTR _ABz$1$[ebp], xmm0
  0021f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00224	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00228	f3 0f 5c e0	 subss	 xmm4, xmm0
  0022c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00231	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 527  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 528  : 		if (FABS(DetL) < epsilon)

  00235	f3 0f 10 55 3c	 movss	 xmm2, DWORD PTR _epsilon$[ebp]
  0023a	f3 0f 5c e0	 subss	 xmm4, xmm0
  0023e	0f 28 c4	 movaps	 xmm0, xmm4
  00241	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00245	f3 0f 5c d8	 subss	 xmm3, xmm0
  00249	0f 28 c3	 movaps	 xmm0, xmm3
  0024c	0f 54 05 00 00
	00 00		 andps	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  00253	0f 2f d0	 comiss	 xmm2, xmm0
  00256	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _Laz$1$[ebp]
  0025b	0f 86 e8 00 00
	00		 jbe	 $LN5@IntersectL

; 529  : 		{
; 530  : 			FindNearestPointOfParallelLineSegments(A1x, A1y, A1z, A2x, A2y, A2z,
; 531  : 				Lax, Lay, Laz,
; 532  : 				B1x, B1y, B1z, B2x, B2y, B2z,
; 533  : 				Lbx, Lby, Lbz,
; 534  : 				infinite_lines, epsilon,
; 535  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 536  : 				PointOnSegBx, PointOnSegBy, PointOnSegBz);

  00261	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  00264	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  00267	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]
  0026a	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  0026f	50		 push	 eax
  00270	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00273	51		 push	 ecx
  00274	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00277	50		 push	 eax
  00278	57		 push	 edi
  00279	56		 push	 esi
  0027a	51		 push	 ecx
  0027b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00280	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00283	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00288	83 ec 48	 sub	 esp, 72			; 00000048H
  0028b	f3 0f 11 44 24
	44		 movss	 DWORD PTR [esp+68], xmm0
  00291	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00296	f3 0f 11 44 24
	40		 movss	 DWORD PTR [esp+64], xmm0
  0029c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _Lbx$1$[ebp]
  002a1	f3 0f 11 44 24
	3c		 movss	 DWORD PTR [esp+60], xmm0
  002a7	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  002ac	f3 0f 11 44 24
	38		 movss	 DWORD PTR [esp+56], xmm0
  002b2	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  002b7	f3 0f 11 44 24
	34		 movss	 DWORD PTR [esp+52], xmm0
  002bd	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  002c2	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  002c8	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  002cd	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  002d3	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  002d8	f3 0f 11 44 24
	28		 movss	 DWORD PTR [esp+40], xmm0
  002de	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  002e3	f3 0f 11 44 24
	24		 movss	 DWORD PTR [esp+36], xmm0
  002e9	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  002ee	f3 0f 11 54 24
	20		 movss	 DWORD PTR [esp+32], xmm2
  002f4	f3 0f 11 7c 24
	1c		 movss	 DWORD PTR [esp+28], xmm7
  002fa	f3 0f 11 74 24
	18		 movss	 DWORD PTR [esp+24], xmm6
  00300	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00306	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  0030b	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00311	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  00316	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0031c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00321	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00327	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  0032c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00332	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00337	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033c	e8 00 00 00 00	 call	 ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
  00341	83 c4 68	 add	 esp, 104		; 00000068H

; 537  : 		}
; 538  : 		// The general case
; 539  : 		else

  00344	e9 ac 01 00 00	 jmp	 $LN3@IntersectL
$LN5@IntersectL:

; 540  : 		{
; 541  : 			// from Equation (15)
; 542  : 			float ra = Lax * ABx + Lay * ABy + Laz * ABz;
; 543  : 			float rb = -Lbx * ABx - Lby * ABy - Lbz * ABz;
; 544  : 			
; 545  : 			float t = (L11 * rb - ra * L12)/DetL; // Equation (12)
; 546  : 			
; 547  : #ifdef USE_CRAMERS_RULE
; 548  : 			float s = (L22 * ra - rb * L12)/DetL;
; 549  : #else
; 550  : 			float s = (ra-L12*t)/L11;             // Equation (13)
; 551  : #endif // USE_CRAMERS_RULE
; 552  : 			
; 553  : #ifdef CHECK_ANSWERS
; 554  : 			float check_ra = s*L11 + t*L12;
; 555  : 			float check_rb = s*L12 + t*L22;
; 556  : 			assert(FABS(check_ra-ra) < epsilon);
; 557  : 			assert(FABS(check_rb-rb) < epsilon);
; 558  : #endif // CHECK_ANSWERS
; 559  : 			
; 560  : 			// if we are dealing with infinite lines or if parameters s and t both
; 561  : 			// lie in the range [0,1] then just compute the points using Equations
; 562  : 			// (1) and (2) from the text.
; 563  : 			PointOnSegAx = (A1x + s * Lax);
; 564  : 			PointOnSegAy = (A1y + s * Lay);
; 565  : 			PointOnSegAz = (A1z + s * Laz);
; 566  : 			PointOnSegBx = (B1x + t * Lbx);
; 567  : 			PointOnSegBy = (B1y + t * Lby);
; 568  : 			PointOnSegBz = (B1z + t * Lbz);
; 569  : 			// otherwise, at least one of s and t is outside of [0,1] and we have to
; 570  : 			// handle this case.
; 571  : 			if (false == infinite_lines && (OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  00349	80 7d 38 00	 cmp	 BYTE PTR _infinite_lines$[ebp], 0
  0034d	0f 28 c1	 movaps	 xmm0, xmm1
  00350	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _ABy$1$[ebp]
  00355	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00359	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]
  0035c	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _Lbx$1$[ebp]
  00361	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00364	f3 0f 59 d7	 mulss	 xmm2, xmm7
  00368	8b 4d 4c	 mov	 ecx, DWORD PTR _PointOnSegBx$[ebp]
  0036b	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00372	8b 55 54	 mov	 edx, DWORD PTR _PointOnSegBz$[ebp]
  00375	f3 0f 58 d0	 addss	 xmm2, xmm0
  00379	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  0037e	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _Laz$1$[ebp]
  00383	f3 0f 58 d0	 addss	 xmm2, xmm0
  00387	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _ABy$1$[ebp]
  0038c	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00391	f3 0f 5c c8	 subss	 xmm1, xmm0
  00395	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  0039a	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0039f	f3 0f 5c c8	 subss	 xmm1, xmm0
  003a3	0f 28 c2	 movaps	 xmm0, xmm2
  003a6	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003aa	f3 0f 59 cd	 mulss	 xmm1, xmm5
  003ae	f3 0f 5c c8	 subss	 xmm1, xmm0
  003b2	f3 0f 5e cb	 divss	 xmm1, xmm3
  003b6	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _Laz$1$[ebp]
  003bb	0f 28 c1	 movaps	 xmm0, xmm1
  003be	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003c2	f3 0f 10 65 f0	 movss	 xmm4, DWORD PTR _Lbx$1$[ebp]
  003c7	f3 0f 5c d0	 subss	 xmm2, xmm0
  003cb	f3 0f 5e d5	 divss	 xmm2, xmm5
  003cf	f3 0f 10 6d f8	 movss	 xmm5, DWORD PTR _Lby$1$[ebp]
  003d4	0f 28 c2	 movaps	 xmm0, xmm2
  003d7	f3 0f 59 c6	 mulss	 xmm0, xmm6
  003db	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  003e0	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  003e4	0f 28 c2	 movaps	 xmm0, xmm2
  003e7	f3 0f 59 c7	 mulss	 xmm0, xmm7
  003eb	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  003f0	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  003f4	0f 28 c2	 movaps	 xmm0, xmm2
  003f7	f3 0f 59 c3	 mulss	 xmm0, xmm3
  003fb	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  00400	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00404	0f 28 c1	 movaps	 xmm0, xmm1
  00407	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0040b	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  00410	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00414	0f 28 c1	 movaps	 xmm0, xmm1
  00417	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  0041a	f3 0f 59 c5	 mulss	 xmm0, xmm5
  0041e	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  00423	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00427	0f 28 c1	 movaps	 xmm0, xmm1
  0042a	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0042f	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00434	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00438	0f 85 b7 00 00
	00		 jne	 $LN3@IntersectL
  0043e	0f 57 c0	 xorps	 xmm0, xmm0
  00441	0f 2f c2	 comiss	 xmm0, xmm2
  00444	77 1b		 ja	 SHORT $LN1@IntersectL
  00446	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@3f800000
  0044d	77 12		 ja	 SHORT $LN1@IntersectL
  0044f	0f 2f c1	 comiss	 xmm0, xmm1
  00452	77 0d		 ja	 SHORT $LN1@IntersectL
  00454	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  0045b	0f 86 94 00 00
	00		 jbe	 $LN3@IntersectL
$LN1@IntersectL:

; 572  : 			{
; 573  : 				AdjustNearestPoints(A1x, A1y, A1z, Lax, Lay, Laz,
; 574  : 					B1x, B1y, B1z, Lbx, Lby, Lbz,
; 575  : 					epsilon, s, t,
; 576  : 					PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 577  : 					PointOnSegBx, PointOnSegBy, PointOnSegBz);

  00461	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00466	52		 push	 edx
  00467	51		 push	 ecx
  00468	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  0046b	50		 push	 eax
  0046c	57		 push	 edi
  0046d	56		 push	 esi
  0046e	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00471	f3 0f 11 4c 24
	38		 movss	 DWORD PTR [esp+56], xmm1
  00477	f3 0f 11 54 24
	34		 movss	 DWORD PTR [esp+52], xmm2
  0047d	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  00483	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00488	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  0048e	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00493	f3 0f 11 6c 24
	28		 movss	 DWORD PTR [esp+40], xmm5
  00499	f3 0f 11 64 24
	24		 movss	 DWORD PTR [esp+36], xmm4
  0049f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  004a5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  004aa	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  004b0	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  004b5	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  004bb	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  004c0	f3 0f 11 5c 24
	14		 movss	 DWORD PTR [esp+20], xmm3
  004c6	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  004cc	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  004d2	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  004d8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  004dd	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004e3	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  004e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ed	e8 00 00 00 00	 call	 ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
  004f2	83 c4 54	 add	 esp, 84			; 00000054H
$LN3@IntersectL:

; 578  : 			}
; 579  : 		}
; 580  : 	}
; 581  : 	
; 582  : 	NearestPointX = 0.5f * (PointOnSegAx + PointOnSegBx);

  004f5	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  004f9	0f 57 db	 xorps	 xmm3, xmm3
  004fc	8b 4d 4c	 mov	 ecx, DWORD PTR _PointOnSegBx$[ebp]
  004ff	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00507	8b 45 58	 mov	 eax, DWORD PTR _NearestPointX$[ebp]

; 583  : 	NearestPointY = 0.5f * (PointOnSegAy + PointOnSegBy);
; 584  : 	NearestPointZ = 0.5f * (PointOnSegAz + PointOnSegBz);

  0050a	8b 55 48	 mov	 edx, DWORD PTR _PointOnSegAz$[ebp]
  0050d	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]

; 585  : 	
; 586  : 	NearestVectorX = PointOnSegBx - PointOnSegAx;
; 587  : 	NearestVectorY = PointOnSegBy - PointOnSegAy;
; 588  : 	NearestVectorZ = PointOnSegBz - PointOnSegAz;
; 589  : 	
; 590  : 	// optional check to indicate if the lines truly intersect
; 591  : 	true_intersection = (FABS(NearestVectorX) +
; 592  : 		FABS(NearestVectorY) +
; 593  : 		FABS(NearestVectorZ)) < epsilon ? true : false;

  00511	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __xmm@80000000800000008000000080000000
  00519	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0051d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00521	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00525	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  00528	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0052c	8b 45 5c	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  0052f	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00533	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00537	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0053b	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0053e	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00542	8b 45 60	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  00545	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00549	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0054d	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00551	f3 0f 5c 06	 subss	 xmm0, DWORD PTR [esi]
  00555	8b 4d 64	 mov	 ecx, DWORD PTR _NearestVectorX$[ebp]
  00558	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  0055b	8b 75 68	 mov	 esi, DWORD PTR _NearestVectorY$[ebp]
  0055e	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00562	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00566	f3 0f 5c 07	 subss	 xmm0, DWORD PTR [edi]
  0056a	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0056d	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00571	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00575	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  00579	8b 45 6c	 mov	 eax, DWORD PTR _NearestVectorZ$[ebp]
  0057c	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00580	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]
  00584	0f 2f da	 comiss	 xmm3, xmm2
  00587	76 03		 jbe	 SHORT $LN13@IntersectL
  00589	0f 57 d4	 xorps	 xmm2, xmm4
$LN13@IntersectL:
  0058c	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00590	0f 2f d8	 comiss	 xmm3, xmm0
  00593	5f		 pop	 edi
  00594	5e		 pop	 esi
  00595	76 03		 jbe	 SHORT $LN14@IntersectL
  00597	0f 57 c4	 xorps	 xmm0, xmm4
$LN14@IntersectL:
  0059a	0f 2f d9	 comiss	 xmm3, xmm1
  0059d	76 03		 jbe	 SHORT $LN16@IntersectL
  0059f	0f 57 cc	 xorps	 xmm1, xmm4
$LN16@IntersectL:
  005a2	8b 45 70	 mov	 eax, DWORD PTR _true_intersection$[ebp]
  005a5	f3 0f 58 c2	 addss	 xmm0, xmm2
  005a9	f3 0f 58 c1	 addss	 xmm0, xmm1
  005ad	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  005b2	0f 2f c8	 comiss	 xmm1, xmm0
  005b5	0f 97 c1	 seta	 cl
  005b8	88 08		 mov	 BYTE PTR [eax], cl

; 594  : }

  005ba	8b e5		 mov	 esp, ebp
  005bc	5d		 pop	 ebp
  005bd	c3		 ret	 0
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z
_TEXT	SEGMENT
$T1 = -48						; size = 12
$T2 = -48						; size = 12
$T3 = -48						; size = 12
$T4 = -48						; size = 12
$T5 = -48						; size = 12
$T6 = -48						; size = 12
$T7 = -48						; size = 12
$T8 = -48						; size = 12
$T9 = -48						; size = 12
$T10 = -48						; size = 12
$T11 = -48						; size = 12
$T12 = -48						; size = 12
$T13 = -44						; size = 8
$T14 = -44						; size = 8
$T15 = -44						; size = 8
$T16 = -44						; size = 8
$T17 = -44						; size = 8
$T18 = -44						; size = 8
_s$19 = -44						; size = 8
_DetL$1$ = -40						; size = 4
$T20 = -36						; size = 12
tv4636 = -32						; size = 8
_AB$3$ = -28						; size = 4
tv3966 = -28						; size = 4
_AB$2$ = -24						; size = 4
$T21 = -20						; size = 4
_La$3$ = -16						; size = 4
$T22 = -12						; size = 4
_D$1$ = -8						; size = 4
_L12$1$ = -4						; size = 4
tv3962 = -4						; size = 4
_La$1$ = 8						; size = 4
_A1$ = 8						; size = 4
$T23 = 12						; size = 4
_s$2$ = 12						; size = 4
_A2$ = 12						; size = 4
_D$1$ = 16						; size = 4
_B1$ = 16						; size = 4
_Lb$1$ = 20						; size = 4
_B2$ = 20						; size = 4
_OutA$ = 24						; size = 4
_OutB$ = 28						; size = 4
?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z PROC ; IntersectLineSegments, COMDAT

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _A2$[ebp]
  00009	8b 55 10	 mov	 edx, DWORD PTR _B1$[ebp]
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR _A1$[ebp]
  00010	f3 0f 10 70 04	 movss	 xmm6, DWORD PTR [eax+4]
  00015	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00019	f3 0f 10 68 08	 movss	 xmm5, DWORD PTR [eax+8]
  0001e	f3 0f 5c 06	 subss	 xmm0, DWORD PTR [esi]
  00022	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00027	f3 0f 10 22	 movss	 xmm4, DWORD PTR [edx]
  0002b	f3 0f 5c f1	 subss	 xmm6, xmm1
  0002f	f3 0f 11 4d e4	 movss	 DWORD PTR tv3966[ebp], xmm1
  00034	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  00039	f3 0f 11 45 08	 movss	 DWORD PTR _La$1$[ebp], xmm0
  0003e	f3 0f 5c e9	 subss	 xmm5, xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00042	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00046	57		 push	 edi

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00047	f3 0f 11 4d fc	 movss	 DWORD PTR tv3962[ebp], xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0004c	0f 28 ce	 movaps	 xmm1, xmm6

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0004f	8b 7d 14	 mov	 edi, DWORD PTR _B2$[ebp]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00052	f3 0f 59 ce	 mulss	 xmm1, xmm6

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00056	f3 0f 11 75 f4	 movss	 DWORD PTR $T22[ebp], xmm6
  0005b	f3 0f 10 5f 04	 movss	 xmm3, DWORD PTR [edi+4]
  00060	f3 0f 5c 5a 04	 subss	 xmm3, DWORD PTR [edx+4]
  00065	f3 0f 10 17	 movss	 xmm2, DWORD PTR [edi]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00069	f3 0f 58 c8	 addss	 xmm1, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0006d	f3 0f 10 7f 08	 movss	 xmm7, DWORD PTR [edi+8]
  00072	f3 0f 5c d4	 subss	 xmm2, xmm4
  00076	f3 0f 5c 7a 08	 subss	 xmm7, DWORD PTR [edx+8]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0007b	0f 28 c5	 movaps	 xmm0, xmm5

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0007e	f3 0f 11 6d f0	 movss	 DWORD PTR _La$3$[ebp], xmm5

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00083	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00087	f3 0f 11 55 14	 movss	 DWORD PTR _Lb$1$[ebp], xmm2
  0008c	f3 0f 11 5d ec	 movss	 DWORD PTR $T21[ebp], xmm3

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00091	f3 0f 58 c8	 addss	 xmm1, xmm0
  00095	0f 28 c3	 movaps	 xmm0, xmm3
  00098	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0009c	f3 0f 11 45 10	 movss	 DWORD PTR _D$1$[ebp], xmm0
  000a1	0f 28 c2	 movaps	 xmm0, xmm2
  000a4	f3 0f 10 75 10	 movss	 xmm6, DWORD PTR _D$1$[ebp]
  000a9	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000ad	f3 0f 11 4d f8	 movss	 DWORD PTR _D$1$[ebp], xmm1
  000b2	f3 0f 58 f0	 addss	 xmm6, xmm0
  000b6	0f 28 c7	 movaps	 xmm0, xmm7
  000b9	f3 0f 59 c7	 mulss	 xmm0, xmm7
  000bd	f3 0f 58 f0	 addss	 xmm6, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 242  : 	if (L11 < epsilon_squared)

  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  000c9	0f 2f c1	 comiss	 xmm0, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000cc	f3 0f 11 75 10	 movss	 DWORD PTR _D$1$[ebp], xmm6
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 242  : 	if (L11 < epsilon_squared)

  000d1	f3 0f 10 75 f4	 movss	 xmm6, DWORD PTR $T22[ebp]
  000d6	0f 86 c8 00 00
	00		 jbe	 $LN9@IntersectL

; 243  : 	{
; 244  : 		OutA = A1;

  000dc	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
  000df	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  000e3	f3 0f 10 75 10	 movss	 xmm6, DWORD PTR _D$1$[ebp]

; 243  : 	{
; 244  : 		OutA = A1;

  000e8	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  000ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  000f4	0f 2f c6	 comiss	 xmm0, xmm6

; 243  : 	{
; 244  : 		OutA = A1;

  000f7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000fa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  000fd	76 17		 jbe	 SHORT $LN24@IntersectL
$LN428@IntersectL:

; 36   : 	{
; 37   : 		Nearest = A1;

  000ff	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  00102	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0010c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 49   : 	Nearest = A1 + parameter * L;

  0010f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 304  : 			{
; 305  : 				AdjustNearestPoints(A1,La,B1,Lb,
; 306  : 					s, t,
; 307  : 					OutA,
; 308  : 					OutB);
; 309  : 			}
; 310  : 		}
; 311  : 	}	
; 312  : }

  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c3		 ret	 0
$LN24@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00116	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0011a	0f 28 e3	 movaps	 xmm4, xmm3

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0011d	f3 0f 10 16	 movss	 xmm2, DWORD PTR [esi]
  00121	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  00126	f3 0f 5c d0	 subss	 xmm2, xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0012a	f3 0f 10 6d 14	 movss	 xmm5, DWORD PTR _Lb$1$[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0012f	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  00134	66 0f d6 45 d4	 movq	 QWORD PTR $T18[ebp], xmm0
  00139	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0013e	f3 0f 5c 42 04	 subss	 xmm0, DWORD PTR [edx+4]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00143	f3 0f 59 d5	 mulss	 xmm2, xmm5
  00147	f3 0f 59 e0	 mulss	 xmm4, xmm0
  0014b	0f 28 c7	 movaps	 xmm0, xmm7
  0014e	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00152	f3 0f 58 e2	 addss	 xmm4, xmm2
  00156	f3 0f 58 e0	 addss	 xmm4, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  0015a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00162	f3 0f 5e e6	 divss	 xmm4, xmm6
  00166	0f 2f c4	 comiss	 xmm0, xmm4
  00169	76 08		 jbe	 SHORT $LN402@IntersectL
  0016b	0f 57 c0	 xorps	 xmm0, xmm0
  0016e	0f 2f c4	 comiss	 xmm0, xmm4
  00171	76 03		 jbe	 SHORT $LN30@IntersectL
$LN402@IntersectL:
  00173	0f 28 e0	 movaps	 xmm4, xmm0
$LN30@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00176	f3 0f 7e 45 d4	 movq	 xmm0, QWORD PTR $T18[ebp]
  0017b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00180	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00183	f3 0f 10 52 08	 movss	 xmm2, DWORD PTR [edx+8]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00188	f3 0f 59 ec	 mulss	 xmm5, xmm4
  0018c	f3 0f 59 dc	 mulss	 xmm3, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00190	f3 0f 58 c5	 addss	 xmm0, xmm5
  00194	f3 0f 58 cb	 addss	 xmm1, xmm3
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00198	0f 14 c1	 unpcklps xmm0, xmm1
  0019b	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 50   : 	return;
; 51   : }

  0019f	e9 89 09 00 00	 jmp	 $LN416@IntersectL
$LN9@IntersectL:

; 245  : 		FindNearestPointOnLineSegment(B1, Lb, A1,
; 246  : 			OutB, temp);
; 247  : 	}
; 248  : 	// Line/Segment B is degenerate ---- Special Case #1
; 249  : 	else if (L22 < epsilon_squared)

  001a4	0f 2f 45 10	 comiss	 xmm0, DWORD PTR _D$1$[ebp]
  001a8	0f 86 ce 00 00
	00		 jbe	 $LN7@IntersectL

; 250  : 	{
; 251  : 		OutB = B1;

  001ae	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  001b1	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  001b5	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  001b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  001c1	0f 2f c1	 comiss	 xmm0, xmm1

; 250  : 	{
; 251  : 		OutB = B1;

  001c4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c7	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  001ca	76 17		 jbe	 SHORT $LN49@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  001cc	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
  001cf	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  001d3	5f		 pop	 edi
  001d4	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  001d8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 49   : 	Nearest = A1 + parameter * L;

  001db	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  001de	5e		 pop	 esi

; 304  : 			{
; 305  : 				AdjustNearestPoints(A1,La,B1,Lb,
; 306  : 					s, t,
; 307  : 					OutA,
; 308  : 					OutB);
; 309  : 			}
; 310  : 		}
; 311  : 	}	
; 312  : }

  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c3		 ret	 0
$LN49@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001e3	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  001e8	0f 28 de	 movaps	 xmm3, xmm6

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001eb	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
  001f0	f3 0f 10 3e	 movss	 xmm7, DWORD PTR [esi]
  001f4	f3 0f 10 12	 movss	 xmm2, DWORD PTR [edx]
  001f8	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  001fd	f3 0f 5c d7	 subss	 xmm2, xmm7

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00201	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _La$1$[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00206	f3 0f 5c 4e 08	 subss	 xmm1, DWORD PTR [esi+8]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0020b	f3 0f 59 d8	 mulss	 xmm3, xmm0
  0020f	0f 28 c5	 movaps	 xmm0, xmm5
  00212	f3 0f 59 d4	 mulss	 xmm2, xmm4
  00216	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0021a	f3 0f 58 da	 addss	 xmm3, xmm2
  0021e	f3 0f 58 d8	 addss	 xmm3, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00222	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0022a	f3 0f 5e 5d f8	 divss	 xmm3, DWORD PTR _D$1$[ebp]
  0022f	0f 2f c3	 comiss	 xmm0, xmm3
  00232	76 08		 jbe	 SHORT $LN403@IntersectL
  00234	0f 57 c0	 xorps	 xmm0, xmm0
  00237	0f 2f c3	 comiss	 xmm0, xmm3
  0023a	76 03		 jbe	 SHORT $LN55@IntersectL
$LN403@IntersectL:
  0023c	0f 28 d8	 movaps	 xmm3, xmm0
$LN55@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0023f	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00244	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00249	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0024c	f3 0f 59 e3	 mulss	 xmm4, xmm3
  00250	5f		 pop	 edi
  00251	f3 0f 59 f3	 mulss	 xmm6, xmm3
  00255	5e		 pop	 esi
  00256	f3 0f 59 eb	 mulss	 xmm5, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0025a	f3 0f 58 fc	 addss	 xmm7, xmm4
  0025e	f3 0f 58 c6	 addss	 xmm0, xmm6
  00262	f3 0f 58 cd	 addss	 xmm1, xmm5
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00266	0f 14 f8	 unpcklps xmm7, xmm0
  00269	66 0f d6 39	 movq	 QWORD PTR [ecx], xmm7
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0026d	f3 0f 11 4d d8	 movss	 DWORD PTR $T10[ebp+8], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00272	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp+8]
  00275	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 304  : 			{
; 305  : 				AdjustNearestPoints(A1,La,B1,Lb,
; 306  : 					s, t,
; 307  : 					OutA,
; 308  : 					OutB);
; 309  : 			}
; 310  : 		}
; 311  : 	}	
; 312  : }

  00278	8b e5		 mov	 esp, ebp
  0027a	5d		 pop	 ebp
  0027b	c3		 ret	 0
$LN7@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0027c	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00281	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR tv3966[ebp]
  00286	f3 0f 5c 26	 subss	 xmm4, DWORD PTR [esi]
  0028a	f3 0f 11 45 e8	 movss	 DWORD PTR _AB$2$[ebp], xmm0
  0028f	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00294	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR tv3962[ebp]
  00299	f3 0f 11 45 e4	 movss	 DWORD PTR _AB$3$[ebp], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0029e	0f 28 c6	 movaps	 xmm0, xmm6
  002a1	f3 0f 59 c3	 mulss	 xmm0, xmm3
  002a5	f3 0f 11 45 fc	 movss	 DWORD PTR _L12$1$[ebp], xmm0
  002aa	0f 28 c2	 movaps	 xmm0, xmm2
  002ad	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _La$1$[ebp]
  002b2	f3 0f 10 75 fc	 movss	 xmm6, DWORD PTR _L12$1$[ebp]
  002b7	f3 0f 58 f0	 addss	 xmm6, xmm0
  002bb	0f 28 c5	 movaps	 xmm0, xmm5
  002be	f3 0f 59 c7	 mulss	 xmm0, xmm7
  002c2	f3 0f 58 f0	 addss	 xmm6, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 262  : 		float L12 = -D3DXVec3Dot(&La, &Lb);

  002c6	f3 0f 10 c6	 movss	 xmm0, xmm6

; 263  : 		
; 264  : 		float DetL = L11 * L22 - L12 * L12;

  002ca	f3 0f 10 75 10	 movss	 xmm6, DWORD PTR _D$1$[ebp]
  002cf	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002d6	f3 0f 59 f1	 mulss	 xmm6, xmm1
  002da	f3 0f 11 45 fc	 movss	 DWORD PTR _L12$1$[ebp], xmm0
  002df	f3 0f 59 c0	 mulss	 xmm0, xmm0
  002e3	f3 0f 5c f0	 subss	 xmm6, xmm0

; 265  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 266  : 		if (FABS(DetL) < epsilon)

  002e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  002ef	0f 28 ce	 movaps	 xmm1, xmm6
  002f2	f3 0f 11 75 d8	 movss	 DWORD PTR _DetL$1$[ebp], xmm6
  002f7	0f 54 0d 00 00
	00 00		 andps	 xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  002fe	0f 2f c1	 comiss	 xmm0, xmm1
  00301	f3 0f 10 75 f4	 movss	 xmm6, DWORD PTR $T22[ebp]
  00306	0f 86 81 02 00
	00		 jbe	 $LN5@IntersectL

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0030c	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _D$1$[ebp]
  00311	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70b
  00319	0f 2f d3	 comiss	 xmm2, xmm3
  0031c	76 18		 jbe	 SHORT $LN102@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  0031e	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
  00321	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]

; 38   : 		return;

  00325	f3 0f 10 65 d4	 movss	 xmm4, DWORD PTR _s$19[ebp]
  0032a	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0032e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00331	e9 81 00 00 00	 jmp	 $LN418@IntersectL
$LN102@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00336	f3 0f 59 65 08	 mulss	 xmm4, DWORD PTR _La$1$[ebp]
  0033b	0f 28 c6	 movaps	 xmm0, xmm6
  0033e	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _AB$2$[ebp]
  00343	f3 0f 58 e0	 addss	 xmm4, xmm0
  00347	0f 28 c5	 movaps	 xmm0, xmm5
  0034a	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _AB$3$[ebp]
  0034f	f3 0f 58 e0	 addss	 xmm4, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00353	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0035b	f3 0f 5e e3	 divss	 xmm4, xmm3
  0035f	0f 2f c4	 comiss	 xmm0, xmm4
  00362	76 12		 jbe	 SHORT $LN420@IntersectL
  00364	0f 57 c9	 xorps	 xmm1, xmm1
  00367	0f 2f cc	 comiss	 xmm1, xmm4
  0036a	76 05		 jbe	 SHORT $LN109@IntersectL
  0036c	0f 28 e1	 movaps	 xmm4, xmm1
  0036f	eb 08		 jmp	 SHORT $LN108@IntersectL
$LN109@IntersectL:
  00371	0f 2f c4	 comiss	 xmm0, xmm4
  00374	77 03		 ja	 SHORT $LN108@IntersectL
$LN420@IntersectL:
  00376	0f 28 e0	 movaps	 xmm4, xmm0
$LN108@IntersectL:

; 49   : 	Nearest = A1 + parameter * L;

  00379	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0037c	0f 28 d4	 movaps	 xmm2, xmm4
  0037f	f3 0f 59 55 08	 mulss	 xmm2, DWORD PTR _La$1$[ebp]
  00384	0f 28 ce	 movaps	 xmm1, xmm6
  00387	f3 0f 59 cc	 mulss	 xmm1, xmm4
  0038b	0f 28 c5	 movaps	 xmm0, xmm5

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0038e	f3 0f 58 16	 addss	 xmm2, DWORD PTR [esi]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00392	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00396	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  0039b	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  003a0	0f 14 d1	 unpcklps xmm2, xmm1
  003a3	66 0f d6 11	 movq	 QWORD PTR [ecx], xmm2
  003a7	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70b
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  003af	f3 0f 11 45 d8	 movss	 DWORD PTR $T8[ebp+8], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  003b4	8b 45 d8	 mov	 eax, DWORD PTR $T8[ebp+8]
$LN418@IntersectL:

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  003b7	0f 2f d3	 comiss	 xmm2, xmm3

; 49   : 	Nearest = A1 + parameter * L;

  003ba	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  003bd	77 70		 ja	 SHORT $LN414@IntersectL
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003bf	f3 0f 10 1f	 movss	 xmm3, DWORD PTR [edi]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003c3	0f 28 c6	 movaps	 xmm0, xmm6

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003c6	f3 0f 5c 1e	 subss	 xmm3, DWORD PTR [esi]
  003ca	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]
  003cf	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]
  003d4	f3 0f 10 57 08	 movss	 xmm2, DWORD PTR [edi+8]
  003d9	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003de	f3 0f 59 5d 08	 mulss	 xmm3, DWORD PTR _La$1$[ebp]
  003e3	f3 0f 59 c1	 mulss	 xmm0, xmm1
  003e7	f3 0f 58 d8	 addss	 xmm3, xmm0
  003eb	0f 28 c5	 movaps	 xmm0, xmm5
  003ee	f3 0f 59 c2	 mulss	 xmm0, xmm2
  003f2	f3 0f 58 d8	 addss	 xmm3, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  003f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003fe	f3 0f 5e 5d f8	 divss	 xmm3, DWORD PTR _D$1$[ebp]
  00403	0f 2f c3	 comiss	 xmm0, xmm3
  00406	76 1a		 jbe	 SHORT $LN422@IntersectL
  00408	0f 57 c9	 xorps	 xmm1, xmm1
  0040b	0f 2f cb	 comiss	 xmm1, xmm3
  0040e	76 0d		 jbe	 SHORT $LN136@IntersectL
  00410	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70b
  00418	0f 28 d9	 movaps	 xmm3, xmm1
  0041b	eb 1f		 jmp	 SHORT $LN130@IntersectL
$LN136@IntersectL:
  0041d	0f 2f c3	 comiss	 xmm0, xmm3
  00420	77 03		 ja	 SHORT $LN135@IntersectL
$LN422@IntersectL:
  00422	0f 28 d8	 movaps	 xmm3, xmm0
$LN135@IntersectL:
  00425	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70b
  0042d	eb 0d		 jmp	 SHORT $LN130@IntersectL
$LN414@IntersectL:
  0042f	f3 0f 10 5d d8	 movss	 xmm3, DWORD PTR _s$19[ebp+4]
  00434	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
$LN130@IntersectL:
  0043c	0f 57 c9	 xorps	 xmm1, xmm1

; 52   : 
; 53   : /**************************************************************************
; 54   : |
; 55   : |     Method: FindNearestPointOfParallelLineSegments
; 56   : |
; 57   : |    Purpose: Given two lines (segments) that are known to be parallel, find
; 58   : |             a representative point on each that is nearest to the other. If
; 59   : |             the lines are considered to be finite then it is possible that there
; 60   : |             is one true point on each line that is nearest to the other. This
; 61   : |             code properly handles this case.
; 62   : |
; 63   : |             This is the most difficult line intersection case to handle, since
; 64   : |             there is potentially a family, or locus of points on each line/segment
; 65   : |             that are nearest to the other.
; 66   : | Parameters: Input:
; 67   : |             ------
; 68   : |             A1x, A1y, A1z   - Coordinates of first defining point of line/segment A
; 69   : |             A2x, A2y, A2z   - Coordinates of second defining point of line/segment A
; 70   : |             Lax, Lay, Laz   - Vector from (A1x, A1y, A1z) to the (A2x, A2y, A2z).
; 71   : |             B1x, B1y, B1z   - Coordinates of first defining point of line/segment B
; 72   : |             B2x, B2y, B2z   - Coordinates of second defining point of line/segment B
; 73   : |             Lbx, Lby, Lbz   - Vector from (B1x, B1y, B1z) to the (B2x, B2y, B2z).
; 74   : |             infinite_lines  - set to true if lines are to be treated as infinite
; 75   : |             epsilon_squared - tolerance value to be used to check for degenerate
; 76   : |                               and parallel lines, and to check for true intersection.
; 77   : |
; 78   : |             Output:
; 79   : |             -------
; 80   : |             PointOnSegAx,   - Coordinates of the point on segment A that are nearest
; 81   : |             PointOnSegAy,     to segment B. This corresponds to point C in the text.
; 82   : |             PointOnSegAz
; 83   : |             PointOnSegBx,   - Coordinates of the point on segment B that are nearest
; 84   : |             PointOnSegBy,     to segment A. This corresponds to point D in the text.
; 85   : |             PointOnSegBz
; 86   : 
; 87   : **************************************************************************/
; 88   : __forceinline void FindNearestPointOfParallelLineSegments(const D3DXVECTOR3 & A1,
; 89   : 														  const D3DXVECTOR3 & A2,
; 90   : 														  const D3DXVECTOR3 & La,
; 91   : 														  const D3DXVECTOR3 & B1,
; 92   : 														  const D3DXVECTOR3 & B2,
; 93   : 														  const D3DXVECTOR3 & Lb,
; 94   : 														  //bool infinite_lines, float epsilon_squared,
; 95   : 														  D3DXVECTOR3 & OutA,
; 96   : 														  D3DXVECTOR3 & OutB)
; 97   : {
; 98   : 	float s[2], temp;
; 99   : 	FindNearestPointOnLineSegment(A1, La, B1, OutA, s[0]);
; 100  : 	/*if (true == infinite_lines)
; 101  : 	{
; 102  : 	    PointOnSegBx = B1x;
; 103  : 	    PointOnSegBy = B1y;
; 104  : 	    PointOnSegBz = B1z;
; 105  : 	}
; 106  : 	else*/
; 107  : 	{
; 108  : 		//float tp[3];
; 109  : 		D3DXVECTOR3 tp;
; 110  : 		FindNearestPointOnLineSegment(A1, La, B2,
; 111  : 			tp, s[1]);
; 112  : 		if (s[0] < 0.f && s[1] < 0.f)

  0043f	0f 2f cc	 comiss	 xmm1, xmm4
  00442	76 2f		 jbe	 SHORT $LN87@IntersectL
  00444	0f 2f cb	 comiss	 xmm1, xmm3
  00447	76 2a		 jbe	 SHORT $LN87@IntersectL

; 113  : 		{
; 114  : 			OutA = A1;
; 115  : 			if (s[0] < s[1])

  00449	0f 2f dc	 comiss	 xmm3, xmm4
  0044c	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  00450	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00454	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00457	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 116  : 			{
; 117  : 				OutB =B2;

  0045a	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  0045d	76 37		 jbe	 SHORT $LN86@IntersectL
$LN82@IntersectL:
  0045f	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00463	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00467	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0046a	5f		 pop	 edi

; 49   : 	Nearest = A1 + parameter * L;

  0046b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0046e	5e		 pop	 esi

; 304  : 			{
; 305  : 				AdjustNearestPoints(A1,La,B1,Lb,
; 306  : 					s, t,
; 307  : 					OutA,
; 308  : 					OutB);
; 309  : 			}
; 310  : 		}
; 311  : 	}	
; 312  : }

  0046f	8b e5		 mov	 esp, ebp
  00471	5d		 pop	 ebp
  00472	c3		 ret	 0
$LN87@IntersectL:

; 118  : 			}
; 119  : 			else
; 120  : 			{
; 121  : 				OutB = B1;
; 122  : 			}
; 123  : 		}
; 124  : 		else if (s[0] > 1.f && s[1] > 1.f)

  00473	0f 2f e0	 comiss	 xmm4, xmm0
  00476	76 32		 jbe	 SHORT $LN83@IntersectL
  00478	0f 2f d8	 comiss	 xmm3, xmm0
  0047b	76 2d		 jbe	 SHORT $LN83@IntersectL

; 125  : 		{
; 126  : 			OutA = A2;
; 127  : 			if (s[0] < s[1])

  0047d	0f 2f dc	 comiss	 xmm3, xmm4
  00480	8b 45 0c	 mov	 eax, DWORD PTR _A2$[ebp]
  00483	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00487	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0048b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0048e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 128  : 			{
; 129  : 				OutB = B1;

  00491	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  00494	76 c9		 jbe	 SHORT $LN82@IntersectL
$LN86@IntersectL:
  00496	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  0049a	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0049e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  004a1	5f		 pop	 edi

; 49   : 	Nearest = A1 + parameter * L;

  004a2	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  004a5	5e		 pop	 esi

; 304  : 			{
; 305  : 				AdjustNearestPoints(A1,La,B1,Lb,
; 306  : 					s, t,
; 307  : 					OutA,
; 308  : 					OutB);
; 309  : 			}
; 310  : 		}
; 311  : 	}	
; 312  : }

  004a6	8b e5		 mov	 esp, ebp
  004a8	5d		 pop	 ebp
  004a9	c3		 ret	 0
$LN83@IntersectL:

; 138  : 			temp = 0.5f*(FMAX(0.0f, FMIN(1.0f, s[0])) + FMAX(0.0f, FMIN(1.0f, s[1])));

  004aa	0f 2f c4	 comiss	 xmm0, xmm4
  004ad	76 0a		 jbe	 SHORT $LN92@IntersectL
  004af	0f 2f cc	 comiss	 xmm1, xmm4
  004b2	76 08		 jbe	 SHORT $LN93@IntersectL
  004b4	0f 28 e1	 movaps	 xmm4, xmm1
  004b7	eb 03		 jmp	 SHORT $LN93@IntersectL
$LN92@IntersectL:
  004b9	0f 28 e0	 movaps	 xmm4, xmm0
$LN93@IntersectL:
  004bc	0f 2f c3	 comiss	 xmm0, xmm3
  004bf	76 0a		 jbe	 SHORT $LN98@IntersectL
  004c1	0f 2f cb	 comiss	 xmm1, xmm3
  004c4	76 08		 jbe	 SHORT $LN99@IntersectL
  004c6	0f 28 d9	 movaps	 xmm3, xmm1
  004c9	eb 03		 jmp	 SHORT $LN99@IntersectL
$LN98@IntersectL:
  004cb	0f 28 d8	 movaps	 xmm3, xmm0
$LN99@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  004ce	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 138  : 			temp = 0.5f*(FMAX(0.0f, FMIN(1.0f, s[0])) + FMAX(0.0f, FMIN(1.0f, s[1])));

  004d2	f3 0f 58 dc	 addss	 xmm3, xmm4
  004d6	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004de	0f 28 c3	 movaps	 xmm0, xmm3
  004e1	f3 0f 59 f3	 mulss	 xmm6, xmm3
  004e5	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _La$1$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  004ea	f3 0f 58 76 04	 addss	 xmm6, DWORD PTR [esi+4]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004ef	f3 0f 59 eb	 mulss	 xmm5, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  004f3	f3 0f 58 c8	 addss	 xmm1, xmm0
  004f7	f3 0f 58 6e 08	 addss	 xmm5, DWORD PTR [esi+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 139  : 			OutA = A1 + temp * La;

  004fc	0f 14 ce	 unpcklps xmm1, xmm6

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  004ff	f3 0f 10 75 10	 movss	 xmm6, DWORD PTR _D$1$[ebp]
  00504	0f 2f d6	 comiss	 xmm2, xmm6
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00507	f3 0f 11 6d d8	 movss	 DWORD PTR $T9[ebp+8], xmm5
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 139  : 			OutA = A1 + temp * La;

  0050c	8b 45 d8	 mov	 eax, DWORD PTR $T9[ebp+8]
  0050f	66 0f d6 09	 movq	 QWORD PTR [ecx], xmm1
  00513	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00516	0f 87 e3 fb ff
	ff		 ja	 $LN428@IntersectL
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0051c	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00520	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00524	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR $T21[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00529	f3 0f 5c d0	 subss	 xmm2, xmm0
  0052d	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00532	0f 28 e3	 movaps	 xmm4, xmm3
  00535	f3 0f 10 6d 14	 movss	 xmm5, DWORD PTR _Lb$1$[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0053a	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  0053f	66 0f d6 45 d4	 movq	 QWORD PTR $T17[ebp], xmm0
  00544	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00549	f3 0f 5c 42 04	 subss	 xmm0, DWORD PTR [edx+4]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0054e	f3 0f 59 d5	 mulss	 xmm2, xmm5
  00552	f3 0f 59 cf	 mulss	 xmm1, xmm7
  00556	f3 0f 59 e0	 mulss	 xmm4, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  0055a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00562	f3 0f 58 e2	 addss	 xmm4, xmm2
  00566	f3 0f 58 e1	 addss	 xmm4, xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  0056a	f3 0f 5e e6	 divss	 xmm4, xmm6

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  0056e	0f 2f c4	 comiss	 xmm0, xmm4
  00571	76 08		 jbe	 SHORT $LN404@IntersectL
  00573	0f 57 c0	 xorps	 xmm0, xmm0
  00576	0f 2f c4	 comiss	 xmm0, xmm4
  00579	76 03		 jbe	 SHORT $LN168@IntersectL
$LN404@IntersectL:
  0057b	0f 28 e0	 movaps	 xmm4, xmm0
$LN168@IntersectL:

; 49   : 	Nearest = A1 + parameter * L;

  0057e	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00581	0f 28 c4	 movaps	 xmm0, xmm4
  00584	f3 0f 59 c5	 mulss	 xmm0, xmm5
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 275  : 		else

  00588	e9 7e 05 00 00	 jmp	 $LN423@IntersectL
$LN5@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0058d	0f 28 cc	 movaps	 xmm1, xmm4
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  00590	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00593	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _La$1$[ebp]
  00598	0f 28 c6	 movaps	 xmm0, xmm6
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 300  : 			OutB = (B1 + t * Lb);

  0059b	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0059e	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _AB$2$[ebp]
  005a3	f3 0f 59 e2	 mulss	 xmm4, xmm2
  005a7	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005ab	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _La$1$[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  005b0	0f 28 c5	 movaps	 xmm0, xmm5
  005b3	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _AB$3$[ebp]
  005b8	f3 0f 58 c8	 addss	 xmm1, xmm0
  005bc	0f 28 c3	 movaps	 xmm0, xmm3
  005bf	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _AB$2$[ebp]
  005c4	f3 0f 58 e0	 addss	 xmm4, xmm0
  005c8	0f 28 c7	 movaps	 xmm0, xmm7
  005cb	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _AB$3$[ebp]
  005d0	f3 0f 58 e0	 addss	 xmm4, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 281  : 			float t = (L11 * rb - ra * L12)/DetL; // Equation (12)

  005d4	0f 28 c1	 movaps	 xmm0, xmm1
  005d7	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _L12$1$[ebp]
  005dc	f3 0f 59 65 f8	 mulss	 xmm4, DWORD PTR _D$1$[ebp]
  005e1	f3 0f 5c e0	 subss	 xmm4, xmm0
  005e5	f3 0f 5e 65 d8	 divss	 xmm4, DWORD PTR _DetL$1$[ebp]

; 286  : 			float s = (ra-L12*t)/L11;             // Equation (13)

  005ea	0f 28 c4	 movaps	 xmm0, xmm4
  005ed	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _L12$1$[ebp]
  005f2	f3 0f 5c c8	 subss	 xmm1, xmm0
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005f6	0f 28 c5	 movaps	 xmm0, xmm5
  005f9	0f 57 ed	 xorps	 xmm5, xmm5
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 286  : 			float s = (ra-L12*t)/L11;             // Equation (13)

  005fc	f3 0f 5e 4d f8	 divss	 xmm1, DWORD PTR _D$1$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00601	f3 0f 59 d1	 mulss	 xmm2, xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 286  : 			float s = (ra-L12*t)/L11;             // Equation (13)

  00605	f3 0f 11 4d 0c	 movss	 DWORD PTR _s$2$[ebp], xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0060a	0f 28 ce	 movaps	 xmm1, xmm6
  0060d	f3 0f 59 4d 0c	 mulss	 xmm1, DWORD PTR _s$2$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00612	f3 0f 58 16	 addss	 xmm2, DWORD PTR [esi]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00616	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$2$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0061b	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 303  : 			if ((OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  00620	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f800000
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00628	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  0062d	0f 14 d1	 unpcklps xmm2, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00630	0f 28 cb	 movaps	 xmm1, xmm3
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  00633	66 0f d6 17	 movq	 QWORD PTR [edi], xmm2
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00637	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _Lb$1$[ebp]

; 182  :     z = fz;

  0063c	f3 0f 11 45 d8	 movss	 DWORD PTR $T12[ebp+8], xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00641	0f 28 c7	 movaps	 xmm0, xmm7
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  00644	8b 45 d8	 mov	 eax, DWORD PTR $T12[ebp+8]
  00647	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0064a	f3 0f 59 d4	 mulss	 xmm2, xmm4
  0064e	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00652	f3 0f 58 12	 addss	 xmm2, DWORD PTR [edx]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00656	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0065a	f3 0f 58 4a 04	 addss	 xmm1, DWORD PTR [edx+4]
  0065f	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 300  : 			OutB = (B1 + t * Lb);

  00664	0f 14 d1	 unpcklps xmm2, xmm1

; 303  : 			if ((OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  00667	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _s$2$[ebp]
  0066c	0f 2f e9	 comiss	 xmm5, xmm1
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0066f	f3 0f 11 45 d8	 movss	 DWORD PTR $T11[ebp+8], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 300  : 			OutB = (B1 + t * Lb);

  00674	8b 45 d8	 mov	 eax, DWORD PTR $T11[ebp+8]
  00677	66 0f d6 11	 movq	 QWORD PTR [ecx], xmm2
  0067b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 303  : 			if ((OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  0067e	77 1d		 ja	 SHORT $LN217@IntersectL
  00680	0f 2f ce	 comiss	 xmm1, xmm6
  00683	77 0e		 ja	 SHORT $LN1@IntersectL
  00685	0f 2f ec	 comiss	 xmm5, xmm4
  00688	77 09		 ja	 SHORT $LN1@IntersectL
  0068a	0f 2f e6	 comiss	 xmm4, xmm6
  0068d	0f 86 ad 04 00
	00		 jbe	 $LN312@IntersectL
$LN1@IntersectL:

; 140  : 			FindNearestPointOnLineSegment(B1, Lb,
; 141  : 				OutA, OutB, temp);
; 142  : 		}
; 143  : 	}
; 144  : }
; 145  : 
; 146  : /**************************************************************************
; 147  : |
; 148  : |     Method: AdjustNearestPoints
; 149  : |
; 150  : |    Purpose: Given nearest point information for two infinite lines, adjust
; 151  : |             to model finite line segments.
; 152  : |
; 153  : | Parameters: Input:
; 154  : |             ------
; 155  : |             A1x, A1y, A1z   - Coordinates of first defining point of line/segment A
; 156  : |             Lax, Lay, Laz   - Vector from (A1x, A1y, A1z) to the (A2x, A2y, A2z).
; 157  : |             B1x, B1y, B1z   - Coordinates of first defining point of line/segment B
; 158  : |             Lbx, Lby, Lbz   - Vector from (B1x, B1y, B1z) to the (B2x, B2y, B2z).
; 159  : |             epsilon_squared - tolerance value to be used to check for degenerate
; 160  : |                               and parallel lines, and to check for true intersection.
; 161  : |             s               - parameter representing nearest point on infinite line A
; 162  : |             t               - parameter representing nearest point on infinite line B
; 163  : |
; 164  : |             Output:
; 165  : |             -------
; 166  : |             PointOnSegAx,   - Coordinates of the point on segment A that are nearest
; 167  : |             PointOnSegAy,     to segment B. This corresponds to point C in the text.
; 168  : |             PointOnSegAz
; 169  : |             PointOnSegBx,   - Coordinates of the point on segment B that are nearest
; 170  : |             PointOnSegBy,     to segment A. This corresponds to point D in the text.
; 171  : |             PointOnSegBz
; 172  : **************************************************************************/
; 173  : __forceinline void AdjustNearestPoints(const D3DXVECTOR3 & A1,
; 174  : 									   const D3DXVECTOR3 & La,
; 175  : 									   const D3DXVECTOR3 & B1,
; 176  : 									   const D3DXVECTOR3 & Lb,
; 177  : 									   float s, float t,
; 178  : 									   D3DXVECTOR3 & OutA,
; 179  : 									   D3DXVECTOR3 & OutB)
; 180  : {
; 181  : 	// handle the case where both parameter s and t are out of range
; 182  : 	if (OUT_OF_RANGE(s) && OUT_OF_RANGE(t))

  00693	0f 2f e9	 comiss	 xmm5, xmm1
  00696	77 05		 ja	 SHORT $LN217@IntersectL
  00698	0f 2f ce	 comiss	 xmm1, xmm6
  0069b	76 12		 jbe	 SHORT $LN218@IntersectL
$LN217@IntersectL:
  0069d	0f 2f ec	 comiss	 xmm5, xmm4
  006a0	0f 87 a3 01 00
	00		 ja	 $LN216@IntersectL
  006a6	0f 2f e6	 comiss	 xmm4, xmm6
  006a9	0f 87 9a 01 00
	00		 ja	 $LN216@IntersectL
$LN218@IntersectL:

; 193  : 			FindNearestPointOnLineSegment(A1, La, OutB, 
; 194  : 				OutA, s);
; 195  : 			FindNearestPointOnLineSegment(B1, Lb, OutA,
; 196  : 				OutB, t);
; 197  : 		}
; 198  : 	}
; 199  : 	// otherwise, handle the case where the parameter for only one segment is
; 200  : 	// out of range
; 201  : 	else if (OUT_OF_RANGE(s))

  006af	0f 2f e9	 comiss	 xmm5, xmm1
  006b2	0f 87 26 01 00
	00		 ja	 $LN211@IntersectL
  006b8	0f 2f ce	 comiss	 xmm1, xmm6
  006bb	0f 87 1d 01 00
	00		 ja	 $LN211@IntersectL

; 205  : 		FindNearestPointOnLineSegment(B1, Lb, 
; 206  : 			OutA, 
; 207  : 			OutB, t);
; 208  : 	}
; 209  : 	else if (OUT_OF_RANGE(t))

  006c1	0f 2f ec	 comiss	 xmm5, xmm4
  006c4	77 09		 ja	 SHORT $LN208@IntersectL
  006c6	0f 2f e6	 comiss	 xmm4, xmm6
  006c9	0f 86 71 04 00
	00		 jbe	 $LN312@IntersectL
$LN208@IntersectL:

; 210  : 	{
; 211  : 		t = FMAX(0.0f, FMIN(1.0f, t));

  006cf	0f 2f f4	 comiss	 xmm6, xmm4
  006d2	76 0a		 jbe	 SHORT $LN405@IntersectL
  006d4	0f 2f ec	 comiss	 xmm5, xmm4
  006d7	76 08		 jbe	 SHORT $LN242@IntersectL
  006d9	0f 28 e5	 movaps	 xmm4, xmm5
  006dc	eb 03		 jmp	 SHORT $LN242@IntersectL
$LN405@IntersectL:
  006de	0f 28 e6	 movaps	 xmm4, xmm6
$LN242@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  006e1	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  006e5	0f 28 c4	 movaps	 xmm0, xmm4
  006e8	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _Lb$1$[ebp]
  006ed	f3 0f 59 fc	 mulss	 xmm7, xmm4
  006f1	f3 0f 59 dc	 mulss	 xmm3, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  006f5	f3 0f 58 c8	 addss	 xmm1, xmm0
  006f9	f3 0f 58 7a 08	 addss	 xmm7, DWORD PTR [edx+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  006fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00706	f3 0f 58 5a 04	 addss	 xmm3, DWORD PTR [edx+4]

; 182  :     z = fz;

  0070b	f3 0f 11 7d d8	 movss	 DWORD PTR $T4[ebp+8], xmm7
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00710	f3 0f 10 7d f8	 movss	 xmm7, DWORD PTR _D$1$[ebp]
  00715	0f 2f c7	 comiss	 xmm0, xmm7

; 212  : 		OutB = B1 + t*Lb;

  00718	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp+8]
  0071b	0f 14 cb	 unpcklps xmm1, xmm3
  0071e	66 0f d6 09	 movq	 QWORD PTR [ecx], xmm1
  00722	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00725	76 14		 jbe	 SHORT $LN377@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  00727	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  0072b	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  0072f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00732	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00735	5f		 pop	 edi
  00736	5e		 pop	 esi

; 304  : 			{
; 305  : 				AdjustNearestPoints(A1,La,B1,Lb,
; 306  : 					s, t,
; 307  : 					OutA,
; 308  : 					OutB);
; 309  : 			}
; 310  : 		}
; 311  : 	}	
; 312  : }

  00737	8b e5		 mov	 esp, ebp
  00739	5d		 pop	 ebp
  0073a	c3		 ret	 0
$LN377@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0073b	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0073f	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [ecx+4]
  00744	f3 0f 10 21	 movss	 xmm4, DWORD PTR [ecx]
  00748	f3 0f 5c 56 04	 subss	 xmm2, DWORD PTR [esi+4]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0074d	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR $T22[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00752	f3 0f 5c e0	 subss	 xmm4, xmm0
  00756	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0075b	f3 0f 5c 4e 08	 subss	 xmm1, DWORD PTR [esi+8]
  00760	66 0f d6 45 d4	 movq	 QWORD PTR $T16[ebp], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00765	0f 28 c3	 movaps	 xmm0, xmm3
  00768	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0076c	f3 0f 59 65 08	 mulss	 xmm4, DWORD PTR _La$1$[ebp]
  00771	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$3$[ebp]
  00776	f3 0f 58 e0	 addss	 xmm4, xmm0
  0077a	0f 28 c2	 movaps	 xmm0, xmm2
  0077d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00781	f3 0f 58 e0	 addss	 xmm4, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00785	f3 0f 5e e7	 divss	 xmm4, xmm7

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00789	0f 2f f4	 comiss	 xmm6, xmm4
  0078c	76 0a		 jbe	 SHORT $LN406@IntersectL
  0078e	0f 2f ec	 comiss	 xmm5, xmm4
  00791	76 08		 jbe	 SHORT $LN383@IntersectL
  00793	0f 28 e5	 movaps	 xmm4, xmm5
  00796	eb 03		 jmp	 SHORT $LN383@IntersectL
$LN406@IntersectL:
  00798	0f 28 e6	 movaps	 xmm4, xmm6
$LN383@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0079b	f3 0f 7e 4d d4	 movq	 xmm1, QWORD PTR $T16[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  007a0	0f 28 c4	 movaps	 xmm0, xmm4
  007a3	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _La$1$[ebp]
  007a8	f3 0f 59 dc	 mulss	 xmm3, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  007ac	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  007b0	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  007b4	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  007b9	f3 0f 58 c3	 addss	 xmm0, xmm3
  007bd	f3 0f 10 5e 08	 movss	 xmm3, DWORD PTR [esi+8]
  007c2	f3 0f 58 da	 addss	 xmm3, xmm2
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  007c6	0f 14 c8	 unpcklps xmm1, xmm0
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  007c9	f3 0f 11 5d d8	 movss	 DWORD PTR $T1[ebp+8], xmm3
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  007ce	8b 45 d8	 mov	 eax, DWORD PTR $T1[ebp+8]
  007d1	66 0f d6 0f	 movq	 QWORD PTR [edi], xmm1
  007d5	89 47 08	 mov	 DWORD PTR [edi+8], eax
  007d8	5f		 pop	 edi
  007d9	5e		 pop	 esi

; 304  : 			{
; 305  : 				AdjustNearestPoints(A1,La,B1,Lb,
; 306  : 					s, t,
; 307  : 					OutA,
; 308  : 					OutB);
; 309  : 			}
; 310  : 		}
; 311  : 	}	
; 312  : }

  007da	8b e5		 mov	 esp, ebp
  007dc	5d		 pop	 ebp
  007dd	c3		 ret	 0
$LN211@IntersectL:

; 202  : 	{
; 203  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  007de	0f 2f f1	 comiss	 xmm6, xmm1
  007e1	76 0a		 jbe	 SHORT $LN407@IntersectL
  007e3	0f 2f e9	 comiss	 xmm5, xmm1
  007e6	76 08		 jbe	 SHORT $LN236@IntersectL
  007e8	0f 28 cd	 movaps	 xmm1, xmm5
  007eb	eb 03		 jmp	 SHORT $LN236@IntersectL
$LN407@IntersectL:
  007ed	0f 28 ce	 movaps	 xmm1, xmm6
$LN236@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  007f0	f3 0f 10 65 f4	 movss	 xmm4, DWORD PTR $T22[ebp]
  007f5	0f 28 c1	 movaps	 xmm0, xmm1
  007f8	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _La$1$[ebp]
  007fd	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$3$[ebp]
  00802	f3 0f 59 e1	 mulss	 xmm4, xmm1
  00806	f3 0f 59 d1	 mulss	 xmm2, xmm1

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0080a	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  0080e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00812	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00817	f3 0f 58 56 08	 addss	 xmm2, DWORD PTR [esi+8]
  0081c	f3 0f 58 c4	 addss	 xmm0, xmm4

; 182  :     z = fz;

  00820	f3 0f 11 55 d8	 movss	 DWORD PTR $T5[ebp+8], xmm2
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 204  : 		OutA = A1 + s*La;

  00825	8b 45 d8	 mov	 eax, DWORD PTR $T5[ebp+8]
  00828	0f 14 c8	 unpcklps xmm1, xmm0

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0082b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00833	0f 2f 45 10	 comiss	 xmm0, DWORD PTR _D$1$[ebp]

; 204  : 		OutA = A1 + s*La;

  00837	66 0f d6 0f	 movq	 QWORD PTR [edi], xmm1
  0083b	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0083e	0f 87 52 fc ff
	ff		 ja	 $LN86@IntersectL

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00844	e9 66 02 00 00	 jmp	 $LN429@IntersectL
$LN216@IntersectL:

; 183  : 	{
; 184  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  00849	0f 2f f1	 comiss	 xmm6, xmm1
  0084c	76 0f		 jbe	 SHORT $LN409@IntersectL
  0084e	0f 2f e9	 comiss	 xmm5, xmm1
  00851	76 12		 jbe	 SHORT $LN224@IntersectL
  00853	0f 28 cd	 movaps	 xmm1, xmm5
  00856	f3 0f 11 4d 0c	 movss	 DWORD PTR _s$2$[ebp], xmm1
  0085b	eb 08		 jmp	 SHORT $LN224@IntersectL
$LN409@IntersectL:
  0085d	0f 28 ce	 movaps	 xmm1, xmm6
  00860	f3 0f 11 75 0c	 movss	 DWORD PTR _s$2$[ebp], xmm6
$LN224@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00865	f3 0f 10 1e	 movss	 xmm3, DWORD PTR [esi]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00869	0f 28 c1	 movaps	 xmm0, xmm1
  0086c	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _La$1$[ebp]
  00871	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR $T22[ebp]
  00876	f3 0f 59 4d 0c	 mulss	 xmm1, DWORD PTR _s$2$[ebp]
  0087b	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$3$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00880	f3 0f 58 d8	 addss	 xmm3, xmm0
  00884	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00889	f3 0f 59 55 0c	 mulss	 xmm2, DWORD PTR _s$2$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0088e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00892	f3 0f 58 56 08	 addss	 xmm2, DWORD PTR [esi+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 185  : 		OutA = A1 + s*La;

  00897	0f 14 d8	 unpcklps xmm3, xmm0

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0089a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  008a2	0f 2f 45 10	 comiss	 xmm0, DWORD PTR _D$1$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  008a6	f3 0f 11 55 d8	 movss	 DWORD PTR $T7[ebp+8], xmm2
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 185  : 		OutA = A1 + s*La;

  008ab	8b 45 d8	 mov	 eax, DWORD PTR $T7[ebp+8]
  008ae	66 0f d6 1f	 movq	 QWORD PTR [edi], xmm3

; 38   : 		return;

  008b2	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR $T21[ebp]

; 185  : 		OutA = A1 + s*La;

  008b7	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  008ba	76 10		 jbe	 SHORT $LN253@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  008bc	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  008c0	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  008c4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 38   : 		return;

  008c7	e9 b6 00 00 00	 jmp	 $LN425@IntersectL
$LN253@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  008cc	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  008d0	0f 28 e3	 movaps	 xmm4, xmm3

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  008d3	f3 0f 10 17	 movss	 xmm2, DWORD PTR [edi]
  008d7	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  008dc	f3 0f 5c d0	 subss	 xmm2, xmm0
  008e0	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  008e5	66 0f d6 45 d4	 movq	 QWORD PTR $T15[ebp], xmm0
  008ea	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  008ef	f3 0f 5c 42 04	 subss	 xmm0, DWORD PTR [edx+4]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  008f4	f3 0f 59 cf	 mulss	 xmm1, xmm7
  008f8	f3 0f 59 e0	 mulss	 xmm4, xmm0
  008fc	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lb$1$[ebp]
  00901	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00905	f3 0f 58 e0	 addss	 xmm4, xmm0
  00909	f3 0f 58 e1	 addss	 xmm4, xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  0090d	f3 0f 5e 65 10	 divss	 xmm4, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00912	0f 2f f4	 comiss	 xmm6, xmm4
  00915	76 0a		 jbe	 SHORT $LN410@IntersectL
  00917	0f 2f ec	 comiss	 xmm5, xmm4
  0091a	76 08		 jbe	 SHORT $LN259@IntersectL
  0091c	0f 28 e5	 movaps	 xmm4, xmm5
  0091f	eb 03		 jmp	 SHORT $LN259@IntersectL
$LN410@IntersectL:
  00921	0f 28 e6	 movaps	 xmm4, xmm6
$LN259@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00924	0f 28 cb	 movaps	 xmm1, xmm3
  00927	0f 28 c4	 movaps	 xmm0, xmm4
  0092a	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _Lb$1$[ebp]
  0092f	0f 28 d7	 movaps	 xmm2, xmm7
  00932	f3 0f 59 cc	 mulss	 xmm1, xmm4
  00936	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0093a	66 0f d6 4d e0	 movq	 QWORD PTR tv4636[ebp], xmm1
  0093f	f3 0f 7e 4d d4	 movq	 xmm1, QWORD PTR $T15[ebp]
  00944	f3 0f 58 c8	 addss	 xmm1, xmm0
  00948	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0094d	66 0f d6 4d d4	 movq	 QWORD PTR $T15[ebp], xmm1
  00952	f3 0f 7e 4d e0	 movq	 xmm1, QWORD PTR tv4636[ebp]
  00957	f3 0f 58 c1	 addss	 xmm0, xmm1
  0095b	f3 0f 11 45 0c	 movss	 DWORD PTR $T23[ebp], xmm0
  00960	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00965	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR $T23[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0096a	f3 0f 58 c2	 addss	 xmm0, xmm2

; 182  :     z = fz;

  0096e	f3 0f 11 45 e4	 movss	 DWORD PTR $T20[ebp+8], xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00973	f3 0f 7e 45 d4	 movq	 xmm0, QWORD PTR $T15[ebp]
  00978	8b 45 e4	 mov	 eax, DWORD PTR $T20[ebp+8]
  0097b	0f 14 c1	 unpcklps xmm0, xmm1
  0097e	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
$LN425@IntersectL:

; 186  : 		FindNearestPointOnLineSegment(B1, Lb, 
; 187  : 			OutA,
; 188  : 			OutB, t);
; 189  : 		if (OUT_OF_RANGE(t))

  00982	0f 2f ec	 comiss	 xmm5, xmm4

; 49   : 	Nearest = A1 + parameter * L;

  00985	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 186  : 		FindNearestPointOnLineSegment(B1, Lb, 
; 187  : 			OutA,
; 188  : 			OutB, t);
; 189  : 		if (OUT_OF_RANGE(t))

  00988	77 09		 ja	 SHORT $LN214@IntersectL
  0098a	0f 2f e6	 comiss	 xmm4, xmm6
  0098d	0f 86 ad 01 00
	00		 jbe	 $LN312@IntersectL
$LN214@IntersectL:

; 190  : 		{
; 191  : 			t = FMAX(0.0f, FMIN(1.0f, t));

  00993	0f 2f f4	 comiss	 xmm6, xmm4
  00996	76 0a		 jbe	 SHORT $LN411@IntersectL
  00998	0f 2f ec	 comiss	 xmm5, xmm4
  0099b	76 08		 jbe	 SHORT $LN230@IntersectL
  0099d	0f 28 e5	 movaps	 xmm4, xmm5
  009a0	eb 03		 jmp	 SHORT $LN230@IntersectL
$LN411@IntersectL:
  009a2	0f 28 e6	 movaps	 xmm4, xmm6
$LN230@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  009a5	f3 0f 10 12	 movss	 xmm2, DWORD PTR [edx]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  009a9	0f 28 c4	 movaps	 xmm0, xmm4
  009ac	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _Lb$1$[ebp]
  009b1	0f 28 cf	 movaps	 xmm1, xmm7
  009b4	f3 0f 59 dc	 mulss	 xmm3, xmm4
  009b8	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  009bc	f3 0f 58 d0	 addss	 xmm2, xmm0
  009c0	f3 0f 58 5a 04	 addss	 xmm3, DWORD PTR [edx+4]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  009c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  009cd	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _D$1$[ebp]
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  009d1	f3 0f 58 4a 08	 addss	 xmm1, DWORD PTR [edx+8]
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 192  : 			OutB = B1 + t*Lb;

  009d6	0f 14 d3	 unpcklps xmm2, xmm3
  009d9	66 0f d6 11	 movq	 QWORD PTR [ecx], xmm2
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  009dd	f3 0f 11 4d d8	 movss	 DWORD PTR $T6[ebp+8], xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 192  : 			OutB = B1 + t*Lb;

  009e2	8b 45 d8	 mov	 eax, DWORD PTR $T6[ebp+8]
  009e5	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  009e8	76 10		 jbe	 SHORT $LN286@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  009ea	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  009ee	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  009f2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 38   : 		return;

  009f5	e9 9b 00 00 00	 jmp	 $LN426@IntersectL
$LN286@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  009fa	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  009fe	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00a02	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR $T22[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00a07	f3 0f 5c d0	 subss	 xmm2, xmm0
  00a0b	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00a10	0f 28 e3	 movaps	 xmm4, xmm3

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00a13	f3 0f 5c 4e 08	 subss	 xmm1, DWORD PTR [esi+8]
  00a18	66 0f d6 45 d4	 movq	 QWORD PTR $T14[ebp], xmm0
  00a1d	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00a22	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00a27	f3 0f 59 55 08	 mulss	 xmm2, DWORD PTR _La$1$[ebp]
  00a2c	f3 0f 59 e0	 mulss	 xmm4, xmm0
  00a30	f3 0f 58 e2	 addss	 xmm4, xmm2
  00a34	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$3$[ebp]
  00a39	0f 28 c2	 movaps	 xmm0, xmm2
  00a3c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00a40	f3 0f 58 e0	 addss	 xmm4, xmm0
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00a44	f3 0f 5e 65 f8	 divss	 xmm4, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00a49	0f 2f f4	 comiss	 xmm6, xmm4
  00a4c	76 0a		 jbe	 SHORT $LN412@IntersectL
  00a4e	0f 2f ec	 comiss	 xmm5, xmm4
  00a51	76 08		 jbe	 SHORT $LN292@IntersectL
  00a53	0f 28 e5	 movaps	 xmm4, xmm5
  00a56	eb 03		 jmp	 SHORT $LN292@IntersectL
$LN412@IntersectL:
  00a58	0f 28 e6	 movaps	 xmm4, xmm6
$LN292@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a5b	f3 0f 7e 4d d4	 movq	 xmm1, QWORD PTR $T14[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a60	0f 28 c4	 movaps	 xmm0, xmm4
  00a63	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _La$1$[ebp]
  00a68	f3 0f 59 dc	 mulss	 xmm3, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a6c	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a70	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a74	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00a79	f3 0f 58 c3	 addss	 xmm0, xmm3
  00a7d	f3 0f 10 5e 08	 movss	 xmm3, DWORD PTR [esi+8]
  00a82	f3 0f 58 da	 addss	 xmm3, xmm2
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00a86	0f 14 c8	 unpcklps xmm1, xmm0
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00a89	f3 0f 11 5d d8	 movss	 DWORD PTR $T3[ebp+8], xmm3
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00a8e	8b 45 d8	 mov	 eax, DWORD PTR $T3[ebp+8]
  00a91	66 0f d6 0f	 movq	 QWORD PTR [edi], xmm1
$LN426@IntersectL:

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00a95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00a9d	0f 2f 45 10	 comiss	 xmm0, DWORD PTR _D$1$[ebp]

; 49   : 	Nearest = A1 + parameter * L;

  00aa1	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00aa4	0f 87 ec f9 ff
	ff		 ja	 $LN86@IntersectL
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00aaa	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR $T21[ebp]
$LN429@IntersectL:

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00aaf	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00ab3	f3 0f 10 27	 movss	 xmm4, DWORD PTR [edi]
  00ab7	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
  00abc	f3 0f 5c e0	 subss	 xmm4, xmm0
  00ac0	f3 0f 5c 52 04	 subss	 xmm2, DWORD PTR [edx+4]
  00ac5	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  00aca	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  00acf	66 0f d6 45 d4	 movq	 QWORD PTR $T13[ebp], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00ad4	0f 28 c3	 movaps	 xmm0, xmm3
  00ad7	f3 0f 59 65 14	 mulss	 xmm4, DWORD PTR _Lb$1$[ebp]
  00adc	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00ae0	f3 0f 59 cf	 mulss	 xmm1, xmm7
  00ae4	f3 0f 58 e0	 addss	 xmm4, xmm0
  00ae8	f3 0f 58 e1	 addss	 xmm4, xmm1
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00aec	f3 0f 5e 65 10	 divss	 xmm4, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00af1	0f 2f f4	 comiss	 xmm6, xmm4
  00af4	76 0a		 jbe	 SHORT $LN413@IntersectL
  00af6	0f 2f ec	 comiss	 xmm5, xmm4
  00af9	76 08		 jbe	 SHORT $LN317@IntersectL
  00afb	0f 28 e5	 movaps	 xmm4, xmm5
  00afe	eb 03		 jmp	 SHORT $LN317@IntersectL
$LN413@IntersectL:
  00b00	0f 28 e6	 movaps	 xmm4, xmm6
$LN317@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b03	0f 28 c4	 movaps	 xmm0, xmm4
  00b06	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _Lb$1$[ebp]
$LN423@IntersectL:

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00b0b	f3 0f 7e 4d d4	 movq	 xmm1, QWORD PTR $T13[ebp]
  00b10	f3 0f 10 52 08	 movss	 xmm2, DWORD PTR [edx+8]
  00b15	f3 0f 58 c8	 addss	 xmm1, xmm0
  00b19	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b1e	f3 0f 59 dc	 mulss	 xmm3, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00b22	f3 0f 58 c3	 addss	 xmm0, xmm3
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00b26	0f 14 c8	 unpcklps xmm1, xmm0
  00b29	66 0f d6 09	 movq	 QWORD PTR [ecx], xmm1
$LN416@IntersectL:
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b2d	f3 0f 59 fc	 mulss	 xmm7, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00b31	f3 0f 58 d7	 addss	 xmm2, xmm7

; 182  :     z = fz;

  00b35	f3 0f 11 55 d8	 movss	 DWORD PTR $T2[ebp+8], xmm2
; File c:\gamepackages\client\tools\patcher2017\eterlib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00b3a	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp+8]
  00b3d	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN312@IntersectL:
  00b40	5f		 pop	 edi
  00b41	5e		 pop	 esi

; 304  : 			{
; 305  : 				AdjustNearestPoints(A1,La,B1,Lb,
; 306  : 					s, t,
; 307  : 					OutA,
; 308  : 					OutB);
; 309  : 			}
; 310  : 		}
; 311  : 	}	
; 312  : }

  00b42	8b e5		 mov	 esp, ebp
  00b44	5d		 pop	 ebp
  00b45	c3		 ret	 0
?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_pV1$ = 8						; size = 4
_pV2$ = 12						; size = 4
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z PROC		; D3DXVec3Dot, COMDAT

; 1258 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pV1$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pV2$[ebp]
  00009	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0000c	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0000f	d9 01		 fld	 DWORD PTR [ecx]
  00011	d8 08		 fmul	 DWORD PTR [eax]
  00013	de c1		 faddp	 ST(1), ST(0)
  00015	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00018	d8 48 08	 fmul	 DWORD PTR [eax+8]
  0001b	de c1		 faddp	 ST(1), ST(0)

; 1265 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z ENDP		; D3DXVec3Dot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv160 = 8						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3LengthSq, COMDAT

; 1247 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1248 : #ifdef D3DX_DEBUG
; 1249 :     if(!pV)
; 1250 :         return 0.0f;
; 1251 : #endif
; 1252 : 
; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pV$[ebp]
  00006	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0000b	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  0000f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00014	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00018	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0001c	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00020	f3 0f 58 d1	 addss	 xmm2, xmm1
  00024	f3 0f 58 d0	 addss	 xmm2, xmm0
  00028	f3 0f 11 55 08	 movss	 DWORD PTR tv160[ebp], xmm2
  0002d	d9 45 08	 fld	 DWORD PTR tv160[ebp]

; 1254 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3LengthSq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??D@YA?AUD3DXVECTOR3@@MABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AUD3DXVECTOR3@@MABU0@@Z PROC			; operator*, COMDAT

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]

; 180  :     x = fx;

  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0000e	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00012	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 180  :     x = fx;

  00016	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0001a	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001f	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 181  :     y = fy;

  00023	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00028	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0002d	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 182  :     z = fz;

  00031	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 284  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??D@YA?AUD3DXVECTOR3@@MABU0@@Z ENDP			; operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 180  :     x = fx;

  0000a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0000d	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]

; 180  :     x = fx;

  00011	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00015	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001a	f3 0f 5c 42 04	 subss	 xmm0, DWORD PTR [edx+4]

; 181  :     y = fy;

  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00024	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00029	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]

; 182  :     z = fz;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 264  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]

; 180  :     x = fx;

  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00009	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000d	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]

; 180  :     x = fx;

  00011	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00015	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0001a	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]

; 181  :     y = fy;

  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00024	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00029	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]

; 182  :     z = fz;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 258  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 181  :     y = fy;
; 182  :     z = fz;
; 183  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\gamepackages\client\tools\patcher2017\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
END
